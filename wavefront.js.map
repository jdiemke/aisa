{"version":3,"file":"wavefront.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/blender/face.ts","webpack://aisa/./src/blender/mesh.ts","webpack://aisa/./src/blender/parseUtils.ts","webpack://aisa/./src/blender/tex-coord.ts","webpack://aisa/./src/blender/vector.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/md2/ModelViewMatrix.ts","webpack://aisa/./src/examples/wavefront/WavefrontScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/wavefront-obj/WavefrontLoader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/wavefront/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n        \n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n        \n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n        \n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Face {\n    public vertices: Array<number>;\n    public normals: Array<number>;\n    public uv: Array<number>;\n}\n","import { Face } from './face';\nimport { TexCoord } from './tex-coord';\nimport { Vector } from './vector';\n\nexport class Mesh {\n\n    public name: string;\n    public vertices: Array<Vector>;\n    public normals: Array<Vector>;\n    public uv: Array<TexCoord>;\n    public faces: Array<Face>;\n\n}\n","import { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexCoord } from './tex-coord';\nimport { Face } from './face';\n\nexport function convertToMeshArray(data: string): Array<Mesh> {\n    const json: Array<Mesh> = new Array<Mesh>();\n\n    let currentObject: Mesh = null;\n\n    let normalCount: number = 0;\n    let vertexCount: number = 0;\n    let uvCount: number = 0;\n    let normalOffset: number = 0;\n    let vertexOffset: number = 0;\n    let uvOffset: number = 0;\n\n    data.toString().split('\\n').forEach((line: string) => {\n\n        if (line.startsWith('o ')) {\n            const coords: Array<string> = line.split(' ');\n\n            currentObject = new Mesh();\n            currentObject.name = coords[1];\n            currentObject.normals = [];\n            currentObject.vertices = [];\n            currentObject.faces = [];\n            currentObject.uv = []; // OPTIONAL\n\n            json.push(currentObject);\n            normalOffset = normalCount;\n            vertexOffset = vertexCount;\n            uvOffset = uvCount;\n        }\n\n        if (currentObject === null &&\n            (line.startsWith('v ') ||\n                line.startsWith('vn ') ||\n                line.startsWith('vt '))) {\n            console.error('Error: OBJ file does not contain Objects.');\n            throw Error();\n        }\n\n        if (line.startsWith('v ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const vertex: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.vertices.push(vertex);\n            vertexCount++;\n        }\n\n        if (line.startsWith('vn ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const normal: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.normals.push(normal);\n            normalCount++;\n        }\n\n        if (line.startsWith('vt ')) { // OPTIONAL\n            const coords: Array<string> = line.split(' ');\n\n            const uv: TexCoord = new TexCoord(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2])\n            );\n\n            currentObject.uv.push(uv);\n            uvCount++;\n        }\n\n        if (line.startsWith('f ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const face: Face = new Face();\n            face.vertices = [];\n            face.normals = [];\n            face.uv = [];\n\n            // vertex indices\n            face.vertices.push(Number(coords[1].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[2].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[3].split('/')[0]) - 1 - vertexOffset);\n\n            // uv indices OPTIONAL!\n            face.uv.push(Number(coords[1].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[2].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[3].split('/')[1]) - 1 - uvOffset);\n\n            // normal indices\n            face.normals.push(Number(coords[1].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[2].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[3].split('/')[2]) - 1 - normalOffset);\n\n            currentObject.faces.push(face);\n        }\n    });\n\n    return json;\n}\n","\nexport class TexCoord {\n\n    public u: number;\n    public v: number;\n\n    public constructor(u: number, v: number) {\n        this.u = u;\n        this.v = v;\n    }\n\n}\n","export class Vector {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Matrix4f } from '../../math/index';\n\n/**\n * The primary purpose of the model view matrix class is to reduce\n * the instanciation of temporary matrix classes by reusing existing instances.\n */\nexport class ModelViewMatrix {\n\n    private currtentMatrix: Matrix4f;\n    private tempMatrix: Matrix4f;\n    private temp: Matrix4f;\n    private transformation: Matrix4f;\n\n    public constructor() {\n        this.currtentMatrix = new Matrix4f();\n        this.tempMatrix = new Matrix4f();\n        this.temp = new Matrix4f();\n        this.transformation = new Matrix4f();\n    }\n\n    public getMatrix(): Matrix4f {\n        return this.currtentMatrix;\n    }\n\n    public setIdentity(): void {\n        this.currtentMatrix.setIdentityMatrix();\n    }\n\n    public multMatrix(mat: Matrix4f): void {\n        this.currtentMatrix = this.currtentMatrix.multiplyMatrix(mat);\n    }\n\n    public trans(x: number, y: number, z: number): void {\n        this.transformation.setTranslationMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public scal(x: number, y: number, z: number): void {\n        this.transformation.setScaleMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public xRotate(x: number): void {\n        this.transformation.setXRotationMatrix(x);\n        this.applyMat();\n    }\n    public yRotate(x: number): void {\n        this.transformation.setYRotationMatrix(x);\n        this.applyMat();\n    }\n\n    private applyMat(): void {\n\n        this.tempMatrix.multiply2(this.currtentMatrix, this.transformation);\n        // switch back and front\n        this.temp = this.currtentMatrix;\n        this.currtentMatrix = this.tempMatrix;\n        this.tempMatrix = this.temp;\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../../math';\nimport { WavefrontLoader } from '../../model/wavefront-obj/WavefrontLoader';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { PointLight } from '../../shading/light/PointLight';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { ModelViewMatrix } from '../md2/ModelViewMatrix';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class WavefrontScene extends AbstractScene {\n\n    private static readonly CLEAR_COLOR: number = Color.SLATE_GRAY.toPackedFormat();\n\n    private texture4: Texture;\n    private startTime: number;\n\n    private modelViewMatrix: ModelViewMatrix = new ModelViewMatrix();\n\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private meshes: Array<FlatshadedMesh>;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n        this.renderingPipeline.setFramebuffer(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 0.5, 1, 1);\n        light1.specularIntensity = new Vector4f(0.5, 0.5, 0.7, 1);\n        light1.position = new Vector4f(0, -10, -1, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 0, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(3, 0, -2, 1);\n\n        this.renderingPipeline.setLights([light1, light2]);\n\n\n        this.startTime = Date.now();\n        return Promise.all([\n            WavefrontLoader.load(require('../../assets/dragon.obj')).then(\n                (value: Array<FlatshadedMesh>) => this.meshes = value\n            ),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const currentTime: number = Date.now();\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        const time: number = Date.now() - this.startTime;\n\n        framebuffer.clearColorBuffer(WavefrontScene.CLEAR_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        this.computeCameraMovement(time * 0.6);\n\n        this.renderingPipeline.draw(framebuffer, this.meshes[0], this.modelViewMatrix.getMatrix());\n\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n        framebuffer.drawText(8, 16, 'FACES: ' + this.meshes[0].faces.length, this.texture4);\n    }\n\n    private computeCameraMovement(elapsedTime: number): void {\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.trans(0, 0, -3);\n        this.modelViewMatrix.yRotate(-elapsedTime * 0.002);\n        this.modelViewMatrix.xRotate(-elapsedTime * 0.002);\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Mesh } from '../../blender/mesh';\nimport { convertToMeshArray } from '../../blender/parseUtils';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class WavefrontLoader {\n\n    public static load(filename: any): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: any): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.getBlenderScene(meshes);\n        });\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { WavefrontScene } from './WavefrontScene';\n\nclass Application {\n\n    public main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new WavefrontScene());\n        canvas.init();\n    }\n\n}\n\nnew Application().main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","blenderScene","invert","object","normals","vertices","normalize","faces","f","n1","n2","n3","obj","transformedNormals","map","transformedPoints","file","disp","coords","uv","ComputationalGeometryUtils","computeBoundingSphere","normals2","boundingSphere","name","json","currentObject","normalCount","vertexCount","uvCount","normalOffset","vertexOffset","uvOffset","toString","split","line","startsWith","Mesh","console","error","Error","Vector","Number","parseFloat","TexCoord","Face","drawScaledTextureClip","sub","num","currtentMatrix","tempMatrix","temp","transformation","getMatrix","setIdentity","setIdentityMatrix","multMatrix","mat","trans","setTranslationMatrix","applyMat","scal","setScaleMatrix","xRotate","setXRotationMatrix","yRotate","setYRotationMatrix","multiply2","WavefrontScene","AbstractScene","SLATE_GRAY","texture4","modelViewMatrix","ModelViewMatrix","fpsStartTime","fpsCount","fps","meshes","renderingPipeline","GouraudShadingRenderingPipeline","setFramebuffer","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","setLights","Promise","all","WavefrontLoader","load","value","TextureUtils","currentTime","CLEAR_COLOR","computeCameraMovement","draw","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","cross","getMesh","AbstractGeometricObject","super","frame","frame2","up","right","Sphere","center","radius","point","current","y2","mu","mu2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","sx","sy","sz","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","isInsidePositiveHalfSpace","getNormal","getDistance","getTran","perp","vec","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","filename","fetch","response","convertToMeshArray","BlenderJsonParser","parse","getBlenderScene","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","distance","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","Material","ambientColor","diffuseColor","specularColor","shininess","setFog","enableLighting","enable","setMaterial","setColor","drawMeshArray","model","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","window","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","replace","main","Canvas"],"sourceRoot":""}