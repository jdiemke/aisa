{"version":3,"file":"misc.js","mappings":"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","sources":["webpack://aisa/./src/assets/Backed.png","webpack://aisa/./src/assets/abstract.png","webpack://aisa/./src/assets/atlantis.png","webpack://aisa/./src/assets/ball2.png","webpack://aisa/./src/assets/battleofilona.png","webpack://aisa/./src/assets/blurredBackground.png","webpack://aisa/./src/assets/bokeh.png","webpack://aisa/./src/assets/cross.png","webpack://aisa/./src/assets/dirt.png","webpack://aisa/./src/assets/envmap.png","webpack://aisa/./src/assets/font.png","webpack://aisa/./src/assets/haujobb-overlay.png","webpack://aisa/./src/assets/heightmap.png","webpack://aisa/./src/assets/heightmapSphere.png","webpack://aisa/./src/assets/hlm.png","webpack://aisa/./src/assets/hoodlumLogo.png","webpack://aisa/./src/assets/lab2.png","webpack://aisa/./src/assets/led.png","webpack://aisa/./src/assets/lens.png","webpack://aisa/./src/assets/logo.png","webpack://aisa/./src/assets/mask.png","webpack://aisa/./src/assets/metalheadz.png","webpack://aisa/./src/assets/meth.png","webpack://aisa/./src/assets/microstrange.png","webpack://aisa/./src/assets/pandabear.png","webpack://aisa/./src/assets/platonian_baked.png","webpack://aisa/./src/assets/rave.png","webpack://aisa/./src/assets/razor1911.png","webpack://aisa/./src/assets/revision.png","webpack://aisa/./src/assets/ring.png","webpack://aisa/./src/assets/sky.png","webpack://aisa/./src/assets/skybox/skybox_back.png","webpack://aisa/./src/assets/skybox/skybox_down.png","webpack://aisa/./src/assets/skybox/skybox_front.png","webpack://aisa/./src/assets/skybox/skybox_left.png","webpack://aisa/./src/assets/skybox/skybox_right.png","webpack://aisa/./src/assets/skybox/skybox_up.png","webpack://aisa/./src/assets/sound/xmix_q2_final.ogg","webpack://aisa/./src/assets/spark.png","webpack://aisa/./src/assets/spheremap.png","webpack://aisa/./src/assets/textures/metall.png","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/misc/Scene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/misc/Application.ts"],"sourcesContent":["export default __webpack_public_path__ + \"627a342d6eba738cf103d753bf442a3d.png\";","export default __webpack_public_path__ + \"1c679046e546d12399509394f8258610.png\";","export default __webpack_public_path__ + \"1940711ae250abc4871bf563f44ab585.png\";","export default __webpack_public_path__ + \"61fba6f52a703fc3fce172546bd169fa.png\";","export default __webpack_public_path__ + \"d8003eead60c0dfb90215d469d51d2f3.png\";","export default __webpack_public_path__ + \"7ac69aefeb77efddca4311160ba48eb9.png\";","export default __webpack_public_path__ + \"8a09527b06eeee9b52984520552f3610.png\";","export default __webpack_public_path__ + \"21f3f7c928904fdcdd8eecbc4618d6cb.png\";","export default __webpack_public_path__ + \"59b860b8c26e2787d9a2d2c486ccb637.png\";","export default __webpack_public_path__ + \"dbfe6f136c603b175357f30c0300be38.png\";","export default __webpack_public_path__ + \"aa2528d7a8a813247c2d2b90b028e437.png\";","export default __webpack_public_path__ + \"f24e33616d64271ae69c9c523d8c6af7.png\";","export default __webpack_public_path__ + \"3906531fedff1b81f85f5f9415a1e956.png\";","export default __webpack_public_path__ + \"b067dd009dbd8781f1973feed20bb7eb.png\";","export default __webpack_public_path__ + \"52f133446882fbe677f91400e1250e8a.png\";","export default __webpack_public_path__ + \"5211260c15f95de001ff416d5a098ceb.png\";","export default __webpack_public_path__ + \"be59e5e60b44dcb4bb1ccf2535c21d20.png\";","export default __webpack_public_path__ + \"35e5d4cac5e7ac4f18616422a728392d.png\";","export default __webpack_public_path__ + \"6e56d24ee0b205334f19f3f2d0242791.png\";","export default __webpack_public_path__ + \"83fbf02619944d02f165a5fa0c7b9203.png\";","export default __webpack_public_path__ + \"8505f04ec10e2564c8d8eb88e6f5cc51.png\";","export default __webpack_public_path__ + \"dd142c00e8f6db275d9ecc2bda063c04.png\";","export default __webpack_public_path__ + \"4208105f5cfbcbdb6ece02affdcefe01.png\";","export default __webpack_public_path__ + \"ca65f62320a1c5496be703455da5e09a.png\";","export default __webpack_public_path__ + \"e8c4e1c3c2b22502a30bcdb0fc317733.png\";","export default __webpack_public_path__ + \"cb7b144b66415bfbb6f223071a7d23bd.png\";","export default __webpack_public_path__ + \"f2b01e8ebcd0467bc5ee98bd9745c36b.png\";","export default __webpack_public_path__ + \"d3132c4de2ae05ba66ad9637600796c5.png\";","export default __webpack_public_path__ + \"227d00cea0acdc962fcec077107d55f7.png\";","export default __webpack_public_path__ + \"76ae06b027ad8d3a84d87f9801f62db9.png\";","export default __webpack_public_path__ + \"5737523cae4faf49c411dcaa80e577f2.png\";","export default __webpack_public_path__ + \"29fc676286325d45f7deef5e593b6da6.png\";","export default __webpack_public_path__ + \"fe1ca8bac15e02a2d14cf9d558c69def.png\";","export default __webpack_public_path__ + \"780c7edd8a9410b8261fdb12d9d6191d.png\";","export default __webpack_public_path__ + \"c83bb5502d841707edd4423f41ebcca0.png\";","export default __webpack_public_path__ + \"8f18731da1a9e273cf0432f3b1c862f1.png\";","export default __webpack_public_path__ + \"5cf778e15448cf90b764416629d74108.png\";","export default __webpack_public_path__ + \"612e69623b4a59d4b4b0a408f9033092.ogg\";","export default __webpack_public_path__ + \"64c8d0e56a947ade8a449a3ecda79d4b.png\";","export default __webpack_public_path__ + \"4ad9a189a84f154755e77c3e8479547c.png\";","export default __webpack_public_path__ + \"4f11e0c165fc56a4f81fd1340adc9407.png\";","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop(0);\n            }\n        );\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n    // public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n        // this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n        // this.plane = this.createPlane();\n        // this.cylinder = this.createCylinder();\n        // this.cylinder2 = this.createCylinder2(texture);\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array) {\n        src.set(dest);\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        const distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                const angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                const color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                const angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                const color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        const index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        const points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        const scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach((element) => {\n            const transformed = modelViewMartrix.multiply(element);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            const color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    public drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                const distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                const waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                const intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n\n\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            let yy = (this.height * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(this.height * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n\n    public createPlane() {\n\n        const k = {\n            points: []\n        };\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        };\n    }\n\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n\n    public createCylinder2(texture: Texture) {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xpos = (x / LOOPX * 256) & 0xff;\n                const xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                const ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                const ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                const x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                const x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                const x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                const x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                const x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                const x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(x0 * x0y0, 0 + y, z0 * x0y0));\n                k.points.push(new Vector3f(x0 * x0y1, 1 + y, z0 * x0y1));\n                k.points.push(new Vector3f(x1 * x1y0, 0 + y, z1 * x1y0));\n\n                k.points.push(new Vector3f(x1 * x1y0, 0 + y, z1 * x1y0));\n                k.points.push(new Vector3f(x0 * x0y1, 1 + y, z0 * x0y1));\n                k.points.push(new Vector3f(x1 * x1y1, 1 + y, z1 * x1y1));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        };\n    }\n\n\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Vector3f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\n\nexport class Scene extends AbstractScene {\n\n    // move\n    private start: number;\n\n    // move\n    private texture: Texture;\n    private mask: Texture;\n    private texture2: Texture;\n    private heightmap: Texture;\n    private heightmapSphere: Texture;\n    private texture4: Texture;\n    private texture5: Texture;\n    private baked: Texture;\n    private texture6: Texture;\n    private texture7: Texture;\n    private texture8: Texture;\n    private texture9: Texture;\n    private texture10: Texture;\n    private metalheadz: Texture;\n    private platonian: Texture;\n    private dirt: Texture;\n    private texture11: Texture;\n    private texture12: Texture;\n    private texture13: Texture;\n    private texture14: Texture;\n    private texture15: Texture;\n    private revision: Texture;\n    private lab2: Texture;\n    private hoodlumLogo: Texture;\n    private blurred: Texture;\n    private envmap: Texture;\n    private particleTexture: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n    private rave: Texture;\n    private metal: Texture;\n    private micro: Texture;\n    private hlm: Texture;\n    private meth: Texture;\n    private displacementMap: Texture;\n    private cross: Texture;\n    private skybox: {\n        back?: Texture,\n        down?: Texture,\n        front?: Texture,\n        left?: Texture,\n        right?: Texture,\n        up?: Texture\n    } = {};\n    private abstract: Texture;\n    private myAudio: HTMLAudioElement;\n    private spheremap: Texture;\n    private overlay: Texture;\n\n    // move\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            this.createTexture(require('../../assets/spheremap.png'), false).then(texture => this.spheremap = texture),\n            this.createTexture(require('../../assets/textures/metall.png'), false).then(texture => this.metal = texture),\n            this.createTexture(require('../../assets/logo.png'), false).then(texture => this.texture = texture),\n            this.createTexture(require('../../assets/razor1911.png'), true).then(texture => this.texture2 = texture),\n            this.createTexture(require('../../assets/heightmap.png'), false).then(texture => this.heightmap = texture),\n            this.createTexture(require('../../assets/metalheadz.png'), false).then(texture => this.metalheadz = texture),\n            this.createTexture(require('../../assets/font.png'), true).then(texture => this.texture4 = texture),\n            this.createTexture(require('../../assets/atlantis.png'), false).then(texture => this.texture5 = texture),\n            this.createTexture(require('../../assets/lens.png'), true).then(texture => this.texture6 = texture),\n            this.createTexture(require('../../assets/ball2.png'), true).then(texture => this.texture7 = texture),\n            this.createTexture(require('../../assets/pandabear.png'), false).then(texture => this.texture8 = texture),\n            this.createTexture(require('../../assets/battleofilona.png'), false).then(texture => this.texture9 = texture),\n            this.createTexture(require('../../assets/spark.png'), true).then(texture => this.texture10 = texture),\n            this.createTexture(require('../../assets/ring.png'), true).then(texture => this.texture11 = texture),\n            this.createTexture(require('../../assets/sky.png'), true).then(texture => this.texture12 = texture),\n            this.createTexture(require('../../assets/bokeh.png'), true).then(texture => this.texture13 = texture),\n            this.createTexture(require('../../assets/led.png'), false).then(texture => this.texture14 = texture),\n            this.createTexture(require('../../assets/revision.png'), false).then(texture => this.revision = texture),\n            this.createTexture(require('../../assets/lab2.png'), false).then(texture => this.lab2 = texture),\n\n            this.createTexture(require('../../assets/skybox/skybox_back.png'), false).then(texture => this.skybox.back = texture),\n            this.createTexture(require('../../assets/skybox/skybox_down.png'), false).then(texture => this.skybox.down = texture),\n            this.createTexture(require('../../assets/skybox/skybox_front.png'), false).then(texture => this.skybox.front = texture),\n            this.createTexture(require('../../assets/skybox/skybox_left.png'), false).then(texture => this.skybox.left = texture),\n            this.createTexture(require('../../assets/skybox/skybox_right.png'), false).then(texture => this.skybox.right = texture),\n            this.createTexture(require('../../assets/skybox/skybox_up.png'), false).then(texture => this.skybox.up = texture),\n\n            this.createTexture(require('../../assets/platonian_baked.png'), false).then(texture => this.platonian = texture),\n            this.createTexture(require('../../assets/meth.png'), true).then(texture => this.meth = texture),\n            this.createProceduralTexture().then(texture => this.texture15 = texture),\n            this.createProceduralTexture2().then(texture => this.particleTexture = texture),\n            this.createProceduralTexture3().then(texture => this.particleTexture2 = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n            this.createProceduralDisplacementMap().then(texture => this.displacementMap = texture),\n            this.createTexture(require('../../assets/hoodlumLogo.png'), true).then(texture => this.hoodlumLogo = texture),\n            this.createTexture(require('../../assets/abstract.png'), false).then(texture => this.abstract = texture),\n            this.createTexture(require('../../assets/rave.png'), false).then(texture => this.rave = texture),\n            this.createTexture(require('../../assets/microstrange.png'), false).then(texture => this.micro = texture),\n            this.createTexture(require('../../assets/Backed.png'), false).then(texture => this.baked = texture),\n            this.createTexture(require('../../assets/blurredBackground.png'), false).then(texture => this.blurred = texture),\n            this.createTexture(require('../../assets/hlm.png'), true).then(texture => this.hlm = texture),\n            this.createTexture(require('../../assets/cross.png'), true).then(texture => this.cross = texture),\n            this.createTexture(require('../../assets/envmap.png'), false).then(texture => this.envmap = texture),\n            this.createTexture(require('../../assets/heightmapSphere.png'), false).then(texture => this.heightmapSphere = texture),\n            this.createTexture(require('../../assets/mask.png'), true).then(texture => this.mask = texture),\n            this.createTexture(require('../../assets/dirt.png'), true).then(texture => this.dirt = texture),\n            this.createTexture(require('../../assets/haujobb-overlay.png'), true).then(texture => this.overlay = texture),\n\n        ]).then(() => {\n            // Web Audio API\n            // FIXME: put this into a Player Class\n            framebuffer.precompute();\n\n            const audioContext = new AudioContext();\n            const request = new XMLHttpRequest();\n            request.open('GET', require('../../assets/sound/xmix_q2_final.ogg').default, true);\n            request.responseType = 'arraybuffer';\n            request.onload = () => {\n                const undecodedAudio = request.response;\n                audioContext.decodeAudioData(undecodedAudio,\n                    (buffer) => {\n                        const sourceBuffer = audioContext.createBufferSource();\n                        sourceBuffer.buffer = buffer;\n                        sourceBuffer.connect(audioContext.destination);\n                        sourceBuffer.loop = true;\n                        sourceBuffer.start(audioContext.currentTime);\n                        this.start = Date.now();\n                    });\n            };\n\n            request.send();\n        });\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const currentTime: number = Date.now();\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n         const time: number = (Date.now() - this.start);\n\n\n        framebuffer.setCullFace(CullFace.FRONT);\n\n        framebuffer.clearColorBuffer(Color.BLACK.toPackedFormat());\n\n    //    framebuffer.shadingSphereClip(time * 0.01);\n\n       // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.texture12.texture);\n\n\n\n        /*\n    } else if (time < 185000) {\n        this.framebuffer.shadingSphereClip((time - 170000) * 0.003);\n    } else if (time < 200000) {\n        this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture12.texture);\n        this.framebuffer.shadingTorus(time * 0.02);\n        this.framebuffer.drawLensFlare(time - 185000, [\n            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n        ]);\n    } else if (time < 210000) {\n        this.framebuffer.blur();\n        this.framebuffer.shadingTorus3(time * 0.015);\n        this.framebuffer.drawTexture(32, 70, this.texture2, 1.0);\n    } else if (time < 215000) {\n        this.framebuffer.led(time, this.texture14);\n        this.framebuffer.drawTexture(32, 64, this.texture2, 1.0);\n    } else if (time < 230000) {\n        this.framebuffer.setBob(this.metal);\n        this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n        this.framebuffer.shadingTorus4(time * 0.002);\n        this.framebuffer.drawLensFlare(time - 185000, [\n            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n        ]);\n        this.framebuffer.cinematicScroller(this.texture4, time);\n    } else if (time < 240000) {\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.clear();\n        this.framebuffer.shadingTorusENvironment(time * 0.006);\n        this.framebuffer.drawLensFlare(time - 185000, [\n            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 }\n        ]);\n    }\n    } else if (time < 260000) {\n        this.framebuffer.setCullFace(CullFace.BACK);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.led(time, this.texture14);\n        this.framebuffer.reflectionBunny(time * 0.002);\n    } else if (time < 280000) {\n        this.framebuffer.drawStarField(time * 0.9);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.setCullFace(CullFace.BACK);\n        this.framebuffer.reflectionBunny(time * 0.002);\n        this.framebuffer.scene7(time * 0.2, this.texture7);\n    } else if (time < 290000) {\n        this.framebuffer.drawPlaneDeformation(time, this.metal);\n        this.framebuffer.drawTexture(32, 69, this.texture2, 1.0);\n    } else if (time < 330000) {\n        this.framebuffer.drawLedTunnel(time, this.texture14);\n        this.framebuffer.setCullFace(CullFace.BACK);\n        this.framebuffer.shadingTorus5(time * 0.007, (Date.now() - this.start));\n        this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n    } else if (time < 360000) {*/\n\n\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.spheremap);\n\n       // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.texture5.texture);\n       // framebuffer.shadingSphereEnv(time * 0.0002);/*\n       /*\n    } else if (time < 440000) {\n        this.framebuffer.raveMoview(time, this.rave);\n        this.framebuffer.setCullFace(CullFace.BACK);\n        this.framebuffer.shadingTorus5(time * 0.007, (Date.now() - this.start));\n        this.framebuffer.glitchScreen(time, this.noise);\n        this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n    } else if (time < 450000) {\n        this.framebuffer.drawVoxelLandscape3(this.heightmap, time);\n        let tempTexture = new Texture();\n        tempTexture.texture = new Uint32Array(256 * 256);\n        for (let y = 0; y < 256; y++) {\n            for (let x = 0; x < 256; x++) {\n                let ypos = Math.round(200 / 256 * x);\n                let xpos = Math.round(320 / 256 * y);\n                tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n            }\n        }\n        this.framebuffer.drawPolarDistotion(time, tempTexture);\n    } else if (time < 490000) {\n        */\n\n        /*\n    } else if (time < 520000) {\n        this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n        this.framebuffer.noise(time, this.noise);\n\n        let scale = 1 / (99 - ((time * 0.02) % 100));\n        let width = (this.hoodlumLogo.width * scale * 10) | 0;\n        let height = (this.hoodlumLogo.height * scale * 10) | 0;\n\n        this.framebuffer.drawScaledTextureClipBi(\n            Math.round(320 / 2 - width / 2),\n            Math.round(200 / 2 - height / 2),\n            width, height, this.hoodlumLogo, 1.0);\n    } else if (time < 550000) {\n        this.framebuffer.raveMoview(time, this.rave);\n        this.framebuffer.glitchScreen(time, this.noise);\n        this.framebuffer.setCullFace(CullFace.BACK);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.shadingPlaneEnv(time * 0.0002);\n    } else if (time < 570000) {\n        this.framebuffer.drawVoxelLandscape4(this.heightmap, time);\n        let tempTexture = new Texture();\n        tempTexture.texture = new Uint32Array(256 * 256);\n        for (let y = 0; y < 256; y++) {\n            for (let x = 0; x < 256; x++) {\n                let ypos = 199 - Math.round(200 / 256 * x);\n                let xpos = Math.round(320 / 256 * y);\n                tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n            }\n        }\n        this.framebuffer.drawPolarDistotion2(time, tempTexture);\n\n        const ukBasslineBpm = 140;\n        const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n        const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n        const smash = (this.framebuffer.cosineInterpolate(0, 15, smashTime) -\n            this.framebuffer.cosineInterpolate(15, 200, smashTime) +\n            0.4 * this.framebuffer.cosineInterpolate(200, 300, smashTime) -\n            0.4 * this.framebuffer.cosineInterpolate(300, 400, smashTime)) * 35;\n\n\n        let size = Math.round(1 * smash);\n        let size2 = Math.round(2 * smash);\n        this.framebuffer.drawScaledTextureClipAdd(\n            320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n            200 / 2 - 20 + size,\n            this.micro.width * 2, this.micro.height * 2, this.micro);\n\n        this.framebuffer.drawScaledTextureClipAdd(\n            320 - (((time * 0.05) | 0) % (this.micro.width + 320)) + size2,\n            200 / 2 - 60,\n            this.micro.width, this.micro.height, this.micro);\n        this.framebuffer.glitchScreen(time, this.noise);\n    } else if (time < 590000) {\n        this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n        this.framebuffer.drawParticleTorus(time, this.particleTexture2, true);\n\n        let tmpGlitch = new Uint32Array(320 * 200);\n        this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n        let texture = new Texture(tmpGlitch, 320, 200);\n\n        const ukBasslineBpm = 140;\n        const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n        const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n        const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n            this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n        let width = 320 + smash * 320 / 100;\n        let height = 200 + smash * 200 / 100;\n\n        this.framebuffer.drawScaledTextureClip(\n            Math.round(320 / 2 - width / 2),\n            Math.round(200 / 2 - height / 2),\n            width, height, texture, 1.0);\n\n        this.framebuffer.noise(time, this.noise);\n    } else if (time < 650000) {\n        this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n\n        this.framebuffer.setCullFace(CullFace.BACK);\n        this.framebuffer.shadingTorusDamp(time * 0.02, time * 0.00000002);\n\n        this.framebuffer.drawScaledTextureClipAdd(\n            320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n            200 / 2 - 20,\n            this.micro.width * 2, this.micro.height * 2, this.micro);\n\n        this.framebuffer.drawScaledTextureClipAdd(\n            320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n            200 / 2 - 60,\n            this.micro.width, this.micro.height, this.micro);\n\n        let tmpGlitch = new Uint32Array(320 * 200);\n        this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n        let texture = new Texture();\n        texture.texture = tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n\n        const ukBasslineBpm = 140;\n        const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n        const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n        const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n            this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n        let width = Math.round(320 + smash * 320 / 50);\n        let height = Math.round(200 + smash * 200 / 50);\n\n        // slow\n        this.framebuffer.drawScaledTextureClip(\n            Math.round(320 / 2 - width / 2),\n            Math.round(200 / 2 - height / 2),\n            width, height, texture, 1.0);\n\n        this.framebuffer.noise(time, this.noise);\n    } else if (time < 670000) {\n        this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n        this.framebuffer.setCullFace(CullFace.BACK);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.shadingTorusDamp(time * 0.02, time * 0.00000002);\n\n        let source: number = 0;\n        let dest: number = 319;\n        for (let y: number = 0; y < 200; y++) {\n            for (let x: number = 0; x < 160; x++) {\n                this.framebuffer.framebuffer[dest--] = this.framebuffer.framebuffer[source++];\n            }\n            source += 160;\n            dest += 320 + 160;\n        }\n        this.framebuffer.drawScaledTextureClipAdd(\n            320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n            200 / 2 - 20,\n            this.micro.width * 2, this.micro.height * 2, this.micro);\n\n        this.framebuffer.drawScaledTextureClipAdd(\n            320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n            200 / 2 - 60,\n            this.micro.width, this.micro.height, this.micro);\n\n        let tmpGlitch = new Uint32Array(320 * 200);\n        this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n        let texture = new Texture();\n        texture.texture = tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n\n        const ukBasslineBpm = 140;\n        const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n        const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n        const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n            this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n        let width = Math.round(320 + smash * 320 / 50);\n        let height = Math.round(200 + smash * 200 / 50);\n\n        this.framebuffer.drawScaledTextureClip(\n            Math.round(320 / 2 - width / 2),\n            Math.round(200 / 2 - height / 2),\n            width, height, texture, 1.0);\n\n        for (let y = 0; y < 3; y++) {\n            for (let x = 0; x < 4; x++) {\n                let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n\n                this.framebuffer.drawTexture(xx, yy, this.cross, 0.45);\n            }\n        }\n\n        this.framebuffer.noise(time, this.noise);\n    } else if (time < 690000) {\n\n        this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n        this.framebuffer.setCullFace(CullFace.BACK);\n        this.framebuffer.setBob(this.spheremap);\n\n        this.framebuffer.shadingSphereEnv(time * 0.0002);\n\n\n        this.framebuffer.drawScaledTextureClipAdd(\n            320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n            200 / 2 - 20,\n            this.micro.width * 2, this.micro.height * 2, this.micro);\n\n        this.framebuffer.drawScaledTextureClipAdd(\n            320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n            200 / 2 - 60,\n            this.micro.width, this.micro.height, this.micro);\n\n\n        let source: number = 0;\n        let dest: number = 319;\n        for (let y: number = 0; y < 100; y++) {\n            for (let x: number = 0; x < 160; x++) {\n                this.framebuffer.framebuffer[dest--] = this.framebuffer.framebuffer[source++];\n            }\n            source += 160;\n            dest += 320 + 160;\n        }\n\n        source = 0;\n        dest = 199 * 320;\n        for (let y: number = 0; y < 100; y++) {\n            for (let x: number = 0; x < 320; x++) {\n                this.framebuffer.framebuffer[dest++] = this.framebuffer.framebuffer[source++];\n            }\n            dest -= 320 * 2;\n        }\n\n        let tmpGlitch = new Uint32Array(320 * 200);\n        this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n        let texture = new Texture();\n        texture.texture = tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n\n        const ukBasslineBpm = 140;\n        const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n        const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n        const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n            this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n        let width = Math.round(320 + smash * 320 / 50);\n        let height = Math.round(200 + smash * 200 / 50);\n\n        this.framebuffer.drawScaledTextureClip(\n            Math.round(320 / 2 - width / 2),\n            Math.round(200 / 2 - height / 2),\n            width, height, texture, 1.0);\n\n        for (let y = 0; y < 3; y++) {\n            for (let x = 0; x < 4; x++) {\n                let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n\n                this.framebuffer.drawTexture(xx, yy, this.cross, 0.45);\n            }\n        }\n\n        this.framebuffer.noise(time, this.noise);\n    } else if (time < 720000) {\n        // Rave video & Wobblin Cylinder\n        this.framebuffer.raveMoview(time, this.rave);\n        this.framebuffer.setCullFace(CullFace.FRONT);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.shadingCylinderEnv(time * 0.0002);\n\n        // Crosses\n        for (let y = 0; y < 3; y++) {\n            for (let x = 0; x < 4; x++) {\n                let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n                this.framebuffer.drawTexture(xx, yy, this.cross, 0.2);\n            }\n        }\n\n        // Motion Blur\n        let texture = new Texture(this.accumulationBuffer, 320, 200);\n        this.framebuffer.drawTexture(0, 0, texture, 0.3 + 0.6 * (0.5 + 0.5 * Math.sin(time * 0.0003)));\n        this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n        this.framebuffer.noise(time, this.noise);\n    } else if (time < 750000) {\n        let rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        let texture = new Texture(new Uint32Array(32 * 32), 32, 32);\n        // FIXME:\n        // - remove realtime glow and put it pre baked into the texture insteadt!\n        for (let k = 0; k < 100; k++) {\n            let x = Math.round(rng.getFloat() * 32);\n            let y = Math.round(rng.getFloat() * 32);\n            if (k < 50)\n                texture.texture[x + y * 32] = 47 | 181 << 8 | 243 << 16;\n            else\n                texture.texture[x + y * 32] = 252 | 130 << 8 | 195 << 16;\n        }\n\n        this.framebuffer.drawPlanedeformationTunnelAnim(time, texture);\n\n\n        // GLOW\n        let glowBuffer = new Uint32Array(16 * 2 * 10 * 2);\n        let glowBuffer2 = new Uint32Array(16 * 2 * 10 * 2);\n\n        // todo filer onlyy brigh parts\n        // blur if too blocky\n        // clamp to border when filterting bilinear\n        // add and dont blend with alpha\n        for (let y = 0; y < 20; y++) {\n            for (let x = 0; x < 32; x++) {\n                let xx = Math.round(10 * x);\n                let yy = Math.round(10 * y);\n                let r = this.framebuffer.framebuffer[xx + yy * 320] & 0xff;\n                let g = this.framebuffer.framebuffer[xx + yy * 320] >> 8 & 0xff;\n                let b = this.framebuffer.framebuffer[xx + yy * 320] >> 16 & 0xff;\n                let intensity = (r + g + b) / 3;\n                let scale = this.framebuffer.cosineInterpolate(200, 130, intensity);\n                let color = r * scale | g * scale << 8 | b * scale << 16 | 255 << 24;\n                //  if (intensity > 138) {\n                glowBuffer[x + y * 32] = this.framebuffer.framebuffer[xx + yy * 320];//color ;\n                // }\n            }\n        }\n\n        for (let y = 0; y < 20; y++) {\n            for (let x = 0; x < 32; x++) {\n                let col1 = glowBuffer[Math.max(x - 1, 0) + y * 32];\n                let col2 = glowBuffer[(x) % 32 + y * 32];\n                let col3 = glowBuffer[Math.min(x + 1, 31) + y * 32];\n                let r = (col1 & 0xff) * 1 / 4 + (col2 & 0xff) * 2 / 4 + (col3 & 0xff) * 1 / 4;\n                let g = (col1 >> 8 & 0xff) * 1 / 4 + (col2 >> 8 & 0xff) * 2 / 4 + (col3 >> 8 & 0xff) * 1 / 4;\n                let b = (col1 >> 16 & 0xff) * 1 / 4 + (col2 >> 16 & 0xff) * 2 / 4 + (col3 >> 16 & 0xff) * 1 / 4;\n                glowBuffer2[x + y * 32] = r | g << 8 | b << 16;\n            }\n        }\n\n        for (let y = 0; y < 20; y++) {\n            for (let x = 0; x < 32; x++) {\n                let col1 = glowBuffer2[(x) + Math.max(y - 1, 0) * 32];\n                let col2 = glowBuffer2[(x) + y % 20 * 32];\n                let col3 = glowBuffer2[(x) + Math.min(y + 1, 19) * 32];\n                let r = ((col1 & 0xff) * 1 / 4 + (col2 & 0xff) * 2 / 4 + (col3 & 0xff) * 1 / 4);\n                let g = ((col1 >> 8 & 0xff) * 1 / 4 + (col2 >> 8 & 0xff) * 2 / 4 + (col3 >> 8 & 0xff) * 1 / 4);\n                let b = ((col1 >> 16 & 0xff) * 1 / 4 + (col2 >> 16 & 0xff) * 2 / 4 + (col3 >> 16 & 0xff) * 1 / 4);\n                glowBuffer[x + y * 32] = r | g << 8 | b << 16;\n            }\n        }\n\n        let texture2 = new Texture();\n        texture2.texture = glowBuffer;\n        texture2.width = 32;\n        texture2.height = 20;\n\n\n        this.framebuffer.drawScaledTextureClipBiAdd(\n            0, 0,\n            320, 200, texture2, 0.75);\n\n        this.framebuffer.setCullFace(CullFace.BACK);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.reflectionBunny(time * 0.002);\n        // Motion Blur\n        let texture3 = new Texture(this.accumulationBuffer, 320, 200);\n        this.framebuffer.drawTexture(0, 0, texture3, 0.8);\n        this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n        this.framebuffer.noise(time, this.noise);\n    } else {\n        this.framebuffer.raveMoview(time, this.rave);\n        this.framebuffer.setCullFace(CullFace.FRONT);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.shadingCylinderEnvDisp(time * 0.0002);\n        this.framebuffer.drawTexture((320 / 2 - 256 / 2) | 0, (200 / 2 - 122 / 2) | 0, this.meth, Math.max(0, Math.sin(time * 0.0002)));\n        // Motion Blur\n        let texture3 = new Texture(this.accumulationBuffer, 320, 200);\n        this.framebuffer.drawTexture(0, 0, texture3, 0.8);\n        this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n\n        let tmpGlitch = new Uint32Array(320 * 200);\n        this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n        let texture = new Texture();\n        texture.texture = tmpGlitch;\n        texture.width = 320;\n        texture.height = 200;\n\n        const ukBasslineBpm = 140;\n        const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n        const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n        const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n            this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n        let width = Math.round(320 + smash * 320 / 100);\n        let height = Math.round(200 + smash * 200 / 100);\n\n        this.framebuffer.drawScaledTextureClip(\n            Math.round(320 / 2 - width / 2),\n            Math.round(200 / 2 - height / 2),\n            width, height, texture, 1.0);\n\n        this.framebuffer.noise(time, this.noise);\n    }\n*/\n\n        // music: https://youtu.be/XNUaoQeTu9U\n        /*\n                if (time < 50000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingSphereEnvDisp(time * 0.0002);\n\n                    // Motion Blur\n                    const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n                    const texture: Texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n\n                    const ukBasslineBpm: number = 140;\n                    const ukBasslineClapMs: number = 60000 / ukBasslineBpm * 2;\n                    const smashTime: number = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash: number = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    const width: number = Math.round(320 + smash * 320 / 100);\n                    const height: number = Math.round(200 + smash * 200 / 100);\n\n                    this.framebuffer.drawScaledTextureClip(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n\n                    const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 200000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingTorusDamp(time * 0.02, time * 0.00000002);\n\n                    const tmpGlitch: Uint32Array = new Uint32Array(320 * 200);\n                    this.framebuffer.fastFramebufferCopy(tmpGlitch, this.framebuffer.framebuffer);\n\n                    const texture: Texture = new Texture();\n                    texture.texture = tmpGlitch;\n                    texture.width = 320;\n                    texture.height = 200;\n\n                    const ukBasslineBpm = 140;\n                    const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n                    const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n                    const smash = (this.framebuffer.cosineInterpolate(0, 20, smashTime) -\n                        this.framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n                    const width = Math.round(320 + smash * 320 / 100);\n                    const height = Math.round(200 + smash * 200 / 100);\n\n                    this.framebuffer.drawScaledTextureClipBi(\n                        Math.round(320 / 2 - width / 2),\n                        Math.round(200 / 2 - height / 2),\n                        width, height, texture, 1.0);\n\n                    const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 250000) {\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.glitchScreen(time, this.noise, false);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingPlaneEnv(time * 0.0002);\n\n                    const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 300000) {\n                    this.framebuffer.drawVoxelLandscape4(this.heightmap, time);\n                    const tempTexture: Texture = new Texture();\n                    tempTexture.texture = new Uint32Array(256 * 256);\n                    for (let y: number = 0; y < 256; y++) {\n                        for (let x: number = 0; x < 256; x++) {\n                            const ypos: number = 199 - Math.round(200 / 256 * x);\n                            const xpos: number = Math.round(320 / 256 * y);\n                            tempTexture.texture[x + y * 256] = this.framebuffer.framebuffer[xpos + ypos * 320];\n                        }\n                    }\n\n                    this.framebuffer.drawPolarDistotion2(time, tempTexture);\n\n                    const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.65);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 350000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.setCullFace(CullFace.FRONT);\n                    this.framebuffer.setBob(this.spheremap);\n                    this.framebuffer.shadingCylinderEnvDisp(time * 0.0002);\n\n                    const texture3 = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 400000) {\n                    this.framebuffer.raveMoview(time, this.rave);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.shadingTorus5(time * 0.007, (Date.now() - this.start));\n                    this.framebuffer.glitchScreen(time, this.noise);\n                } else if (time < 450000) {\n\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.drawParticleWaves(time, this.particleTexture2, true);\n\n                    const texture3 = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.85);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n\n                    this.framebuffer.noise(time, this.noise);\n\n                } else if (time < 500000) {\n                    this.framebuffer.drawMetaballs();\n                    this.framebuffer.noise(time, this.noise, 0.1);\n                } else if (time < 550000) {\n                    this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 600000) {\n\n                } else if (time < 650000) {\n\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.drawParticleStreams(time, this.particleTexture2, true);\n                    const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.55);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                    this.framebuffer.noise(time, this.noise);\n                } else if (time < 750000) {\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.envmap);\n\n                    this.framebuffer.drawBlenderScene5(time, this.texture4,\n                        [\n                            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                        ], this.dirt);\n\n                    const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                    this.framebuffer.glitchScreen(time * 0.9, this.noise);\n                } else if (time < 950000) {\n\n                    this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.blurred.texture);\n                    this.framebuffer.setCullFace(CullFace.BACK);\n                    this.framebuffer.setBob(this.baked);\n\n                    this.framebuffer.drawBlenderScene7(time, this.particleTexture2,\n                        [\n                            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n                        ], this.dirt);\n\n                    const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n                    this.framebuffer.drawTexture(0, 0, texture3, 0.75);\n                    this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                    //this.framebuffer.glitchScreen(time * 0.9, this.noise);\n                    this.framebuffer.noise(time, this.noise);\n             */\n\n\n\n\n\n        // TODO:\n        // * build level in code (portals and areas)\n        // * use controllable camera to move\n\n        // TODO: Front Mission Modell in Blender\n\n        /**\n         * TODO:\n         * - Draw Vector ART in SVG Inkscape\n         * - Vectorize with Blender and Display\n         */\n\n        /**\n         * TODO:\n         * - transition effects with alpha layer\n         * - wormhole particle tunnel\n         * - rubiks cube animation :-)\n         * - cube with animated texture\n         * - Oldskool amiga screen with disk loading and decrunching\n         * - screen exploding intro cubes\n         * - Split red green and blue channels and displace them in x direction\n         */\n\n\n        /**\n         * TODO:\n         * - Stripe landscape: http://farm3.static.flickr.com/2653/5710494901_2ca6ddbfb2_b.jpg\n         *   maybe with sync to bass and fft\n         * - Blender modells (Flat, textured, GI baked)\n         * - particle tunnel\n         * - ribbons on curves\n         * - dof\n         */\n\n\n\n        // framebuffer.shadingSphereClip(time*0.005);\n        // framebuffer.scene8(time*0.02);\n        // framebuffer.debug(time*0.003);\n        /*\n          framebuffer.setCullFace(CullFace.BACK);\n          framebuffer.setTexture(this.envmap);\n\n          framebuffer.drawBlenderScene6(time, this.particleTexture2,\n              [\n                  { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                  { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                  { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                  { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                  { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n              ], this.dirt);\n\n          const texture3: Texture = new Texture(this.accumulationBuffer, 320, 200);\n          framebuffer.drawTexture(0, 0, texture3, 0.85);\n          framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n          framebuffer.noise(time, this.noise);\n  */\n\n\n\n        // TS SoftSynth Project\n        // http://natureofcode.com/book/\n        // https://noisehack.com/generate-noise-web-audio-api/\n        // https://noisehack.com/custom-audio-effects-javascript-web-audio-api/\n        // https://noisehack.com/how-to-build-supersaw-synth-web-audio-api/\n        // https://noisehack.com/build-music-visualizer-web-audio-api/\n        // https://noisehack.com/how-to-build-monotron-synth-web-audio-api/\n        // https://davidwalsh.name/web-audio-api\n        // https://codepen.io/gregh/post/recreating-legendary-8-bit-games-music-with-web-audio-api\n        // https://developer.mozilla.org/en-US/docs/Games/Techniques/Audio_for_Web_Games\n        // https://www.html5rocks.com/en/tutorials/webaudio/intro/\n\n        // this.framebuffer.drawTexture(0, 0, this.displacementMap, 0.8);\n\n       // framebuffer.drawPolarDistotion3(time, this.revision);\n       // framebuffer.setCullFace(CullFace.FRONT);\n       // framebuffer.shadingSphereClip(time * 0.004);\n        // Motion Blur\n       // let texture = new Texture(this.accumulationBuffer, 320, 200);\n        // this.framebuffer.drawTexture(0, 0, texture, 0.75);\n       // framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        // framebuffer.glitchScreen(time, this.noise);\n\n\n        // TODO:\n        // - Progress Bar for Loading\n        // - Web Audio API\n        // - blasphemy line sphere with particles and blur\n        // - fractal landscape fade in / out\n        // - particle emitter\n        // - plane deformation on rendererd scenes\n        // - alpha blend between different or same scene\n        // - fade to white\n        // - spike ball / particle and 3d mesh with normals\n        // - glow\n        // - kewlers cube torus\n        // - kewlsers recht billboard spikeball\n        // - kewslers rect billboard cylinder\n        // seminars:\n        // - https://www.youtube.com/playlist?list=PLwbFJIXXSsXvbpDxOaaBrxSBdLUW1hdax\n        // - https://www.youtube.com/watch?v=XZLqwXdXjqY\n        // - https://www.youtube.com/watch?v=nt-BpAYMeJs&list=PLNqQO7lFY6dmH5kMSWtuRP6ZhBiQdQIU1&index=5\n        // - https://www.youtube.com/watch?v=WgUkCRvti3Y&list=PLNqQO7lFY6dlPOg7cA1SczEU0Y7UW6iMW\n        // - https://www.youtube.com/watch?v=7wYq6O-g2U8&list=PLNqQO7lFY6dm_GROVFIZ6C6mUINMnlpyC\n        // - https://www.youtube.com/watch?v=hszyYAT5R1Q&list=PLNqQO7lFY6dm_GROVFIZ6C6mUINMnlpyC&index=5\n        // - https://www.youtube.com/watch?v=4Q5sgNCN2Jw&list=PL2EEF025A89BAA0FC\n        // - https://www.youtube.com/watch?v=TbcZyAO6K7c\n        // - https://www.youtube.com/watch?v=2p2JcHzRlJU\n        // - https://www.youtube.com/watch?v=QT2ftidLTn4\n        // - https://www.youtube.com/watch?v=Oo-jlpvhTcY\n\n\n/*\n\n                  this.framebuffer.fastFramebufferCopy(this.accumulationBuffer, this.framebuffer.framebuffer);\n                  this.framebuffer.drawScaledTextureClipBi(\n                      Math.round(320/2-width/2),\n                      Math.round(200/2-height/2),\n                      width, height, texture, 1.0);\n                  */\n\n\n\n\n\n           // framebuffer.drawRadialBlur();\n\n            framebuffer.drawText(8, 18, 'FPS: ' + this.fps.toString(), this.texture4);\n\n\n\n\n\n\n         // framebuffer.pixelate();\n/*\n\n              // SCALE\n              let texture = new Texture();\n              texture.texture = this.accumulationBuffer;\n              texture.width = 320;\n              texture.height = 200;\n\n              let scale2 = (1+Math.sin(time*0.0001))*0.5*10+1;\n              let width2 = 320 *  scale2;\n              let height2 = 200 * scale2;\n\n              // looks crappy with linear interpolation!\n              // probably  bilinear is required here\n\n\n                  framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n                  framebuffer.drawScaledTextureClipBi(\n                      Math.round(320/2-width2/2),\n                      Math.round(200/2-height2/2),\n                      width2|0, height2|0, texture, 1.0);\n                 */\n\n        // NEW EFFECTS:\n        // * https://www.youtube.com/watch?v=bg-MTl_nRiU\n        // * SPIKEBALL KYLE\n        // plane deformation with texture to LED\n        // 16 / 9 --> 320 x 180\n\n\n        /*\n        this.framebuffer.setCullFace(CullFace.BACK);\n        //this.framebuffer.drawBlenderScene(time, this.texture4, this.particleTexture2);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n        this.framebuffer.shadingSphereEnv(time*0.0002);\n         this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n        */\n\n        /**\n         * Inspiration:\n         * - https://www.youtube.com/watch?v=7kLNXg4BmM8\n         * - https://www.youtube.com/watch?v=PLrio-uwvwk\n         * - https://www.youtube.com/watch?v=XJKDb4ByZ7Y\n         */\n        /**\n         * TODO:\n         * - http://sol.gfxile.net/gp/ch18.html\n         * - http://insolitdust.sourceforge.net/code.html\n         * - http://sol.gfxile.net/sphere/index.html\n         * - http://4matprojects.blogspot.de/\n         * - http://sol.gfxile.net/particle/index.html\n         * - http://sol.gfxile.net/gp/ch19.html\n         * - http://www.flipcode.com/archives/The_Art_of_Demomaking-Issue_07_Bump_Mapping.shtml\n         * - http://sol.gfxile.net/interpolation/index.html\n         * - http://adrianboeing.blogspot.de/2011/06/deform-textured-interference-effect-in.html\n         * - particle ball pulsating (https://www.youtube.com/watch?v=NPZEkhtXhgE)\n         * - metaballs\n         * - particle stream\n         * - scene with baked lighting & wobbling ball & camera animation\n         * - DOF flares\n         * - demo tool http://peisik.untergrund.net/engines/\n         * - https://www.youtube.com/watch?v=ghX1-EUx-fQ&index=7&list=PLPnuj18PSHazbti_tw1zoQ23fqx8-ZZP7 (min 15)\n         */\n\n        //  this.framebuffer.cinematicScroller(this.texture4, time);\n        //  this.framebuffer.drawTextureScaledLame(0,0, 16,16, this.texture7);\n        // http://doc.babylonjs.com/tutorials/discover_basic_elements\n\n        // implement modells with baked shaods and lighting :)\n        // http://iquilezles.org/www/index.htm\n        // http://iquilezles.org/www/articles/normals/normals.htm\n        // http://iquilezles.org/www/articles/areas/areas.htm\n        // http://iquilezles.org/www/articles/frustum/frustum.htm\n        // http://iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm\n        // http://iquilezles.org/www/articles/deform/deform.htm\n        // http://www.gamers.org/dEngine/quake/papers/ddjzsort.html\n        // http://fabiensanglard.net/quakeSource/quakeSourceRendition.php\n\n        //  this.framebuffer.shadingSphereClip((time ) * 0.003);\n        // this.framebuffer.cinematicScroller(this.texture4, time );\n        //   this.framebuffer.drawText(8, 192 - 18, 'TRIANGLE NEAR PLANE CLIPPING', this.texture4);\n\n        // TODO:\n        // - textured cube / dynamic textures\n        // - skybox\n        // - specular highlights\n        // - 3d bobs (with shadows)\n        // - plane deformation effect\n        // - sine scroller (color bar texture)\n        // - dot tunnel\n        // - 2d / 3d start field\n        // - 2d vector start\n        // - wobble logo\n        // - text writer\n        // - scroller / sine scroller\n        // - fractalplasma fade in\n        // - water effect\n        // - cross fade\n        // - 2d bump mapping ( maybe on 3d object)\n        // - smooth shading (gouraud)\n        // - voxel landscape with color\n        // - metaballs\n        // - rasterbars\n        // - 3d particles / 3d particle collision\n        // - vector morphing\n        // - voxel tunnel / sphere / torus\n        // - stencil vectors\n        // - chess zoomer / chess waver\n        // - raycaster\n\n        // this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n        // this.framebuffer.shadingTorus2(time * 0.02);\n        // this.framebuffer.drawTexture(32, 60, this.texture2, 1.0);\n\n        // this.framebuffer.clear();\n\n        // this.framebuffer.wireFrameTerrain(time*0.01, this.texture3);\n        // this.framebuffer.pixelate();\n\n\n\n        //     this.framebuffer.wireFrameTerrain(time*0.008,this.texture3);\n        //    this.framebuffer.cinematicScroller(this.texture4, time );\n        // todo: radial blur -> pouet.net\n\n        // http://www.cubic.org/docs/camera.htm\n        // http://www.cubic.org/docs/3dclip.htm\n        // http://www.cubic.org/docs/backcull.htm\n\n        // this.framebuffer.addReflections();\n\n        // this.framebuffer.drawRaster();\n        // this.framebuffer.enableBackfaceCulling();\n        // this.framebuffer.setCullFace(FRONT);\n\n        // TODO: text\n        // 3d line clipping for fly by :)\n        // different transitions:\n        // - stripes etc\n        // - chessboard\n        // wobble logo\n        // ball 3d with precalculated sizes lookup\n        // starfield 2d /3d\n        // wormhole\n        // glitch logo\n    }\n\n    // Move\n    public createProceduralTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    texture.texture[x + y * 256] = (rng.getFloat() * 256) | 0 | 255 << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    // Move\n    public createProceduralTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n    public createProceduralTexture3(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n    // Move\n    public createProceduralDisplacementMap(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            texture.texture.fill(128 | 255 << 24);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = (texture.texture[x + y * 256] & 0xffffff00) | texture.texture[x + y * 256] & 0xff + (c * 255);\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createTexture(path: any, hasAlpha: boolean): Promise<Texture> {\n        return new Promise<Texture>(((resolve: (texture?: Texture) => void): void => {\n            const img = new Image();\n            img.onload = () => {\n                const texture = new Texture();\n                texture.texture = this.getImageData(img, hasAlpha);\n                texture.width = img.width;\n                texture.height = img.height;\n                resolve(texture);\n            };\n            img.onerror = () => resolve();\n            img.src = path.default;\n        }));\n    }\n\n    getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data = context.getImageData(0, 0, image.width, image.height).data;\n        const conv = new Uint32Array(data.length / 4);\n        let c = 0;\n        for (let i = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n        // modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else if (p2.projection.y === p3.projection.y) {\n            if (p2.projection.x > p3.projection.x) {\n                this.temp = p2;\n                p2 = p3;\n                p3 = this.temp;\n            }\n            this.fillBottomFlatTriangle(framebuffer, p1, p2, p3);\n        } else if (p1.projection.y === p2.projection.y) {\n            if (p1.projection.x > p2.projection.x) {\n                this.temp = p1;\n                p1 = p2;\n                p2 = this.temp;\n            }\n            this.fillTopFlatTriangle(framebuffer, p1, p2, p3);\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) *\n                (p2.projection.y - p1.projection.y) / (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer, p1, p2, p3);\n            }\n        }\n    }\n\n    private fillBottomFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        const yDistance: number = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistance;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, color);\n    }\n\n    fillTopFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n        const yDistance = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistance;\n\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v2.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, color);\n    }\n\n\n    fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\n\nexport class TexturedTriangleRasterizer {\n\n    private temp: Vertex = null;\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.position.y > p3.position.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } else {\n            const x: number = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) /\n                (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(framebuffer, p1, p2, p3);\n            } else {\n                const tex = p1.textureCoordinate;\n                const tex2 = p2.textureCoordinate;\n                const tex3 = p3.textureCoordinate;\n\n                this.fillLongLeftTriangle2(\n                    framebuffer,\n                    p1.position,\n                    p2.position,\n                    p3.position,\n                    new Vector3f(tex.u, tex.v, 0),\n                    new Vector3f(tex2.u, tex2.v, 0),\n                    new Vector3f(tex3.u, tex3.v, 0)\n                );\n            }\n        }\n    }\n\n    private fillLongRightTriangle2(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n\n\n\n\n        const yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        const slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    fillLongLeftTriangle2(framebuffer: Framebuffer, v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        const yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        const slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        const tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        const tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        const zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        const x0 = Math.min(x | 0, this.width - 1);\n        const x1 = Math.min((x | 0) + 1, this.width - 1);\n        const y0 = Math.min(y | 0, this.height - 1);\n        const y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename.default;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { Scene } from './Scene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new Scene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","time","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","end","current","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","drawPolarDistotion2","elapsedTime","distScale","xdist","ydist","dist","sqrt","angle","atan2","PI","color1","drawPolarDistotion3","noise","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","mHeight","drawTextureNoClipAlpha","scene8","points","modelViewMartrix","Matrix3f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","points2","forEach","transformed","multiply","push","nearPlaneClipping","project","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","STEPS2","sphereFunction2","Matrix4f","constructTranslationMatrix","p","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","dist2","cosineInterpolate","final","drawLedTunnel","distance","intensity","drawParticleWaves","noClear","num","cos","sort","a","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","y2","mu","mu2","createPlane","normals","normals2","point","find","pointVar","sub","idx","indexOf","createCylinder","xx2","yy2","TextureCoordinate","createCylinder2","LOOPX","xpos2","ypos","ypos2","x0y0","x1y0","x0y1","x1y1","x0","z0","z1","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","temp","theta","phi","Vector4f","seed","position","projection","drawScaledTextureClip","Scene","AbstractScene","mask","texture2","heightmap","heightmapSphere","texture4","texture5","baked","texture6","texture7","texture8","texture9","texture10","metalheadz","platonian","texture11","texture12","texture13","texture14","texture15","revision","lab2","hoodlumLogo","blurred","envmap","particleTexture","particleTexture2","rave","metal","micro","hlm","meth","displacementMap","cross","skybox","abstract","myAudio","spheremap","overlay","fpsStartTime","fpsCount","fps","accumulationBuffer","Promise","all","createTexture","back","down","front","left","right","up","createProceduralTexture","createProceduralTexture2","createProceduralTexture3","TextureUtils","generateProceduralNoise","createProceduralDisplacementMap","audioContext","AudioContext","request","XMLHttpRequest","open","responseType","onload","undecodedAudio","response","decodeAudioData","buffer","sourceBuffer","createBufferSource","connect","destination","loop","currentTime","send","FRONT","toString","resolve","dx","dy","c","path","hasAlpha","img","Image","onerror","default","image","withAlpha","drawImage","conv","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normalize","faces","n1","n2","n3","transformedPoints","map","transformedNormals","getMesh","AbstractGeometricObject","invert","super","frame","frame2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","modelView","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","drawTriangleDDA","p1","p2","p3","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","drawSpan","yDistanceLeft","yDistanceRight","spanzStep","wStart","fillLongRightTriangle2","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","color2","curx1","curx2","xDistance","sign","wDelta","AbstractClipEdge","isInside","isInside2","computeIntersection","Vertex","factor","computeIntersection2","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","getPixel","getBilinearFilteredPixel","y0","col1","col2","getPixel2","interpolateComp","getPixel3","filename","transparency","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","definition","key","o","Object","defineProperty","enumerable","get","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}