{"version":3,"file":"misc.js","mappings":"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","sources":["webpack://aisa/./src/assets/Backed.png","webpack://aisa/./src/assets/abstract.png","webpack://aisa/./src/assets/atlantis.png","webpack://aisa/./src/assets/ball2.png","webpack://aisa/./src/assets/battleofilona.png","webpack://aisa/./src/assets/blurredBackground.png","webpack://aisa/./src/assets/bokeh.png","webpack://aisa/./src/assets/cross.png","webpack://aisa/./src/assets/dirt.png","webpack://aisa/./src/assets/envmap.png","webpack://aisa/./src/assets/flood.png","webpack://aisa/./src/assets/font.png","webpack://aisa/./src/assets/haujobb-overlay.png","webpack://aisa/./src/assets/heightmap.png","webpack://aisa/./src/assets/heightmapSphere.png","webpack://aisa/./src/assets/hlm.png","webpack://aisa/./src/assets/hoodlumLogo.png","webpack://aisa/./src/assets/kiss.png","webpack://aisa/./src/assets/lab2.png","webpack://aisa/./src/assets/led.png","webpack://aisa/./src/assets/lens.png","webpack://aisa/./src/assets/logo.png","webpack://aisa/./src/assets/mask.png","webpack://aisa/./src/assets/metalheadz.png","webpack://aisa/./src/assets/meth.png","webpack://aisa/./src/assets/microstrange.png","webpack://aisa/./src/assets/pandabear.png","webpack://aisa/./src/assets/platonian_baked.png","webpack://aisa/./src/assets/rave.png","webpack://aisa/./src/assets/razor1911.png","webpack://aisa/./src/assets/revision.png","webpack://aisa/./src/assets/ring.png","webpack://aisa/./src/assets/sky.png","webpack://aisa/./src/assets/skybox/skybox_back.png","webpack://aisa/./src/assets/skybox/skybox_down.png","webpack://aisa/./src/assets/skybox/skybox_front.png","webpack://aisa/./src/assets/skybox/skybox_left.png","webpack://aisa/./src/assets/skybox/skybox_right.png","webpack://aisa/./src/assets/skybox/skybox_up.png","webpack://aisa/./src/assets/sound/xmix_q2_final.ogg","webpack://aisa/./src/assets/spark.png","webpack://aisa/./src/assets/spheremap.png","webpack://aisa/./src/assets/textures/metall.png","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/misc/Scene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/misc/Application.ts"],"sourcesContent":["export default __webpack_public_path__ + \"627a342d6eba738cf103d753bf442a3d.png\";","export default __webpack_public_path__ + \"1c679046e546d12399509394f8258610.png\";","export default __webpack_public_path__ + \"1940711ae250abc4871bf563f44ab585.png\";","export default __webpack_public_path__ + \"61fba6f52a703fc3fce172546bd169fa.png\";","export default __webpack_public_path__ + \"d8003eead60c0dfb90215d469d51d2f3.png\";","export default __webpack_public_path__ + \"7ac69aefeb77efddca4311160ba48eb9.png\";","export default __webpack_public_path__ + \"8a09527b06eeee9b52984520552f3610.png\";","export default __webpack_public_path__ + \"21f3f7c928904fdcdd8eecbc4618d6cb.png\";","export default __webpack_public_path__ + \"59b860b8c26e2787d9a2d2c486ccb637.png\";","export default __webpack_public_path__ + \"dbfe6f136c603b175357f30c0300be38.png\";","export default __webpack_public_path__ + \"d2bcadbe726fda2e16a89aebff1a57c5.png\";","export default __webpack_public_path__ + \"aa2528d7a8a813247c2d2b90b028e437.png\";","export default __webpack_public_path__ + \"f24e33616d64271ae69c9c523d8c6af7.png\";","export default __webpack_public_path__ + \"3906531fedff1b81f85f5f9415a1e956.png\";","export default __webpack_public_path__ + \"b067dd009dbd8781f1973feed20bb7eb.png\";","export default __webpack_public_path__ + \"52f133446882fbe677f91400e1250e8a.png\";","export default __webpack_public_path__ + \"5211260c15f95de001ff416d5a098ceb.png\";","export default __webpack_public_path__ + \"a0b5c581be5a0071748aa4b3f9ea4c2c.png\";","export default __webpack_public_path__ + \"be59e5e60b44dcb4bb1ccf2535c21d20.png\";","export default __webpack_public_path__ + \"35e5d4cac5e7ac4f18616422a728392d.png\";","export default __webpack_public_path__ + \"6e56d24ee0b205334f19f3f2d0242791.png\";","export default __webpack_public_path__ + \"83fbf02619944d02f165a5fa0c7b9203.png\";","export default __webpack_public_path__ + \"8505f04ec10e2564c8d8eb88e6f5cc51.png\";","export default __webpack_public_path__ + \"dd142c00e8f6db275d9ecc2bda063c04.png\";","export default __webpack_public_path__ + \"4208105f5cfbcbdb6ece02affdcefe01.png\";","export default __webpack_public_path__ + \"ca65f62320a1c5496be703455da5e09a.png\";","export default __webpack_public_path__ + \"e8c4e1c3c2b22502a30bcdb0fc317733.png\";","export default __webpack_public_path__ + \"cb7b144b66415bfbb6f223071a7d23bd.png\";","export default __webpack_public_path__ + \"f2b01e8ebcd0467bc5ee98bd9745c36b.png\";","export default __webpack_public_path__ + \"d3132c4de2ae05ba66ad9637600796c5.png\";","export default __webpack_public_path__ + \"227d00cea0acdc962fcec077107d55f7.png\";","export default __webpack_public_path__ + \"76ae06b027ad8d3a84d87f9801f62db9.png\";","export default __webpack_public_path__ + \"5737523cae4faf49c411dcaa80e577f2.png\";","export default __webpack_public_path__ + \"29fc676286325d45f7deef5e593b6da6.png\";","export default __webpack_public_path__ + \"fe1ca8bac15e02a2d14cf9d558c69def.png\";","export default __webpack_public_path__ + \"780c7edd8a9410b8261fdb12d9d6191d.png\";","export default __webpack_public_path__ + \"c83bb5502d841707edd4423f41ebcca0.png\";","export default __webpack_public_path__ + \"8f18731da1a9e273cf0432f3b1c862f1.png\";","export default __webpack_public_path__ + \"5cf778e15448cf90b764416629d74108.png\";","export default __webpack_public_path__ + \"612e69623b4a59d4b4b0a408f9033092.ogg\";","export default __webpack_public_path__ + \"64c8d0e56a947ade8a449a3ecda79d4b.png\";","export default __webpack_public_path__ + \"4ad9a189a84f154755e77c3e8479547c.png\";","export default __webpack_public_path__ + \"4f11e0c165fc56a4f81fd1340adc9407.png\";","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n     \n         //this.cylinder = this.createCylinder();\n       \n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array) {\n        src.set(dest);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n   \n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    \n    /*\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n*/\n   /*\n\n*/\n    \n   \n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n     /*\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\nexport class CubeScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.BLACK.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(CubeScene.BACKGROUND_COLOR);\n        framebuffer.clearDepthBuffer();\n        \n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 3.2;\n\n        return Matrix4f.constructTranslationMatrix(0, 0, -9).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { BunnyScene } from '../bunny/BunnyScene';\nimport { CubeScene } from '../cube/CubeScene';\nimport { time } from 'console';\n\nexport class Scene extends AbstractScene {\n\n    // move\n    private start: number;\n\n    // move\n    private texture: Texture;\n    private mask: Texture;\n    private texture2: Texture;\n    private heightmap: Texture;\n    private heightmapSphere: Texture;\n    private texture4: Texture;\n    private texture5: Texture;\n    private baked: Texture;\n    private texture6: Texture;\n    private texture7: Texture;\n    private texture8: Texture;\n    private texture9: Texture;\n    private texture10: Texture;\n    private metalheadz: Texture;\n    private platonian: Texture;\n    private dirt: Texture;\n    private texture11: Texture;\n    private texture12: Texture;\n    private texture13: Texture;\n    private texture14: Texture;\n    private texture15: Texture;\n    private revision: Texture;\n    private lab2: Texture;\n    private hoodlumLogo: Texture;\n    private blurred: Texture;\n    private envmap: Texture;\n    private particleTexture: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n    private rave: Texture;\n    private metal: Texture;\n    private micro: Texture;\n    private hlm: Texture;\n    private meth: Texture;\n    private displacementMap: Texture;\n    private cross: Texture;\n    private skybox: {\n        back?: Texture,\n        down?: Texture,\n        front?: Texture,\n        left?: Texture,\n        right?: Texture,\n        up?: Texture\n    } = {};\n    private abstract: Texture;\n    private kiss: Texture;\n    private myAudio: HTMLAudioElement;\n    private spheremap: Texture;\n    private overlay: Texture;\n\n    private flood: Texture;\n\n    // move\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private accumulationBuffer: Uint32Array;\n    private scene: CubeScene;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.scene = new CubeScene();\n        return Promise.all([\n            this.scene.init(framebuffer),\n            this.createTexture(require('../../assets/flood.png'), false).then(texture => this.flood = texture),\n           \n            this.createTexture(require('../../assets/kiss.png'), true).then(texture => this.kiss = texture),\n            this.createTexture(require('../../assets/spheremap.png'), false).then(texture => this.spheremap = texture),\n            this.createTexture(require('../../assets/textures/metall.png'), false).then(texture => this.metal = texture),\n            this.createTexture(require('../../assets/logo.png'), false).then(texture => this.texture = texture),\n            this.createTexture(require('../../assets/razor1911.png'), true).then(texture => this.texture2 = texture),\n            this.createTexture(require('../../assets/heightmap.png'), false).then(texture => this.heightmap = texture),\n            this.createTexture(require('../../assets/metalheadz.png'), false).then(texture => this.metalheadz = texture),\n            this.createTexture(require('../../assets/font.png'), true).then(texture => this.texture4 = texture),\n            this.createTexture(require('../../assets/atlantis.png'), false).then(texture => this.texture5 = texture),\n            this.createTexture(require('../../assets/lens.png'), true).then(texture => this.texture6 = texture),\n            this.createTexture(require('../../assets/ball2.png'), true).then(texture => this.texture7 = texture),\n            this.createTexture(require('../../assets/pandabear.png'), false).then(texture => this.texture8 = texture),\n            this.createTexture(require('../../assets/battleofilona.png'), false).then(texture => this.texture9 = texture),\n            this.createTexture(require('../../assets/spark.png'), true).then(texture => this.texture10 = texture),\n            this.createTexture(require('../../assets/ring.png'), true).then(texture => this.texture11 = texture),\n            this.createTexture(require('../../assets/sky.png'), true).then(texture => this.texture12 = texture),\n            this.createTexture(require('../../assets/bokeh.png'), true).then(texture => this.texture13 = texture),\n            this.createTexture(require('../../assets/led.png'), false).then(texture => this.texture14 = texture),\n            this.createTexture(require('../../assets/revision.png'), false).then(texture => this.revision = texture),\n            this.createTexture(require('../../assets/lab2.png'), false).then(texture => this.lab2 = texture),\n\n            this.createTexture(require('../../assets/skybox/skybox_back.png'), false).then(texture => this.skybox.back = texture),\n            this.createTexture(require('../../assets/skybox/skybox_down.png'), false).then(texture => this.skybox.down = texture),\n            this.createTexture(require('../../assets/skybox/skybox_front.png'), false).then(texture => this.skybox.front = texture),\n            this.createTexture(require('../../assets/skybox/skybox_left.png'), false).then(texture => this.skybox.left = texture),\n            this.createTexture(require('../../assets/skybox/skybox_right.png'), false).then(texture => this.skybox.right = texture),\n            this.createTexture(require('../../assets/skybox/skybox_up.png'), false).then(texture => this.skybox.up = texture),\n\n            this.createTexture(require('../../assets/platonian_baked.png'), false).then(texture => this.platonian = texture),\n            this.createTexture(require('../../assets/meth.png'), true).then(texture => this.meth = texture),\n            this.createProceduralTexture().then(texture => this.texture15 = texture),\n            this.createProceduralTexture2().then(texture => this.particleTexture = texture),\n            this.createProceduralTexture3().then(texture => this.particleTexture2 = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n            this.createProceduralDisplacementMap().then(texture => this.displacementMap = texture),\n            this.createTexture(require('../../assets/hoodlumLogo.png'), true).then(texture => this.hoodlumLogo = texture),\n            this.createTexture(require('../../assets/abstract.png'), false).then(texture => this.abstract = texture),\n            this.createTexture(require('../../assets/rave.png'), false).then(texture => this.rave = texture),\n            this.createTexture(require('../../assets/microstrange.png'), false).then(texture => this.micro = texture),\n            this.createTexture(require('../../assets/Backed.png'), false).then(texture => this.baked = texture),\n            this.createTexture(require('../../assets/blurredBackground.png'), false).then(texture => this.blurred = texture),\n            this.createTexture(require('../../assets/hlm.png'), true).then(texture => this.hlm = texture),\n            this.createTexture(require('../../assets/cross.png'), true).then(texture => this.cross = texture),\n            this.createTexture(require('../../assets/envmap.png'), false).then(texture => this.envmap = texture),\n            this.createTexture(require('../../assets/heightmapSphere.png'), false).then(texture => this.heightmapSphere = texture),\n            this.createTexture(require('../../assets/mask.png'), true).then(texture => this.mask = texture),\n            this.createTexture(require('../../assets/dirt.png'), true).then(texture => this.dirt = texture),\n            this.createTexture(require('../../assets/haujobb-overlay.png'), true).then(texture => this.overlay = texture),\n\n        ]).then(() => {\n            // Web Audio API\n            // FIXME: put this into a Player Class\n            framebuffer.precompute(this.heightmap );\n\n            const audioContext = new AudioContext();\n            const request = new XMLHttpRequest();\n            request.open('GET', require('../../assets/sound/xmix_q2_final.ogg').default, true);\n            request.responseType = 'arraybuffer';\n            request.onload = () => {\n                const undecodedAudio = request.response;\n                audioContext.decodeAudioData(undecodedAudio,\n                    (buffer) => {\n                        const sourceBuffer = audioContext.createBufferSource();\n                        sourceBuffer.buffer = buffer;\n                        sourceBuffer.connect(audioContext.destination);\n                        sourceBuffer.loop = true;\n                        sourceBuffer.start(audioContext.currentTime);\n                        this.start = Date.now();\n                    });\n            };\n\n            request.send();\n        });\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const currentTime: number = Date.now();\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        // waves\n        {\n            framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n            framebuffer.drawParticleWaves(currentTime, this.particleTexture2, true);\n\n            const texture3 = new Texture(this.accumulationBuffer, 320, 200);\n            framebuffer.drawTexture(0, 0, texture3, 0.85);\n            framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n            framebuffer.noise(currentTime, this.noise);\n        }\n      \n    \n        {\n            framebuffer.pixelate();\n        }\n        {\n                        // SCALE\n                        let texture = new Texture();\n                        texture.texture = this.accumulationBuffer;\n                        texture.width = 320;\n                        texture.height = 200;\n          \n                        let scale2 = (1+Math.sin(currentTime*0.001))*0.5*10+1;\n                        let width2 = 320 *  scale2;\n                        let height2 = 200 * scale2;\n          \n                        // looks crappy with linear interpolation!\n                        // probably  bilinear is required here\n          \n          \n                            framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n                            framebuffer.drawScaledTextureClipBi(\n                                Math.round(320/2-width2/2),\n                                Math.round(200/2-height2/2),\n                                width2|0, height2|0, texture, 1.0);\n        }\n   \n        // TODO:\n        // * build level in code (portals and areas)\n        // * use controllable camera to move\n        // TODO: Front Mission Modell in Blender\n        /**\n         * TODO:\n         * - Draw Vector ART in SVG Inkscape\n         * - Vectorize with Blender and Display\n         */\n        /**\n         * TODO:\n         * - transition effects with alpha layer\n         * - wormhole particle tunnel\n         * - rubiks cube animation :-)\n         * - cube with animated texture\n         * - Oldskool amiga screen with disk loading and decrunching\n         * - screen exploding intro cubes\n         * - Split red green and blue channels and displace them in x direction\n         */\n        /**\n         * TODO:\n         * - Stripe landscape: http://farm3.static.flickr.com/2653/5710494901_2ca6ddbfb2_b.jpg\n         *   maybe with sync to bass and fft\n         * - Blender modells (Flat, textured, GI baked)\n         * - particle tunnel\n         * - ribbons on curves\n         * - dof\n         */\n        // TS SoftSynth Project\n        // http://natureofcode.com/book/\n        // https://noisehack.com/generate-noise-web-audio-api/\n        // https://noisehack.com/custom-audio-effects-javascript-web-audio-api/\n        // https://noisehack.com/how-to-build-supersaw-synth-web-audio-api/\n        // https://noisehack.com/build-music-visualizer-web-audio-api/\n        // https://noisehack.com/how-to-build-monotron-synth-web-audio-api/\n        // https://davidwalsh.name/web-audio-api\n        // https://codepen.io/gregh/post/recreating-legendary-8-bit-games-music-with-web-audio-api\n        // https://developer.mozilla.org/en-US/docs/Games/Techniques/Audio_for_Web_Games\n        // https://www.html5rocks.com/en/tutorials/webaudio/intro/\n\n        // TODO:\n        // - Progress Bar for Loading\n        // - Web Audio API\n        // - blasphemy line sphere with particles and blur\n        // - fractal landscape fade in / out\n        // - particle emitter\n        // - plane deformation on rendererd scenes\n        // - alpha blend between different or same scene\n        // - fade to white\n        // - spike ball / particle and 3d mesh with normals\n        // - glow\n        // - kewlers cube torus\n        // - kewlsers recht billboard spikeball\n        // - kewslers rect billboard cylinder\n        // seminars:\n        // - https://www.youtube.com/playlist?list=PLwbFJIXXSsXvbpDxOaaBrxSBdLUW1hdax\n        // - https://www.youtube.com/watch?v=XZLqwXdXjqY\n        // - https://www.youtube.com/watch?v=nt-BpAYMeJs&list=PLNqQO7lFY6dmH5kMSWtuRP6ZhBiQdQIU1&index=5\n        // - https://www.youtube.com/watch?v=WgUkCRvti3Y&list=PLNqQO7lFY6dlPOg7cA1SczEU0Y7UW6iMW\n        // - https://www.youtube.com/watch?v=7wYq6O-g2U8&list=PLNqQO7lFY6dm_GROVFIZ6C6mUINMnlpyC\n        // - https://www.youtube.com/watch?v=hszyYAT5R1Q&list=PLNqQO7lFY6dm_GROVFIZ6C6mUINMnlpyC&index=5\n        // - https://www.youtube.com/watch?v=4Q5sgNCN2Jw&list=PL2EEF025A89BAA0FC\n        // - https://www.youtube.com/watch?v=TbcZyAO6K7c\n        // - https://www.youtube.com/watch?v=2p2JcHzRlJU\n        // - https://www.youtube.com/watch?v=QT2ftidLTn4\n        // - https://www.youtube.com/watch?v=Oo-jlpvhTcY\n\n\n  \n                 \n\n        // NEW EFFECTS:\n        // * https://www.youtube.com/watch?v=bg-MTl_nRiU\n        // * SPIKEBALL KYLE\n        // plane deformation with texture to LED\n        // 16 / 9 --> 320 x 180\n\n\n        /*\n        this.framebuffer.setCullFace(CullFace.BACK);\n        //this.framebuffer.drawBlenderScene(time, this.texture4, this.particleTexture2);\n        this.framebuffer.setBob(this.spheremap);\n        this.framebuffer.drawPlanedeformationTunnelV2(time, this.abstract, this.metal);\n        this.framebuffer.shadingSphereEnv(time*0.0002);\n         this.framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n        */\n\n        /**\n         * Inspiration:\n         * - https://www.youtube.com/watch?v=7kLNXg4BmM8\n         * - https://www.youtube.com/watch?v=PLrio-uwvwk\n         * - https://www.youtube.com/watch?v=XJKDb4ByZ7Y\n         */\n        /**\n         * TODO:\n         * - http://sol.gfxile.net/gp/ch18.html\n         * - http://insolitdust.sourceforge.net/code.html\n         * - http://sol.gfxile.net/sphere/index.html\n         * - http://4matprojects.blogspot.de/\n         * - http://sol.gfxile.net/particle/index.html\n         * - http://sol.gfxile.net/gp/ch19.html\n         * - http://www.flipcode.com/archives/The_Art_of_Demomaking-Issue_07_Bump_Mapping.shtml\n         * - http://sol.gfxile.net/interpolation/index.html\n         * - http://adrianboeing.blogspot.de/2011/06/deform-textured-interference-effect-in.html\n         * - particle ball pulsating (https://www.youtube.com/watch?v=NPZEkhtXhgE)\n         * - metaballs\n         * - particle stream\n         * - scene with baked lighting & wobbling ball & camera animation\n         * - DOF flares\n         * - demo tool http://peisik.untergrund.net/engines/\n         * - https://www.youtube.com/watch?v=ghX1-EUx-fQ&index=7&list=PLPnuj18PSHazbti_tw1zoQ23fqx8-ZZP7 (min 15)\n         */\n\n        //  this.framebuffer.cinematicScroller(this.texture4, time);\n        //  this.framebuffer.drawTextureScaledLame(0,0, 16,16, this.texture7);\n        // http://doc.babylonjs.com/tutorials/discover_basic_elements\n\n        // implement modells with baked shaods and lighting :)\n        // http://iquilezles.org/www/index.htm\n        // http://iquilezles.org/www/articles/normals/normals.htm\n        // http://iquilezles.org/www/articles/areas/areas.htm\n        // http://iquilezles.org/www/articles/frustum/frustum.htm\n        // http://iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm\n        // http://iquilezles.org/www/articles/deform/deform.htm\n        // http://www.gamers.org/dEngine/quake/papers/ddjzsort.html\n        // http://fabiensanglard.net/quakeSource/quakeSourceRendition.php\n\n        //  this.framebuffer.shadingSphereClip((time ) * 0.003);\n        // this.framebuffer.cinematicScroller(this.texture4, time );\n        //   this.framebuffer.drawText(8, 192 - 18, 'TRIANGLE NEAR PLANE CLIPPING', this.texture4);\n\n        // TODO:\n        // - textured cube / dynamic textures\n        // - skybox\n        // - specular highlights\n        // - 3d bobs (with shadows)\n        // - plane deformation effect\n        // - sine scroller (color bar texture)\n        // - dot tunnel\n        // - 2d / 3d start field\n        // - 2d vector start\n        // - wobble logo\n        // - text writer\n        // - scroller / sine scroller\n        // - fractalplasma fade in\n        // - water effect\n        // - cross fade\n        // - 2d bump mapping ( maybe on 3d object)\n        // - smooth shading (gouraud)\n        // - voxel landscape with color\n        // - metaballs\n        // - rasterbars\n        // - 3d particles / 3d particle collision\n        // - vector morphing\n        // - voxel tunnel / sphere / torus\n        // - stencil vectors\n        // - chess zoomer / chess waver\n        // - raycaster\n\n        // this.framebuffer.fastFramebufferCopy(this.framebuffer.framebuffer, this.texture5.texture);\n        // this.framebuffer.shadingTorus2(time * 0.02);\n        // this.framebuffer.drawTexture(32, 60, this.texture2, 1.0);\n\n        // this.framebuffer.clear();\n\n        // this.framebuffer.wireFrameTerrain(time*0.01, this.texture3);\n        // this.framebuffer.pixelate();\n\n\n\n        //     this.framebuffer.wireFrameTerrain(time*0.008,this.texture3);\n        //    this.framebuffer.cinematicScroller(this.texture4, time );\n        // todo: radial blur -> pouet.net\n\n        // http://www.cubic.org/docs/camera.htm\n        // http://www.cubic.org/docs/3dclip.htm\n        // http://www.cubic.org/docs/backcull.htm\n\n        // this.framebuffer.addReflections();\n\n        // this.framebuffer.drawRaster();\n        // this.framebuffer.enableBackfaceCulling();\n        // this.framebuffer.setCullFace(FRONT);\n\n        // TODO: text\n        // 3d line clipping for fly by :)\n        // different transitions:\n        // - stripes etc\n        // - chessboard\n        // wobble logo\n        // ball 3d with precalculated sizes lookup\n        // starfield 2d /3d\n        // wormhole\n        // glitch logo\n    }\n\n    // Move\n    public createProceduralTexture(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    texture.texture[x + y * 256] = (rng.getFloat() * 256) | 0 | 255 << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    // Move\n    public createProceduralTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n    public createProceduralTexture3(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n\n    // Move\n    public createProceduralDisplacementMap(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            texture.texture.fill(128 | 255 << 24);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = (texture.texture[x + y * 256] & 0xffffff00) | texture.texture[x + y * 256] & 0xff + (c * 255);\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public createTexture(path: any, hasAlpha: boolean): Promise<Texture> {\n        return new Promise<Texture>(((resolve: (texture?: Texture) => void): void => {\n            const img = new Image();\n            img.onload = () => {\n                const texture = new Texture();\n                texture.texture = this.getImageData(img, hasAlpha);\n                texture.width = img.width;\n                texture.height = img.height;\n                resolve(texture);\n            };\n            img.onerror = () => resolve();\n            img.src = path.default;\n        }));\n    }\n\n    getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data = context.getImageData(0, 0, image.width, image.height).data;\n        const conv = new Uint32Array(data.length / 4);\n        let c = 0;\n        for (let i = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { \n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n       \n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                    \n                \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                   \n                   \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n                /*\n                                const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n                                    v.projection = this.project(v.position);\n                                    return v;\n                                });*/\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n                  \n\n                    this.clipConvexPolygon2(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // TODO: remove temp object here\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.projection = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].projection, projected[1].projection, projected[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon2(framebuffer, projected);\n    }\n\n\n    public clipConvexPolygon2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename.default;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { Scene } from './Scene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new Scene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","end","current","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawParticleWaves","noClear","num","cos","forEach","multiply","sort","a","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","y2","mu","mu2","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","sub","temp","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","CubeScene","AbstractScene","renderingPipeline","cubeMesh","Cube","GouraudShadingRenderingPipeline","Promise","all","BACKGROUND_COLOR","renderCube","draw","getMesh","getModelViewMatrix","renderBackground","Scene","mask","texture2","heightmap","heightmapSphere","texture4","texture5","baked","texture6","texture7","texture8","texture9","texture10","metalheadz","platonian","texture11","texture12","texture13","texture14","texture15","revision","lab2","hoodlumLogo","blurred","envmap","particleTexture","particleTexture2","rave","metal","micro","hlm","meth","displacementMap","cross","skybox","abstract","kiss","myAudio","spheremap","overlay","flood","fpsStartTime","fpsCount","fps","accumulationBuffer","createTexture","back","down","front","left","right","up","createProceduralTexture","createProceduralTexture2","createProceduralTexture3","TextureUtils","generateProceduralNoise","createProceduralDisplacementMap","audioContext","AudioContext","request","XMLHttpRequest","open","responseType","onload","undecodedAudio","response","decodeAudioData","buffer","sourceBuffer","createBufferSource","connect","destination","loop","currentTime","send","texture3","scale2","width2","height2","resolve","dx","dy","c","path","hasAlpha","img","Image","onerror","default","image","withAlpha","drawImage","conv","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","normalize","faces","n1","n2","n3","transformedPoints","map","transformedNormals","AbstractGeometricObject","super","invert","frame","frame2","Matrix3f","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","distance","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","mat","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setFog","setLights","enableLighting","enable","setMaterial","setColor","drawMeshArray","meshes","model","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","point","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","normals2","vertices","uv","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","filename","transparency","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","definition","key","o","Object","defineProperty","enumerable","get","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}