{"version":3,"file":"environment-mapping-waves.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/environment-mapping-waves/DistortedSphereScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/environment-mapping-waves/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f, Vector4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { Vertex } from '../../Vertex';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\ninterface IndexMesh {\n    points: Array<Vector4f>,\n    points2: Array<Vector4f>,\n    normals: Array<Vector4f>,\n    normals2: Array<Vector4f>,\n    index: Array<number>\n}\n\nexport class EnvironmentMappingScene extends AbstractScene {\n\n    private blurred: Texture;\n\n    private env: Texture;\n    private obj: IndexMesh;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        return Promise.all([\n    \n            TextureUtils.load(require('../../assets/flood.png'), false).then(\n                texture => this.blurred = texture\n            ),\n            TextureUtils.load(require('../../assets/envmap.png'), false).then(\n                texture => this.env = texture\n            ),\n        ]).then(() => this.plane = this.createPlane());\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.env);\n        this.shadingPlaneEnv(framebuffer, time * 0.001, this.plane);\n    }\n\n    public shadingPlaneEnv(framebuffer: Framebuffer, elapsedTime: number, plane: IndexMesh): void {\n\n        framebuffer.wBuffer.fill(100);\n      \n\n        let result = plane;\n\n        elapsedTime *= 0.2;\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n        elapsedTime *= 5;\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector4f = new Vector4f(0, 0, 0);\n        let norm2: Vector4f = new Vector4f(0, 0, 0);\n        let cross: Vector4f = new Vector4f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector4f = points[index[i]];\n            let v2: Vector4f = points[index[i + 1]];\n            let v3: Vector4f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 3.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 3.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -200 + Math.sin(elapsedTime * 1.9) * 0)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector4f> = result.points2;\n        let normals2: Array<Vector4f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyHomArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            points2[p].x = Math.round((framebuffer.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((framebuffer.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (framebuffer.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].projection = v1;\n                framebuffer.fakeSphere(n1, vertex1);\n\n                vertexArray[1].projection = v2;\n                framebuffer.fakeSphere(n2, vertex2);\n\n                vertexArray[2].projection = v3;\n                framebuffer.fakeSphere(n3, vertex3);\n/*\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {*/\n                framebuffer.texturedTriangleRasterizer.drawTriangleDDA(framebuffer, vertexArray[0], vertexArray[1], vertexArray[2]);\n               // }\n            }\n        }\n    }\n    \n\n\n    public createPlane() {\n\n        const k = {\n            points: []\n        };\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector4f(0 + x, 0 + y, 0));\n                k.points.push(new Vector4f(0 + x, 1 + y, 0));\n                k.points.push(new Vector4f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector4f(1 + x, 0 + y, 0));\n                k.points.push(new Vector4f(0 + x, 1 + y, 0));\n                k.points.push(new Vector4f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        const points: Array<Vector4f> = [];\n        const points2: Array<Vector4f> = [];\n        const normals: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector4f(0, 0, 0));\n            normals2.push(new Vector4f(0, 0, 0));\n            points2.push(new Vector4f(0, 0, 0));\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        };\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { EnvironmentMappingScene } from './DistortedSphereScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new EnvironmentMappingScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","forEach","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","cos","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","EnvironmentMappingScene","AbstractScene","blurred","env","obj","Promise","all","TextureUtils","load","createPlane","shadingPlaneEnv","result","scale2","normals","norm","norm2","cross","sub2","cross2","add2","normalize2","normals2","normalMatrix","computeNormalMatrix","n","multiplyHomArr","vertex1","Vertex","vertex2","vertex3","vertexArray","n1","n2","n3","drawTriangleDDA","point","find","pointVar","idx","indexOf","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normalize","faces","transformedPoints","map","transformedNormals","getMesh","AbstractGeometricObject","invert","super","frame","frame2","up","right","current","y2","mu","mu2","Matrix3f","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","multiply","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","inverseTranslation","constructIdentityMatrix","scale1","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","vec1","vec2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","sphereMapping","setSphereMapping","arg0","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","draw","vertices","project2","uv","clipConvexPolygon","zClipTriangle","computeNearPlaneIntersection2","subject","input","output","S","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","window","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}