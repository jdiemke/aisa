{"version":3,"file":"feedback-radial-blur.js","mappings":"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","sources":["webpack://aisa/./src/assets/cocoon.png","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/feedback-radial-blur/FeedbackRadialBlur.ts","webpack://aisa/./src/examples/torus-knot-tunnel/TorusKnotTunnelScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/geometrical-objects/TorusKnot.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/fog/Fog.ts","webpack://aisa/./src/shading/fog/LinearFog.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/feedback-radial-blur/Application.ts"],"sourcesContent":["export default __webpack_public_path__ + \"7fe555ee73184c72e031821a22f0d544.png\";","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop(0);\n            }\n        );\n    }\n\n    public renderLoop(time: number): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n    // public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n        // this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n        // this.plane = this.createPlane();\n        // this.cylinder = this.createCylinder();\n        // this.cylinder2 = this.createCylinder2(texture);\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array) {\n        src.set(dest);\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        const distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                const angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                const color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                const angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                const color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        const index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        const points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        const scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach((element) => {\n            const transformed = modelViewMartrix.multiply(element);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            const color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    public drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                const distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                const waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                const intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n\n\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            let yy = (this.height * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(this.height * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n\n    public createPlane() {\n\n        const k = {\n            points: []\n        };\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        };\n    }\n\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n\n    public createCylinder2(texture: Texture) {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xpos = (x / LOOPX * 256) & 0xff;\n                const xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                const ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                const ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                const x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                const x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                const x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                const x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                const x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                const x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(x0 * x0y0, 0 + y, z0 * x0y0));\n                k.points.push(new Vector3f(x0 * x0y1, 1 + y, z0 * x0y1));\n                k.points.push(new Vector3f(x1 * x1y0, 0 + y, z1 * x1y0));\n\n                k.points.push(new Vector3f(x1 * x1y0, 0 + y, z1 * x1y0));\n                k.points.push(new Vector3f(x0 * x0y1, 1 + y, z0 * x0y1));\n                k.points.push(new Vector3f(x1 * x1y1, 1 + y, z1 * x1y1));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        };\n    }\n\n\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Vector3f } from './math';\n\nexport class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture';\nimport { TorusKnotTunnelScene } from '../torus-knot-tunnel/TorusKnotTunnelScene';\n\nexport class FeedbackRadialBlur extends AbstractScene {\n\n    private tunnelScene: TorusKnotTunnelScene = new TorusKnotTunnelScene();\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n\n        return Promise.all([\n            this.tunnelScene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.tunnelScene.render(framebuffer, time);\n        this.applyRadialBlur(framebuffer, time);\n    }\n\n    private applyRadialBlur(framebuffer: Framebuffer, time: number): void {\n        const texture: Texture = new Texture();\n\n        texture.texture = this.accumulationBuffer;\n        texture.width = 320;\n        texture.height = 200;\n\n        const scaleX = 1.018;\n        const scaleY = 1.018;\n        const width = 320 * scaleX;\n        const height = 200 * scaleY;\n\n        const alphaScale = (Math.sin(time * 0.00005) * 0.5) + 0.5;\n\n        framebuffer.drawScaledTextureClipBi(\n            Math.round(320 / 2 - width / 2),\n            Math.round(200 / 2 - height / 2),\n            width, height, texture, 1.0 * alphaScale\n        );\n\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector3f, } from '../../math/Vector3f';\nimport { Vector4f } from '../../math/Vector4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Fog } from '../../shading/fog/Fog';\nimport { LinearFog } from '../../shading/fog/LinearFog';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusKnotTunnelScene extends AbstractScene {\n\n    private noise: Texture;\n    private particleTexture: Texture;\n    private cocoon: Texture;\n    private torusKnot: TorusKnot = new TorusKnot(true);\n    private fog: Fog = new LinearFog(-50, -240, new Vector4f(0.67, 0.4, 0.5, 1.0));\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.renderingPipeline.setFog(this.fog);\n\n        return Promise.all([\n            TextureUtils.generateProceduralNoise().then((texture: Texture) => this.noise = texture),\n            TextureUtils.load(require('../../assets/cocoon.png'), false).then(\n                (texture: Texture) => this.cocoon = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture2().then(\n                (texture: Texture) => this.particleTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.torusTunnel(framebuffer, time * 0.019, this.particleTexture);\n        framebuffer.drawScaledTextureClipAdd(\n            framebuffer.width / 2 - this.cocoon.width / 2,\n            framebuffer.height / 2 - this.cocoon.height / 2,\n            this.cocoon.width, this.cocoon.height, this.cocoon, 0.67);\n\n        // framebuffer.noise(time, this.noise);\n        this.glitchScreen(framebuffer, time * 5, this.noise);\n    }\n\n    public glitchScreen(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.00002) * 0.9 + 0.1);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        const texture2 = new Texture();\n        texture2.height = framebuffer.height;\n        texture2.width = framebuffer.width;\n        texture2.texture = framebuffer.framebuffer;\n\n\n        const blockWidth = 20;\n        const horizontalUnits = Math.floor(framebuffer.width / blockWidth);\n        const verticalUnits = Math.floor(framebuffer.height / blockWidth);\n\n        for (let x = 0; x < horizontalUnits; x++) {\n            for (let y = 0; y < verticalUnits; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                framebuffer.drawTextureRect(blockWidth * (horizontalUnits - x), blockWidth * ((horizontalUnits * rng.getFloat()) | 0), blockWidth * x, blockWidth * y, blockWidth, blockWidth, texture2.texture, texture2.width, 0.03 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                for (let y = 0; y < verticalUnits; y++) {\n                    framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, blockWidth * (Math.round(elapsedTime / 100 + x + y) % 12), 0, blockWidth, blockWidth, texture.texture, texture.width, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.tmpGlitch, framebuffer.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n        const rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            const scale = rng2.getFloat() * glitchFactor;\n            const off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * framebuffer.width;\n                let glIndex = yStart * framebuffer.width + framebuffer.width - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n\n                glIndex = yStart * framebuffer.width;\n                const count = framebuffer.width - offset;\n\n                for (let i = 0; i < count; i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n    public torusTunnel(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        framebuffer.clearDepthBuffer();\n\n        const scale = 1.0;\n        const lookAhead: number = 0.4;\n\n        const frame = this.torusFunction3(elapsedTime * 0.02);\n        const frame2 = this.torusFunction3(elapsedTime * 0.02 + lookAhead);\n\n        const tangent = frame2.sub(frame).normalize();\n        let up = frame.add(frame2).normalize();\n        const right = tangent.cross(up).normalize();\n        up = right.cross(tangent).normalize();\n\n        const translation = Matrix4f.constructIdentityMatrix();\n        // translation vector\n        translation.m14 = -frame.x;\n        translation.m24 = -frame.y;\n        translation.m34 = -frame.z;\n\n        const rotation = Matrix4f.constructIdentityMatrix();\n        // x vector\n        rotation.m11 = right.x;\n        rotation.m21 = right.y;\n        rotation.m31 = right.z;\n\n        // y vector\n        rotation.m12 = up.x;\n        rotation.m22 = up.y;\n        rotation.m32 = up.z;\n\n        // z vector\n        rotation.m13 = -tangent.x;\n        rotation.m23 = -tangent.y;\n        rotation.m33 = -tangent.z;\n\n        const finalMatrix = rotation.transpose().multiplyMatrix(translation);\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -10).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04)));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(elapsedTime * 0.01).multiplyMatrix(finalMatrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torusKnot.getMesh(), modelViewMartrix);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2;\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Mesh } from './Mesh';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor(inverse: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            const tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize();\n            const right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        this.buildMesh(points, index, inverse);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(modelView: Matrix4f): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n        // modelView.multiplyArr(new Vector3f(20, 8, 20),lightPosition);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else if (p2.projection.y === p3.projection.y) {\n            if (p2.projection.x > p3.projection.x) {\n                this.temp = p2;\n                p2 = p3;\n                p3 = this.temp;\n            }\n            this.fillBottomFlatTriangle(framebuffer, p1, p2, p3);\n        } else if (p1.projection.y === p2.projection.y) {\n            if (p1.projection.x > p2.projection.x) {\n                this.temp = p1;\n                p1 = p2;\n                p2 = this.temp;\n            }\n            this.fillTopFlatTriangle(framebuffer, p1, p2, p3);\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) *\n                (p2.projection.y - p1.projection.y) / (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer, p1, p2, p3);\n            }\n        }\n    }\n\n    private fillBottomFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        const yDistance: number = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistance;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, color);\n    }\n\n    fillTopFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n        const yDistance = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistance;\n\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v2.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, color);\n    }\n\n\n    fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else if (p2.projection.y === p3.projection.y) {\n            if (p2.projection.x > p3.projection.x) {\n                this.temp = p2;\n                p2 = p3;\n                p3 = this.temp;\n            }\n            this.fillBottomFlatTriangle(framebuffer, p1, p2, p3);\n        } else if (p1.projection.y === p2.projection.y) {\n            if (p1.projection.x > p2.projection.x) {\n                this.temp = p1;\n                p1 = p2;\n                p2 = this.temp;\n            }\n            this.fillTopFlatTriangle(framebuffer, p1, p2, p3);\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) *\n                (p2.projection.y - p1.projection.y) / (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer, p1, p2, p3);\n            }\n        }\n    }\n\n    private fillBottomFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const yDistance: number = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistance;\n\n        this.colorInterpolator1.setup(v1.color, v2.color, yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, yDistance);\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, this.colorInterpolator1, this.colorInterpolator2);\n    }\n\n    private fillTopFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const yDistance = v3.projection.y - v1.projection.y;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistance;\n\n\n        this.colorInterpolator1.setup(v1.color, v3.color, yDistance);\n        this.colorInterpolator2.setup(v2.color, v3.color, yDistance);\n\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v2.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, this.colorInterpolator1, this.colorInterpolator2);\n    }\n\n    private fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.colorInterpolator1.setup(v1.color, v2.color, yDistanceLeft);\n        this.colorInterpolator2.setup(v1.color, v3.color, yDistanceRight);\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, this.colorInterpolator1, this.colorInterpolator2);\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.colorInterpolator3.setup(v2.color, v3.color, yDistanceLeft);\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, this.colorInterpolator3, this.colorInterpolator2);\n\n    }\n\n\n    fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.colorInterpolator2.setup(v1.color, v2.color, yDistanceRight);\n        this.colorInterpolator1.setup(v1.color, v3.color, yDistanceLeft);\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, this.colorInterpolator1, this.colorInterpolator2);\n\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.colorInterpolator3.setup(v2.color, v3.color, yDistanceRight);\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, this.colorInterpolator1, this.colorInterpolator3);\n\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator) {\n        for (let i = 0; i < distance; i++) {\n            const length = Math.round(this.xPosition2) - Math.round(this.xPosition);\n            this.rowColorInterpolator.setup(\n                colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition);\n            const spanzStep = (this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] =\n                        this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.startColor.r += this.rowColorInterpolator.colorSlope.r;\n                this.rowColorInterpolator.startColor.g += this.rowColorInterpolator.colorSlope.g;\n                this.rowColorInterpolator.startColor.b += this.rowColorInterpolator.colorSlope.b;\n            }\n\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n\n            colorInterpolator1.startColor.r += colorInterpolator1.colorSlope.r;\n            colorInterpolator1.startColor.g += colorInterpolator1.colorSlope.g;\n            colorInterpolator1.startColor.b += colorInterpolator1.colorSlope.b;\n\n            colorInterpolator2.startColor.r += colorInterpolator2.colorSlope.r;\n            colorInterpolator2.startColor.g += colorInterpolator2.colorSlope.g;\n            colorInterpolator2.startColor.b += colorInterpolator2.colorSlope.b;\n\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\n\nexport class TexturedTriangleRasterizer {\n\n    private temp: Vertex = null;\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.position.y > p3.position.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } else {\n            const x: number = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) /\n                (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(framebuffer, p1, p2, p3);\n            } else {\n                const tex = p1.textureCoordinate;\n                const tex2 = p2.textureCoordinate;\n                const tex3 = p3.textureCoordinate;\n\n                this.fillLongLeftTriangle2(\n                    framebuffer,\n                    p1.position,\n                    p2.position,\n                    p3.position,\n                    new Vector3f(tex.u, tex.v, 0),\n                    new Vector3f(tex2.u, tex2.v, 0),\n                    new Vector3f(tex3.u, tex3.v, 0)\n                );\n            }\n        }\n    }\n\n    private fillLongRightTriangle2(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n\n\n\n\n        const yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        const slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    fillLongLeftTriangle2(framebuffer: Framebuffer, v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        const yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        const slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        const tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        const tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        const zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curx1 = v1.x;\n        let curx2 = v1.x;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curx2 = v2.x;\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curx1 += slope1;\n            curx2 += slope2;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n                /*\n                                const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n                                    v.projection = this.project(v.position);\n                                    return v;\n                                });*/\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector3f } from '../math/Vector3f';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Vector3f} v1\n     * @param {Vector3f} v2\n     * @param {Vector3f} v3\n     * @param {number} color\n     * @returns {void}\n     * @memberof Framebuffer\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f, Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Fog {\n\n    public abstract computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Fog } from './Fog';\n\nexport class LinearFog extends Fog {\n\n    private zStart: number;\n    private zEnd: number;\n    private fogColor: Vector4f;\n\n    public constructor(zStart: number, zEnd: number, fogColor: Vector4f) {\n        super();\n        this.zStart = zStart;\n        this.zEnd = zEnd;\n        this.fogColor = fogColor;\n    }\n\n    public computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f {\n        if (vertex.z >= this.zStart) {\n            return color;\n        } else if (vertex.z <= this.zEnd) {\n            return this.fogColor;\n        } else {\n            const f: number = (this.zEnd - vertex.z) / (this.zEnd - this.zStart);\n            return new Vector4f(\n                color.x * f + this.fogColor.x * (1 - f),\n                color.y * f + this.fogColor.y * (1 - f),\n                color.z * f + this.fogColor.z * (1 - f)\n            );\n        }\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Color } from '../../core/Color';\nimport { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        const x0 = Math.min(x | 0, this.width - 1);\n        const x1 = Math.min((x | 0) + 1, this.width - 1);\n        const y0 = Math.min(y | 0, this.height - 1);\n        const y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename.default;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { FeedbackRadialBlur } from './FeedbackRadialBlur';\n\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new FeedbackRadialBlur());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","time","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","end","current","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","drawPolarDistotion2","elapsedTime","distScale","xdist","ydist","dist","sqrt","angle","atan2","PI","color1","drawPolarDistotion3","noise","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","mHeight","drawTextureNoClipAlpha","scene8","points","modelViewMartrix","Matrix3f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","points2","forEach","transformed","multiply","push","nearPlaneClipping","project","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","STEPS2","sphereFunction2","Matrix4f","constructTranslationMatrix","p","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","dist2","cosineInterpolate","final","drawLedTunnel","distance","intensity","drawParticleWaves","noClear","num","cos","sort","a","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","y2","mu","mu2","createPlane","normals","normals2","point","find","pointVar","sub","idx","indexOf","createCylinder","xx2","yy2","TextureCoordinate","createCylinder2","LOOPX","xpos2","ypos","ypos2","x0y0","x1y0","x0y1","x1y1","x0","z0","z1","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","temp","theta","phi","Vector4f","seed","position","projection","drawScaledTextureClip","FeedbackRadialBlur","AbstractScene","tunnelScene","TorusKnotTunnelScene","accumulationBuffer","Promise","all","applyRadialBlur","particleTexture","cocoon","torusKnot","TorusKnot","fog","LinearFog","renderingPipeline","GouraudShadingRenderingPipeline","FRONT","setFog","TextureUtils","generateProceduralNoise","load","generateProceduralParticleTexture2","torusTunnel","glitchScreen","glitchFactor","texture2","blockWidth","horizontalUnits","verticalUnits","rng2","off","glIndex","frame","torusFunction3","frame2","tangent","normalize","up","right","cross","translation","constructIdentityMatrix","m14","m24","m34","rotation","m11","m21","m31","m12","m22","m32","m13","m23","m33","finalMatrix","transpose","constructZRotationMatrix","draw","getMesh","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","faces","n1","n2","n3","transformedPoints","map","transformedNormals","AbstractGeometricObject","invert","super","xScale","yScale","zScale","result","vector","m41","m42","m43","m44","setIdentityMatrix","computeNormalMatrix","inverseTranslation","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","modelView","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","startColor","colorSlope","setup","advance","AbstractTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","drawTriangleDDA","p1","p2","p3","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","drawSpan","yDistanceLeft","yDistanceRight","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","fillLongRightTriangle2","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","color2","curx1","curx2","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","mat","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setLights","enableLighting","enable","setMaterial","setColor","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","AbstractClipEdge","isInside","isInside2","computeIntersection","factor","computeIntersection2","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","edge","Fog","zStart","zEnd","fogColor","f","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","getPixel","getBilinearFilteredPixel","y0","col1","col2","getPixel2","interpolateComp","getPixel3","resolve","c","filename","transparency","image","Image","onload","onerror","default","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","definition","key","o","Object","defineProperty","enumerable","get","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}