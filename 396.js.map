{"version":3,"file":"396.js","mappings":"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","sources":["webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/examples/sine-scroller/SineScrollerScene.ts","webpack://aisa/./src/examples/demo/parts/Scene20.ts"],"sourcesContent":["import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawText3(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true, points: Array<Vector3f>): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha3(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine, points);\n            xpos += this.width;\n        }\n    }\n\n\n    public drawTextureRectFastAlpha3(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true, points: Array<Vector3f>): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        const speed: number = 0.07;\n        const xOff: number =(time * speed) % 1;\n        for (let w: number = startW; w < endW; w++) {\n\n            let texIndex: number = xt + w + yt * texture.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (((color & 0x00000ff)>>0) > 100) {\n\n                    const y = 0-h*1.2+4;\n                    const xpos=  (xs+w)*1.2-160-xOff*1.2;\n                    points.push(new Vector3f(\n                        xpos,\n                        Math.sin(xpos*0.06)*y+Math.sin(xpos*0.2)*1,\n                        Math.cos(xpos*0.06)*y+Math.cos(xpos*0.2)*1));\n                }\n\n                texIndex += texture.width;\n            }\n\n        }\n\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","import { Color } from '../../core/Color';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Vector2f } from '../../math/Vector2f';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { FontRenderer } from './FontRenderer';\n\nexport class SineScrollerScene extends AbstractScene {\n\n    private texture2: Texture;\n    private startTime: number;\n    private fontRenderer: FontRenderer;\n    private fontRenderer2: FontRenderer;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.startTime = Date.now();\n\n        const fonts: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ@+# ' +\n            '0123456789' +\n            '!\\'()?-/.,';\n        this.fontRenderer = new FontRenderer(\n            framebuffer,\n            32, 34, fonts,\n            require('./assets/fraxionFont.png')\n        );\n\n        const fonts2: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ 012' +\n            '3456789*:?' +\n            '!-(),\\'.+~<' +\n            '>>#// ';\n        this.fontRenderer2 = new FontRenderer(\n            framebuffer,\n            16, 18, fonts2,\n            require('./assets/anarchyFont.png')\n        );\n        /*\n                const fonts: string =\n                'ABCDEFGHIJ' +\n                'KLMNOPQRST' +\n                'UVWXYZ!?:;' +\n                '0123456789' +\n                '\"(),-.\\'@# ';\n                this.fontRenderer = new FontRenderer(\n                    framebuffer,\n                    32, 25, fonts,\n                    require('./assets/dragonsFont.png')\n                );*/\n        return Promise.all([\n            TextureUtils.load(require('../../assets/hoodlumLogo.png'), true).then(\n                (texture: Texture) => this.texture2 = texture\n            ),\n            this.fontRenderer.init(),\n            this.fontRenderer2.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawStarField(framebuffer, time);\n\n        framebuffer.drawTexture(framebuffer.width/2 - this.texture2.width/2, 0, this.texture2, 1.0);\n\n        this.fontRenderer.drawText(framebuffer, 0, 102, ' # TEAM GENESIS # IS BACK IN 2018 WITH A NEW PC FIRST! \\'STAR WARS - EMPIRE AT WAR\\' DO YOU LIKE THIS?    ', time);\n        this.fontRenderer2.drawText(framebuffer, 0, framebuffer.height - 20,\n            '   * WE REALLY LOVE SCROLLERS * HOW ABOUT YOU? THIS PRODUCTION IS FROM HOODLUM' +\n            '~< LETS GO ON WITH THE GENERAL BLAH BLAH      ', time * 1.6, false);\n\n        // animated rainbow horizontal lines\n        const horizontalUnits = framebuffer.width / 16;\n        for (let i: number = 0; i < horizontalUnits; i++) {\n            const myTime = time * 0.003;\n            const waveSum = i / horizontalUnits * 0.6;\n            const red = (Math.cos(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const green = (Math.sin(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const blue = (Math.sin(myTime) + 1.0) * 0.5 * 255;\n\n            const color: number = 255 << 24 | blue << 16 | green << 8 | red;\n            framebuffer.drawRect(i * 16, 68, 16, color);\n            framebuffer.drawRect(((horizontalUnits-1) - i) * 16, 168, 16, color);\n        }\n    }\n\n    public drawStarField(frambuffer: Framebuffer, elapsedTime: number): void {\n        const darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        const lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        const backgroundColor = 255 << 24 | 0 << 16 | 0 << 8 | 0;\n\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        const stars = new Array<Vector2f>();\n        const stars2 = new Array<Vector2f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        frambuffer.clearColorBuffer(backgroundColor);\n        frambuffer.drawRect2(0, 68, frambuffer.width, 100, Color.DARK_BLUE.toPackedFormat());\n\n        for (let i = 0; i < 100; i++) {\n            frambuffer.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % frambuffer.width, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            frambuffer.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % frambuffer.width, stars2[i].y, lightStarColor);\n        }\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { SineScrollerScene } from '../../sine-scroller/SineScrollerScene';\n\nexport class Scene20 {\n    private SineScrollerScene: SineScrollerScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.SineScrollerScene = new SineScrollerScene();\n\n        return Promise.all([\n            this.SineScrollerScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.SineScrollerScene.render(framebuffer, time);\n    }\n\n}"],"names":["FontRenderer","framebuffer","width","height","file","fontTexture","charToIndex","constructor","fonts","this","Map","x","length","addCharInex","charCodeAt","init","Promise","all","TextureUtils","load","then","texture","draw","drawTextureRectFastAlpha","drawText2","y","text","xpos","xFonts","i","asciiCode","index","has","get","tx","Math","floor","ty","drawText","time","sine","xOff","textOff","drawText3","points","drawTextureRectFastAlpha3","xs","ys","xt","yt","startW","max","endW","min","w","texIndex","h","push","Vector3f","sin","cos","yDisp","round","frIndex","color","char","set","SineScrollerScene","AbstractScene","texture2","startTime","fontRenderer","fontRenderer2","Date","now","render","drawStarField","drawTexture","horizontalUnits","myTime","waveSum","red","PI","green","drawRect","frambuffer","elapsedTime","rng","RandomNumberGenerator","setSeed","stars","Array","stars2","Vector2f","getFloat","clearColorBuffer","drawRect2","Color","DARK_BLUE","toPackedFormat","drawPixel","Scene20"],"sourceRoot":""}