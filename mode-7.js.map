{"version":3,"file":"mode-7.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/mode-7/KartAnimator.ts","webpack://aisa/./src/examples/mode-7/Keyboard.ts","webpack://aisa/./src/examples/mode-7/Mode7Entity.ts","webpack://aisa/./src/examples/mode-7/Mode7Renderer.ts","webpack://aisa/./src/examples/mode-7/Mode7Scene.ts","webpack://aisa/./src/examples/mode-7/NpcTrack.ts","webpack://aisa/./src/examples/mode-7/Sprite.ts","webpack://aisa/./src/examples/mode-7/SpriteRenderer.ts","webpack://aisa/./src/examples/mode-7/entities/NpcEntity.ts","webpack://aisa/./src/examples/mode-7/entities/Pipe.ts","webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/mode-7/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n     \n         //this.cylinder = this.createCylinder();\n       \n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array) {\n        src.set(dest);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n   \n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    \n    /*\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n*/\n   /*\n\n*/\n    \n   \n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n     /*\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Vector2f } from '../../math/Vector2f';\n\nexport class KartAnimator {\n\n    public pos: Vector2f;\n    private keyFrames: Array<Vector2f>;\n\n    public setKeyFrames(keyFrames: Array<Vector2f>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getPos(elapsedTime: number): Vector2f {\n        const keyFrameDuration: number = 700;\n\n        const first: number = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        const zero: number = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        const second: number = (first + 1) % this.keyFrames.length;\n        const third: number = (first + 2) % this.keyFrames.length;\n        const fraction: number = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        const position: Vector2f = new Vector2f(\n            this.CubicInterpolate(\n                this.keyFrames[zero].x,\n                this.keyFrames[first].x,\n                this.keyFrames[second].x,\n                this.keyFrames[third].x,\n                fraction\n            ),\n            this.CubicInterpolate(\n                this.keyFrames[zero].y,\n                this.keyFrames[first].y,\n                this.keyFrames[second].y,\n                this.keyFrames[third].y,\n                fraction\n            )\n        );\n\n        return position;\n    }\n\n    private CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = -0.5 * y0 + 1.5 * y1 - 1.5 * y2 + 0.5 * y3;\n        const a1 = y0 - 2.5 * y1 + 2 * y2 - 0.5 * y3;\n        const a2 = -0.5 * y0 + 0.5 * y2;\n        const a3 = y1;\n\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n}\n","export class Keyboard {\n\n    public static LEFT: number = 37;\n    public static UP: number = 38;\n    public static RIGHT: number = 39;\n    public static DOWN: number = 40;\n    public static KEY_A: number = 65;\n    public static KEY_D: number = 68;\n    public static KEY_L: number = 76;\n\n    private pressed: Array<boolean>;\n\n    constructor() {\n        this.pressed = new Array<boolean>(256);\n        this.pressed.fill(false);\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => this.onKeyUp(event), false);\n        window.addEventListener('keydown', (event: KeyboardEvent) => this.onKeyDown(event), false);\n    }\n\n    public isDown(code: number): boolean {\n        return this.pressed[code];\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = true;\n    }\n\n    public onKeyUp(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = false;\n    }\n\n}\n","import { Vector2f } from '../../math/index';\nimport { Texture } from '../../texture/index';\nimport { Camera } from './Mode7Renderer';\n\nexport abstract class Mode7Entity {\n\n    public position: Vector2f;\n    public height: number;\n    public priority: number;\n    public scale: number;\n    public offset: number;\n\n    public constructor(position: Vector2f, height: number = 0,\n        priority: number = 0, scale: number = 1.0, offset: number = 0) {\n        this.position = position;\n        this.height = height;\n        this.priority = priority;\n        this.scale = scale;\n        this.offset = offset;\n    }\n\n    public abstract getTexture(camera: Camera): Texture;\n\n    public abstract getAlpha(): number;\n\n    public getPriority(): number {\n        return this.priority;\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector2f } from '../../math/index';\nimport { Texture } from '../../texture/index';\n\nexport class Camera {\n\n    public position: Vector2f;\n    public angle: number;\n    public height: number;\n    public screenDistance: number;\n\n    public getViewDirection(): Vector2f {\n        return new Vector2f(\n            Math.cos(2 * Math.PI / 360 * this.angle),\n            Math.sin(2 * Math.PI / 360 * this.angle)\n        );\n    }\n\n}\n\nexport class Mode7Renderer {\n\n    private camera: Camera;\n\n    constructor(private map: Texture, private grass: Texture) {\n\n    }\n\n    public setCamera(camera: Camera): void {\n        this.camera = camera;\n    }\n    public render(framebuffer: Framebuffer): void {\n        const horizonHeight: number = 20;\n        const mapScale: number = 0.3;\n\n        let framebufferPos: number = (horizonHeight + 1) * framebuffer.width;\n        const viewDirection: Vector2f = this.camera.getViewDirection();\n        const viewDirectionPerpendicular: Vector2f = viewDirection.perp();\n\n        for (let y: number = 21; y < framebuffer.height; y++) {\n            const distance: number = this.camera.screenDistance * this.camera.height / (y - horizonHeight);\n\n            const step: number = distance / this.camera.screenDistance;\n\n            const scannlineCenterX: number = viewDirection.x * distance + this.camera.position.x;\n            const scannlineCenterY: number = viewDirection.y * distance + this.camera.position.y;\n\n            const xStep: number = viewDirectionPerpendicular.x * step;\n            const yStep: number = viewDirectionPerpendicular.y * step;\n            let texel: number;\n\n            let xSampl: number = scannlineCenterX - (framebuffer.width / 2 * xStep);\n            let ySampl: number = scannlineCenterY - (framebuffer.width / 2 * yStep);\n            xSampl *= mapScale;\n            ySampl *= mapScale;\n            const xStepDelta: number = xStep * mapScale;\n            const yStepDelta: number = yStep * mapScale;\n\n            for (let x: number = 0; x < framebuffer.width; x++) {\n                if (xSampl >= 0 && xSampl <= 1023 && ySampl >= 0 && ySampl <= 1023) {\n                    texel = this.map.getPixel2(\n                        this.map,\n                        Math.round(xSampl) % 1024,\n                        Math.round(ySampl) % 1024);\n                } else {\n                    texel = this.grass.getPixel2(\n                        this.grass,\n                        ((Math.round(xSampl) % 8) + 8) % 8,\n                        (7 - (((Math.round(ySampl) % 8) + 8) % 8))\n                    );\n                }\n\n                framebuffer.framebuffer[framebufferPos++] = texel;\n\n                xSampl += xStepDelta;\n                ySampl += yStepDelta;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector2f, Vector3f } from '../../math/index';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture/index';\nimport { FontRenderer } from '../sine-scroller/FontRenderer';\nimport { NpcEntity } from './entities/NpcEntity';\nimport { Pipe } from './entities/Pipe';\nimport { KartAnimator } from './KartAnimator';\nimport { Keyboard } from './Keyboard';\nimport { Mode7Entity } from './Mode7Entity';\nimport { Camera, Mode7Renderer } from './Mode7Renderer';\nimport { NpcTrack } from './NpcTrack';\nimport { Sprite } from './Sprite';\nimport { SpriteRenderer } from './SpriteRenderer';\n\n/**\n * TODO:\n * - optimize rendering scene\n * - add collision\n * - add control keyboard and touch\n *\n * - physics:\n *      - http://rmgi.blog./pygame-2d-car-tutorial.html\n *      - http://engineeringdotnet.blogspot.com/2010/04/simple-2d-car-physics-in-games.html\n *      - https://github.com/leonardo-ono/Java2DRacingPhysicsTest\n *      - https://www.gamedev.net/articles/programming/math-and-physics/2d-car-physics-r2443/\n *\n * https://www.gamedev.net/forums/topic/51626-making-mario-kart-type-of-gameswhats-involved/\n * https://www.coranac.com/tonc/text/mode7.htm\n *\n * - maps\n *      - http://www.mariouniverse.com/maps-snes-smk/\n */\nexport class Mode7Scene extends AbstractScene {\n\n\n    private static CANVAS_WIDTH = 320;\n    private map: Texture;\n    private mapHud: Texture;\n    private pos: Texture;\n    private posJoshi: Texture;\n    private lap2Texture: Texture;\n    private shadowTexture: Texture;\n    private bump: Texture;\n    private banana: Texture;\n    private flower: Texture;\n    private egg: Texture;\n    private pipe2: Texture;\n    private back: Texture;\n    private grass: Texture;\n    private pipe: Texture; private metrics: Texture;\n    private kartPosition: Vector3f = new Vector3f(273.79803081006753, 2565.460311653938 - 1024, 0);\n    private pipePositions: Array<Pipe>;\n    private startTime: number = Date.now();\n    private keyboard: Keyboard = new Keyboard();\n    private marioTextures: Array<Texture> = new Array<Texture>();\n    private joshiTextures: Array<Texture> = new Array<Texture>();\n    private fontRenderer: FontRenderer;\n    private spriteRenderer: SpriteRenderer = new SpriteRenderer();\n    private angleVel: number = 0;\n    private velocity: Vector3f = new Vector3f(0, 0, 0);\n    private acceleration: number = 0;\n    private mode7Renderer: Mode7Renderer;\n    private camera: Camera;\n\n    private npcTrack: Array<Vector2f> = NpcTrack.track;\n\n    private animator: KartAnimator = new KartAnimator();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.animator.setKeyFrames(this.npcTrack);\n\n        this.fontRenderer = new FontRenderer(\n            framebuffer, 8, 14, '0123456789',\n            require('./assets/sprites/time.png')\n        );\n\n        return Promise.all([\n            this.fontRenderer.init(),\n            TextureUtils.load(require('./assets/map.png'), false).then(\n                (texture: Texture) => this.map = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/bump.png'), true).then(\n                (texture: Texture) => this.bump = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/banana.png'), true).then(\n                (texture: Texture) => this.banana = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/egg.png'), true).then(\n                (texture: Texture) => this.egg = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/flower.png'), true).then(\n                (texture: Texture) => this.flower = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/pipe2.png'), true).then(\n                (texture: Texture) => this.pipe2 = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mapHUD.png'), true).then(\n                (texture: Texture) => this.mapHud = texture\n            ),\n            TextureUtils.load(require('./assets/background.png'), false).then(\n                (texture: Texture) => this.back = texture\n            ),\n            TextureUtils.load(require('./assets/grass.png'), false).then(\n                (texture: Texture) => this.grass = texture\n            ),\n            TextureUtils.load(require('./assets/pipe.png'), true).then(\n                (texture: Texture) => this.pipe = texture\n            ), TextureUtils.load(require('./assets/sprites/lap2.png'), true).then(\n                (texture: Texture) => this.lap2Texture = texture\n            ), TextureUtils.load(require('./assets/sprites/shadow.png'), true).then(\n                (texture: Texture) => this.shadowTexture = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario01.png'), true).then(\n                (texture: Texture) => this.marioTextures[0] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario02.png'), true).then(\n                (texture: Texture) => this.marioTextures[1] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario03.png'), true).then(\n                (texture: Texture) => this.marioTextures[2] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario04.png'), true).then(\n                (texture: Texture) => this.marioTextures[3] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario05.png'), true).then(\n                (texture: Texture) => this.marioTextures[4] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario06.png'), true).then(\n                (texture: Texture) => this.marioTextures[5] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario07.png'), true).then(\n                (texture: Texture) => this.marioTextures[6] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario08.png'), true).then(\n                (texture: Texture) => this.marioTextures[7] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario09.png'), true).then(\n                (texture: Texture) => this.marioTextures[8] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario10.png'), true).then(\n                (texture: Texture) => this.marioTextures[9] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario11.png'), true).then(\n                (texture: Texture) => this.marioTextures[10] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario12.png'), true).then(\n                (texture: Texture) => this.marioTextures[11] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario13.png'), true).then(\n                (texture: Texture) => this.marioTextures[12] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario14.png'), true).then(\n                (texture: Texture) => this.marioTextures[13] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario15.png'), true).then(\n                (texture: Texture) => this.marioTextures[14] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario16.png'), true).then(\n                (texture: Texture) => this.marioTextures[15] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario17.png'), true).then(\n                (texture: Texture) => this.marioTextures[16] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario18.png'), true).then(\n                (texture: Texture) => this.marioTextures[17] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario19.png'), true).then(\n                (texture: Texture) => this.marioTextures[18] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario20.png'), true).then(\n                (texture: Texture) => this.marioTextures[19] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario21.png'), true).then(\n                (texture: Texture) => this.marioTextures[20] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario22.png'), true).then(\n                (texture: Texture) => this.marioTextures[21] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/metrics.png'), true).then(\n                (texture: Texture) => this.metrics = texture\n            )\n\n            ,\n            TextureUtils.load(require('./assets/sprites/joshi01.png'), true).then(\n                (texture: Texture) => this.joshiTextures[0] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi02.png'), true).then(\n                (texture: Texture) => this.joshiTextures[1] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi03.png'), true).then(\n                (texture: Texture) => this.joshiTextures[2] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi04.png'), true).then(\n                (texture: Texture) => this.joshiTextures[3] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi05.png'), true).then(\n                (texture: Texture) => this.joshiTextures[4] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi06.png'), true).then(\n                (texture: Texture) => this.joshiTextures[5] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi07.png'), true).then(\n                (texture: Texture) => this.joshiTextures[6] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi08.png'), true).then(\n                (texture: Texture) => this.joshiTextures[7] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi09.png'), true).then(\n                (texture: Texture) => this.joshiTextures[8] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi10.png'), true).then(\n                (texture: Texture) => this.joshiTextures[9] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi11.png'), true).then(\n                (texture: Texture) => this.joshiTextures[10] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi12.png'), true).then(\n                (texture: Texture) => this.joshiTextures[11] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi13.png'), true).then(\n                (texture: Texture) => this.joshiTextures[12] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi14.png'), true).then(\n                (texture: Texture) => this.joshiTextures[13] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi15.png'), true).then(\n                (texture: Texture) => this.joshiTextures[14] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi16.png'), true).then(\n                (texture: Texture) => this.joshiTextures[15] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi17.png'), true).then(\n                (texture: Texture) => this.joshiTextures[16] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi18.png'), true).then(\n                (texture: Texture) => this.joshiTextures[17] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi19.png'), true).then(\n                (texture: Texture) => this.joshiTextures[18] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi20.png'), true).then(\n                (texture: Texture) => this.joshiTextures[19] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi21.png'), true).then(\n                (texture: Texture) => this.joshiTextures[20] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi22.png'), true).then(\n                (texture: Texture) => this.joshiTextures[21] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/pos.png'), true).then(\n                (texture: Texture) => this.pos = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/posJoshi.png'), true).then(\n                (texture: Texture) => this.posJoshi = texture\n            ),\n        ]).then(\n            () => {\n                const screenDistance: number = 160;\n                const cameraHeight: number = 80;\n                const cameraDistance: number = 153.4;\n\n                this.camera = new Camera();\n\n                this.camera.height = cameraHeight;\n                this.camera.screenDistance = screenDistance;\n                this.camera.angle = 270;\n\n                this.camera.position = new Vector2f(\n                    this.kartPosition.x - Math.cos(2 * Math.PI / 360 * this.camera.angle) * cameraDistance,\n                    this.kartPosition.y - Math.sin(2 * Math.PI / 360 * this.camera.angle) * cameraDistance\n                );\n\n                this.mode7Renderer = new Mode7Renderer(this.map, this.grass);\n                this.mode7Renderer.setCamera(this.camera);\n\n                this.pipePositions = new Array<Pipe>();\n                const texArray: Array<Texture> = [\n                    this.banana,\n                    this.bump,\n                    this.pipe,\n                    this.pipe2,\n                    this.flower,\n                    this.egg\n                ];\n\n                for (let i: number = 0; i < 100; i++) {\n                    const tex: Texture = texArray[Math.floor(Math.random() * (texArray.length))];\n\n                    this.pipePositions.push(\n                        new Pipe(\n                            new Vector2f(\n                                Math.random() * 1024,\n                                Math.random() * 1024\n                            ),\n                            tex, 1.0, 0, 1.2, tex === this.bump ? -5 : tex === this.banana ? -3 : 0)\n                    );\n                }\n\n            });\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        // https://www.emanueleferonato.com/2007/05/15/create-a-flash-racing-game-tutorial/\n        // http://engineeringdotnet.blogspot.com/2010/04/simple-2d-car-physics-in-games.html\n        this.handleInput();\n        this.mode7Renderer.render(framebuffer);\n        this.drawBackground(framebuffer);\n\n        this.drawMario();\n\n        const npcs: Array<Mode7Entity> = this.getNPCs();\n        this.drawMode7Entities(npcs);\n        this.drawMode7Entities(this.pipePositions);\n\n        this.spriteRenderer.render(framebuffer);\n        this.drawHeadUpDisplay(framebuffer);\n        this.drawLapCounter();\n        this.drawMinimap(framebuffer, npcs);\n    }\n\n    private drawLapCounter(): void {\n        const offset: Vector2f = this.camera.getViewDirection().perp()\n            .mul(10.0 * Math.sin((Date.now() - this.startTime) * 0.001) + 25);\n        const pos: Vector2f = new Vector2f(this.kartPosition.x * 0.3, this.kartPosition.y * 0.3).sub(offset);\n\n        const counterEntity: Mode7Entity =\n            new Pipe(pos, this.lap2Texture);\n        counterEntity.height = Math.abs(Math.sin((Date.now() - this.startTime) * 0.001) * 30) + 25 +\n            Math.abs(Math.sin((Date.now() - this.startTime) * 0.002) * 40);\n\n        this.drawMode7Entities(\n            [new Pipe(pos, this.shadowTexture, 1.0, 1, 1.0, -4)]\n        );\n\n        this.drawMode7Entities(\n            [counterEntity]\n        );\n    }\n\n    private drawMario(): void {\n        let marioTex: Texture;\n        if (this.keyboard.isDown(68)) {\n            marioTex = this.marioTextures[1];\n        } else if (this.keyboard.isDown(65)) {\n            marioTex = this.marioTextures[this.marioTextures.length - 1];\n        } else {\n            marioTex = this.marioTextures[0];\n        }\n\n        this.drawMode7Entities(\n            [new Pipe(new Vector2f(this.kartPosition.x * 0.3, this.kartPosition.y * 0.3),\n                this.shadowTexture, 1.0, 1, 1, -4)]\n        );\n\n        const mario: Mode7Entity =\n            new Pipe(new Vector2f(this.kartPosition.x * 0.3, this.kartPosition.y * 0.3), marioTex, 1.0, 0, 1.0, -4);\n        mario.height = Math.abs(Math.sin((Date.now() - this.startTime) * 0.003) * 30);\n\n        this.drawMode7Entities(\n            [mario]\n        );\n    }\n\n    private drawMinimap(framebuffer: Framebuffer, npcs: Array<Mode7Entity>): void {\n        framebuffer.drawTexture(2, 100 - 2, this.mapHud, 0.5);\n\n        npcs.forEach((npc: Mode7Entity) => {\n            const xx: number = Math.round(npc.position.x / 1024 * 100 - 8 + 2);\n            const yy: number = Math.round(npc.position.y / 1024 * 100 - 8 + 100 - 2);\n\n            framebuffer.drawTexture(xx, yy, this.posJoshi, 0.5);\n        });\n\n        const x: number = Math.round(this.kartPosition.x / 1024 * 100 * 0.3 - 8 + 2);\n        const y: number = Math.round(this.kartPosition.y / 1024 * 100 * 0.3 - 8 + 100 - 2);\n\n        framebuffer.drawTexture(x, y, this.pos, 1.0);\n    }\n\n    private getNPCs(): Array<Mode7Entity> {\n        const tim: number = Date.now() - this.startTime;\n        const npcs: Array<Mode7Entity> = new Array<NpcEntity>();\n\n        for (let i: number = 0; i < 10; i++) {\n            const scale: number = 2200;\n            const pos: Vector2f = this.animator.getPos(tim + i * scale);\n            const npcDir: Vector2f =\n                this.animator.getPos(tim + 10 + i * scale).mul(1 / 0.3).sub(pos.mul(1 / 0.3)).normalize();\n\n            const entity: NpcEntity = new NpcEntity(pos, this.joshiTextures);\n            entity.setDirection(npcDir);\n            entity.height = Math.abs(Math.sin((Date.now() - this.startTime) * 0.003) * 30);\n            npcs.push(entity);\n            npcs.push(\n                new Pipe(pos, this.shadowTexture, 1.0, 1)\n            );\n        }\n        return npcs;\n    }\n\n    private drawMode7Entities(entities: Array<Mode7Entity>): void {\n        const horizonHeight: number = 20;\n        const cameraDirection: Vector2f = this.camera.getViewDirection();\n        const cameraDirectionPerp: Vector2f = cameraDirection.perp();\n        const MINIMUM_SPRITE_HEIGHT: number = 0;\n\n        for (let i: number = 0; i < entities.length; i++) {\n            const entity: Vector2f = entities[i].position.mul(1 / 0.3);\n\n            const distance: number = entity.sub(this.camera.position).dot(cameraDirection);\n\n            if (distance > 0) {\n                const projectionScale: number = this.camera.screenDistance / distance;\n                const texture: Texture = entities[i].getTexture(this.camera);\n\n                if (Math.round(projectionScale * texture.height) <= MINIMUM_SPRITE_HEIGHT) {\n                    continue;\n                }\n\n                const cameraDirectionPerpDistance: number = entity.sub(this.camera.position).dot(cameraDirectionPerp);\n                const projectedY: number = this.camera.height * projectionScale;\n                const scale: number = entities[i].scale;\n                const offset: number = entities[i].offset;\n                this.spriteRenderer.addSprite(\n                    new Sprite(\n                        Math.round(\n                            Mode7Scene.CANVAS_WIDTH / 2 + cameraDirectionPerpDistance * projectionScale -\n                            (texture.width * projectionScale * scale) / 2\n                        ),\n                        Math.round(horizonHeight + projectedY -\n                            ((texture.height + offset) * scale + entities[i].height) * projectionScale),\n                        Math.round(texture.width * projectionScale * scale),\n                        Math.round(texture.height * projectionScale * scale),\n                        texture,\n                        entities[i].getAlpha(),\n                        distance,\n                        entities[i].getPriority())\n                );\n            }\n        }\n    }\n\n    private drawBackground(framebuffer: Framebuffer): void {\n        // TODO: optimize\n        for (let x: number = 0; x < framebuffer.width; x++) {\n            for (let y: number = 0; y < this.back.height; y++) {\n                framebuffer.drawPixel(\n                    x, y,\n                    this.back.getPixel2(\n                        this.back,\n                        ((Math.floor(x + this.camera.angle * 2) % this.back.width) + this.back.width)\n                        % this.back.width, y)\n                );\n            }\n        }\n    }\n\n    private drawHeadUpDisplay(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(framebuffer.width - this.metrics.width - 16, 2, this.metrics, 1.0);\n\n        const gameTime: number = Date.now() - this.startTime;\n        const small: number = Math.floor(gameTime / 10) % 100;\n        const gameTimeSeconds: number = Math.floor(gameTime / 1000);\n        const gameTimeMinutes: number = Math.floor(gameTime / 60000);\n        const seconds: number = gameTimeSeconds % 60;\n\n        this.fontRenderer.drawText2(framebuffer.width - 8 * 8 - 16 + 1, 4, this.pad(gameTimeMinutes, 2));\n        this.fontRenderer.drawText2(framebuffer.width - 8 * 8 - 16 + 1 + 8 * 3, 4, this.pad(seconds, 2));\n        this.fontRenderer.drawText2(framebuffer.width - 8 * 8 - 16 + 1 + 8 * 6, 4, this.pad(small, 2));\n    }\n\n    private pad(num: number, size: number): string {\n        const s: string = '0' + num;\n        return s.substr(s.length - size);\n    }\n\n    private handleInput(): void {\n        if (this.keyboard.isDown(Keyboard.KEY_L)) {\n            this.acceleration = 0.57;\n        }\n\n        if (this.keyboard.isDown(Keyboard.KEY_A)) {\n            this.angleVel = Math.max(-1.0, this.angleVel - 0.2);\n        } else if (this.keyboard.isDown(Keyboard.KEY_D)) {\n            this.angleVel = Math.min(1.0, this.angleVel + 0.2);\n        } else {\n            this.angleVel = 0;\n        }\n\n        this.camera.angle = this.camera.angle + this.angleVel;\n        this.velocity.x += Math.cos(2 * Math.PI / 360 * this.camera.angle) * this.acceleration;\n        this.velocity.y += Math.sin(2 * Math.PI / 360 * this.camera.angle) * this.acceleration;\n\n        if (this.velocity.length() > 7.4) {\n            this.velocity = this.velocity.mul(1 / this.velocity.length() * 7.4);\n        }\n\n        this.kartPosition = this.kartPosition.add(this.velocity);\n        this.velocity = this.velocity.mul(0.91);\n        this.acceleration = this.acceleration * 0.89;\n\n        if (this.velocity.length() < 0.5) {\n            this.velocity = this.velocity.mul(0);\n        }\n\n        const cameraDistance: number = 159;\n        this.camera.position = new Vector2f(\n            this.kartPosition.x - Math.cos(2 * Math.PI / 360 * this.camera.angle) * cameraDistance,\n            this.kartPosition.y - Math.sin(2 * Math.PI / 360 * this.camera.angle) * cameraDistance\n        );\n    }\n\n}\n","import { Vector2f } from '../../math/index';\n\nexport class NpcTrack {\n\n    public static readonly track: Array<Vector2f> = [\n        new Vector2f(920, 580),\n        new Vector2f(940, 476),\n        new Vector2f(922, 415),\n        new Vector2f(850, 370),\n        new Vector2f(766, 323),\n        new Vector2f(684, 277),\n        new Vector2f(615, 250),\n        new Vector2f(524, 209),\n        new Vector2f(449, 165),\n        new Vector2f(371, 123),\n        new Vector2f(295, 91),\n        new Vector2f(229, 70),\n        new Vector2f(165, 68),\n        new Vector2f(119, 89),\n        new Vector2f(85, 133),\n        new Vector2f(64, 190),\n        new Vector2f(56, 247),\n        new Vector2f(72, 293),\n        new Vector2f(87, 348),\n        new Vector2f(81, 408),\n        new Vector2f(71, 477),\n        new Vector2f(64, 572),\n        new Vector2f(67, 637),\n        new Vector2f(78, 718),\n        new Vector2f(134, 750),\n        new Vector2f(226, 727),\n        new Vector2f(286, 669),\n        new Vector2f(344, 629),\n        new Vector2f(447, 586),\n        new Vector2f(535, 588),\n        new Vector2f(583, 645),\n        new Vector2f(612, 712),\n        new Vector2f(641, 786),\n        new Vector2f(681, 849),\n        new Vector2f(744, 895),\n        new Vector2f(820, 912),\n        new Vector2f(880, 915),\n        new Vector2f(930, 880),\n        new Vector2f(955, 804),\n        new Vector2f(944, 717),\n        new Vector2f(921, 643)\n    ];\n\n    private constructor() {\n\n    }\n\n}\n","import { Texture } from '../../texture/index';\n\nexport class Sprite {\n\n    public constructor(public xp: number, public yp: number,\n        public width: number, public height: number,\n        public texture: Texture, public alphaBlend: number, public z: number, public priority: number) {\n\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Sprite } from './Sprite';\n\nexport class SpriteRenderer {\n\n    private sprites: Array<Sprite>;\n\n    constructor() {\n        this.sprites = new Array<Sprite>();\n    }\n\n    public addSprite(sprite: Sprite): void {\n        this.sprites.push(sprite);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        this.sprites.sort((a: Sprite, b: Sprite) => {\n            return b.priority === a.priority ? b.z - a.z : b.priority - a.priority;\n        });\n\n        this.sprites.forEach((sp: Sprite) => {\n            framebuffer.scaleClipBlitter.drawScaledTextureClip(\n                sp.xp,\n                sp.yp,\n                sp.width,\n                sp.height, sp.texture, sp.alphaBlend);\n        });\n        this.sprites.length = 0;\n    }\n\n}\n","import { Vector2f } from '../../../math/index';\nimport { Texture } from '../../../texture/Texture';\nimport { Mode7Entity } from '../Mode7Entity';\nimport { Camera } from '../Mode7Renderer';\n\nexport class NpcEntity extends Mode7Entity {\n\n    private textures: Array<Texture>;\n    private direction: Vector2f;\n\n    public constructor(position: Vector2f, textures: Array<Texture>) {\n        super(position);\n        this.textures = textures;\n    }\n\n    public setDirection(direction: Vector2f): void {\n        this.direction = direction;\n    }\n\n    public getTexture(camera: Camera): Texture {\n        // TODO: move 1 / 0.3 somewhere else! maybe compute camera in world space lateron\n        const objVec: Vector2f = this.position.mul(1 / 0.3).sub(camera.position);\n        let spIndex: number = -Math.atan2(objVec.y, objVec.x) + Math.atan2(this.direction.y, this.direction.x);\n        spIndex = (((spIndex / (Math.PI * 2) * 360) % 360) + 360) % 360;\n        const texture: Texture = this.textures[Math.floor(spIndex / 360 * this.textures.length) % this.textures.length];\n        return texture;\n    }\n\n    public getAlpha(): number {\n        return 1.0;\n    }\n\n}\n","import { Vector2f } from '../../../math/index';\nimport { Texture } from '../../../texture/index';\nimport { Mode7Entity } from '../Mode7Entity';\n\nexport class Pipe extends Mode7Entity {\n\n    private texture: Texture;\n    private alpha: number;\n\n    public constructor(position: Vector2f, texture: Texture, alpha: number = 1.0,\n        priority: number = 0, scale: number = 1.0, offset: number = 0) {\n        super(position, 0, priority, scale, offset);\n        this.texture = texture;\n        this.alpha = alpha;\n    }\n\n    public getTexture(): Texture {\n        return this.texture;\n    }\n\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { \n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n       \n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                    \n                \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                   \n                   \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n                  \n\n                    this.clipConvexPolygon2(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // TODO: remove temp object here\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.projection = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].projection, projected[1].projection, projected[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon2(framebuffer, projected);\n    }\n\n\n    public clipConvexPolygon2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { Mode7Scene } from './Mode7Scene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new Mode7Scene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","end","current","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawParticleWaves","noClear","num","cos","forEach","multiply","sort","a","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","y2","mu","mu2","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","sub","temp","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","keyFrames","setKeyFrames","getPos","first","zero","second","third","fraction","CubicInterpolate","y0","y3","pressed","window","onKeyUp","onKeyDown","isDown","code","keyCode","priority","getPriority","screenDistance","getViewDirection","map","grass","setCamera","mapScale","framebufferPos","viewDirection","viewDirectionPerpendicular","perp","distance","step","scannlineCenterX","scannlineCenterY","texel","xSampl","ySampl","xStepDelta","yStepDelta","getPixel2","Mode7Scene","AbstractScene","mapHud","posJoshi","lap2Texture","shadowTexture","bump","banana","flower","egg","pipe2","back","pipe","metrics","kartPosition","pipePositions","keyboard","Keyboard","marioTextures","joshiTextures","fontRenderer","spriteRenderer","SpriteRenderer","angleVel","velocity","acceleration","mode7Renderer","npcTrack","NpcTrack","track","animator","KartAnimator","FontRenderer","Promise","all","TextureUtils","load","Camera","Mode7Renderer","texArray","random","Pipe","handleInput","drawBackground","drawMario","npcs","getNPCs","drawMode7Entities","drawHeadUpDisplay","drawLapCounter","drawMinimap","counterEntity","marioTex","mario","npc","tim","npcDir","normalize","entity","NpcEntity","setDirection","entities","cameraDirection","cameraDirectionPerp","dot","projectionScale","getTexture","cameraDirectionPerpDistance","projectedY","addSprite","Sprite","CANVAS_WIDTH","getAlpha","gameTime","small","gameTimeSeconds","gameTimeMinutes","seconds","drawText2","pad","s","substr","KEY_L","KEY_A","KEY_D","sprites","sprite","sp","Mode7Entity","textures","direction","super","objVec","spIndex","file","fontTexture","charToIndex","fonts","Map","addCharInex","draw","xFonts","asciiCode","has","get","sine","xOff","textOff","startW","endW","yDisp","char","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","cross","faces","n1","n2","n3","transformedPoints","transformedNormals","getMesh","AbstractGeometricObject","invert","frame","frame2","up","right","Matrix3f","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","sphereMapping","vertexArray","Vertex","setSphereMapping","arg0","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","normalMatrix","normals2","vertices","project2","uv","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","subject","input","output","S","point","projected","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","x0y0","x1y0","x0y1","x1y1","col1","col2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}