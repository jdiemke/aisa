{"version":3,"file":"mode-7.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/mode-7/KartAnimator.ts","webpack://aisa/./src/examples/mode-7/Keyboard.ts","webpack://aisa/./src/examples/mode-7/Mode7Entity.ts","webpack://aisa/./src/examples/mode-7/Mode7Renderer.ts","webpack://aisa/./src/examples/mode-7/Mode7Scene.ts","webpack://aisa/./src/examples/mode-7/NpcTrack.ts","webpack://aisa/./src/examples/mode-7/Sprite.ts","webpack://aisa/./src/examples/mode-7/SpriteRenderer.ts","webpack://aisa/./src/examples/mode-7/entities/NpcEntity.ts","webpack://aisa/./src/examples/mode-7/entities/Pipe.ts","webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/mode-7/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Vector2f } from '../../math/Vector2f';\n\nexport class KartAnimator {\n\n    public pos: Vector2f;\n    private keyFrames: Array<Vector2f>;\n\n    public setKeyFrames(keyFrames: Array<Vector2f>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getPos(elapsedTime: number): Vector2f {\n        const keyFrameDuration: number = 700;\n\n        const first: number = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        const zero: number = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        const second: number = (first + 1) % this.keyFrames.length;\n        const third: number = (first + 2) % this.keyFrames.length;\n        const fraction: number = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        const position: Vector2f = new Vector2f(\n            this.CubicInterpolate(\n                this.keyFrames[zero].x,\n                this.keyFrames[first].x,\n                this.keyFrames[second].x,\n                this.keyFrames[third].x,\n                fraction\n            ),\n            this.CubicInterpolate(\n                this.keyFrames[zero].y,\n                this.keyFrames[first].y,\n                this.keyFrames[second].y,\n                this.keyFrames[third].y,\n                fraction\n            )\n        );\n\n        return position;\n    }\n\n    private CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = -0.5 * y0 + 1.5 * y1 - 1.5 * y2 + 0.5 * y3;\n        const a1 = y0 - 2.5 * y1 + 2 * y2 - 0.5 * y3;\n        const a2 = -0.5 * y0 + 0.5 * y2;\n        const a3 = y1;\n\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n}\n","export class Keyboard {\n\n    public static LEFT: number = 37;\n    public static UP: number = 38;\n    public static RIGHT: number = 39;\n    public static DOWN: number = 40;\n    public static KEY_A: number = 65;\n    public static KEY_D: number = 68;\n    public static KEY_L: number = 76;\n\n    private pressed: Array<boolean>;\n\n    constructor() {\n        this.pressed = new Array<boolean>(256);\n        this.pressed.fill(false);\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => this.onKeyUp(event), false);\n        window.addEventListener('keydown', (event: KeyboardEvent) => this.onKeyDown(event), false);\n    }\n\n    public isDown(code: number): boolean {\n        return this.pressed[code];\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = true;\n    }\n\n    public onKeyUp(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = false;\n    }\n\n}\n","import { Vector2f } from '../../math/index';\nimport { Texture } from '../../texture/index';\nimport { Camera } from './Mode7Renderer';\n\nexport abstract class Mode7Entity {\n\n    public position: Vector2f;\n    public height: number;\n    public priority: number;\n    public scale: number;\n    public offset: number;\n\n    public constructor(position: Vector2f, height: number = 0,\n        priority: number = 0, scale: number = 1.0, offset: number = 0) {\n        this.position = position;\n        this.height = height;\n        this.priority = priority;\n        this.scale = scale;\n        this.offset = offset;\n    }\n\n    public abstract getTexture(camera: Camera): Texture;\n\n    public abstract getAlpha(): number;\n\n    public getPriority(): number {\n        return this.priority;\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector2f } from '../../math/index';\nimport { Texture } from '../../texture/index';\n\nexport class Camera {\n\n    public position: Vector2f;\n    public angle: number;\n    public height: number;\n    public screenDistance: number;\n\n    public getViewDirection(): Vector2f {\n        return new Vector2f(\n            Math.cos(2 * Math.PI / 360 * this.angle),\n            Math.sin(2 * Math.PI / 360 * this.angle)\n        );\n    }\n\n}\n\nexport class Mode7Renderer {\n\n    private camera: Camera;\n\n    constructor(private map: Texture, private grass: Texture) {\n\n    }\n\n    public setCamera(camera: Camera): void {\n        this.camera = camera;\n    }\n    public render(framebuffer: Framebuffer): void {\n        const horizonHeight: number = 20;\n        const mapScale: number = 0.3;\n\n        let framebufferPos: number = (horizonHeight + 1) * framebuffer.width;\n        const viewDirection: Vector2f = this.camera.getViewDirection();\n        const viewDirectionPerpendicular: Vector2f = viewDirection.perp();\n\n        for (let y: number = 21; y < framebuffer.height; y++) {\n            const distance: number = this.camera.screenDistance * this.camera.height / (y - horizonHeight);\n\n            const step: number = distance / this.camera.screenDistance;\n\n            const scannlineCenterX: number = viewDirection.x * distance + this.camera.position.x;\n            const scannlineCenterY: number = viewDirection.y * distance + this.camera.position.y;\n\n            const xStep: number = viewDirectionPerpendicular.x * step;\n            const yStep: number = viewDirectionPerpendicular.y * step;\n            let texel: number;\n\n            let xSampl: number = scannlineCenterX - (framebuffer.width / 2 * xStep);\n            let ySampl: number = scannlineCenterY - (framebuffer.width / 2 * yStep);\n            xSampl *= mapScale;\n            ySampl *= mapScale;\n            const xStepDelta: number = xStep * mapScale;\n            const yStepDelta: number = yStep * mapScale;\n\n            for (let x: number = 0; x < framebuffer.width; x++) {\n                if (xSampl >= 0 && xSampl <= 1023 && ySampl >= 0 && ySampl <= 1023) {\n                    texel = this.map.getPixel2(\n                        this.map,\n                        Math.round(xSampl) % 1024,\n                        Math.round(ySampl) % 1024);\n                } else {\n                    texel = this.grass.getPixel2(\n                        this.grass,\n                        ((Math.round(xSampl) % 8) + 8) % 8,\n                        (7 - (((Math.round(ySampl) % 8) + 8) % 8))\n                    );\n                }\n\n                framebuffer.framebuffer[framebufferPos++] = texel;\n\n                xSampl += xStepDelta;\n                ySampl += yStepDelta;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector2f, Vector3f } from '../../math/index';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture/index';\nimport { FontRenderer } from '../sine-scroller/FontRenderer';\nimport { NpcEntity } from './entities/NpcEntity';\nimport { Pipe } from './entities/Pipe';\nimport { KartAnimator } from './KartAnimator';\nimport { Keyboard } from './Keyboard';\nimport { Mode7Entity } from './Mode7Entity';\nimport { Camera, Mode7Renderer } from './Mode7Renderer';\nimport { NpcTrack } from './NpcTrack';\nimport { Sprite } from './Sprite';\nimport { SpriteRenderer } from './SpriteRenderer';\n\n/**\n * TODO:\n * - optimize rendering scene\n * - add collision\n * - add control keyboard and touch\n *\n * - physics:\n *      - http://rmgi.blog./pygame-2d-car-tutorial.html\n *      - http://engineeringdotnet.blogspot.com/2010/04/simple-2d-car-physics-in-games.html\n *      - https://github.com/leonardo-ono/Java2DRacingPhysicsTest\n *      - https://www.gamedev.net/articles/programming/math-and-physics/2d-car-physics-r2443/\n *\n * https://www.gamedev.net/forums/topic/51626-making-mario-kart-type-of-gameswhats-involved/\n * https://www.coranac.com/tonc/text/mode7.htm\n *\n * - maps\n *      - http://www.mariouniverse.com/maps-snes-smk/\n */\nexport class Mode7Scene extends AbstractScene {\n\n\n    private static CANVAS_WIDTH = 320;\n    private map: Texture;\n    private mapHud: Texture;\n    private pos: Texture;\n    private posJoshi: Texture;\n    private lap2Texture: Texture;\n    private shadowTexture: Texture;\n    private bump: Texture;\n    private banana: Texture;\n    private flower: Texture;\n    private egg: Texture;\n    private pipe2: Texture;\n    private back: Texture;\n    private grass: Texture;\n    private pipe: Texture; private metrics: Texture;\n    private kartPosition: Vector3f = new Vector3f(273.79803081006753, 2565.460311653938 - 1024, 0);\n    private pipePositions: Array<Pipe>;\n    private startTime: number = Date.now();\n    private keyboard: Keyboard = new Keyboard();\n    private marioTextures: Array<Texture> = new Array<Texture>();\n    private joshiTextures: Array<Texture> = new Array<Texture>();\n    private fontRenderer: FontRenderer;\n    private spriteRenderer: SpriteRenderer = new SpriteRenderer();\n    private angleVel: number = 0;\n    private velocity: Vector3f = new Vector3f(0, 0, 0);\n    private acceleration: number = 0;\n    private mode7Renderer: Mode7Renderer;\n    private camera: Camera;\n\n    private npcTrack: Array<Vector2f> = NpcTrack.track;\n\n    private animator: KartAnimator = new KartAnimator();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.animator.setKeyFrames(this.npcTrack);\n\n        this.fontRenderer = new FontRenderer(\n            framebuffer, 8, 14, '0123456789',\n            require('./assets/sprites/time.png')\n        );\n\n        return Promise.all([\n            this.fontRenderer.init(),\n            TextureUtils.load(require('./assets/map.png'), false).then(\n                (texture: Texture) => this.map = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/bump.png'), true).then(\n                (texture: Texture) => this.bump = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/banana.png'), true).then(\n                (texture: Texture) => this.banana = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/egg.png'), true).then(\n                (texture: Texture) => this.egg = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/flower.png'), true).then(\n                (texture: Texture) => this.flower = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/pipe2.png'), true).then(\n                (texture: Texture) => this.pipe2 = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mapHUD.png'), true).then(\n                (texture: Texture) => this.mapHud = texture\n            ),\n            TextureUtils.load(require('./assets/background.png'), false).then(\n                (texture: Texture) => this.back = texture\n            ),\n            TextureUtils.load(require('./assets/grass.png'), false).then(\n                (texture: Texture) => this.grass = texture\n            ),\n            TextureUtils.load(require('./assets/pipe.png'), true).then(\n                (texture: Texture) => this.pipe = texture\n            ), TextureUtils.load(require('./assets/sprites/lap2.png'), true).then(\n                (texture: Texture) => this.lap2Texture = texture\n            ), TextureUtils.load(require('./assets/sprites/shadow.png'), true).then(\n                (texture: Texture) => this.shadowTexture = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario01.png'), true).then(\n                (texture: Texture) => this.marioTextures[0] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario02.png'), true).then(\n                (texture: Texture) => this.marioTextures[1] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario03.png'), true).then(\n                (texture: Texture) => this.marioTextures[2] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario04.png'), true).then(\n                (texture: Texture) => this.marioTextures[3] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario05.png'), true).then(\n                (texture: Texture) => this.marioTextures[4] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario06.png'), true).then(\n                (texture: Texture) => this.marioTextures[5] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario07.png'), true).then(\n                (texture: Texture) => this.marioTextures[6] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario08.png'), true).then(\n                (texture: Texture) => this.marioTextures[7] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario09.png'), true).then(\n                (texture: Texture) => this.marioTextures[8] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario10.png'), true).then(\n                (texture: Texture) => this.marioTextures[9] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario11.png'), true).then(\n                (texture: Texture) => this.marioTextures[10] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario12.png'), true).then(\n                (texture: Texture) => this.marioTextures[11] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario13.png'), true).then(\n                (texture: Texture) => this.marioTextures[12] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario14.png'), true).then(\n                (texture: Texture) => this.marioTextures[13] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario15.png'), true).then(\n                (texture: Texture) => this.marioTextures[14] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario16.png'), true).then(\n                (texture: Texture) => this.marioTextures[15] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario17.png'), true).then(\n                (texture: Texture) => this.marioTextures[16] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario18.png'), true).then(\n                (texture: Texture) => this.marioTextures[17] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario19.png'), true).then(\n                (texture: Texture) => this.marioTextures[18] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario20.png'), true).then(\n                (texture: Texture) => this.marioTextures[19] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario21.png'), true).then(\n                (texture: Texture) => this.marioTextures[20] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/mario22.png'), true).then(\n                (texture: Texture) => this.marioTextures[21] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/metrics.png'), true).then(\n                (texture: Texture) => this.metrics = texture\n            )\n\n            ,\n            TextureUtils.load(require('./assets/sprites/joshi01.png'), true).then(\n                (texture: Texture) => this.joshiTextures[0] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi02.png'), true).then(\n                (texture: Texture) => this.joshiTextures[1] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi03.png'), true).then(\n                (texture: Texture) => this.joshiTextures[2] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi04.png'), true).then(\n                (texture: Texture) => this.joshiTextures[3] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi05.png'), true).then(\n                (texture: Texture) => this.joshiTextures[4] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi06.png'), true).then(\n                (texture: Texture) => this.joshiTextures[5] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi07.png'), true).then(\n                (texture: Texture) => this.joshiTextures[6] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi08.png'), true).then(\n                (texture: Texture) => this.joshiTextures[7] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi09.png'), true).then(\n                (texture: Texture) => this.joshiTextures[8] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi10.png'), true).then(\n                (texture: Texture) => this.joshiTextures[9] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi11.png'), true).then(\n                (texture: Texture) => this.joshiTextures[10] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi12.png'), true).then(\n                (texture: Texture) => this.joshiTextures[11] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi13.png'), true).then(\n                (texture: Texture) => this.joshiTextures[12] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi14.png'), true).then(\n                (texture: Texture) => this.joshiTextures[13] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi15.png'), true).then(\n                (texture: Texture) => this.joshiTextures[14] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi16.png'), true).then(\n                (texture: Texture) => this.joshiTextures[15] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi17.png'), true).then(\n                (texture: Texture) => this.joshiTextures[16] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi18.png'), true).then(\n                (texture: Texture) => this.joshiTextures[17] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi19.png'), true).then(\n                (texture: Texture) => this.joshiTextures[18] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi20.png'), true).then(\n                (texture: Texture) => this.joshiTextures[19] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi21.png'), true).then(\n                (texture: Texture) => this.joshiTextures[20] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/joshi22.png'), true).then(\n                (texture: Texture) => this.joshiTextures[21] = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/pos.png'), true).then(\n                (texture: Texture) => this.pos = texture\n            ),\n            TextureUtils.load(require('./assets/sprites/posJoshi.png'), true).then(\n                (texture: Texture) => this.posJoshi = texture\n            ),\n        ]).then(\n            () => {\n                const screenDistance: number = 160;\n                const cameraHeight: number = 80;\n                const cameraDistance: number = 153.4;\n\n                this.camera = new Camera();\n\n                this.camera.height = cameraHeight;\n                this.camera.screenDistance = screenDistance;\n                this.camera.angle = 270;\n\n                this.camera.position = new Vector2f(\n                    this.kartPosition.x - Math.cos(2 * Math.PI / 360 * this.camera.angle) * cameraDistance,\n                    this.kartPosition.y - Math.sin(2 * Math.PI / 360 * this.camera.angle) * cameraDistance\n                );\n\n                this.mode7Renderer = new Mode7Renderer(this.map, this.grass);\n                this.mode7Renderer.setCamera(this.camera);\n\n                this.pipePositions = new Array<Pipe>();\n                const texArray: Array<Texture> = [\n                    this.banana,\n                    this.bump,\n                    this.pipe,\n                    this.pipe2,\n                    this.flower,\n                    this.egg\n                ];\n\n                for (let i: number = 0; i < 100; i++) {\n                    const tex: Texture = texArray[Math.floor(Math.random() * (texArray.length))];\n\n                    this.pipePositions.push(\n                        new Pipe(\n                            new Vector2f(\n                                Math.random() * 1024,\n                                Math.random() * 1024\n                            ),\n                            tex, 1.0, 0, 1.2, tex === this.bump ? -5 : tex === this.banana ? -3 : 0)\n                    );\n                }\n\n            });\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        // https://www.emanueleferonato.com/2007/05/15/create-a-flash-racing-game-tutorial/\n        // http://engineeringdotnet.blogspot.com/2010/04/simple-2d-car-physics-in-games.html\n        this.handleInput();\n        this.mode7Renderer.render(framebuffer);\n        this.drawBackground(framebuffer);\n\n        this.drawMario();\n\n        const npcs: Array<Mode7Entity> = this.getNPCs();\n        this.drawMode7Entities(npcs);\n        this.drawMode7Entities(this.pipePositions);\n\n        this.spriteRenderer.render(framebuffer);\n        this.drawHeadUpDisplay(framebuffer);\n        this.drawLapCounter();\n        this.drawMinimap(framebuffer, npcs);\n    }\n\n    private drawLapCounter(): void {\n        const offset: Vector2f = this.camera.getViewDirection().perp()\n            .mul(10.0 * Math.sin((Date.now() - this.startTime) * 0.001) + 25);\n        const pos: Vector2f = new Vector2f(this.kartPosition.x * 0.3, this.kartPosition.y * 0.3).sub(offset);\n\n        const counterEntity: Mode7Entity =\n            new Pipe(pos, this.lap2Texture);\n        counterEntity.height = Math.abs(Math.sin((Date.now() - this.startTime) * 0.001) * 30) + 25 +\n            Math.abs(Math.sin((Date.now() - this.startTime) * 0.002) * 40);\n\n        this.drawMode7Entities(\n            [new Pipe(pos, this.shadowTexture, 1.0, 1, 1.0, -4)]\n        );\n\n        this.drawMode7Entities(\n            [counterEntity]\n        );\n    }\n\n    private drawMario(): void {\n        let marioTex: Texture;\n        if (this.keyboard.isDown(68)) {\n            marioTex = this.marioTextures[1];\n        } else if (this.keyboard.isDown(65)) {\n            marioTex = this.marioTextures[this.marioTextures.length - 1];\n        } else {\n            marioTex = this.marioTextures[0];\n        }\n\n        this.drawMode7Entities(\n            [new Pipe(new Vector2f(this.kartPosition.x * 0.3, this.kartPosition.y * 0.3),\n                this.shadowTexture, 1.0, 1, 1, -4)]\n        );\n\n        const mario: Mode7Entity =\n            new Pipe(new Vector2f(this.kartPosition.x * 0.3, this.kartPosition.y * 0.3), marioTex, 1.0, 0, 1.0, -4);\n        mario.height = Math.abs(Math.sin((Date.now() - this.startTime) * 0.003) * 30);\n\n        this.drawMode7Entities(\n            [mario]\n        );\n    }\n\n    private drawMinimap(framebuffer: Framebuffer, npcs: Array<Mode7Entity>): void {\n        framebuffer.drawTexture(2, 100 - 2, this.mapHud, 0.5);\n\n        npcs.forEach((npc: Mode7Entity) => {\n            const xx: number = Math.round(npc.position.x / 1024 * 100 - 8 + 2);\n            const yy: number = Math.round(npc.position.y / 1024 * 100 - 8 + 100 - 2);\n\n            framebuffer.drawTexture(xx, yy, this.posJoshi, 0.5);\n        });\n\n        const x: number = Math.round(this.kartPosition.x / 1024 * 100 * 0.3 - 8 + 2);\n        const y: number = Math.round(this.kartPosition.y / 1024 * 100 * 0.3 - 8 + 100 - 2);\n\n        framebuffer.drawTexture(x, y, this.pos, 1.0);\n    }\n\n    private getNPCs(): Array<Mode7Entity> {\n        const tim: number = Date.now() - this.startTime;\n        const npcs: Array<Mode7Entity> = new Array<NpcEntity>();\n\n        for (let i: number = 0; i < 10; i++) {\n            const scale: number = 2200;\n            const pos: Vector2f = this.animator.getPos(tim + i * scale);\n            const npcDir: Vector2f =\n                this.animator.getPos(tim + 10 + i * scale).mul(1 / 0.3).sub(pos.mul(1 / 0.3)).normalize();\n\n            const entity: NpcEntity = new NpcEntity(pos, this.joshiTextures);\n            entity.setDirection(npcDir);\n            entity.height = Math.abs(Math.sin((Date.now() - this.startTime) * 0.003) * 30);\n            npcs.push(entity);\n            npcs.push(\n                new Pipe(pos, this.shadowTexture, 1.0, 1)\n            );\n        }\n        return npcs;\n    }\n\n    private drawMode7Entities(entities: Array<Mode7Entity>): void {\n        const horizonHeight: number = 20;\n        const cameraDirection: Vector2f = this.camera.getViewDirection();\n        const cameraDirectionPerp: Vector2f = cameraDirection.perp();\n        const MINIMUM_SPRITE_HEIGHT: number = 0;\n\n        for (let i: number = 0; i < entities.length; i++) {\n            const entity: Vector2f = entities[i].position.mul(1 / 0.3);\n\n            const distance: number = entity.sub(this.camera.position).dot(cameraDirection);\n\n            if (distance > 0) {\n                const projectionScale: number = this.camera.screenDistance / distance;\n                const texture: Texture = entities[i].getTexture(this.camera);\n\n                if (Math.round(projectionScale * texture.height) <= MINIMUM_SPRITE_HEIGHT) {\n                    continue;\n                }\n\n                const cameraDirectionPerpDistance: number = entity.sub(this.camera.position).dot(cameraDirectionPerp);\n                const projectedY: number = this.camera.height * projectionScale;\n                const scale: number = entities[i].scale;\n                const offset: number = entities[i].offset;\n                this.spriteRenderer.addSprite(\n                    new Sprite(\n                        Math.round(\n                            Mode7Scene.CANVAS_WIDTH / 2 + cameraDirectionPerpDistance * projectionScale -\n                            (texture.width * projectionScale * scale) / 2\n                        ),\n                        Math.round(horizonHeight + projectedY -\n                            ((texture.height + offset) * scale + entities[i].height) * projectionScale),\n                        Math.round(texture.width * projectionScale * scale),\n                        Math.round(texture.height * projectionScale * scale),\n                        texture,\n                        entities[i].getAlpha(),\n                        distance,\n                        entities[i].getPriority())\n                );\n            }\n        }\n    }\n\n    private drawBackground(framebuffer: Framebuffer): void {\n        // TODO: optimize\n        for (let x: number = 0; x < framebuffer.width; x++) {\n            for (let y: number = 0; y < this.back.height; y++) {\n                framebuffer.drawPixel(\n                    x, y,\n                    this.back.getPixel2(\n                        this.back,\n                        ((Math.floor(x + this.camera.angle * 2) % this.back.width) + this.back.width)\n                        % this.back.width, y)\n                );\n            }\n        }\n    }\n\n    private drawHeadUpDisplay(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(framebuffer.width - this.metrics.width - 16, 2, this.metrics, 1.0);\n\n        const gameTime: number = Date.now() - this.startTime;\n        const small: number = Math.floor(gameTime / 10) % 100;\n        const gameTimeSeconds: number = Math.floor(gameTime / 1000);\n        const gameTimeMinutes: number = Math.floor(gameTime / 60000);\n        const seconds: number = gameTimeSeconds % 60;\n\n        this.fontRenderer.drawText2(framebuffer.width - 8 * 8 - 16 + 1, 4, this.pad(gameTimeMinutes, 2));\n        this.fontRenderer.drawText2(framebuffer.width - 8 * 8 - 16 + 1 + 8 * 3, 4, this.pad(seconds, 2));\n        this.fontRenderer.drawText2(framebuffer.width - 8 * 8 - 16 + 1 + 8 * 6, 4, this.pad(small, 2));\n    }\n\n    private pad(num: number, size: number): string {\n        const s: string = '0' + num;\n        return s.substr(s.length - size);\n    }\n\n    private handleInput(): void {\n        if (this.keyboard.isDown(Keyboard.KEY_L)) {\n            this.acceleration = 0.57;\n        }\n\n        if (this.keyboard.isDown(Keyboard.KEY_A)) {\n            this.angleVel = Math.max(-1.0, this.angleVel - 0.2);\n        } else if (this.keyboard.isDown(Keyboard.KEY_D)) {\n            this.angleVel = Math.min(1.0, this.angleVel + 0.2);\n        } else {\n            this.angleVel = 0;\n        }\n\n        this.camera.angle = this.camera.angle + this.angleVel;\n        this.velocity.x += Math.cos(2 * Math.PI / 360 * this.camera.angle) * this.acceleration;\n        this.velocity.y += Math.sin(2 * Math.PI / 360 * this.camera.angle) * this.acceleration;\n\n        if (this.velocity.length() > 7.4) {\n            this.velocity = this.velocity.mul(1 / this.velocity.length() * 7.4);\n        }\n\n        this.kartPosition = this.kartPosition.add(this.velocity);\n        this.velocity = this.velocity.mul(0.91);\n        this.acceleration = this.acceleration * 0.89;\n\n        if (this.velocity.length() < 0.5) {\n            this.velocity = this.velocity.mul(0);\n        }\n\n        const cameraDistance: number = 159;\n        this.camera.position = new Vector2f(\n            this.kartPosition.x - Math.cos(2 * Math.PI / 360 * this.camera.angle) * cameraDistance,\n            this.kartPosition.y - Math.sin(2 * Math.PI / 360 * this.camera.angle) * cameraDistance\n        );\n    }\n\n}\n","import { Vector2f } from '../../math/index';\n\nexport class NpcTrack {\n\n    public static readonly track: Array<Vector2f> = [\n        new Vector2f(920, 580),\n        new Vector2f(940, 476),\n        new Vector2f(922, 415),\n        new Vector2f(850, 370),\n        new Vector2f(766, 323),\n        new Vector2f(684, 277),\n        new Vector2f(615, 250),\n        new Vector2f(524, 209),\n        new Vector2f(449, 165),\n        new Vector2f(371, 123),\n        new Vector2f(295, 91),\n        new Vector2f(229, 70),\n        new Vector2f(165, 68),\n        new Vector2f(119, 89),\n        new Vector2f(85, 133),\n        new Vector2f(64, 190),\n        new Vector2f(56, 247),\n        new Vector2f(72, 293),\n        new Vector2f(87, 348),\n        new Vector2f(81, 408),\n        new Vector2f(71, 477),\n        new Vector2f(64, 572),\n        new Vector2f(67, 637),\n        new Vector2f(78, 718),\n        new Vector2f(134, 750),\n        new Vector2f(226, 727),\n        new Vector2f(286, 669),\n        new Vector2f(344, 629),\n        new Vector2f(447, 586),\n        new Vector2f(535, 588),\n        new Vector2f(583, 645),\n        new Vector2f(612, 712),\n        new Vector2f(641, 786),\n        new Vector2f(681, 849),\n        new Vector2f(744, 895),\n        new Vector2f(820, 912),\n        new Vector2f(880, 915),\n        new Vector2f(930, 880),\n        new Vector2f(955, 804),\n        new Vector2f(944, 717),\n        new Vector2f(921, 643)\n    ];\n\n    private constructor() {\n\n    }\n\n}\n","import { Texture } from '../../texture/index';\n\nexport class Sprite {\n\n    public constructor(public xp: number, public yp: number,\n        public width: number, public height: number,\n        public texture: Texture, public alphaBlend: number, public z: number, public priority: number) {\n\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Sprite } from './Sprite';\n\nexport class SpriteRenderer {\n\n    private sprites: Array<Sprite>;\n\n    constructor() {\n        this.sprites = new Array<Sprite>();\n    }\n\n    public addSprite(sprite: Sprite): void {\n        this.sprites.push(sprite);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        this.sprites.sort((a: Sprite, b: Sprite) => {\n            return b.priority === a.priority ? b.z - a.z : b.priority - a.priority;\n        });\n\n        this.sprites.forEach((sp: Sprite) => {\n            framebuffer.scaleClipBlitter.drawScaledTextureClip(\n                sp.xp,\n                sp.yp,\n                sp.width,\n                sp.height, sp.texture, sp.alphaBlend);\n        });\n        this.sprites.length = 0;\n    }\n\n}\n","import { Vector2f } from '../../../math/index';\nimport { Texture } from '../../../texture/Texture';\nimport { Mode7Entity } from '../Mode7Entity';\nimport { Camera } from '../Mode7Renderer';\n\nexport class NpcEntity extends Mode7Entity {\n\n    private textures: Array<Texture>;\n    private direction: Vector2f;\n\n    public constructor(position: Vector2f, textures: Array<Texture>) {\n        super(position);\n        this.textures = textures;\n    }\n\n    public setDirection(direction: Vector2f): void {\n        this.direction = direction;\n    }\n\n    public getTexture(camera: Camera): Texture {\n        // TODO: move 1 / 0.3 somewhere else! maybe compute camera in world space lateron\n        const objVec: Vector2f = this.position.mul(1 / 0.3).sub(camera.position);\n        let spIndex: number = -Math.atan2(objVec.y, objVec.x) + Math.atan2(this.direction.y, this.direction.x);\n        spIndex = (((spIndex / (Math.PI * 2) * 360) % 360) + 360) % 360;\n        const texture: Texture = this.textures[Math.floor(spIndex / 360 * this.textures.length) % this.textures.length];\n        return texture;\n    }\n\n    public getAlpha(): number {\n        return 1.0;\n    }\n\n}\n","import { Vector2f } from '../../../math/index';\nimport { Texture } from '../../../texture/index';\nimport { Mode7Entity } from '../Mode7Entity';\n\nexport class Pipe extends Mode7Entity {\n\n    private texture: Texture;\n    private alpha: number;\n\n    public constructor(position: Vector2f, texture: Texture, alpha: number = 1.0,\n        priority: number = 0, scale: number = 1.0, offset: number = 0) {\n        super(position, 0, priority, scale, offset);\n        this.texture = texture;\n        this.alpha = alpha;\n    }\n\n    public getTexture(): Texture {\n        return this.texture;\n    }\n\n    public getAlpha(): number {\n        return this.alpha;\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { Mode7Scene } from './Mode7Scene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new Mode7Scene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","keyFrames","setKeyFrames","getPos","first","zero","second","third","fraction","CubicInterpolate","y0","y2","y3","mu","mu2","pressed","window","onKeyUp","onKeyDown","isDown","code","keyCode","priority","getPriority","screenDistance","getViewDirection","map","grass","setCamera","mapScale","framebufferPos","viewDirection","viewDirectionPerpendicular","perp","distance","step","scannlineCenterX","scannlineCenterY","texel","xSampl","ySampl","xStepDelta","yStepDelta","getPixel2","Mode7Scene","AbstractScene","mapHud","posJoshi","lap2Texture","shadowTexture","bump","banana","flower","egg","pipe2","back","pipe","metrics","kartPosition","pipePositions","keyboard","Keyboard","marioTextures","joshiTextures","fontRenderer","spriteRenderer","SpriteRenderer","angleVel","velocity","acceleration","mode7Renderer","npcTrack","NpcTrack","track","animator","KartAnimator","FontRenderer","Promise","all","TextureUtils","load","Camera","Mode7Renderer","texArray","random","Pipe","handleInput","drawBackground","drawMario","npcs","getNPCs","drawMode7Entities","drawHeadUpDisplay","drawLapCounter","drawMinimap","counterEntity","marioTex","mario","npc","tim","npcDir","normalize","entity","NpcEntity","setDirection","entities","cameraDirection","cameraDirectionPerp","dot","projectionScale","getTexture","cameraDirectionPerpDistance","projectedY","addSprite","Sprite","CANVAS_WIDTH","getAlpha","gameTime","small","gameTimeSeconds","gameTimeMinutes","seconds","drawText2","pad","s","substr","KEY_L","KEY_A","KEY_D","sprites","sprite","sp","Mode7Entity","textures","direction","super","objVec","spIndex","file","fontTexture","charToIndex","fonts","Map","addCharInex","draw","xFonts","asciiCode","has","get","sine","textOff","startW","endW","yDisp","char","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","cross","faces","n1","n2","n3","transformedPoints","transformedNormals","getMesh","AbstractGeometricObject","invert","frame","frame2","up","right","current","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","sphereMapping","vertexArray","Vertex","setSphereMapping","arg0","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","normalMatrix","normals2","vertices","project2","uv","clipConvexPolygon","zClipTriangle","computeNearPlaneIntersection2","subject","input","output","S","point","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","x0y0","x1y0","x0y1","x1y1","col1","col2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}