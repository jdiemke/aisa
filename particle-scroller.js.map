{"version":3,"file":"particle-scroller.js","mappings":"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","sources":["webpack://aisa/./src/default-style.css","webpack://aisa/./node_modules/css-loader/dist/runtime/api.js","webpack://aisa/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://aisa/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://aisa/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/compat get default export","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/webpack/runtime/nonce","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/examples/particle-scroller/DofBallsScene.ts","webpack://aisa/./src/default-style.css?9c7b","webpack://aisa/./src/examples/particle-scroller/Application.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n    background-color: #000;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/default-style.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,sBAAsB;AAC1B\",\"sourcesContent\":[\"body {\\n    background-color: #000;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.nc = undefined;","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1,\n    DISABLED\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n\n    public setRotationMatrix(x: number,y: number,z: number, alpha: number): void {\n        const c = Math.cos(Math.PI * 2 *alpha / 360 );\n        const s = Math.sin(Math.PI * 2 *alpha / 360 );\n        const vector = new Vector3f(x,y,z);\n        vector.normalize2();\n\n        this.m11 = (1.0 - c) * vector.x * vector.x + c;\n        this.m12 = (1.0 - c) * vector.x * vector.y - s * vector.z;\n        this.m13 = (1.0 - c) * vector.x * vector.z + s * vector.y;\n        this.m14 = 0.0;\n\n        this.m21 = (1.0 - c) * vector.x * vector.y + s * vector.z;\n        this.m22 = (1.0 - c) * vector.y * vector.y + c;\n        this.m23 = (1.0 - c) * vector.y * vector.z - s * vector.x;\n        this.m24 = 0.0;\n\n        this.m31 = (1.0 - c) * vector.x * vector.z - s * vector.y;\n        this.m32 = (1.0 - c) * vector.y * vector.z + s * vector.x;\n        this.m33 = (1.0 - c) * vector.z * vector.z + c;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) {\n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        if (this.cullMode == CullFace.DISABLED) {\n            return true;\n        }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n            if (this.cullMode == CullFace.DISABLED) {\n                return true;\n            }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0;\n        let  x1 ;\n        let  y0;\n        let y1 ;\n\n        if (this.clamp) {\n            x = Math.max(Math.min(x, this.width - 1), 0);\n            y = Math.max(Math.min(y, this.height - 1), 0);\n\n            //x= ((x%this.width)+ this.width) % this.width;\n            //y= ((y%this.height)+ this.height) % this.height;\n\n\n            x0 = Math.floor(x);\n            x1 =  Math.max(Math.min(x0+1, this.width - 1), 0);\n              y0 = Math.floor(y);\n             y1 =Math.max(Math.min(y0+1, this.height - 1), 0);\n        } else {\n            x= ((x%this.width)+ this.width) % this.width;\n            y= ((y%this.height)+ this.height) % this.height;\n\n\n        x0 = x | 0;\n        x1 = (x+ 1 | 0)%this.width ;\n          y0 = y | 0;\n         y1 = (y+ 1 | 0)%this.height ;\n        }\n\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0, x1y0 , x0y1, x1y1 );\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        let x0y0: number;\n        let x1y0: number;\n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n\n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n\n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n\n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        const x0y0_a = x0y0 >> 24 & 0xff;\n        const x1y0_a = x1y0 >> 24 & 0xff;\n        const x0y1_a = x0y1 >> 24 & 0xff;\n        const x1y1_a = x1y1 >> 24 & 0xff;\n\n        const col1_a = x0y0_a * oneMinusXfrac + x1y0_a * xFrac;\n        const col2_a = x0y1_a * oneMinusXfrac + x1y1_a * xFrac;\n        const col_a = col1_a * oneMinusYfrac + (col2_a * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | col_a << 24;\n    }\n\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n               // console.log(xx, yy);\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawText3(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true, points: Array<Vector3f>): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha3(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine, points);\n            xpos += this.width;\n        }\n    }\n\n\n    public drawTextureRectFastAlpha3(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true, points: Array<Vector3f>): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        const speed: number = 0.07;\n        const xOff: number =(time * speed) % 1;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (((color & 0x00000ff)>>0) > 100) {\n\n                    let y = 0-h*1.2+4;\n                    let xpos=  (xs+w)*1.2-160-xOff*1.2;\n                    points.push(new Vector3f(\n                        xpos,\n                        Math.sin(xpos*0.06)*y+Math.sin(xpos*0.2)*1,\n                        Math.cos(xpos*0.06)*y+Math.cos(xpos*0.2)*1));\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { FontRenderer } from '../sine-scroller/FontRenderer';\n\nexport class DofBallsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture; private cocoon: Texture;\n\n    private accumulationBuffer: Uint32Array;\n    fontRenderer: FontRenderer;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        const fonts: string =\n        ' !\\'><C+\\'()@+,-./0123456789:; = ? ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    this.fontRenderer = new FontRenderer(\n        framebuffer,\n        8, 8, fonts,\n        require('../../assets/font.png')\n    );\n        return Promise.all([\n            this.fontRenderer.init(),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.load(require('../../assets/spriteBlur.png'), true).then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n            TextureUtils.load(require('../../assets/cocoon.png'), false).then(\n                (texture: Texture) => this.cocoon = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleTorus(framebuffer, time, this.particleTexture2, true);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.50);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public computeDepthBlur(\n        nearPlane: number,\n        focalPlane: number,\n        farPlane: number, depth: number): number {\n\n        let f: number;\n\n        if (depth > focalPlane) {\n            f = (depth - focalPlane) / (nearPlane - focalPlane);\n        } else {\n            f = (depth - focalPlane) / (farPlane - focalPlane);\n        }\n        return Math.min(f, 1.0);\n    }\n\n    public drawParticleTorus(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        framebuffer.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n\n\n\n        this.fontRenderer.drawText3(framebuffer,0,200-16-4,\"                  OH MY GOSH!!! HOODLUM IS BACK TO ROCK THE SCENE!!! WTF...\", elapsedTime*0.23, false,points);\n\n\n        const modelViewMartrix: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -18)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.sin(elapsedTime * 0.0006)*0.7)\n            .multiplyMatrix(Matrix4f.constructZRotationMatrix(Math.sin(elapsedTime * 0.001)*0.2)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(-1.3+elapsedTime * 0.000))));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach((element: Vector3f) => {\n            points2.push(framebuffer.project(modelViewMartrix.multiply(element)));\n        });\n\n        points2.sort((a: Vector3f, b: Vector3f) => a.z - b.z);\n\n        points2.forEach((element: Vector3f) => {\n            const size: number = -(1.5 * 292 / (element.z));\n            const spriteNum: number = Math.round(this.computeDepthBlur(-15, -22, -29, element.z) * 13);\n\n            framebuffer.drawParticle2Sub(\n                element.x - size / 2,\n                element.y - size / 2,\n                size, size, texture, 1 / element.z, 1.0, spriteNum, 128,1,1,1\n            );\n        });\n    }\n\n}\n","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { Canvas } from '../../Canvas';\nimport { DofBallsScene } from './DofBallsScene';\n\nimport './../../default-style.css';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new DofBallsScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","options","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","insert","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","setAttributes","attributes","styleElement","nonce","setAttribute","insertStyleElement","styleTagTransform","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","currentScript","src","scripts","getElementsByTagName","replace","p","nc","ScaleClipBlitter","framebuffer","constructor","drawScaledTextureClip","xp","yp","width","height","texture","alphaBlend","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","Math","max","alphaScale","index2","y","x","textureIndex","alpha","inverseAlpha","framebufferPixel","texturePixel","r","b","Color","static","toPackedFormat","sub","color","add","div","num","mul","CullFace","Vector4f","z","w","vec","cross","normalize","reci","sqrt","sub2","vec1","vec2","add2","scal","componentWiseMul","dot","cross2","normalize2","AbstractGeometricObject","mesh","inverse","buildMesh","points","normals","Array","normal","faces","n1","n2","n3","v1","v2","v3","transformedPoints","transformedNormals","getMesh","Vector3f","mult","scale","Torus","invert","super","STEPS2","frame","torusFunction","PI","frame2","up","right","pos","sin","cos","j","Vector2f","perp","Matrix4f","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","matrix","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","multiplyMatrix","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","tx","ty","tz","setTranslationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","setRotationMatrix","c","s","vector","multiply2","matrix2","multiply","multiplyHom","multiplyHomArr","multiplyHomArr2","multiplyArr","Matrix3f","angle","xScale","yScale","zScale","Interpolator","start","end","current","y1","y2","mu","mu2","RandomNumberGenerator","seed","getFloat","setSeed","AbstractTriangleRasterizer","AbstractScannlineTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","projection","fillLongRightTriangle","fillLongLeftTriangle","FlatShadingTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","round","wStart","framebufferIndex","wBuffer","LineRasterizerDda","drawLineDDA","xDistance","yDistance","dx","dy","abs","sign","wDelta","drawPixel","LineRasterizerNoZ","drawLineDDANoZ","TexturedTriangleRasterizer","tslope1u","textureCoordinate","u","tslope1v","v","curu1","curv1","tslope2u","tslope2v","curu2","curv2","spanuStep","spanvStep","uStart","vStart","min","bob","color2","getBilinearFilteredPixelRasterizer","TexturedAlphaBlendingTriangleRasterizer","pipeline","currentColor","TextureCoordinate","Vertex","position","AbstractRenderingPipeline","NEAR_PLANE_Z","cullMode","BACK","setCullFace","face","setAlpha","isInFrontOfNearPlane","isTriangleCCW","DISABLED","det","isTriangleCCW2","v4","TexturingRenderingPipeline","sphereMapping","triangleRasterizer","vertexArray","setSphereMapping","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","draw","normalMatrix","normals2","points2","vertices","project2","fakeSphere","uv","clipConvexPolygon","zClipTriangle","t1","computeNearPlaneIntersection","ratio","vertex","subject","input","output","S","point","clipRegion","edge","isInside2","computeIntersection2","AbstractClipEdge","BottomClipEdge","isInside","minWindow","computeIntersection","factor","textCoord","CohenSutherlandLineClipper","cohenSutherlandLineClipper","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","maxWindow","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","LeftClipEdge","RightClipEdge","TopClipEdge","Texture","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","x1","y0","x0y0","x1y0","x0y1","x1y1","col1","floor","col2","getBilinearFilteredPixel2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","Framebuffer","camera","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","lineRasterizer","lineRasterizerNo","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","plane","cylinder2","linerClipper","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","setTexture","getImageData","set","clear","BLACK","clearColorBuffer","fill","drawPixel4","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","roundedY","percent","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","drawRect2","drawText","text","xpos","firstIndex","charCodeAt","drawTextureRectFastAlpha","addReflections","interpolate","Date","now","drawTextureRect2","xs","ys","xt","yt","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","fastFramebufferCopyOffset","dest","offset","l","fastFramebufferCopy","noise","elapsedTime","rng","drawTexturedBillboard","drawParticle","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","textureRowOffset","framebufferRowOffset","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t2","project","t3","clearDepthBuffer","drawBox","wireFrameSphereClipping","sphereFunction2","modelViewMartrix","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","transformed","colred","colLine","wireFrameTerrain","heightmap","xOff","zOff","forEach","drawBoundingSphere","sphere","getRadius","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","dist2","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawParticleStreams","light","sort","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","asin","fakeSphere2","tex","theta","phi","FullscreenUtils","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","Canvas","scene","canvas","context","startTime","boundRenderLoop","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","toggleFullscreen","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","AbstractScene","Promise","all","TextureUtils","resolve","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","FontRenderer","file","fontTexture","charToIndex","fonts","Map","addCharInex","load","drawText2","xFonts","asciiCode","has","sine","textOff","drawText3","drawTextureRectFastAlpha3","startW","endW","yDisp","char","DofBallsScene","blurred","particleTexture2","cocoon","accumulationBuffer","fontRenderer","generateProceduralNoise","drawParticleTorus","texture3","computeDepthBlur","nearPlane","focalPlane","farPlane","depth","f","noClear","constructZRotationMatrix","spriteNum","locals","main"],"sourceRoot":""}