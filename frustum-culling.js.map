{"version":3,"file":"frustum-culling.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/animation/CameraAnimator.ts","webpack://aisa/./src/animation/CameraKeyFrame.ts","webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/BasicCamera.ts","webpack://aisa/./src/camera/ControllableCamera.ts","webpack://aisa/./src/camera/index.ts","webpack://aisa/./src/clustered-culling/BoundingVolumeExpander.ts","webpack://aisa/./src/clustered-culling/FrustumCuller.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/examples/frustum-culling/FrustumCullingScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Plane.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/blender/BlenderLoader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/frustum-culling/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { BasicCamera } from '../camera';\nimport { Utils } from '../core/Utils';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector3f } from '../math/Vector3f';\nimport { CameraKeyFrame } from './CameraKeyFrame';\nexport class CameraAnimator {\n\n    public pos: Vector3f;\n    private keyFrames: Array<CameraKeyFrame>;\n\n    // TODO:\n    // - should we really loop or better restart??\n    // - dont use linear interpolation see bourke\n    // - maybe quaternions and slerp for rotation\n    // temp solution: no linear for\n\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getViewMatrix(elapsedTime: number): Matrix4f {\n        const keyFrameDuration = 2600;\n\n        elapsedTime *= 1.0;\n\n        const first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        const zero = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        const second = (first + 1) % this.keyFrames.length;\n        const third = (first + 2) % this.keyFrames.length;\n        const fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        const mu2 = (1 - Math.cos(fraction * Math.PI)) / 2;\n        let position = new Vector3f(\n            Utils.CosineInterpolate(this.keyFrames[first].position.x, this.keyFrames[second].position.x, fraction),\n            Utils.CosineInterpolate(this.keyFrames[first].position.y, this.keyFrames[second].position.y, fraction),\n            Utils.CosineInterpolate(this.keyFrames[first].position.z, this.keyFrames[second].position.z, fraction)\n        );\n        position = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].position.x, this.keyFrames[first].position.x, this.keyFrames[second].position.x, this.keyFrames[third].position.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.y, this.keyFrames[first].position.y, this.keyFrames[second].position.y, this.keyFrames[third].position.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.z, this.keyFrames[first].position.z, this.keyFrames[second].position.z, this.keyFrames[third].position.z, fraction)\n        );\n        let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\n\n        look = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.x, this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x, this.keyFrames[third].rotation.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.y, this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y, this.keyFrames[third].rotation.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.z, this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z, this.keyFrames[third].rotation.z, fraction)\n        );\n        this.pos = position;\n\n        return new BasicCamera(position, look.x, look.y, look.z).getViewMatrix();\n    }\n\n}\n","import { Vector3f } from '../math';\n\nexport class CameraKeyFrame {\n\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(position: Vector3f, rotation: Vector3f) {\n        this.position = position;\n        this.rotation = rotation;\n    }\n\n}","import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Matrix4f, Vector3f } from '../math';\n\nexport class BasicCamera {\n\n    protected position: Vector3f;\n    protected yaw: number;\n    protected pitch: number;\n    protected roll: number;\n\n    constructor(position: Vector3f, yaw: number, pitch: number, roll: number) {\n        this.position = position;\n        this.yaw = yaw;\n        this.pitch = pitch;\n        this.roll = roll;\n    }\n\n    public getViewMatrix(): Matrix4f {\n        const roll = Matrix4f.constructZRotationMatrix(-this.roll);\n        const pitch = Matrix4f.constructXRotationMatrix(-this.pitch);\n        const yaw = Matrix4f.constructYRotationMatrix(-this.yaw);\n\n        const translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\n\n        return roll.multiplyMatrix(pitch).multiplyMatrix(yaw).multiplyMatrix(translation);\n    }\n\n    public getPosition(): Vector3f {\n        return this.position;\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { BasicCamera } from './BasicCamera';\n\nexport class ControllableCamera extends BasicCamera {\n\n    constructor(position: Vector3f, yaw: number, pitch: number, roll: number) {\n        super(position, yaw, pitch, roll);\n    }\n\n    public moveForward(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.position.x += distance * -Math.sin(this.yaw);\n        this.position.z += distance * -Math.cos(this.yaw);\n    }\n\n    public moveBackward(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.position.x -= distance * -Math.sin(this.yaw);\n        this.position.z -= distance * -Math.cos(this.yaw);\n    }\n\n    public turnLeft(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.yaw += distance;\n    }\n\n    public turnRight(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.yaw -= distance;\n    }\n\n    public turnUp(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.pitch += distance;\n    }\n\n    public turnDown(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.pitch -= distance;\n    }\n\n}\n","export { BasicCamera } from './BasicCamera';\nexport { ControllableCamera } from './ControllableCamera';\n","import { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { Sphere } from '../math/Sphere';\n\nexport class BoundingVolumeExpander {\n\n    public static expand(scene: Array<FlatshadedMesh>): Array<[FlatshadedMesh, Sphere]> {\n        return scene.map((mesh: FlatshadedMesh): [FlatshadedMesh, Sphere] => {\n            const sphere: Sphere = new ComputationalGeometryUtils().computeBoundingSphere(mesh.points);\n            sphere.getCenter().w = 1;\n            return [mesh, sphere];\n        });\n    }\n\n}\n","\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Plane } from '../math/Plane';\nimport { Sphere } from '../math/Sphere';\nimport { Vector3f } from '../math/Vector3f';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class FrustumCuller {\n\n    private planes: Array<Plane>;\n    private pos: Vector4f;\n    private normals: Array<Vector4f>;\n\n    public constructor(framebuffer: Framebuffer) {\n        this.planes = new Array<Plane>();\n\n        for (let i: number = 0; i < 4; i++) {\n            this.planes.push(new Plane(new Vector4f(0, 0, 0, 0), 0));\n        }\n\n        this.pos = new Vector4f(0, 0, 0, 0);\n\n        // for some reason this is fucked up\n        // READ: http://www.cubic.org/docs/3dclip.htm\n        this.normals = [\n            //  new Vector4f(Math.cos(-HALF_HORIZONTAL_FOV), 0, Math.sin(-HALF_HORIZONTAL_FOV), 0.0),\n            //  new Vector4f(-Math.cos(HALF_HORIZONTAL_FOV), 0, -Math.sin(HALF_HORIZONTAL_FOV), 0.0),\n            //  new Vector4f(0, -Math.cos(HALF_VERTICAL_FOV), -Math.sin(HALF_VERTICAL_FOV), 0.0),\n            // new Vector4f(0, Math.cos(-HALF_VERTICAL_FOV), Math.sin(-HALF_VERTICAL_FOV), 0.0),\n            // new Vector4f(0.0, 0.0, -1.0, 0.0),\n            // new Vector4f(0.0, 0.0, 1.0, 0.0)\n        ];\n\n        const halfWidth =  framebuffer.width / 2;\n        const halfHeight = framebuffer.height / 2;\n        const magicWidth =  292;\n        const vertices: Array<Vector4f> = [\n            new Vector4f(-halfWidth / 2, -halfHeight / 2, magicWidth),\n            new Vector4f(halfWidth / 2, -halfHeight / 2, magicWidth),\n            new Vector4f(halfWidth / 2, halfHeight / 2, magicWidth),\n            new Vector4f(-halfWidth / 2, halfHeight / 2, magicWidth),\n        ];\n        for (let i: number = 0; i < vertices.length; i++) {\n            const normal: Vector4f = vertices[i].cross(vertices[(i + 1) % vertices.length]).normalize().mul(-1);\n            this.normals.push(normal);\n        }\n\n    }\n\n    public updateFrustum(modelViewMatrix: Matrix4f, position: Vector3f): void {\n        const inverseRotation: Matrix4f = modelViewMatrix.getInverseRotation();\n\n        inverseRotation.multiplyHomArr(this.normals[0], this.planes[0].normal); // left\n        inverseRotation.multiplyHomArr(this.normals[1], this.planes[1].normal); // right\n        inverseRotation.multiplyHomArr(this.normals[2], this.planes[2].normal); // bottom\n        inverseRotation.multiplyHomArr(this.normals[3], this.planes[3].normal); // top\n        // inverseRotation.multiplyHomArr(this.normals[4], this.planes[4].normal); // near\n        // inverseRotation.multiplyHomArr(this.normals[5], this.planes[5].normal); // far\n\n        this.pos.x = -position.x;\n        this.pos.y = -position.y;\n        this.pos.z = -position.z;\n\n        this.planes[0].distance = -this.planes[0].normal.dot(this.pos);\n        this.planes[1].distance = -this.planes[1].normal.dot(this.pos);\n        this.planes[2].distance = -this.planes[2].normal.dot(this.pos);\n        this.planes[3].distance = -this.planes[3].normal.dot(this.pos);\n        // TODO: bugfix near and far plane!\n        // this.planes[4].distance = -this.planes[4].normal.dot(this.pos) + this.near;\n        // this.planes[5].distance = -this.planes[3].normal.dot(this.pos) - this.far;\n    }\n\n    public getPlanes(): Array<Plane> {\n        return this.planes;\n    }\n\n    public isPotentiallyVisible(boundingVolume: Sphere): boolean {\n        for (let i: number = 0; i < this.planes.length; i++) {\n            if (!boundingVolume.isInsidePositiveHalfSpace(this.planes[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { CameraAnimator } from '../../animation/CameraAnimator';\nimport { CameraKeyFrame } from '../../animation/CameraKeyFrame';\nimport { BoundingVolumeExpander } from '../../clustered-culling/BoundingVolumeExpander';\nimport { FrustumCuller } from '../../clustered-culling/FrustumCuller';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { Sphere } from '../../math/Sphere';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\n\nexport class FrustumCullingScene extends AbstractScene {\n\n    private world: Array<[FlatshadedMesh, Sphere]>;\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/world2.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.world = BoundingVolumeExpander.expand(mesh)\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n\n        this.drawBlenderScene(framebuffer, time - 260000);\n    }\n\n    public drawBlenderScene(framebuffer: Framebuffer, elapsedTime: number, texture2?: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        framebuffer.clearDepthBuffer();\n\n        const keyFrames: Array<CameraKeyFrame> = [\n            new CameraKeyFrame(new Vector3f(-5, 3, 10), new Vector3f(0, 0, 0)),\n            new CameraKeyFrame(new Vector3f(5, 10, 10), new Vector3f(0, 0, 0.1)),\n            new CameraKeyFrame(new Vector3f(5, 10, 0), new Vector3f(1.5, -1, -0.2)),\n            new CameraKeyFrame(new Vector3f(5, 3, -10), new Vector3f(2.5, 0, -0.09)),\n            new CameraKeyFrame(new Vector3f(-5, 7, -10), new Vector3f(3.5, 0, 1)),\n            new CameraKeyFrame(new Vector3f(-5, 3, 10), new Vector3f(4, 0, 0.)),\n            new CameraKeyFrame(new Vector3f(5, 3, -2), new Vector3f(3, -0.2, 0.)),\n            new CameraKeyFrame(new Vector3f(18, 2, -0), new Vector3f(2, -0.4, 0.)),\n            new CameraKeyFrame(new Vector3f(15, 4, -0), new Vector3f(2, -0.5, 0.)),\n            new CameraKeyFrame(new Vector3f(5, 7, -10), new Vector3f(2.5, 0, -0.09)),\n        ];\n\n        const cameraAnimator = new CameraAnimator();\n        cameraAnimator.setKeyFrames(keyFrames);\n\n        const modelViewMartrix: Matrix4f = cameraAnimator.getViewMatrix(elapsedTime);\n\n\n        const frustumCuller = new FrustumCuller(framebuffer);\n        frustumCuller.updateFrustum(modelViewMartrix, cameraAnimator.pos);\n\n        for (let j = 0; j < this.world.length; j++) {\n\n            const model: [FlatshadedMesh, Sphere] = this.world[j];\n\n            if (frustumCuller.isPotentiallyVisible(model[1])) {\n                this.renderingPipeline.draw(framebuffer, model[0], modelViewMartrix);\n                const colLine = 255 << 24 | 255 << 8;\n                framebuffer.drawBoundingSphere(model[1], modelViewMartrix, colLine);\n                //  count++;\n            } else {\n                const colLine = 255 << 24 | 255;\n                framebuffer.drawBoundingSphere(model[1], modelViewMartrix, colLine);\n            }\n        }\n\n        if (texture2) {\n            const points: Array<Vector3f> = new Array<Vector3f>();\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(66);\n            for (let i = 0; i < 640; i++) {\n                // points.push(new Vector3f(rng.getFloat() * 30 - 15, rng.getFloat() * 10 - 1, rng.getFloat() * 30 - 15));\n                let x = rng.getFloat() * 30 - 15;\n                x += Math.sin(elapsedTime * 0.0008 + x) * 2;\n                let y = rng.getFloat() * 30 - 15;\n                y += Math.sin(elapsedTime * 0.0009 + y) * 2;\n                let z = rng.getFloat() * 30 - 15;\n                z += Math.sin(elapsedTime * 0.0011 + z) * 2;\n                points.push(new Vector3f(x, y, z));\n            }\n\n            const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n                const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n                points2.push(transformed);\n            });\n\n            points2.sort((a, b) => {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                const size = -(3.1 * 192 / (element.z));\n                framebuffer.drawSoftParticle(\n                    Math.round(element.x - size * 0.5),\n                    Math.round(element.y - size * 0.5),\n                    Math.round(size), Math.round(size), texture2, 1 / element.z, 1.0);\n            });\n        }\n        // framebuffer.drawText(8, 18 + 8, 'RENDERED OBJECTS: ' + count + '/' + this.world.length, texture);\n        framebuffer.drawScreenBounds(framebuffer);\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","/**\n * Defines a plane as used for primitive clipping against the\n * view frustum.\n */\nimport { Vector4f } from './';\n\nexport class Plane {\n\n    public distance: number;\n    public normal: Vector4f;\n\n    constructor(normal: Vector4f, distance: number) {\n        this.normal = normal;\n        this.distance = distance;\n    }\n\n    public getNormal(): Vector4f {\n        return this.normal;\n    }\n\n    public getDistance(): number {\n        return this.distance;\n    }\n\n    public isInside(point: Vector4f): boolean {\n        const dot: number = point.dot(this.normal);\n        return dot >= this.distance;\n    }\n\n    public computeIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const dot1: number = p1.dot(this.normal);\n        const dot2: number = p2.dot(this.normal);\n        const scale: number = (this.distance - dot1) / (dot2 - dot1);\n        return p2.sub(p1).mul(scale).add(p1);\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { BlenderScene } from '../../blender/BlenderScene';\n\n/**\n * Load Wavefront OBJ file that was converted via obj2json utility.\n * to save the convertToMeshArray step\n * renamed to JSX file to load file at runtime\n */\nexport class BlenderLoader {\n\n    public static load(filename: string): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: string): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.getBlenderScene(meshes, false);\n        });\n    }\n\n    private constructor() {\n\n    }\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { FrustumCullingScene } from './FrustumCullingScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new FrustumCullingScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","forEach","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","cos","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","keyFrames","setKeyFrames","getViewMatrix","first","zero","second","third","fraction","mu2","Utils","CosineInterpolate","CubicInterpolate","look","rotation","BasicCamera","blenderScene","invert","object","normals","vertices","normalize","faces","f","n1","n2","n3","obj","transformedNormals","map","transformedPoints","file","disp","coords","uv","ComputationalGeometryUtils","computeBoundingSphere","normals2","boundingSphere","name","drawScaledTextureClip","yaw","pitch","roll","constructZRotationMatrix","translation","getPosition","ControllableCamera","super","moveForward","speed","deltaTime","distance","moveBackward","turnLeft","turnRight","turnUp","turnDown","mesh","planes","Plane","halfWidth","halfHeight","magicWidth","cross","updateFrustum","modelViewMatrix","inverseRotation","getInverseRotation","multiplyHomArr","dot","getPlanes","isPotentiallyVisible","boundingVolume","isInsidePositiveHalfSpace","sub","num","input","value","istart","istop","ostart","ostop","random","srcPosition","dst","dstPosition","slice","prototype","splice","apply","concat","fade","t","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","y0","y2","y3","mu","a0","FrustumCullingScene","AbstractScene","world","renderingPipeline","GouraudShadingRenderingPipeline","Promise","all","BlenderLoader","load","BoundingVolumeExpander","expand","drawBlenderScene","texture2","CameraKeyFrame","cameraAnimator","CameraAnimator","frustumCuller","FrustumCuller","model","draw","multiply","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","getMesh","AbstractGeometricObject","frame","frame2","up","right","Error","Sphere","center","radius","point","current","Matrix3f","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","getRotation","planePoint","planeNormal","lightPosition","d","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr2","multiplyArr","getNormal","getDistance","isInside","computeIntersection","p1","p2","dot1","dot2","getTran","mat","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","filename","fetch","response","json","meshes","BlenderJsonParser","parse","getBlenderScene","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setFog","setLights","enableLighting","enable","setMaterial","setColor","drawMeshArray","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","S","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","window","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","replace","Canvas","main"],"sourceRoot":""}