{"version":3,"file":"torus-knot.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/torus-knot/TorusKnotScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/geometrical-objects/TorusKnot.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/fog/Fog.ts","webpack://aisa/./src/shading/fog/LinearFog.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/torus-knot/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1,\n    DISABLED\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\nimport { Vector4f } from '../../math/index';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { LinearFog } from '../../shading/fog/LinearFog';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { Interpolator } from '../../math/Interpolator';\n\nexport class TorusKnotScene extends AbstractScene {\n\n    private rave: Texture;\n    private torus: TorusKnot = new TorusKnot();\n    private noise: Texture;\n    private micro: Texture;\n    private startTime: number;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n        this.renderingPipeline.setFog(new LinearFog(-160, -380, new Vector4f(0, 0, 0, 1)));\n        this.startTime = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/rave.png'), false).then(\n                (texture: Texture) => this.rave = texture\n            ),\n            TextureUtils.load(require('../../assets/microstrange.png'), false).then(\n                (texture: Texture) => this.micro = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.raveMoview(framebuffer, time * 5, this.rave);\n\n        this.glitchScreen(framebuffer, time, this.noise);\n        // framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n\n        framebuffer.drawScaledTextureClipAdd(\n            framebuffer.width - (((time * 0.13) | 0) % (this.micro.width * 2 + framebuffer.width)),\n            framebuffer.height / 2 - 20,\n            this.micro.width * 2, this.micro.height * 2, this.micro, 0.5);\n\n        framebuffer.drawScaledTextureClipAdd(\n            (((time * 0.1) | 0) % (this.micro.width + framebuffer.width)) - framebuffer.width,\n            framebuffer.height / 2 - 60,\n            this.micro.width, this.micro.height, this.micro, 0.5);\n\n        framebuffer.setCullFace(CullFace.BACK);\n        this.shadingTorus5(framebuffer, time * 0.03);\n        /*\n                framebuffer.drawScaledTextureClipAdd(\n                    framebuffer.width - (((time * 0.05) | 0) % (this.micro.width + framebuffer.width)),\n                    framebuffer.height / 2 - 60,\n                    this.micro.width, this.micro.height, this.micro);*/\n    }\n\n    public raveMoview(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        framebuffer.fastFramebufferCopyOffset(framebuffer.framebuffer, texture.texture, -(Math.round(elapsedTime / 200) % 11) * 200);\n    }\n\n    public glitchScreen(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.0003) * 0.5 + 0.5);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        const texture2 = new Texture();\n        texture2.height = framebuffer.height;\n        texture2.width = framebuffer.width;\n        texture2.texture = framebuffer.framebuffer;\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                framebuffer.drawTextureRect(20 * (16 - x), 20 * ((16 * rng.getFloat()) | 0), 20 * x, 20 * y, 20, 20, texture2.texture, texture2.width, 0.1 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < 16; x++) {\n                for (let y = 0; y < 10; y++) {\n                    framebuffer.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture.texture, texture.width, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.tmpGlitch, framebuffer.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n        const rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            const scale = rng2.getFloat() * glitchFactor;\n            const off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * framebuffer.width;\n                let glIndex = yStart * framebuffer.width + framebuffer.width - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n\n                glIndex = yStart * framebuffer.width;\n                const count = framebuffer.width - offset;\n\n                for (let i = 0; i < count; i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n\n    private shadingTorus5(framebuffer: Framebuffer, time: number) {\n        framebuffer.clearDepthBuffer();\n\n        const scale = 1.0;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(time * 0.035));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(time * 0.04));\n\n        const ukBasslineBpm = 130 / 2;\n        const ukBasslineClapMs = 60000 / ukBasslineBpm;\n        const smashTime = (time * 10) % ukBasslineClapMs;\n        const smash = (Interpolator.cosineInterpolate(0, 15, smashTime) - Interpolator.cosineInterpolate(15, 200, smashTime) +\n            0.4 * Interpolator.cosineInterpolate(200, 300, smashTime) - 0.4 * Interpolator.cosineInterpolate(300, 400, smashTime)\n        )\n            * 12;\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(time * 0.04) * 20,\n            Math.sin(time * 0.05) * 8 - smash * 5, -28 - 250).multiplyMatrix(modelViewMartrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torus.getMesh(), modelViewMartrix);\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor(inverse: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            const tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize();\n            const right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        this.buildMesh(points, index, inverse);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n\n    public setRotationMatrix(x: number,y: number,z: number, alpha: number): void {\n        const c = Math.cos(Math.PI * 2 *alpha / 360 );\n        const s = Math.sin(Math.PI * 2 *alpha / 360 );\n        const vector = new Vector3f(x,y,z);\n        vector.normalize2();\n\n        this.m11 = (1.0 - c) * vector.x * vector.x + c;\n        this.m12 = (1.0 - c) * vector.x * vector.y - s * vector.z;\n        this.m13 = (1.0 - c) * vector.x * vector.z + s * vector.y;\n        this.m14 = 0.0;\n\n        this.m21 = (1.0 - c) * vector.x * vector.y + s * vector.z;\n        this.m22 = (1.0 - c) * vector.y * vector.y + c;\n        this.m23 = (1.0 - c) * vector.y * vector.z - s * vector.x;\n        this.m24 = 0.0;\n\n        this.m31 = (1.0 - c) * vector.x * vector.z - s * vector.y;\n        this.m32 = (1.0 - c) * vector.y * vector.z + s * vector.x;\n        this.m33 = (1.0 - c) * vector.z * vector.z + c;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) {\n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        if (this.cullMode == CullFace.DISABLED) {\n            return true;\n        }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n            if (this.cullMode == CullFace.DISABLED) {\n                return true;\n            }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Fog {\n\n    public abstract computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Fog } from './Fog';\n\nexport class LinearFog extends Fog {\n\n    private zStart: number;\n    private zEnd: number;\n    private fogColor: Vector4f;\n\n    public constructor(zStart: number, zEnd: number, fogColor: Vector4f) {\n        super();\n        this.zStart = zStart;\n        this.zEnd = zEnd;\n        this.fogColor = fogColor;\n    }\n\n    public computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f {\n        if (vertex.z >= this.zStart) {\n            return color;\n        } else if (vertex.z <= this.zEnd) {\n            return this.fogColor;\n        } else {\n            const f: number = (this.zEnd - vertex.z) / (this.zEnd - this.zStart);\n            return new Vector4f(\n                color.x * f + this.fogColor.x * (1 - f),\n                color.y * f + this.fogColor.y * (1 - f),\n                color.z * f + this.fogColor.z * (1 - f)\n            );\n        }\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        let x0y0: number;\n        let x1y0: number;\n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n\n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n\n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n\n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        const x0y0_a = x0y0 >> 24 & 0xff;\n        const x1y0_a = x1y0 >> 24 & 0xff;\n        const x0y1_a = x0y1 >> 24 & 0xff;\n        const x1y1_a = x1y1 >> 24 & 0xff;\n\n        const col1_a = x0y0_a * oneMinusXfrac + x1y0_a * xFrac;\n        const col2_a = x0y1_a * oneMinusXfrac + x1y1_a * xFrac;\n        const col_a = col1_a * oneMinusYfrac + (col2_a * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | col_a << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { TorusKnotScene } from './TorusKnotScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new TorusKnotScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","TorusKnotScene","AbstractScene","rave","TorusKnot","micro","renderingPipeline","GouraudShadingRenderingPipeline","setFog","LinearFog","Promise","all","TextureUtils","load","generateProceduralNoise","raveMoview","glitchScreen","shadingTorus5","glitchFactor","texture2","rng2","off","glIndex","smashTime","smash","draw","getMesh","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","cross","normalize","faces","n1","n2","n3","transformedPoints","map","transformedNormals","AbstractGeometricObject","invert","super","frame","frame2","up","right","torusFunction3","tangent","current","y2","mu","mu2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","setRotationMatrix","c","s","normalize2","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","distance","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","DISABLED","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","mat","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setLights","enableLighting","enable","setMaterial","setColor","drawMeshArray","meshes","model","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","point","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","normals2","vertices","uv","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","Fog","zStart","zEnd","fogColor","f","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","window","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}