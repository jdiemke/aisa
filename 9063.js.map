{"version":3,"file":"9063.js","mappings":"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","sources":["webpack://aisa/./src/examples/particle-streams/ParticleStreamsScene.ts","webpack://aisa/./src/examples/demo/parts/Scene16.ts"],"sourcesContent":["import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f, Matrix4f, Matrix3f } from '../../math';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture';\nimport { Interpolator } from '../../math/Interpolator';\n\nexport class ParticleStreamsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture().then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleStreams(framebuffer, time, this.particleTexture2);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.55);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            const radius = 2.8;\n            const radius2 = 2.9 + 3 * Math.sin(Math.PI * 2 * i / num - elapsedTime * 0.002);\n\n            for (let j = 0; j < num2; j++) {\n\n                const x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                const y = Math.cos(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius + 8 + radius2;\n                const z = Math.sin(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius;\n\n                points.push(Matrix3f.constructXRotationMatrix(Math.PI * 2 * i / num - Math.sin(elapsedTime * 0.0003 + Math.PI * 2 * i / num)).multiply(new Vector3f(x, y, z)));\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n                Matrix4f.constructZRotationMatrix(Math.PI * 0.17).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(elapsedTime * 0.00015).multiplyMatrix(\n                        Matrix4f.constructXRotationMatrix(Math.PI * 2 / 3 * i + elapsedTime * 0.0006)))\n            );\n\n            const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort((a, b) => {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                // let size = -(2.0 * 192 / (element.z));\n                const size = -(1.3 * 192 / (element.z));\n                if (element.z < -4)\n                    framebuffer.drawParticleNoDepth(\n                        Math.round(element.x - size / 2),\n                        Math.round(element.y - size / 2),\n                        Math.round(size), Math.round(size), texture, Interpolator.interpolate(-90, -55, element.z));\n            });\n        }\n    }\n\n\n\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { ParticleStreamsScene } from '../../particle-streams/ParticleStreamsScene';\n\nexport class Scene16 {\n    private ParticleStreamsScene: ParticleStreamsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.ParticleStreamsScene = new ParticleStreamsScene();\n\n        return Promise.all([\n            this.ParticleStreamsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.ParticleStreamsScene.render(framebuffer, time);\n    }\n\n}"],"names":["ParticleStreamsScene","AbstractScene","blurred","particleTexture2","noise","accumulationBuffer","init","framebuffer","this","Uint32Array","width","height","Promise","all","TextureUtils","load","then","texture","generateProceduralParticleTexture","generateProceduralNoise","render","time","drawScaledTextureClipBi","drawParticleStreams","texture3","Texture","drawTexture","fastFramebufferCopy","elapsedTime","points","Array","i","radius","radius2","Math","sin","PI","j","x","num","y","cos","z","push","Matrix3","constructXRotationMatrix","multiply","Vector3f","modelViewMartrix","Matrix4f","constructTranslationMatrix","multiplyMatrix","constructZRotationMatrix","constructYRotationMatrix","points2","length","forEach","element","transformed","project","sort","a","b","size","drawParticleNoDepth","round","Interpolator","interpolate","Scene16"],"sourceRoot":""}