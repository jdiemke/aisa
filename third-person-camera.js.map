{"version":3,"file":"third-person-camera.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/ThirdPersonCamera.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/md2/ModelViewMatrix.ts","webpack://aisa/./src/examples/mode-7/Keyboard.ts","webpack://aisa/./src/examples/third-person-camera/Player.ts","webpack://aisa/./src/examples/third-person-camera/ThirdPersonCameraScene.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerRunningState.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerStandingState.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerState.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerStateMachine.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/input/AisaGamepad.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/md2/InvalidFileFormatException.ts","webpack://aisa/./src/model/md2/MD2AnimationNames.ts","webpack://aisa/./src/model/md2/MD2Frame.ts","webpack://aisa/./src/model/md2/MD2Header.ts","webpack://aisa/./src/model/md2/MD2Loader.ts","webpack://aisa/./src/model/md2/MD2Model.ts","webpack://aisa/./src/model/md2/MD2Skin.ts","webpack://aisa/./src/model/md2/MD2TexCoord.ts","webpack://aisa/./src/model/md2/MD2Triangle.ts","webpack://aisa/./src/model/md2/MD2Vertex.ts","webpack://aisa/./src/model/md2/StreamReader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturedMesh.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/third-person-camera/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Matrix4f, Vector3f } from '../math/index';\n\n/**\n * http://www.mathforgameprogrammers.com/gdc2016/GDC2016_Eiserloh_Squirrel_JuicingYourCameras.pdf\n * https://www.gamasutra.com/blogs/ItayKeren/20150511/243083/Scroll_Back_The_Theory_and_Practice_of_Cameras_in_SideScrollers.php\n * https://www.gameenginebook.com/resources/gameconn2011-final.pdf\n * https://en.wikipedia.org/wiki/Virtual_camera_system\n * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.924.6065&rep=rep1&type=pdf\n * https://gamedev.stackexchange.com/questions/123543/damping-the-camera-lookat-rotation/123553#123553\n * https://mashable.com/2017/04/03/video-game-cameras-suck/?europe=true#0bJy.os1Qmqs\n * https://www.gamasutra.com/blogs/SamanthaStahlke/20170919/305840/Prototyping_a_Dynamic_Camera_System.php\n * https://code.tutsplus.com/tutorials/unity3d-third-person-cameras--mobile-11230\n */\nexport class ThirdPersonCamera {\n\n    public computeMatrix(eyePosition: Vector3f, targetPosition: Vector3f, up: Vector3f): Matrix4f {\n\n        const translation: Matrix4f = Matrix4f.constructTranslationMatrix(\n            -eyePosition.x,\n            -eyePosition.y,\n            -eyePosition.z\n        );\n\n        const forwardVector: Vector3f = eyePosition.sub(targetPosition).normalize();\n        const leftVector: Vector3f = up.cross(forwardVector).normalize();\n        const upVector: Vector3f = forwardVector.cross(leftVector);\n\n        const rotation: Matrix4f = new Matrix4f();\n\n        rotation.m11 = leftVector.x;\n        rotation.m12 = leftVector.y;\n        rotation.m13 = leftVector.z;\n        rotation.m14 = 0.0;\n\n        rotation.m21 = upVector.x;\n        rotation.m22 = upVector.y;\n        rotation.m23 = upVector.z;\n        rotation.m24 = 0.0;\n\n        rotation.m31 = forwardVector.x;\n        rotation.m32 = forwardVector.y;\n        rotation.m33 = forwardVector.z;\n        rotation.m34 = 0.0;\n\n        rotation.m41 = 0.0;\n        rotation.m42 = 0.0;\n        rotation.m43 = 0.0;\n        rotation.m44 = 1.0;\n\n        return rotation.multiplyMatrix(translation);\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Matrix4f } from '../../math/index';\n\n/**\n * The primary purpose of the model view matrix class is to reduce\n * the instanciation of temporary matrix classes by reusing existing instances.\n */\nexport class ModelViewMatrix {\n\n    private currtentMatrix: Matrix4f;\n    private tempMatrix: Matrix4f;\n    private temp: Matrix4f;\n    private transformation: Matrix4f;\n\n    public constructor() {\n        this.currtentMatrix = new Matrix4f();\n        this.tempMatrix = new Matrix4f();\n        this.temp = new Matrix4f();\n        this.transformation = new Matrix4f();\n    }\n\n    public getMatrix(): Matrix4f {\n        return this.currtentMatrix;\n    }\n\n    public setIdentity(): void {\n        this.currtentMatrix.setIdentityMatrix();\n    }\n\n    public multMatrix(mat: Matrix4f): void {\n        this.currtentMatrix = this.currtentMatrix.multiplyMatrix(mat);\n    }\n\n    public trans(x: number, y: number, z: number): void {\n        this.transformation.setTranslationMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public scal(x: number, y: number, z: number): void {\n        this.transformation.setScaleMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public xRotate(x: number): void {\n        this.transformation.setXRotationMatrix(x);\n        this.applyMat();\n    }\n    public yRotate(x: number): void {\n        this.transformation.setYRotationMatrix(x);\n        this.applyMat();\n    }\n\n    private applyMat(): void {\n\n        this.tempMatrix.multiply2(this.currtentMatrix, this.transformation);\n        // switch back and front\n        this.temp = this.currtentMatrix;\n        this.currtentMatrix = this.tempMatrix;\n        this.tempMatrix = this.temp;\n    }\n\n}\n","export class Keyboard {\n\n    public static LEFT: number = 37;\n    public static UP: number = 38;\n    public static RIGHT: number = 39;\n    public static DOWN: number = 40;\n    public static KEY_A: number = 65;\n    public static KEY_D: number = 68;\n    public static KEY_L: number = 76;\n\n    private pressed: Array<boolean>;\n\n    constructor() {\n        this.pressed = new Array<boolean>(256);\n        this.pressed.fill(false);\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => this.onKeyUp(event), false);\n        window.addEventListener('keydown', (event: KeyboardEvent) => this.onKeyDown(event), false);\n    }\n\n    public isDown(code: number): boolean {\n        return this.pressed[code];\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = true;\n    }\n\n    public onKeyUp(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = false;\n    }\n\n}\n","import { Vector2f } from '../../math/index';\n\nexport class Player {\n\n    public position: Vector2f = new Vector2f(0, 0);\n    public angle: number = 0;\n\n    public moveForward(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.position.x += distance * -Math.sin(Math.PI * 2 / 360 * this.angle);\n        this.position.y += distance * -Math.cos(Math.PI * 2 / 360 * this.angle);\n    }\n\n    public moveBackward(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.position.x -= distance * -Math.sin(Math.PI * 2 / 360 * this.angle);\n        this.position.y -= distance * -Math.cos(Math.PI * 2 / 360 * this.angle);\n    }\n\n    public getDirection(): Vector2f {\n        return new Vector2f(-Math.sin(Math.PI * 2 / 360 * this.angle),\n            - Math.cos(Math.PI * 2 / 360 * this.angle));\n    }\n\n    public turnLeft(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.angle += distance;\n    }\n\n    public turnRight(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.angle -= distance;\n    }\n\n}\n","import { ThirdPersonCamera } from '../../camera/ThirdPersonCamera';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AisaGamepad } from '../../input/AisaGamepad';\nimport { Matrix4f, Vector3f, Vector4f } from '../../math/index';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Keyboard } from '../mode-7/Keyboard';\nimport { MD2Loader } from '../../model/md2/MD2Loader';\nimport { MD2Model } from '../../model/md2/MD2Model';\nimport { ModelViewMatrix } from '../md2/ModelViewMatrix';\nimport { Player } from './Player';\nimport { PlayerStateMachine } from './state-machine/PlayerStateMachine';\n\n/**\n * http://tfc.duke.free.fr/coding/mdl-specs-en.html\n * http://tfc.duke.free.fr/coding/md2-specs-en.html\n * https://github.com/mrdoob/three.js/tree/dev/examples/models/md2/ogro\n * http://tfc.duke.free.fr/old/models/md2.htm\n */\nexport class ThirdPersonCameraScene extends AbstractScene {\n\n    private static readonly CLEAR_COLOR: number = Color.SLATE_GRAY.toPackedFormat();\n\n    public lastTime: number = Date.now();\n\n    private keyboard: Keyboard = new Keyboard();\n    private gamepad: AisaGamepad = new AisaGamepad();\n\n    private ogroTexture: Texture;\n    private freakTexture: Texture;\n    private weaponTexture: Texture;\n    private texture4: Texture;\n    private glow: Texture;\n    private fontred: Texture;\n    private ground: Texture;\n    private md2: MD2Model;\n    private weapon: MD2Model;\n    private startTime: number;\n    private md2Freak: MD2Model;\n\n    private modelViewMatrix: ModelViewMatrix = new ModelViewMatrix();\n\n    private floor: TexturedMesh;\n    private shadow: TexturedMesh;\n\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private player: Player = new Player();\n\n    private camera: ThirdPersonCamera = new ThirdPersonCamera();\n\n    private oldEye: Vector3f = new Vector3f(0, 0, 0);\n    private attack: boolean = false;\n    private jump: boolean = false;\n    private run: boolean = false;\n\n    private playerStateMachine: PlayerStateMachine;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.texturedRenderingPipeline.setCullFace(CullFace.FRONT);\n        this.startTime = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/md2/hueteotl.png'), false).then(\n                (texture: Texture) => this.ogroTexture = texture),\n            TextureUtils.load(require('../../assets/md2/weapon.png'), false).then(\n                (texture: Texture) => this.weaponTexture = texture),\n            MD2Loader.load(require('../../assets/md2/tris.md2')).then(\n                (mesh: MD2Model) => this.md2 = mesh),\n            MD2Loader.load(require('../../assets/md2/weapon.md2')).then(\n                (mesh: MD2Model) => this.weapon = mesh),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n            TextureUtils.load(require('../../assets/fontred.png'), true).then(\n                (texture: Texture) => this.fontred = texture),\n            TextureUtils.load(require('../../assets/ground.png'), true).then(\n                (texture: Texture) => this.ground = texture),\n            TextureUtils.load(require('../../assets/glow.png'), true).then(\n                (texture: Texture) => this.glow = texture),\n                TextureUtils.load(require('../../assets/md2/texture2.jpg'), false).then(\n                    (texture: Texture) => this.freakTexture = texture\n                ),\n                MD2Loader.load(require('../../assets/md2/drfreak.md2')).then(\n                    (mesh: MD2Model) => this.md2Freak = mesh\n                )\n        ]).then(\n            () => {\n                this.playerStateMachine = new PlayerStateMachine([this.md2, this.weapon], this.player);\n                window.addEventListener('gamepadconnected', (e: GamepadEvent) => {\n                    console.log('Gamepad connected at index %d: %s. %d buttons, %d axes.',\n                        e.gamepad.index, e.gamepad.id,\n                        e.gamepad.buttons.length, e.gamepad.axes.length);\n                });\n\n                const mesh: TexturedMesh = new TexturedMesh();\n                mesh.points = [\n                    new Vector4f(-20, 0, 20),\n                    new Vector4f(20, 0, 20),\n                    new Vector4f(20, 0, -20),\n                    new Vector4f(-20, 0, -20)\n                ];\n                mesh.uv = [\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(2.0, 0),\n                    new TextureCoordinate(2.0, 2.0),\n                    new TextureCoordinate(0, 2.0)\n                ];\n                mesh.points2 = mesh.points.map(() => new Vector4f(0, 0, 0, 0));\n                mesh.faces = [\n                    {\n                        uv: [0, 1, 2],\n                        vertices: [0, 1, 2]\n                    },\n                    {\n                        uv: [2, 3, 0],\n                        vertices: [2, 3, 0]\n                    }\n                ];\n                this.floor = mesh;\n\n                const mesh2: TexturedMesh = new TexturedMesh();\n                mesh2.points = mesh.points;\n                mesh2.points2 = mesh.points2;\n                mesh2.faces = mesh.faces;\n                mesh2.uv =[\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1)\n                ];\n                this.shadow = mesh2;\n            });\n    }\n\n    public processInput(deltaTime: number): void {\n\n        if (this.keyboard.isDown(Keyboard.UP)) {\n            this.playerStateMachine.upButton();\n        }\n\n        if (!this.keyboard.isDown(Keyboard.UP)) {\n            this.playerStateMachine.upButtonNot();\n        }\n\n\n        const speed: number = 4.1;\n        const Angspeed: number = 110.0;\n\n        if (this.keyboard.isDown(Keyboard.UP) || this.gamepad.isLeft(1, -1)) {\n            this.player.moveForward(speed, deltaTime);\n        }\n\n        if (this.gamepad.isLeft(1, -1) && !this.run) {\n            // this.md2.setAnim( MD2Animation.RUN, Date.now(), true);\n            //  this.weapon.setAnim( MD2Animation.RUN, Date.now(), true);\n            this.run = true;\n        }\n\n        if (!this.gamepad.isLeft(1, -1) && this.run) {\n            //   this.md2.setAnim( MD2Animation.STAND, Date.now(), true);\n            //  this.weapon.setAnim( MD2Animation.STAND, Date.now(), true);\n            this.run = false;\n        }\n\n        if (this.keyboard.isDown(Keyboard.DOWN) || this.gamepad.isLeft(1, 1)) {\n            this.player.moveBackward(speed, deltaTime);\n        }\n\n        if (this.keyboard.isDown(Keyboard.LEFT) || this.gamepad.isLeft(0, -1)) {\n            this.player.turnLeft(Angspeed, deltaTime);\n        }\n\n        if (this.keyboard.isDown(Keyboard.RIGHT) || this.gamepad.isLeft(0, 1)) {\n            this.player.turnRight(Angspeed, deltaTime);\n        }\n\n        if (this.gamepad.isButtonPressed(3) && !this.attack) {\n            // this.md2.setAnim( MD2Animation.ATTACK, Date.now());\n            // this.weapon.setAnim( MD2Animation.ATTACK, Date.now());\n            this.attack = true;\n        }\n\n        if (!this.gamepad.isButtonPressed(3) && this.attack) {\n            this.attack = false;\n        }\n\n        if (this.gamepad.isButtonPressed(2) && !this.jump) {\n            //     this.md2.setAnim( MD2Animation.JUMP, Date.now());\n            //   this.weapon.setAnim( MD2Animation.JUMP, Date.now());\n            this.jump = true;\n        }\n\n        if (!this.gamepad.isButtonPressed(2) && this.jump) {\n            this.jump = false;\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n\n        const currentTime: number = Date.now();\n        const delta: number = (currentTime - this.lastTime) / 1000;\n        this.lastTime = currentTime;\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        this.processInput(delta);\n\n        framebuffer.clearColorBuffer(ThirdPersonCameraScene.CLEAR_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        //\n        framebuffer.setTexture(this.ground);\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        this.computeFloorMovement(delta);\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n        this.texturedRenderingPipeline.draw(framebuffer, this.floor);\n\n\n\n\n        this.modelViewMatrix.trans(0, 0.1, 0);\n\n        this.computeGlowMovement(delta);\n        framebuffer.setTexture(this.glow);\n\n        this.texturedRenderingPipeline.enableAlphaBlending();\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n        this.texturedRenderingPipeline.draw(framebuffer, this.shadow);\n        this.texturedRenderingPipeline.disableAlphaBlending();\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.FRONT);\n\n        this.renderPlayer(framebuffer, delta);\n\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(delta));\n        this.modelViewMatrix.trans(0, 24 * 0.05, 0);\n        this.modelViewMatrix.yRotate(Math.PI * 2 / 360 * (90 + 0));\n        this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n        this.modelViewMatrix.scal(0.05, 0.05, 0.05);\n\n        framebuffer.setTexture(this.freakTexture);\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n      this.texturedRenderingPipeline.draw(framebuffer, this.md2Freak.getMesh(currentTime));\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n        framebuffer.drawText(8, 16, 'TRIANGELS: ' +\n            (this.md2.header.numberOfTriangles + this.weapon.header.numberOfTriangles), this.texture4);\n        if ((currentTime % 1000) > 500) {\n            framebuffer.drawText(8, 200 - 16,\n                this.gamepad.isAvailable() ? 'GAMEPAD DETECTED' : 'NO GAMEPAD DETECTED', this.fontred);\n        }\n    }\n\n    private renderPlayer(framebuffer: Framebuffer, time: number): void {\n        this.computePlayerMovement(time);\n\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n\n        framebuffer.setTexture(this.ogroTexture);\n        this.texturedRenderingPipeline.draw(framebuffer, this.md2.getMesh2(time * 1000));\n\n        framebuffer.setTexture(this.weaponTexture);\n        this.texturedRenderingPipeline.draw(framebuffer, this.weapon.getMesh2(time * 1000));\n    }\n\n    private computeFloorMovement(elapsedTime: number): void {\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(elapsedTime));\n        this.modelViewMatrix.trans(0, 0, 0);\n        this.modelViewMatrix.yRotate(Math.PI * 2 / 360 * 90);\n        //  this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n    }\n    private getCamMatrix(delta: number): Matrix4f {\n        const dampFactor: number = 0.01 * 60 * delta;\n        const eyePos: Vector3f = this.oldEye.add(\n            new Vector3f(\n                this.player.position.x - this.player.getDirection().x * 5,\n                2.2, this.player.position.y - this.player.getDirection().y * 5\n            ).sub(this.oldEye).mul(dampFactor));\n        this.oldEye = eyePos;\n\n        return this.camera.computeMatrix(eyePos, new Vector3f(\n            this.player.position.x,\n            1.8,\n            this.player.position.y), new Vector3f(0, 1, 0));\n    }\n\n    private computePlayerMovement(elapsedTime: number): void {\n        // http://cubeengine.com/wiki/Importing_md2_and_md3_files\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(elapsedTime));\n        this.modelViewMatrix.trans(this.player.position.x, 24 * 0.05, this.player.position.y);\n        this.modelViewMatrix.yRotate(Math.PI * 2 / 360 * (90 + this.player.angle));\n        this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n        this.modelViewMatrix.scal(0.05, 0.05, 0.05);\n    }\n\n    private computeGlowMovement(delta: number): void {\n        // http://cubeengine.com/wiki/Importing_md2_and_md3_files\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(delta));\n        this.modelViewMatrix.trans(this.player.position.x, 0.03, this.player.position.y);\n        const scale: number = 0.85;\n        this.modelViewMatrix.scal(0.06 * scale, 0.06 * scale, 0.06 * scale);\n        this.texturedRenderingPipeline.setAlpha(0.70);\n    }\n\n}\n","import { MD2Animation } from '../../../model/md2/MD2AnimationNames';\nimport { PlayerStandingState } from './PlayerStandingState';\nimport { PlayerState } from './PlayerState';\n\nexport class PlayerRunningState extends PlayerState {\n\n    public entry(): void {\n        this.context.md2.forEach(x=> x.setAnim(MD2Animation.RUN, 0, true));\n    \n    }\n\n    public upButtonNot(): void {\n        this.context.setState(new PlayerStandingState(this.context));\n    }\n\n}\n","import { MD2Animation } from '../../../model/md2/MD2AnimationNames';\nimport { PlayerRunningState } from './PlayerRunningState';\nimport { PlayerState } from './PlayerState';\n\nexport class PlayerStandingState extends PlayerState {\n\n    public entry(): void {\n        this.context.md2.forEach(x => x.setAnim(MD2Animation.STAND, 0, true));\n    }\n\n    public upButton(): void {\n        this.context.setState(new PlayerRunningState(this.context));\n    }\n\n}\n","import { PlayerStateMachine } from './PlayerStateMachine';\n\nexport abstract class PlayerState {\n\n    constructor(protected context: PlayerStateMachine) {\n\n    }\n\n    public entry(): void {\n\n    }\n\n    public exit(): void {\n\n    }\n\n    public process(): void {\n\n    }\n\n    public upButton(): void {\n\n    }\n\n    public upButtonNot(): void {\n\n    }\n\n}\n","import { MD2Model } from '../../../model/md2/MD2Model';\nimport { Player } from '../Player';\nimport { PlayerStandingState } from './PlayerStandingState';\nimport { PlayerState } from './PlayerState';\n\n/**\n * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.9.8608&rep=rep1&type=pdf\n * http://www.iplab.cs.tsukuba.ac.jp/paper/international/ali-idpt99.pdf\n * https://www.reddit.com/r/gamedev/comments/45nn5i/article_tame_your_game_code_with_state_machines/\n * http://howtomakeanrpg.com/a/state-machines.html\n * https://gamedevacademy.org/how-to-use-state-machines-to-control-behavior-and-animations-in-phaser/\n * https://www.gamedev.net/articles/programming/general-and-gameplay-programming/from-user-input-to-animations-using-state-machines-r4155/\n * http://gameprogrammingpatterns.com/state.html\n */\nexport class PlayerStateMachine {\n\n    public md2: MD2Model[];\n    private activeState: PlayerState = null;\n\n    public constructor(md2: MD2Model[], public pl: Player) {\n        this.md2 = md2;\n        this.setState(new PlayerStandingState(this));\n    }\n\n    public upButton(): void {\n        this.activeState.upButton();\n    }\n\n    public upButtonNot(): void {\n        this.activeState.upButtonNot();\n    }\n\n    public setState(state: PlayerState): void {\n        if (this.activeState !== null) {\n            this.activeState.exit();\n        }\n\n        this.activeState = state;\n        this.activeState.entry();\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class AisaGamepad {\n\n    private gamepad: Gamepad = null;\n\n    constructor() {\n        window.addEventListener('gamepadconnected', (e: GamepadEvent) => {\n            console.log('Gamepad connected at index %d: %s. %d buttons, %d axes.',\n                e.gamepad.index, e.gamepad.id,\n                e.gamepad.buttons.length, e.gamepad.axes.length);\n\n            this.gamepad = e.gamepad;\n        });\n    }\n\n    public isAvailable(): boolean {\n        return this.gamepad !== null;\n    }\n\n    public isButtonPressed(index: number): boolean {\n        if (this.gamepad) {\n            return this.gamepad.buttons[index].pressed;\n        }\n\n        return false;\n    }\n\n    public isLeft(axis: number, value: number): boolean {\n        if (this.gamepad) {\n            return this.gamepad.axes[axis] === value;\n        }\n\n        return false;\n    }\n\n    public vl(): string {\n        return this.gamepad.id;\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","export class InvalidFileFormatException {\n\n    constructor(private message: string) {\n\n    }\n\n}\n","// http://www.mbsoftworks.sk/tutorials/opengl3/24-animation-pt1-keyframe-md2/\n// https://www.gamedev.net/forums/topic/361176-md2-animation-speed/\n// https://www.allegro.cc/forums/thread/414171/414344\nexport class MD2Animation {\n\n    public static readonly STAND: MD2Animation = new MD2Animation(0, 39, 9);\n    public static readonly RUN: MD2Animation = new MD2Animation(40, 45, 10);\n    public static readonly ATTACK: MD2Animation = new MD2Animation(46, 53, 10);\n    public static readonly PAIN_A: MD2Animation = new MD2Animation(54, 57, 7);\n    public static readonly PAIN_B: MD2Animation = new MD2Animation(58, 61, 7);\n    public static readonly PAIN_C: MD2Animation = new MD2Animation(62, 65, 7);\n    public static readonly JUMP: MD2Animation = new MD2Animation(66, 71, 7);\n    public static readonly FLIP: MD2Animation = new MD2Animation(72, 83, 7);\n    public static readonly SALUTE: MD2Animation = new MD2Animation(84, 94, 7);\n    public static readonly FALLBACK: MD2Animation = new MD2Animation(95, 111, 10);\n    public static readonly WAVE: MD2Animation = new MD2Animation(112, 122, 7);\n    public static readonly POINTING: MD2Animation = new MD2Animation(123, 134, 6);\n\n    public static readonly CROUCH_STAND: MD2Animation = new MD2Animation(135, 153, 10);\n    public static readonly CROUCH_WALK: MD2Animation = new MD2Animation(154, 159, 7);\n    public static readonly CROUCH_ATTACK: MD2Animation = new MD2Animation(160, 168, 10);\n    public static readonly CROUCH_PAIN: MD2Animation = new MD2Animation(196, 172, 7);\n    public static readonly CROUCH_DEATH: MD2Animation = new MD2Animation(173, 177, 5);\n\n    public static readonly DEATH_FALLBACK: MD2Animation = new MD2Animation(178, 183, 7);\n    public static readonly DEATH_FALLFORWARD: MD2Animation = new MD2Animation(184, 189, 7);\n    public static readonly DEATH_FALLBACKSLOW: MD2Animation = new MD2Animation(190, 197, 7);\n    public static readonly BOOM: MD2Animation = new MD2Animation(198, 198, 5);\n\n    constructor(public first: number, public last: number, public fps: number) {\n\n    }\n\n}\n","import { Vector3f } from '../../math/index';\nimport { MD2Header } from './MD2Header';\nimport { MD2Vertex } from './MD2Vertex';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2Frame {\n\n    public scale: Vector3f;\n    public translate: Vector3f;\n    public vertices: Array<MD2Vertex>;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0, header: MD2Header) {\n        const stream: StreamReader = new StreamReader(arrayBuffer, offset);\n        const scale: Vector3f = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n        this.scale = scale;\n\n        const trans: Vector3f = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n        this.translate = trans;\n\n        const streamvert: StreamReader = new StreamReader(arrayBuffer, offset + 40);\n\n        const vertArray: Array<MD2Vertex> = new Array<MD2Vertex>();\n\n        for (let i: number = 0; i < header.numberOfVertices; i++) {\n            const px: number = streamvert.readUnsignedInt8();\n            const py: number = streamvert.readUnsignedInt8();\n            const pz: number = streamvert.readUnsignedInt8();\n            const nomralIndex: number = streamvert.readUnsignedInt8();\n\n            vertArray.push(new MD2Vertex(\n                new Vector3f(\n                    px * scale.x + trans.x,\n                    py * scale.y + trans.y,\n                    pz * scale.z + trans.z\n                ),\n                nomralIndex\n            ));\n        }\n        this.vertices = vertArray;\n\n    }\n\n}\n","import { InvalidFileFormatException } from './InvalidFileFormatException';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2Header {\n\n    private static readonly IDP2: number = 844121161;\n    private static readonly VERSION: number = 8;\n\n    public identifier: number;\n    public version: number;\n\n    public skinWidth: number;\n    public skinHeight: number;\n\n    // framesize in bytes\n    public frameSize: number;\n\n    public numberOfSkins: number;\n    public numberOfVertices: number;\n    public numberOfTexCoords: number;\n    public numberOfTriangles: number;\n    public numberOfGlCommands: number;\n    public numberOfFrames: number;\n\n    public skinsOffset: number;\n    public texCoordsOffset: number;\n    public triangleOffset: number;\n    public framesOffset: number;\n    public glCommandsOffset: number;\n    public endOffset: number;\n\n    public constructor(arrayBuffer: ArrayBuffer) {\n\n        if (!this.isValidMD2File(arrayBuffer)) {\n            throw new InvalidFileFormatException('Not a valid MD2 file.');\n        }\n\n        const stream: StreamReader = new StreamReader(arrayBuffer);\n\n        this.identifier = stream.readInt();\n        this.version = stream.readInt();\n        this.skinWidth = stream.readInt();\n        this.skinHeight = stream.readInt();\n        this.frameSize = stream.readInt();\n        this.numberOfSkins = stream.readInt();\n\n        this.numberOfVertices = stream.readInt();\n        this.numberOfTexCoords = stream.readInt();\n        this.numberOfTriangles = stream.readInt();\n        this.numberOfGlCommands = stream.readInt();\n        this.numberOfFrames = stream.readInt();\n\n        this.skinsOffset = stream.readInt();\n        this.texCoordsOffset = stream.readInt();\n        this.triangleOffset = stream.readInt();\n        this.framesOffset = stream.readInt();\n        this.glCommandsOffset = stream.readInt();\n        this.endOffset = stream.readInt();\n    }\n\n    public toString(): string {\n        return JSON.stringify(this, null, 2);\n    }\n\n    private isValidMD2File(arrayBuffer: ArrayBuffer): boolean {\n        const dataView: DataView = new DataView(arrayBuffer, 0);\n\n        const magicNumber: number = dataView.getInt32(0, true);\n        const version: number = dataView.getInt32(4, true);\n\n        return magicNumber === MD2Header.IDP2 && version === MD2Header.VERSION;\n    }\n\n}\n","import { MD2Frame } from './MD2Frame';\nimport { MD2Header } from './MD2Header';\nimport { MD2Model } from './MD2Model';\nimport { MD2Skin } from './MD2Skin';\nimport { MD2TexCoord } from './MD2TexCoord';\nimport { MD2Triangle } from './MD2Triangle';\nimport { StreamReader } from './StreamReader';\n\n/**\n * http://tfc.duke.free.fr/coding/md2-specs-en.html\n * http://tfc.duke.free.fr/old/models/md2.htm\n * https://fabiensanglard.net/quake2/quake2_software_renderer.php\n */\nexport class MD2Loader {\n\n    public static load(filename: string): Promise<MD2Model> {\n        return fetch(filename).then((response: Response) => {\n            return response.arrayBuffer();\n        }).then((arrayBuffer: ArrayBuffer) => {\n            try {\n                return MD2Loader.parse(arrayBuffer);\n            } catch (ex) {\n                console.error(ex.message);\n            }\n        });\n    }\n\n    private static parse(arrayBuffer: ArrayBuffer): MD2Model {\n        const header: MD2Header = MD2Loader.getHeader(arrayBuffer);\n\n        return new MD2Model(\n            MD2Loader.getTextureCoords(arrayBuffer, header),\n            MD2Loader.getTriangles(arrayBuffer, header),\n            MD2Loader.getFrames(arrayBuffer, header),\n            header\n        );\n    }\n\n    private static getHeader(arrayBuffer: ArrayBuffer): MD2Header {\n        return new MD2Header(arrayBuffer);\n    }\n\n    private static getSkins(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Skin> {\n        const skins: Array<MD2Skin> = new Array<MD2Skin>();\n\n        for (let k: number = 0; k < header.numberOfSkins; k++) {\n            const skin: MD2Skin = new MD2Skin(arrayBuffer, header.skinsOffset + 64 * k);\n            skins.push(skin);\n        }\n\n        return skins;\n    }\n\n    private static getTextureCoords(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2TexCoord> {\n        const texCoords: Array<MD2TexCoord> = new Array<MD2TexCoord>();\n        const stream: StreamReader = new StreamReader(arrayBuffer, header.texCoordsOffset);\n\n        for (let i: number = 0; i < header.numberOfTexCoords; i++) {\n            texCoords.push(new MD2TexCoord(stream, header));\n        }\n\n        return texCoords;\n    }\n\n    private static getTriangles(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Triangle> {\n        const triangles: Array<MD2Triangle> = new Array<MD2Triangle>();\n        const stream: StreamReader = new StreamReader(arrayBuffer, header.triangleOffset);\n\n        for (let i: number = 0; i < header.numberOfTriangles; i++) {\n            triangles.push(new MD2Triangle(stream));\n        }\n\n        return triangles;\n    }\n\n    private static getFrames(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Frame> {\n        const frames: Array<MD2Frame> = new Array<MD2Frame>();\n\n        for (let i: number = 0; i < header.numberOfFrames; i++) {\n            const frame: MD2Frame = new MD2Frame(arrayBuffer, header.framesOffset + header.frameSize * i, header);\n            frames.push(frame);\n        }\n\n        return frames;\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { MD2Animation } from './MD2AnimationNames';\nimport { MD2Frame } from './MD2Frame';\nimport { MD2Header } from './MD2Header';\nimport { MD2TexCoord } from './MD2TexCoord';\nimport { MD2Triangle } from './MD2Triangle';\nimport { MD2Vertex } from './MD2Vertex';\n\nexport class MD2Model {\n\n    private mesh: TexturedMesh;\n    private points: Array<Vector4f>;\n    private animation: MD2Animation = MD2Animation.STAND;\n    private currentFrame: number = 0;\n    private loop: boolean = false;\n\n    constructor(public textureCoordinates: Array<MD2TexCoord>,\n        public triangles: Array<MD2Triangle>,\n        public frames: Array<MD2Frame>, public header: MD2Header) {\n\n        const mesh: TexturedMesh = new TexturedMesh();\n\n        const texCoords2: Array<TextureCoordinate> = new Array<TextureCoordinate>();\n        this.textureCoordinates.forEach((textureCoordinate: MD2TexCoord) => {\n            texCoords2.push(new TextureCoordinate(textureCoordinate.s, textureCoordinate.t));\n        });\n\n        const points: Array<Vector4f> = new Array<Vector4f>();\n\n        for (let i: number = 0; i < header.numberOfVertices; i++) {\n            points.push(new Vector4f(0, 0, 0, 1));\n        }\n\n        this.points = points;\n\n        mesh.points = points;\n        mesh.points2 = points.map(() => new Vector4f(0, 0, 0, 0));\n        mesh.uv = texCoords2;\n        const faces: Array<{\n            vertices: Array<number>,\n            uv: Array<number>\n        }> = [];\n\n        this.triangles.forEach((triangle: MD2Triangle) => {\n\n            faces.push({\n                uv: triangle.texCoords,\n                vertices: triangle.vertices\n            });\n        });\n\n        mesh.faces = faces;\n        this.mesh = mesh;\n\n    }\n\n    public getMesh(time: number): TexturedMesh {\n\n        time = time *.006;\n        const f1: number = Math.floor(time) % this.frames.length;\n        const f2: number = (f1 + 1) % this.frames.length;\n        const cframe: MD2Frame = this.frames[f1];\n        const cframe2: MD2Frame = this.frames[f2];\n        const alpha: number = time - Math.floor(time);\n        const oneMinusAlpha: number = 1 - alpha;\n\n        for (let i: number = 0; i < cframe.vertices.length; i++) {\n            const x: MD2Vertex = cframe.vertices[i];\n            const x2: MD2Vertex = cframe2.vertices[i];\n            this.points[i].x = x.vector.x * oneMinusAlpha + x2.vector.x * alpha;\n            this.points[i].y = x.vector.y * oneMinusAlpha + x2.vector.y * alpha;\n            this.points[i].z = x.vector.z * oneMinusAlpha + x2.vector.z * alpha;\n        }\n\n        return this.mesh;\n    }\n\n    public setAnim(animation: MD2Animation, time: number, loop: boolean = false): void {\n        this.animation = animation;\n        this.currentFrame = 0;\n        this.loop = loop;\n    }\n\n    public getMesh2(delta: number): TexturedMesh {\n        this.currentFrame += delta * 0.009;\n\n        if (this.currentFrame > (this.animation.last - this.animation.first)) {\n            if (!this.loop) {\n                this.currentFrame = this.animation.last - this.animation.first;\n            }\n        }\n\n        const modulo: number = (this.animation.last - this.animation.first + 1);\n        const f1: number = Math.floor(this.currentFrame) % modulo;\n        const f2: number = (f1 + 1) % modulo;\n        const cframe: MD2Frame = this.frames[f1 + this.animation.first];\n        const cframe2: MD2Frame = this.frames[f2 + this.animation.first];\n        const alpha: number = this.currentFrame - Math.floor(this.currentFrame);\n        const oneMinusAlpha: number = 1 - alpha;\n\n        /**\n         * TODO: add animation blending??? expensive :(\n         */\n        for (let i: number = 0; i < cframe.vertices.length; i++) {\n            const x: MD2Vertex = cframe.vertices[i];\n            const x2: MD2Vertex = cframe2.vertices[i];\n            this.points[i].x = x.vector.x * oneMinusAlpha + x2.vector.x * alpha;\n            this.points[i].y = x.vector.y * oneMinusAlpha + x2.vector.y * alpha;\n            this.points[i].z = x.vector.z * oneMinusAlpha + x2.vector.z * alpha;\n        }\n\n        return this.mesh;\n    }\n\n}\n","import { StreamReader } from './StreamReader';\n\nexport class MD2Skin {\n\n    public name: string;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n        const stream: StreamReader = new StreamReader(arrayBuffer, offset);\n\n        let tempName: string;\n\n        for (let i: number = 0; i < 64; i++) {\n            const code: number = stream.readUnsignedInt8();\n\n            if (code === 0) {\n                break;\n            }\n\n            tempName += String.fromCharCode(code);\n        }\n\n        this.name = tempName;\n    }\n\n}\n","import { MD2Header } from './MD2Header';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2TexCoord {\n\n    public s: number;\n    public t: number;\n\n    constructor(stream: StreamReader, header: MD2Header) {\n        this.s = stream.readSignedShort() / (header.skinWidth - 1);\n        this.t = stream.readSignedShort() / (header.skinHeight - 1);\n    }\n\n}\n","import { StreamReader } from './StreamReader';\n\nexport class MD2Triangle {\n\n    public vertices: [number, number, number];\n    public texCoords: [number, number, number];\n\n    constructor(stream2: StreamReader) {\n        this.vertices = [\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort()\n        ];\n        this.texCoords = [\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort()\n        ];\n    }\n\n}\n","import { Vector3f } from '../../math/index';\n\nexport class MD2Vertex {\n\n    public vector: Vector3f;\n    public normalIndex: number;\n\n    constructor(vector: Vector3f, normalIndex: number) {\n        this.vector = vector;\n        this.normalIndex = normalIndex;\n    }\n}\n","export class StreamReader {\n\n    private position: number;\n    private dataView: DataView;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n        this.dataView = new DataView(arrayBuffer, offset);\n        this.position = 0;\n    }\n\n    public readInt(): number {\n        const value: number = this.dataView.getInt32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readFloat(): number {\n        const value: number = this.dataView.getFloat32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readUnsignedInt8(): number {\n        const value: number = this.dataView.getUint8(this.position);\n        this.position += 1;\n        return value;\n    }\n\n    public readSignedShort(): number {\n        const value: number = this.dataView.getInt16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n    public readUnsigbnedShort(): number {\n        const value: number = this.dataView.getUint16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { TextureCoordinate } from '../TextureCoordinate';\n\nexport class TexturedMesh {\n\n    public points: Array<Vector4f>;\n    public normals?: Array<Vector4f>;\n    public uv: Array<TextureCoordinate>;\n\n    public faces: Array<{\n        vertices: Array<number>,\n        normals?: Array<number>\n        uv: Array<number>\n    }>;\n\n    public points2: Array<Vector4f>;\n    public normals2?: Array<Vector4f>;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { ThirdPersonCameraScene } from './ThirdPersonCameraScene';\n\nclass Application {\n\n    public main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new ThirdPersonCameraScene());\n        canvas.init();\n    }\n\n}\n\nnew Application().main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","forEach","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","cos","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","computeMatrix","eyePosition","targetPosition","up","translation","forwardVector","sub","normalize","leftVector","cross","upVector","rotation","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","num","currtentMatrix","tempMatrix","temp","transformation","getMatrix","setIdentity","setIdentityMatrix","multMatrix","mat","trans","setTranslationMatrix","applyMat","scal","setScaleMatrix","xRotate","setXRotationMatrix","yRotate","setYRotationMatrix","multiply2","pressed","window","onKeyUp","onKeyDown","isDown","code","keyCode","moveForward","speed","deltaTime","distance","moveBackward","getDirection","turnLeft","turnRight","ThirdPersonCameraScene","AbstractScene","SLATE_GRAY","lastTime","keyboard","Keyboard","gamepad","AisaGamepad","ogroTexture","freakTexture","weaponTexture","texture4","glow","fontred","ground","md2","weapon","md2Freak","modelViewMatrix","ModelViewMatrix","shadow","fpsStartTime","fpsCount","fps","player","Player","ThirdPersonCamera","oldEye","attack","jump","run","playerStateMachine","FRONT","Promise","all","TextureUtils","load","MD2Loader","mesh","PlayerStateMachine","e","console","log","buttons","axes","TexturedMesh","uv","map","faces","vertices","mesh2","processInput","UP","upButton","upButtonNot","isLeft","DOWN","LEFT","RIGHT","isButtonPressed","currentTime","delta","CLEAR_COLOR","computeFloorMovement","setModelViewMatrix","draw","computeGlowMovement","enableAlphaBlending","disableAlphaBlending","renderPlayer","getCamMatrix","getMesh","toString","header","numberOfTriangles","isAvailable","computePlayerMovement","getMesh2","dampFactor","eyePos","setAlpha","PlayerRunningState","PlayerState","entry","setAnim","MD2Animation","RUN","setState","PlayerStandingState","STAND","exit","process","pl","activeState","state","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","normals","n1","n2","n3","transformedPoints","transformedNormals","AbstractGeometricObject","invert","super","frame","frame2","right","axis","value","vl","current","y2","mu","mu2","Matrix3f","xScale","yScale","zScale","result","multiply","vector","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","sx","sy","sz","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","message","first","last","translate","stream","StreamReader","readFloat","streamvert","vertArray","numberOfVertices","px","readUnsignedInt8","py","pz","nomralIndex","MD2Vertex","MD2Header","identifier","version","skinWidth","skinHeight","frameSize","numberOfSkins","numberOfTexCoords","numberOfGlCommands","numberOfFrames","skinsOffset","texCoordsOffset","triangleOffset","framesOffset","glCommandsOffset","endOffset","isValidMD2File","InvalidFileFormatException","readInt","JSON","stringify","dataView","DataView","magicNumber","getInt32","IDP2","VERSION","filename","fetch","response","parse","ex","error","getHeader","MD2Model","getTextureCoords","getTriangles","getFrames","skins","skin","MD2Skin","texCoords","MD2TexCoord","triangles","MD2Triangle","frames","MD2Frame","textureCoordinates","animation","currentFrame","loop","texCoords2","s","t","triangle","f1","f2","cframe","cframe2","oneMinusAlpha","x2","modulo","name","tempName","String","fromCharCode","readSignedShort","stream2","readUnsigbnedShort","normalIndex","getFloat32","getUint8","getInt16","getUint16","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","dx","dy","sign","wDelta","isInFrontOfNearPlane","isTriangleCCW2","v4","normals2","AbstractRenderingPipeline","sphereMapping","vertexArray","Vertex","setSphereMapping","arg0","projectedVertices","setFramebuffer","drawMeshArray","meshes","model","normalMatrix","project2","clipConvexPolygon","zClipTriangle","computeNearPlaneIntersection2","subject","input","output","S","point","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","main","Canvas"],"sourceRoot":""}