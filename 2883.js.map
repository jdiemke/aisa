{"version":3,"file":"2883.js","mappings":"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","sources":["webpack://aisa/./src/examples/roto-zoomer/RotoZoomerScene.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/demo/parts/Scene7.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts"],"sourcesContent":["import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class RotoZoomerScene extends AbstractScene {\n\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            /*TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),*/\n            TextureUtils.load(require('../../assets/xray.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawRotoZoomer(framebuffer, time);\n    }\n\n    drawRotoZoomer(framebuffer: Framebuffer, time: number) {\n        const scale = Math.sin(time * 0.0005) + 1.1;\n\n        const yStepX = Math.sin(time * 0.0003) * scale;\n        const yStepY = Math.cos(time * 0.0003) * scale;\n\n        const xStepX = yStepY;\n        const xStepY = -yStepX;\n\n        let texYCoord = Math.sin(time * 0.0002) * 512;\n        let texXCoord = Math.cos(time * 0.0002) * 512;\n\n        let texYCoordInner = 0;\n        let texXCoordInner = 0;\n        let framebufferPos = 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            texXCoordInner = texXCoord;\n            texYCoordInner = texYCoord;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.framebuffer[framebufferPos++] = this.logoTexture.texture[(texXCoordInner & 127) + (texYCoordInner & 127) * 128];\n\n                texXCoordInner += xStepX;\n                texYCoordInner += xStepY;\n            }\n\n            texXCoord += yStepX;\n            texYCoord += yStepY;\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class CubeScene extends AbstractScene {\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private fairlight: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/logo-fairlight-10.png'), false).then(texture => this.fairlight = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.fairlight.texture);\n        framebuffer.clearDepthBuffer();\n\n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 6.2  +Math.sin(elapsedTime * 0.05)*3;\n\n        return Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.08)*8, Math.sin(elapsedTime * 0.05)*6, -20).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.09)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { RotoZoomerScene } from '../../roto-zoomer/RotoZoomerScene';\nimport { CubeScene } from '../../cube/CubeScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene7 {\n    private RotoZoomerScene: RotoZoomerScene;\n    private CubeScene: CubeScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RotoZoomerScene = new RotoZoomerScene();\n        this.CubeScene = new CubeScene();\n\n        return Promise.all([\n            this.CubeScene.init(framebuffer),\n            this.RotoZoomerScene.init(),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RotoZoomerScene.render(framebuffer, time);\n        this.CubeScene.renderBackground(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n\n    }\n\n}","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n"],"names":["RotoZoomerScene","AbstractScene","logoTexture","init","Promise","all","TextureUtils","load","then","texture","this","render","framebuffer","time","drawRotoZoomer","scale","Math","sin","yStepX","yStepY","cos","xStepX","xStepY","texYCoord","texXCoord","texYCoordInner","texXCoordInner","framebufferPos","y","height","x","width","CubeScene","renderingPipeline","cubeMesh","Cube","fairlight","GouraudShadingRenderingPipeline","setCullFace","CullFace","BACK","fastFramebufferCopy","clearDepthBuffer","renderCube","elapsedTime","draw","getMesh","getModelViewMatrix","renderBackground","Matrix4f","constructTranslationMatrix","multiplyMatrix","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","Scene7","logo","drawTexture","super","a","points","buildMesh","ColorInterpolator","startColor","colorSlope","setup","c1","c2","distance","r","g","b","advance","GouraudShadingTriangleRasterizer","colorInterpolator1","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","rightSlope","constructor","fillLongRightTriangle","v1","v2","v3","color","yDistance","drawSpan","fillLongLeftTriangle","shortSlope","yPosition","yStart","i","length","round","currentX","framebufferIndex","spanzStep","currentZ","wStart","j","wBuffer","toPackedFormat","SlopeInterpolator","slope","zslope","top","bottom","projection","z","fog","lights","material","lighting","WHITE","triangleRasterizer","clipper","projectedVertices","Array","vertexArray","light1","ambientIntensity","diffuseIntensity","specularIntensity","position","light2","mat","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setFog","setLights","enableLighting","enable","setMaterial","setColor","drawMeshArray","meshes","modelViewMartrix","model","mesh","normalMatrix","computeNormalMatrix","normals","multiplyHomArr","transformedNormals","transformedPoints","faces","normal1","n1","normal2","n2","normal3","n3","isInFrontOfNearPlane","project2","normal","renderConvexPolygon","computeColor","output","zClipTriangle","project","t1","result","computeNearPlaneIntersection","p1","p2","ratio","NEAR_PLANE_Z","vertex","sub","mul","add","subject","input","S","point","push","projected","late","isTriangleCCW","isTriangleCCW2","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","drawTriangleDDA","vertexColor","computeVertexColor","min","SutherlandHodgman2DClipper","clipRegion","edge","isInside","computeIntersection","PhongLighting","finalColor","light","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","l","componentWiseMul","lightDirection","normalize","max","dot","v","pow","Light","PointLight","Material","emissiveColor"],"sourceRoot":""}