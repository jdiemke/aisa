{"version":3,"file":"portals.js","mappings":"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","sources":["webpack://aisa/./src/default-style.css","webpack://aisa/./node_modules/css-loader/dist/runtime/api.js","webpack://aisa/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://aisa/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://aisa/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/compat get default export","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/nonce","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/camera/BasicCamera.ts","webpack://aisa/./src/camera/ControllableCamera.ts","webpack://aisa/./src/math/Plane.ts","webpack://aisa/./src/clustered-culling/FrustumCuller.ts","webpack://aisa/./src/portal-system/Area.ts","webpack://aisa/./src/portal-system/Polygon.ts","webpack://aisa/./src/portal-system/Portal.ts","webpack://aisa/./src/portal-system/SutherlandHodgmanClipper.ts","webpack://aisa/./src/portal-system/PortalRenderer.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/examples/portals/PortalScene.ts","webpack://aisa/./src/default-style.css?9c7b","webpack://aisa/./src/examples/portals/Application.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n    background-color: #000;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/default-style.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,sBAAsB;AAC1B\",\"sourcesContent\":[\"body {\\n    background-color: #000;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.nc = undefined;","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1,\n    DISABLED\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n\n    public setRotationMatrix(x: number,y: number,z: number, alpha: number): void {\n        const c = Math.cos(Math.PI * 2 *alpha / 360 );\n        const s = Math.sin(Math.PI * 2 *alpha / 360 );\n        const vector = new Vector3f(x,y,z);\n        vector.normalize2();\n\n        this.m11 = (1.0 - c) * vector.x * vector.x + c;\n        this.m12 = (1.0 - c) * vector.x * vector.y - s * vector.z;\n        this.m13 = (1.0 - c) * vector.x * vector.z + s * vector.y;\n        this.m14 = 0.0;\n\n        this.m21 = (1.0 - c) * vector.x * vector.y + s * vector.z;\n        this.m22 = (1.0 - c) * vector.y * vector.y + c;\n        this.m23 = (1.0 - c) * vector.y * vector.z - s * vector.x;\n        this.m24 = 0.0;\n\n        this.m31 = (1.0 - c) * vector.x * vector.z - s * vector.y;\n        this.m32 = (1.0 - c) * vector.y * vector.z + s * vector.x;\n        this.m33 = (1.0 - c) * vector.z * vector.z + c;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) {\n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        if (this.cullMode == CullFace.DISABLED) {\n            return true;\n        }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n            if (this.cullMode == CullFace.DISABLED) {\n                return true;\n            }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection3(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                0);\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n\n        textCoord.u = (p1.textureCoordinate.u  + (p2.textureCoordinate.u  - p1.textureCoordinate.u ) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y));\n        textCoord.v = (p1.textureCoordinate.v  + (p2.textureCoordinate.v  - p1.textureCoordinate.v ) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y));\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n               0);\n\n        const textCoord = new TextureCoordinate();\n\n        textCoord.u = (p1.textureCoordinate.u  + (p2.textureCoordinate.u - p1.textureCoordinate.u) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) ;\n        textCoord.v = (p1.textureCoordinate.v  + (p2.textureCoordinate.v  - p1.textureCoordinate.v) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) ;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n    // no 3d clipping\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                0);\n\n        const textCoord = new TextureCoordinate();\n        textCoord.u = (p1.textureCoordinate.u + (p2.textureCoordinate.u - p1.textureCoordinate.u) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x));\n        textCoord.v = (p1.textureCoordinate.v + (p2.textureCoordinate.v - p1.textureCoordinate.v) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x));\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                0);\n\n        const textCoord = new TextureCoordinate();\n        textCoord.u = (p1.textureCoordinate.u  + (p2.textureCoordinate.u  - p1.textureCoordinate.u ) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) ;\n        textCoord.v = (p1.textureCoordinate.v  + (p2.textureCoordinate.v  - p1.textureCoordinate.v ) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y));\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0;\n        let  x1 ;\n        let  y0;\n        let y1 ;\n\n        if (this.clamp) {\n            x = Math.max(Math.min(x, this.width - 1), 0);\n            y = Math.max(Math.min(y, this.height - 1), 0);\n\n            //x= ((x%this.width)+ this.width) % this.width;\n            //y= ((y%this.height)+ this.height) % this.height;\n\n\n            x0 = Math.floor(x);\n            x1 =  Math.max(Math.min(x0+1, this.width - 1), 0);\n              y0 = Math.floor(y);\n             y1 =Math.max(Math.min(y0+1, this.height - 1), 0);\n        } else {\n            x= ((x%this.width)+ this.width) % this.width;\n            y= ((y%this.height)+ this.height) % this.height;\n\n\n        x0 = x | 0;\n        x1 = (x+ 1 | 0)%this.width ;\n          y0 = y | 0;\n         y1 = (y+ 1 | 0)%this.height ;\n        }\n\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0, x1y0 , x0y1, x1y1 );\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        let x0y0: number;\n        let x1y0: number;\n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n\n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n\n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n\n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        const x0y0_a = x0y0 >> 24 & 0xff;\n        const x1y0_a = x1y0 >> 24 & 0xff;\n        const x0y1_a = x0y1 >> 24 & 0xff;\n        const x1y1_a = x1y1 >> 24 & 0xff;\n\n        const col1_a = x0y0_a * oneMinusXfrac + x1y0_a * xFrac;\n        const col2_a = x0y1_a * oneMinusXfrac + x1y1_a * xFrac;\n        const col_a = col1_a * oneMinusYfrac + (col2_a * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | col_a << 24;\n    }\n\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedAlphaBlendingTriangleRasterizer } from './rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('@assets/lab2.json');\n// let bakedJson = <any>require('@assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n   \n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n               // console.log(xx, yy);\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Matrix4f, Vector3f } from '../math';\n\nexport class BasicCamera {\n\n    protected position: Vector3f;\n    protected yaw: number;\n    protected pitch: number;\n    protected roll: number;\n\n    constructor(position: Vector3f, yaw: number, pitch: number, roll: number) {\n        this.position = position;\n        this.yaw = yaw;\n        this.pitch = pitch;\n        this.roll = roll;\n    }\n\n    public getViewMatrix(): Matrix4f {\n        const roll = Matrix4f.constructZRotationMatrix(-this.roll);\n        const pitch = Matrix4f.constructXRotationMatrix(-this.pitch);\n        const yaw = Matrix4f.constructYRotationMatrix(-this.yaw);\n\n        const translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\n\n        return roll.multiplyMatrix(pitch).multiplyMatrix(yaw).multiplyMatrix(translation);\n    }\n\n    public getPosition(): Vector3f {\n        return this.position;\n    }\n\n}\n","import { Vector3f } from '../math';\nimport { BasicCamera } from './BasicCamera';\n\nexport class ControllableCamera extends BasicCamera {\n\n    constructor(position: Vector3f, yaw: number, pitch: number, roll: number) {\n        super(position, yaw, pitch, roll);\n    }\n\n    public moveForward(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.position.x += distance * -Math.sin(this.yaw);\n        this.position.z += distance * -Math.cos(this.yaw);\n    }\n\n    public moveBackward(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.position.x -= distance * -Math.sin(this.yaw);\n        this.position.z -= distance * -Math.cos(this.yaw);\n    }\n\n    public turnLeft(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.yaw += distance;\n    }\n\n    public turnRight(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.yaw -= distance;\n    }\n\n    public turnUp(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.pitch += distance;\n    }\n\n    public turnDown(speed: number, deltaTime: number): void {\n        const distance = speed * deltaTime;\n        this.pitch -= distance;\n    }\n\n}\n","/**\n * Defines a plane as used for primitive clipping against the\n * view frustum.\n */\nimport { Vector4f } from './';\n\nexport class Plane {\n\n    public distance: number;\n    public normal: Vector4f;\n\n    constructor(normal: Vector4f, distance: number) {\n        this.normal = normal;\n        this.distance = distance;\n    }\n\n    public getNormal(): Vector4f {\n        return this.normal;\n    }\n\n    public getDistance(): number {\n        return this.distance;\n    }\n\n    public isInside(point: Vector4f): boolean {\n        const dot: number = point.dot(this.normal);\n        return dot >= this.distance;\n    }\n\n    public computeIntersection(p1: Vector4f, p2: Vector4f): Vector4f {\n        const dot1: number = p1.dot(this.normal);\n        const dot2: number = p2.dot(this.normal);\n        const scale: number = (this.distance - dot1) / (dot2 - dot1);\n        return p2.sub(p1).mul(scale).add(p1);\n    }\n\n}\n","\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Plane } from '../math/Plane';\nimport { Sphere } from '../math/Sphere';\nimport { Vector3f } from '../math/Vector3f';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class FrustumCuller {\n\n    private planes: Array<Plane>;\n    private pos: Vector4f;\n    private normals: Array<Vector4f>;\n\n    public constructor(framebuffer: Framebuffer) {\n        this.planes = new Array<Plane>();\n\n        for (let i: number = 0; i < 4; i++) {\n            this.planes.push(new Plane(new Vector4f(0, 0, 0, 0), 0));\n        }\n\n        this.pos = new Vector4f(0, 0, 0, 0);\n\n        // for some reason this is fucked up\n        // READ: http://www.cubic.org/docs/3dclip.htm\n        this.normals = [\n            //  new Vector4f(Math.cos(-HALF_HORIZONTAL_FOV), 0, Math.sin(-HALF_HORIZONTAL_FOV), 0.0),\n            //  new Vector4f(-Math.cos(HALF_HORIZONTAL_FOV), 0, -Math.sin(HALF_HORIZONTAL_FOV), 0.0),\n            //  new Vector4f(0, -Math.cos(HALF_VERTICAL_FOV), -Math.sin(HALF_VERTICAL_FOV), 0.0),\n            // new Vector4f(0, Math.cos(-HALF_VERTICAL_FOV), Math.sin(-HALF_VERTICAL_FOV), 0.0),\n            // new Vector4f(0.0, 0.0, -1.0, 0.0),\n            // new Vector4f(0.0, 0.0, 1.0, 0.0)\n        ];\n\n        const halfWidth =  framebuffer.width / 2;\n        const halfHeight = framebuffer.height / 2;\n        const magicWidth =  292;\n        const vertices: Array<Vector4f> = [\n            new Vector4f(-halfWidth / 2, -halfHeight / 2, magicWidth),\n            new Vector4f(halfWidth / 2, -halfHeight / 2, magicWidth),\n            new Vector4f(halfWidth / 2, halfHeight / 2, magicWidth),\n            new Vector4f(-halfWidth / 2, halfHeight / 2, magicWidth),\n        ];\n        for (let i: number = 0; i < vertices.length; i++) {\n            const normal: Vector4f = vertices[i].cross(vertices[(i + 1) % vertices.length]).normalize().mul(-1);\n            this.normals.push(normal);\n        }\n\n    }\n\n    public updateFrustum(modelViewMatrix: Matrix4f, position: Vector3f): void {\n        const inverseRotation: Matrix4f = modelViewMatrix.getInverseRotation();\n\n        inverseRotation.multiplyHomArr(this.normals[0], this.planes[0].normal); // left\n        inverseRotation.multiplyHomArr(this.normals[1], this.planes[1].normal); // right\n        inverseRotation.multiplyHomArr(this.normals[2], this.planes[2].normal); // bottom\n        inverseRotation.multiplyHomArr(this.normals[3], this.planes[3].normal); // top\n        // inverseRotation.multiplyHomArr(this.normals[4], this.planes[4].normal); // near\n        // inverseRotation.multiplyHomArr(this.normals[5], this.planes[5].normal); // far\n\n        this.pos.x = -position.x;\n        this.pos.y = -position.y;\n        this.pos.z = -position.z;\n\n        this.planes[0].distance = -this.planes[0].normal.dot(this.pos);\n        this.planes[1].distance = -this.planes[1].normal.dot(this.pos);\n        this.planes[2].distance = -this.planes[2].normal.dot(this.pos);\n        this.planes[3].distance = -this.planes[3].normal.dot(this.pos);\n        // TODO: bugfix near and far plane!\n        // this.planes[4].distance = -this.planes[4].normal.dot(this.pos) + this.near;\n        // this.planes[5].distance = -this.planes[3].normal.dot(this.pos) - this.far;\n    }\n\n    public getPlanes(): Array<Plane> {\n        return this.planes;\n    }\n\n    public isPotentiallyVisible(boundingVolume: Sphere): boolean {\n        for (let i: number = 0; i < this.planes.length; i++) {\n            if (!boundingVolume.isInsidePositiveHalfSpace(this.planes[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Portal } from './Portal';\n\nexport class Area {\n\n    public portals: Array<Portal>;\n    public mesh: any;\n    public portalColor: Color;\n\n    public draw(): void {\n\n    }\n\n}\n","import { Vector3f, Vector4f } from '../math';\nimport { Plane } from '../math/Plane';\n\nexport class Polygon {\n\n    public vertices: Array<Vector4f>;\n\n    constructor(vertices: Array<Vector4f> = null) {\n        this.vertices = vertices;\n    }\n\n    public getPlanes(pos: Vector3f): Array<Plane> {\n        const frustum: Array<Plane> = new Array<Plane>();\n        const position: Vector4f = new Vector4f(pos.x, pos.y, pos.z);\n\n        for (let i: number = 0; i < this.vertices.length; i++) {\n            const normal: Vector4f = this.vertices[i]\n                .sub(position).cross(this.vertices[(i + 1) % this.vertices.length].sub(position)).normalize().mul(-1);\n            const distance: number = normal.dot(position);\n            frustum.push(new Plane(normal, distance));\n        }\n\n        return frustum;\n    }\n\n    public isVisible(): boolean {\n        return this.vertices.length >= 3;\n    }\n\n}\n","import { Area } from './Area';\nimport { Polygon } from './Polygon';\n\nexport class Portal {\n\n    public intoArea: Area;\n    public geometry: Polygon;\n\n}\n","import { Vector4f } from '../math';\nimport { Plane } from '../math/Plane';\nimport { Polygon } from './Polygon';\n\n/**\n * Used for Portal Clipping\n *\n * @export\n * @class SutherlandHodgmanClipper\n * @see https://www.phatcode.net/res/224/files/html/ch65/65-01.html\n * @see http://www.cubic.org/docs/3dclip.htm\n */\nexport class SutherlandHodgmanClipper {\n\n    public static clip(polygon: Polygon, planes: Array<Plane>): Polygon {\n        let output: Array<Vector4f> = polygon.vertices;\n\n        for (let j: number = 0; j < planes.length; j++) {\n            const plane: Plane = planes[j];\n            const input: Array<Vector4f> = output;\n            output = new Array<Vector4f>();\n            let S: Vector4f = input[input.length - 1];\n\n            for (let i: number = 0; i < input.length; i++) {\n                const point: Vector4f = input[i];\n                if (plane.isInside(point)) {\n                    if (!plane.isInside(S)) {\n                        output.push(plane.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (plane.isInside(S)) {\n                    output.push(plane.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return new Polygon(output);\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f, Vector4f, Vector3f } from '../math';\nimport { Area } from './Area';\nimport { Plane } from '../math/Plane';\nimport { Portal } from './Portal';\nimport { SutherlandHodgmanClipper } from './SutherlandHodgmanClipper';\nimport { Color } from '../core/Color';\nimport { ControllableCamera } from '../camera';\nimport { Polygon } from './Polygon';\n\nexport class PortalRenderer {\n\n    /**\n     * TODO:\n     * * check if portal is front facing to speed up\n     * * configure max iteration depth!\n     */\n    public renderVisibleAreas(framebuffer: Framebuffer, modelViewMatrix: Matrix4f, area: Area, clipPlanes: Array<Plane>, controllableCamera: ControllableCamera): void {\n\n        // if already visited return\n        area.draw();\n\n        if (area.portals === undefined || area.portals.length === 0) {\n            return;\n        }\n\n        for (let i: number = 0; i < area.portals.length; i++) {\n            const portal: Portal = area.portals[i];\n\n\n            // 0.  portal should face the view\n            //     portal.getPlane().distance(origin) < 0.0 then continue\n            // 1.  check if we already visited the portal (or portal?) the portal leads to\n            //     visitedAreas.forEach(a => a === portal.intoArea) continue;\n            //     otherwise leads to an infinite loop. check portal or area??\n            // 2.\n\n            const clippedPortalGeometry = SutherlandHodgmanClipper.clip(portal.geometry, clipPlanes);\n\n            if (!clippedPortalGeometry.isVisible()) {\n                continue;\n            }\n\n            this.drawPolygon(framebuffer, 0, clippedPortalGeometry, modelViewMatrix, area.portalColor ? area.portalColor : Color.CYAN);\n            this.renderVisibleAreas(framebuffer, modelViewMatrix, portal.intoArea, clippedPortalGeometry.getPlanes(controllableCamera.getPosition()), controllableCamera);\n        }\n    }\n\n    public drawPolygon(framebuffer: Framebuffer, elapsedTime: number, polygon: Polygon, matrix: Matrix4f, color: Color): void {\n        framebuffer.clearDepthBuffer();\n        const points: Array<Vector4f> = polygon.vertices;\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach(element => {\n            const transformed = modelViewMartrix.multiplyHom(element);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        // TODO: draw without depth buffer DDA line\n        for (let i = 0; i < points2.length; i++) {\n            framebuffer.nearPlaneClipping(points2[i], points2[(i + 1) % points2.length], color.toPackedFormat());\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { ControllableCamera } from '../../camera';\nimport { FrustumCuller } from '../../clustered-culling/FrustumCuller';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f, Vector4f } from '../../math';\nimport { Area, Polygon, Portal, PortalRenderer } from '../../portal-system';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\nexport class PortalScene extends AbstractScene {\n\n    private static readonly BACKGROUND_COLOR: number = Color.SLATE_GRAY.toPackedFormat();\n\n    private controllableCamera: ControllableCamera;\n    private area: Area;\n    private frustumCuller: FrustumCuller;\n    private portalRenderer: PortalRenderer;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        framebuffer.setCullFace(CullFace.BACK);\n\n        this.controllableCamera = new ControllableCamera(new Vector3f(14.84, 0, -19.25), -3.54, 0, 0);\n        this.area = this.generateAreaPortalNetwork();\n        this.frustumCuller = new FrustumCuller(framebuffer);\n        this.portalRenderer = new PortalRenderer();\n\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            if (e.which === 38) {\n                this.controllableCamera.moveForward(0.2, 1.0);\n            }\n            if (e.which === 40) {\n                this.controllableCamera.moveBackward(0.2, 1.0);\n            }\n            if (e.which === 37) {\n                this.controllableCamera.turnLeft(0.05, 1.0);\n            }\n            if (e.which === 39) {\n                this.controllableCamera.turnRight(0.05, 1.0);\n            }\n        });\n\n        return Promise.all([]);\n    }\n\n    /**\n     * TODO:\n     * * move parameters or renderVisibleAreas into constructor\n     * * move computation of starting area into portal renderer\n     */\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.clearColorBuffer(PortalScene.BACKGROUND_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        const modelViewMartrix: Matrix4f = this.controllableCamera.getViewMatrix();\n        this.frustumCuller.updateFrustum(modelViewMartrix, this.controllableCamera.getPosition());\n\n        this.drawScreenBounds(framebuffer);\n        // TODO:\n        // * find the area to start the portal flooding in\n        // * const area: Area = getStartArea(position);\n        this.portalRenderer.renderVisibleAreas(\n            framebuffer,\n            modelViewMartrix,\n            this.area,\n            this.frustumCuller.getPlanes(),\n            this.controllableCamera\n        );\n    }\n\n    /**\n     * Idea:\n     * * use blender to build level\n     * * use special naming convention to identify portals and their connectivity\n     * * \"portal:area-name:into-area-name\"\n     * * problem: how to identify the first area?\n     *\n     * @private\n     * @returns {Area}\n     * @memberof PortalScene\n     */\n    private generateAreaPortalNetwork(): Area {\n        const polygon2: Polygon = new Polygon();\n        polygon2.vertices = [new Vector4f(0, 5 - 2, 3), new Vector4f(10, 5 - 2, 3), new Vector4f(10, -5 - 2, 3)];\n\n        const portal2: Portal = new Portal();\n        portal2.geometry = polygon2;\n        portal2.intoArea = new Area();\n\n        const area2: Area = new Area();\n        area2.portals = [portal2];\n\n        const polygon: Polygon = new Polygon();\n        polygon.vertices = [new Vector4f(0, 5, 0), new Vector4f(10, 5, 0), new Vector4f(10, -5, 0)];\n\n        const portal: Portal = new Portal();\n        portal.geometry = polygon;\n        portal.intoArea = area2;\n\n        const area: Area = new Area();\n        area.mesh = null;\n        area.portals = [portal];\n        area.portalColor = Color.RED;\n\n        return area;\n    }\n\n    private drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = framebuffer.width / 2;\n        const height: number = framebuffer.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n}\n","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { Canvas } from '../../Canvas';\nimport { PortalScene } from './PortalScene';\n\nimport './../../default-style.css';\n\nclass Application {\n\n    public main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new PortalScene());\n        canvas.init();\n    }\n\n}\n\nnew Application().main();\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","options","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","insert","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","setAttributes","attributes","styleElement","nonce","setAttribute","insertStyleElement","styleTagTransform","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","nc","ScaleClipBlitter","framebuffer","constructor","drawScaledTextureClip","xp","yp","width","height","texture","alphaBlend","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","Math","max","alphaScale","index2","y","x","textureIndex","alpha","inverseAlpha","framebufferPixel","texturePixel","r","g","b","Color","static","toPackedFormat","sub","color","add","div","num","mul","CullFace","Vector4f","z","w","vec","cross","normalize","reci","sqrt","sub2","vec1","vec2","add2","scal","componentWiseMul","dot","cross2","normalize2","AbstractGeometricObject","mesh","inverse","buildMesh","points","normals","Array","normal","faces","n1","n2","n3","v1","v2","v3","transformedPoints","transformedNormals","getMesh","Vector3f","mult","scale","Torus","invert","super","STEPS2","frame","torusFunction","PI","frame2","up","right","pos","sin","cos","j","Vector2f","perp","Matrix4f","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","constructIdentityMatrix","matrix","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","scale1","scale2","scale3","inverseRotation","multiplyMatrix","getInverseRotation","getRotation","constructShadowMatrix","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","constructTranslationMatrix","tx","ty","tz","setTranslationMatrix","constructXRotationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","setRotationMatrix","c","s","vector","constructYRotationMatrix","constructZRotationMatrix","constructScaleMatrix","multiply2","matrix2","multiply","multiplyHom","multiplyHomArr","multiplyHomArr2","multiplyArr","Matrix3f","angle","xScale","yScale","zScale","Interpolator","interpolate","start","end","current","cosineInterpolate","y1","y2","mu","mu2","RandomNumberGenerator","seed","getFloat","setSeed","AbstractTriangleRasterizer","AbstractScannlineTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","projection","fillLongRightTriangle","fillLongLeftTriangle","FlatShadingTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","round","wStart","framebufferIndex","wBuffer","LineRasterizerDda","drawLineDDA","xDistance","yDistance","dx","dy","abs","sign","wDelta","drawPixel","LineRasterizerNoZ","drawLineDDANoZ","TexturedTriangleRasterizer","tslope1u","textureCoordinate","u","tslope1v","v","curu1","curv1","tslope2u","tslope2v","curu2","curv2","spanuStep","spanvStep","uStart","vStart","min","bob","color2","getBilinearFilteredPixelRasterizer","TexturedAlphaBlendingTriangleRasterizer","pipeline","currentColor","TextureCoordinate","Vertex","position","AbstractRenderingPipeline","NEAR_PLANE_Z","cullMode","BACK","setCullFace","face","setAlpha","isInFrontOfNearPlane","p","isTriangleCCW","DISABLED","det","isTriangleCCW2","v4","TexturingRenderingPipeline","sphereMapping","triangleRasterizer","vertexArray","setSphereMapping","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","draw","normalMatrix","normals2","points2","vertices","project2","fakeSphere","uv","clipConvexPolygon","zClipTriangle","t1","computeNearPlaneIntersection","ratio","vertex","subject","input","output","S","point","clipRegion","edge","isInside2","computeIntersection2","AbstractClipEdge","BottomClipEdge","isInside","minWindow","computeIntersection","factor","textCoord","computeIntersection3","CohenSutherlandLineClipper","cohenSutherlandLineClipper","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","maxWindow","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","LeftClipEdge","RightClipEdge","TopClipEdge","Texture","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","x1","y0","x0y0","x1y0","x0y1","x1y1","col1","floor","col2","getBilinearFilteredPixel2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","Framebuffer","camera","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","lineRasterizer","lineRasterizerNo","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","plane","cylinder2","linerClipper","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","setTexture","getImageData","set","clear","BLACK","clearColorBuffer","fill","drawPixel4","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","roundedY","percent","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","drawRect2","drawText","text","xpos","firstIndex","charCodeAt","drawTextureRectFastAlpha","addReflections","Date","now","drawTextureRect2","xs","ys","xt","yt","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","blend","c1","c2","nAlpha","nInvAlpha","addColor","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","fastFramebufferCopyOffset","src","dest","offset","l","fastFramebufferCopy","noise","elapsedTime","rng","drawTexturedBillboard","drawParticle","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","textureRowOffset","framebufferRowOffset","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t2","project","t3","clearDepthBuffer","drawBox","wireFrameSphereClipping","sphereFunction2","modelViewMartrix","transformed","colred","colLine","wireFrameTerrain","heightmap","xOff","zOff","forEach","drawBoundingSphere","sphere","getRadius","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","dist2","atan2","color1","final","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","asin","fakeSphere2","tex","theta","phi","FullscreenUtils","toggleFullscreen","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","Canvas","scene","canvas","context","startTime","boundRenderLoop","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","BasicCamera","yaw","pitch","roll","getViewMatrix","translation","getPosition","ControllableCamera","moveForward","speed","deltaTime","moveBackward","turnLeft","turnRight","turnUp","turnDown","Plane","getNormal","getDistance","dot1","dot2","FrustumCuller","planes","halfWidth","halfHeight","magicWidth","updateFrustum","getPlanes","isPotentiallyVisible","boundingVolume","isInsidePositiveHalfSpace","Area","portals","portalColor","Polygon","frustum","isVisible","Portal","intoArea","geometry","SutherlandHodgmanClipper","clip","polygon","PortalRenderer","renderVisibleAreas","area","clipPlanes","controllableCamera","portal","clippedPortalGeometry","drawPolygon","CYAN","AbstractScene","Promise","all","PortalScene","SLATE_GRAY","frustumCuller","portalRenderer","generateAreaPortalNetwork","which","BACKGROUND_COLOR","drawScreenBounds","polygon2","portal2","area2","RED","WHITE","locals","main"],"sourceRoot":""}