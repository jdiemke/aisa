{"version":3,"file":"2596.js","mappings":"yJAIO,MAAMA,UAAoBC,EAAA,EAErBC,YAAc,KAGdC,SAA8B,EAAnBC,KAAKF,YAChBG,SAAWD,KAAKF,YAAc,EAAI,EAGlCI,UACAC,WAEDC,OAGH,OAFAJ,KAAKK,aAAaL,KAAKF,aACvBE,KAAKM,eAAeN,KAAKD,SAAUC,KAAKC,UACjCM,QAAQC,IAAI,GACvB,CAEOC,OAAOC,EAA0BC,GACpCX,KAAKY,WAAWF,EAAaC,EAEjC,CAKAL,eAAeO,EAAgBC,GAK3Bd,KAAKG,WAAa,IAAIY,MAAcf,KAAKD,UAEzC,MAAMiB,EAAUF,EANA,EAQhB,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC7B,MAAMC,EAAKD,GAAe,EAAVE,KAAKC,IAAUP,EAC/Bb,KAAKG,WAAWc,GAAKE,KAAKE,MACtBF,KAAKG,IAXG,EAWCJ,GACTC,KAAKG,IAXG,EAWCJ,GACTC,KAAKG,IAXG,EAWCJ,GACTF,EAAUA,E,CAEtB,CAGAX,aAAaQ,GAWTb,KAAKE,UAAY,IAAIa,MAAcf,KAAKF,aAGxC,IAAK,IAAImB,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC7B,MAAMM,EAAIvB,KAAKwB,OAAOX,EAbf,EAa4BI,EAR5B,KASDQ,EAAIzB,KAAKwB,OAAOX,EAbf,EAa4BI,EAR5B,MASDS,EAAI1B,KAAKwB,OAAOX,EAbf,EAa4BI,EAR5B,MASPjB,KAAKE,UAAUe,GAAK,IAAIU,EAAA,EAAMJ,EAAGE,EAAGC,EAAG,KAAKE,gB,CAEpD,CAGQJ,OAAOK,EAAmBC,GAC9B,OAAOX,KAAKY,MAAgD,IAA1CZ,KAAKG,IAAIQ,GAAe,EAAVX,KAAKC,IAAUS,GAAmB,IACtE,CAGQG,MAAMf,GACV,OAAOjB,KAAKG,WAAWc,EAAIjB,KAAKD,SACpC,CAGQkC,SAAShB,GACb,OAAOjB,KAAKE,UAAUe,EAAIjB,KAAKF,YACnC,CAEAc,WAAWF,EAA0BC,GACjC,IAAIM,EAAI,EACR,MAAMiB,EAAIf,KAAKY,MAAMpB,GAAQ,GACvBwB,EAASnC,KAAKgC,MAAME,GAE1B,IAAK,IAAIE,EAAI,EAAGA,EAAI1B,EAAY2B,OAAQD,IAAK,CACzC,MAAME,EAAStC,KAAKgC,MAAMI,GACpBG,EAAUvC,KAAKgC,MAAMI,EAAIF,GAC/B,IAAK,IAAIJ,EAAI,EAAGA,EAAIpB,EAAY8B,MAAOV,IAInCpB,EAAYA,YAAYO,KAAOjB,KAAKiC,SAASjC,KAAKgC,MAC9ChC,KAAKgC,MAAMF,EAAIK,GAAUI,GACzBvC,KAAKgC,MAAMhC,KAAKgC,MAAMF,EAAII,GAAKI,G,CAG/C,EClGG,MAAMG,EAEDC,MACAC,MACA/C,YAEDQ,OAGH,OAFAJ,KAAKJ,YAAc,IAAIA,EAEhBW,QAAQC,IAAI,CAEfoC,EAAA,EAAaC,KAAK,EAAQ,MAA6C,GAAMC,MACxEC,GAAqB/C,KAAK0C,MAAQK,IAEvCH,EAAA,EAAaC,KAAK,EAAQ,OAA4B,GAAMC,MACvDC,GAAqB/C,KAAK2C,MAAQI,IAEvC/C,KAAKJ,YAAYQ,QAEzB,CAEOK,OAAOC,EAA0BC,GACpCX,KAAKJ,YAAYa,OAAOC,EAAaC,GACrCD,EAAYsC,YAAY,GAAOtC,EAAY2B,OAAS,EAAMrC,KAAK2C,MAAMN,OAAS,EAAM,EAAGrC,KAAK2C,MAAO,GACnGjC,EAAYsC,YAAYtC,EAAY8B,MAAQxC,KAAK0C,MAAMF,MAAQ9B,EAAkB,OAAMV,KAAK0C,MAAY,OAAK,EAAG1C,KAAK0C,MAAO,EAChI,E","sources":["webpack://aisa/./src/examples/plasma/PlasmaScene.ts","webpack://aisa/./src/examples/demo/parts/Scene4.ts"],"sourcesContent":["import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Color } from '../../core/Color';\n\nexport class PlasmaScene extends AbstractScene {\n\n    private GRADIENTLEN = 1500;\n\n    // swing/wave function parameters\n    private SWINGLEN = this.GRADIENTLEN * 3;\n    private SWINGMAX = this.GRADIENTLEN / 2 - 1;\n\n    // gradient & swing curve arrays\n    private colorGrad: Array<number>;\n    private swingCurve: Array<number>;\n\n    public init(): Promise<any> {\n        this.makeGradient(this.GRADIENTLEN);\n        this.makeSwingCurve(this.SWINGLEN, this.SWINGMAX);\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawPlasma(framebuffer, time);\n        // this.drawOldSchoolPlasma(framebuffer, Date.now());\n    }\n\n    // fill the given array with a nice swingin' curve\n    // three cos waves are layered together for that\n    // the wave \"wraps\" smoothly around\n    makeSwingCurve(arrlen: number, maxval: number) {\n        const factor1 = 2;\n        const factor2 = 3;\n        const factor3 = 6;\n\n        this.swingCurve = new Array<number>(this.SWINGLEN);\n\n        const halfmax = maxval / factor1;\n\n        for (let i = 0; i < arrlen; i++) {\n            const ni = i * (Math.PI * 2) / arrlen; // ni goes [0..TWO_PI] -> one complete cos wave\n            this.swingCurve[i] = Math.round(\n                Math.cos(ni * factor1) *\n                Math.cos(ni * factor2) *\n                Math.cos(ni * factor3) *\n                halfmax + halfmax);\n        }\n    }\n\n    // create a smooth, colorful gradient by cosinus curves in the RGB channels\n    makeGradient(arrlen: number) {\n        // random between 1 and 5\n        const rf = 2;\n        const gf = 4;\n        const bf = 4;\n\n        // random between 0 and gradient length\n        const rd = 818; // 0;\n        const gd = 1095; // arrlen / gf;\n        const bd = 1351; // arrlen / bf / 2;\n\n        this.colorGrad = new Array<number>(this.GRADIENTLEN);\n\n        // fill gradient array\n        for (let i = 0; i < arrlen; i++) {\n            const r = this.cos256(arrlen / rf, i + rd);\n            const g = this.cos256(arrlen / gf, i + gd);\n            const b = this.cos256(arrlen / bf, i + bd);\n            this.colorGrad[i] = new Color(r, g, b, 255).toPackedFormat();\n        }\n    }\n\n    // helper: get cosinus sample normalized to 0..255\n    private cos256(amplitude: number, x: number) {\n        return Math.trunc(Math.cos(x * (Math.PI * 2) / amplitude) * 127 + 127);\n    }\n\n    // helper: get a swing curve sample\n    private swing(i: number) {\n        return this.swingCurve[i % this.SWINGLEN];\n    }\n\n    // helper: get a gradient sample\n    private gradient(i: number) {\n        return this.colorGrad[i % this.GRADIENTLEN];\n    }\n\n    drawPlasma(framebuffer: Framebuffer, time: number) {\n        let i = 0;\n        const t = Math.trunc(time >> 3);\n        const swingT = this.swing(t);\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            const swingY = this.swing(y);\n            const swingYT = this.swing(y + t);\n            for (let x = 0; x < framebuffer.width; x++) {\n                // this is where the magic happens: map x, y, t around\n                // the swing curves and lookup a color from the gradient\n                // the \"formula\" was found by a lot of experimentation\n                framebuffer.framebuffer[i++] = this.gradient(this.swing(\n                    this.swing(x + swingT) + swingYT) +\n                    this.swing(this.swing(x + t) + swingY));\n            }\n        }\n    }\n\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\nimport { PlasmaScene } from '../../plasma/PlasmaScene';\n\n// pizza being delivered\nexport class Scene4 {\n\n    private pizza: Texture;\n    private image: Texture;\n    private PlasmaScene: PlasmaScene;\n\n    public init(): Promise<any> {\n        this.PlasmaScene = new PlasmaScene();\n\n        return Promise.all([\n            // https://www.pngkey.com/detail/u2r5r5o0o0e6a9i1_sign-up-for-deals-pizza-delivery-guy-png/\n            TextureUtils.load(require('../../../assets/logos/pizza-delivery.png'), true).then(\n                (texture: Texture) => this.pizza = texture\n            ),\n            TextureUtils.load(require('../../../assets/lsd.png'), true).then(\n                (texture: Texture) => this.image = texture\n            ),\n            this.PlasmaScene.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlasmaScene.render(framebuffer, time);\n        framebuffer.drawTexture(50,  ((framebuffer.height / 2) - (this.image.height / 2)) | 0, this.image, 1.0);\n        framebuffer.drawTexture(framebuffer.width - this.pizza.width, (framebuffer.height ) - (this.pizza.height ) | 0, this.pizza, 1.0);\n    }\n\n}\n"],"names":["PlasmaScene","AbstractScene","GRADIENTLEN","SWINGLEN","this","SWINGMAX","colorGrad","swingCurve","init","makeGradient","makeSwingCurve","Promise","all","render","framebuffer","time","drawPlasma","arrlen","maxval","Array","halfmax","i","ni","Math","PI","round","cos","r","cos256","g","b","Color","toPackedFormat","amplitude","x","trunc","swing","gradient","t","swingT","y","height","swingY","swingYT","width","Scene4","pizza","image","TextureUtils","load","then","texture","drawTexture"],"sourceRoot":""}