{"version":3,"file":"voxel-balls.js","mappings":"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","sources":["webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/examples/voxel-balls/VoxelBallsScene.ts","webpack://aisa/./src/examples/voxel-balls/Application.ts"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1,\n    DISABLED\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n\n    public setRotationMatrix(x: number,y: number,z: number, alpha: number): void {\n        const c = Math.cos(Math.PI * 2 *alpha / 360 );\n        const s = Math.sin(Math.PI * 2 *alpha / 360 );\n        const vector = new Vector3f(x,y,z);\n        vector.normalize2();\n\n        this.m11 = (1.0 - c) * vector.x * vector.x + c;\n        this.m12 = (1.0 - c) * vector.x * vector.y - s * vector.z;\n        this.m13 = (1.0 - c) * vector.x * vector.z + s * vector.y;\n        this.m14 = 0.0;\n\n        this.m21 = (1.0 - c) * vector.x * vector.y + s * vector.z;\n        this.m22 = (1.0 - c) * vector.y * vector.y + c;\n        this.m23 = (1.0 - c) * vector.y * vector.z - s * vector.x;\n        this.m24 = 0.0;\n\n        this.m31 = (1.0 - c) * vector.x * vector.z - s * vector.y;\n        this.m32 = (1.0 - c) * vector.y * vector.z + s * vector.x;\n        this.m33 = (1.0 - c) * vector.z * vector.z + c;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) {\n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        if (this.cullMode == CullFace.DISABLED) {\n            return true;\n        }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n            if (this.cullMode == CullFace.DISABLED) {\n                return true;\n            }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection3(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                0);\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n\n        textCoord.u = (p1.textureCoordinate.u  + (p2.textureCoordinate.u  - p1.textureCoordinate.u ) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y));\n        textCoord.v = (p1.textureCoordinate.v  + (p2.textureCoordinate.v  - p1.textureCoordinate.v ) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y));\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n               0);\n\n        const textCoord = new TextureCoordinate();\n\n        textCoord.u = (p1.textureCoordinate.u  + (p2.textureCoordinate.u - p1.textureCoordinate.u) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) ;\n        textCoord.v = (p1.textureCoordinate.v  + (p2.textureCoordinate.v  - p1.textureCoordinate.v) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) ;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n    // no 3d clipping\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                0);\n\n        const textCoord = new TextureCoordinate();\n        textCoord.u = (p1.textureCoordinate.u + (p2.textureCoordinate.u - p1.textureCoordinate.u) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x));\n        textCoord.v = (p1.textureCoordinate.v + (p2.textureCoordinate.v - p1.textureCoordinate.v) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x));\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                0);\n\n        const textCoord = new TextureCoordinate();\n        textCoord.u = (p1.textureCoordinate.u  + (p2.textureCoordinate.u  - p1.textureCoordinate.u ) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) ;\n        textCoord.v = (p1.textureCoordinate.v  + (p2.textureCoordinate.v  - p1.textureCoordinate.v ) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y));\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0;\n        let  x1 ;\n        let  y0;\n        let y1 ;\n\n        if (this.clamp) {\n            x = Math.max(Math.min(x, this.width - 1), 0);\n            y = Math.max(Math.min(y, this.height - 1), 0);\n\n            //x= ((x%this.width)+ this.width) % this.width;\n            //y= ((y%this.height)+ this.height) % this.height;\n\n\n            x0 = Math.floor(x);\n            x1 =  Math.max(Math.min(x0+1, this.width - 1), 0);\n              y0 = Math.floor(y);\n             y1 =Math.max(Math.min(y0+1, this.height - 1), 0);\n        } else {\n            x= ((x%this.width)+ this.width) % this.width;\n            y= ((y%this.height)+ this.height) % this.height;\n\n\n        x0 = x | 0;\n        x1 = (x+ 1 | 0)%this.width ;\n          y0 = y | 0;\n         y1 = (y+ 1 | 0)%this.height ;\n        }\n\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0, x1y0 , x0y1, x1y1 );\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        let x0y0: number;\n        let x1y0: number;\n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n\n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n\n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n\n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        const x0y0_a = x0y0 >> 24 & 0xff;\n        const x1y0_a = x1y0 >> 24 & 0xff;\n        const x0y1_a = x0y1 >> 24 & 0xff;\n        const x1y1_a = x1y1 >> 24 & 0xff;\n\n        const col1_a = x0y0_a * oneMinusXfrac + x1y0_a * xFrac;\n        const col2_a = x0y1_a * oneMinusXfrac + x1y1_a * xFrac;\n        const col_a = col1_a * oneMinusYfrac + (col2_a * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | col_a << 24;\n    }\n\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedAlphaBlendingTriangleRasterizer } from './rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('@assets/lab2.json');\n// let bakedJson = <any>require('@assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n   \n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n               // console.log(xx, yy);\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { TextureUtils, Texture } from '../../texture/index';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class VoxelBallsScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.YELLOW.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private blurred: Texture;\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('@assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        this.renderTransparent(framebuffer, time);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTextureFullscreen(texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n\n        framebuffer.clearDepthBuffer();\n\n        const xSteps = 5;\n        const xsteps = 5;\n        const zsteps = 5;\n        for (let x = 0; x < xSteps; x++) {\n            for (let y = 0; y < xsteps; y++) {\n                for (let z = 0; z < zsteps; z++) {\n                    let scale = (Math.sin(x * 0.3 + time * 0.0009) + 1.0) * 0.5 *\n                        (Math.sin(y * 0.4 + time * 0.002) + 1.0) * 0.5 *\n                        (Math.sin(z * 0.3 + time * 0.001) + 1.0) * 0.5;\n                    if (scale < 0.3) {\n                        // continue;\n                    }\n                    scale = 0.8;\n                    const mat =\n                        Matrix4f.constructTranslationMatrix(0, 0, -11).multiplyMatrix(\n                            Matrix4f.constructYRotationMatrix(time * 0.0003).multiplyMatrix(\n                                Matrix4f.constructXRotationMatrix(time * 0.0005).multiplyMatrix(\n                                    Matrix4f.constructZRotationMatrix(time * 0.0004).multiplyMatrix(\n                                        Matrix4f.constructTranslationMatrix(x - xSteps / 2 + 0.5, y - xsteps / 2 + 0.5, z - zsteps / 2 + 0.5)\n                                            .multiplyMatrix(\n                                                Matrix4f.constructScaleMatrix(scale, scale, scale)))))); // .multiplyMatrix(\n                    //       Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    //           Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n\n                    this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), mat);\n                }\n            }\n        }\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n\n\n}\n","import { Canvas } from '../../Canvas';\nimport { VoxelBallsScene } from './VoxelBallsScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new VoxelBallsScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","ScaleClipBlitter","framebuffer","constructor","drawScaledTextureClip","xp","yp","width","height","texture","alphaBlend","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","Math","max","alphaScale","index2","y","x","textureIndex","alpha","inverseAlpha","framebufferPixel","texturePixel","r","b","Color","a","static","toPackedFormat","sub","color","add","div","num","mul","CullFace","Vector4f","z","w","vec","cross","normalize","reci","sqrt","sub2","vec1","vec2","add2","scal","componentWiseMul","dot","cross2","normalize2","AbstractGeometricObject","mesh","inverse","buildMesh","points","index","normals","Array","normal","push","faces","n1","n2","n3","v1","v2","v3","transformedPoints","map","transformedNormals","getMesh","Vector3f","mult","scale","Torus","invert","super","STEPS2","frame","torusFunction","PI","frame2","up","right","pos","sin","cos","j","Vector2f","perp","Matrix4f","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","constructIdentityMatrix","matrix","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","scale1","scale2","scale3","inverseRotation","multiplyMatrix","getInverseRotation","getRotation","constructShadowMatrix","planePoint","planeNormal","lightPosition","d","NdotL","shadowMatrix","constructTranslationMatrix","tx","ty","tz","setTranslationMatrix","constructXRotationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","setRotationMatrix","c","s","vector","constructYRotationMatrix","constructZRotationMatrix","constructScaleMatrix","result","multiply2","matrix2","multiply","multiplyHom","multiplyHomArr","multiplyHomArr2","multiplyArr","Matrix3f","angle","xScale","yScale","zScale","Interpolator","interpolate","start","end","current","cosineInterpolate","y1","y2","mu","mu2","RandomNumberGenerator","seed","getFloat","setSeed","AbstractTriangleRasterizer","AbstractScannlineTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","projection","fillLongRightTriangle","fillLongLeftTriangle","FlatShadingTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","round","wStart","framebufferIndex","wBuffer","LineRasterizerDda","drawLineDDA","xDistance","yDistance","dx","dy","abs","sign","wDelta","drawPixel","LineRasterizerNoZ","drawLineDDANoZ","TexturedTriangleRasterizer","tslope1u","textureCoordinate","u","tslope1v","v","curu1","curv1","tslope2u","tslope2v","curu2","curv2","spanuStep","spanvStep","uStart","vStart","min","bob","color2","getBilinearFilteredPixelRasterizer","TexturedAlphaBlendingTriangleRasterizer","pipeline","currentColor","TextureCoordinate","Vertex","position","AbstractRenderingPipeline","NEAR_PLANE_Z","cullMode","BACK","setCullFace","face","setAlpha","isInFrontOfNearPlane","isTriangleCCW","DISABLED","det","isTriangleCCW2","v4","TexturingRenderingPipeline","sphereMapping","triangleRasterizer","vertexArray","setSphereMapping","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","draw","normalMatrix","normals2","points2","vertices","project2","fakeSphere","uv","clipConvexPolygon","zClipTriangle","t1","computeNearPlaneIntersection","ratio","vertex","subject","input","output","S","point","clipRegion","edge","isInside2","computeIntersection2","AbstractClipEdge","BottomClipEdge","isInside","minWindow","computeIntersection","factor","textCoord","computeIntersection3","CohenSutherlandLineClipper","cohenSutherlandLineClipper","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","maxWindow","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","LeftClipEdge","RightClipEdge","TopClipEdge","Texture","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","x1","y0","x0y0","x1y0","x0y1","x1y1","col1","floor","col2","getBilinearFilteredPixel2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","Framebuffer","camera","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","lineRasterizer","lineRasterizerNo","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","plane","cylinder2","linerClipper","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","setTexture","getImageData","data","set","clear","BLACK","count","clearColorBuffer","fill","drawPixel4","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","roundedY","percent","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","drawRect2","drawText","text","xpos","firstIndex","charCodeAt","drawTextureRectFastAlpha","addReflections","Date","now","drawTextureRect2","xs","ys","xt","yt","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","blend","c1","c2","nAlpha","nInvAlpha","addColor","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","fastFramebufferCopyOffset","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","rng","drawTexturedBillboard","drawParticle","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","textureRowOffset","framebufferRowOffset","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t2","project","t3","clearDepthBuffer","drawBox","wireFrameSphereClipping","sphereFunction2","modelViewMartrix","transformed","colred","colLine","wireFrameTerrain","heightmap","xOff","zOff","forEach","element","drawBoundingSphere","sphere","getRadius","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","dist2","atan2","color1","final","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","asin","fakeSphere2","tex","theta","phi","FullscreenUtils","toggleFullscreen","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","Canvas","scene","canvas","context","startTime","boundRenderLoop","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","Cube","SutherlandHodgman2DClipper","PhongLighting","computeColor","mat","lights","finalColor","light","ambientIntensity","computeAmbientIntensity","diffuseIntensity","computeDiffuseIntensity","specularIntensity","computeSpecularIntensity","ambientColor","lightDirection","diffuseColor","pow","shininess","specularColor","Light","PointLight","Material","emissiveColor","ColorInterpolator","startColor","colorSlope","setup","advance","SlopeInterpolator","slope","zslope","currentZ","currentX","top","bottom","GouraudShadingTriangleRasterizer","colorInterpolator1","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","rightSlope","shortSlope","GouraudShadingRenderingPipeline","fog","material","lighting","WHITE","clipper","light1","light2","setFog","setLights","enableLighting","enable","setMaterial","setColor","normal1","normal2","normal3","renderConvexPolygon","projected","late","clippedPolygon","triangulateConvexPolygon","vertexColor","computeVertexColor","AbstractScene","Promise","all","TextureUtils","generateProceduralNoise","resolve","generateProceduralParticleTexture","generateProceduralParticleTexture2","load","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","VoxelBallsScene","YELLOW","renderingPipeline","cubeMesh","blurred","accumulationBuffer","renderTransparent","texture3","xSteps","xsteps","zsteps","main"],"sourceRoot":""}