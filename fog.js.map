{"version":3,"file":"fog.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/ThirdPersonCamera.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/fog/TitanEffectScene.ts","webpack://aisa/./src/examples/md2/ModelViewMatrix.ts","webpack://aisa/./src/examples/mode-7/Keyboard.ts","webpack://aisa/./src/examples/third-person-camera/Player.ts","webpack://aisa/./src/examples/third-person-camera/ThirdPersonCameraScene.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerRunningState.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerStandingState.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerState.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerStateMachine.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/input/AisaGamepad.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/md2/InvalidFileFormatException.ts","webpack://aisa/./src/model/md2/MD2AnimationNames.ts","webpack://aisa/./src/model/md2/MD2Frame.ts","webpack://aisa/./src/model/md2/MD2Header.ts","webpack://aisa/./src/model/md2/MD2Loader.ts","webpack://aisa/./src/model/md2/MD2Model.ts","webpack://aisa/./src/model/md2/MD2Skin.ts","webpack://aisa/./src/model/md2/MD2TexCoord.ts","webpack://aisa/./src/model/md2/MD2Triangle.ts","webpack://aisa/./src/model/md2/MD2Vertex.ts","webpack://aisa/./src/model/md2/StreamReader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturedMesh.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/fog/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n     \n         //this.cylinder = this.createCylinder();\n       \n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array) {\n        src.set(dest);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n   \n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    \n    /*\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n*/\n   /*\n\n*/\n    \n   \n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n     /*\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Matrix4f, Vector3f } from '../math/index';\n\n/**\n * http://www.mathforgameprogrammers.com/gdc2016/GDC2016_Eiserloh_Squirrel_JuicingYourCameras.pdf\n * https://www.gamasutra.com/blogs/ItayKeren/20150511/243083/Scroll_Back_The_Theory_and_Practice_of_Cameras_in_SideScrollers.php\n * https://www.gameenginebook.com/resources/gameconn2011-final.pdf\n * https://en.wikipedia.org/wiki/Virtual_camera_system\n * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.924.6065&rep=rep1&type=pdf\n * https://gamedev.stackexchange.com/questions/123543/damping-the-camera-lookat-rotation/123553#123553\n * https://mashable.com/2017/04/03/video-game-cameras-suck/?europe=true#0bJy.os1Qmqs\n * https://www.gamasutra.com/blogs/SamanthaStahlke/20170919/305840/Prototyping_a_Dynamic_Camera_System.php\n * https://code.tutsplus.com/tutorials/unity3d-third-person-cameras--mobile-11230\n */\nexport class ThirdPersonCamera {\n\n    public computeMatrix(eyePosition: Vector3f, targetPosition: Vector3f, up: Vector3f): Matrix4f {\n\n        const translation: Matrix4f = Matrix4f.constructTranslationMatrix(\n            -eyePosition.x,\n            -eyePosition.y,\n            -eyePosition.z\n        );\n\n        const forwardVector: Vector3f = eyePosition.sub(targetPosition).normalize();\n        const leftVector: Vector3f = up.cross(forwardVector).normalize();\n        const upVector: Vector3f = forwardVector.cross(leftVector);\n\n        const rotation: Matrix4f = new Matrix4f();\n\n        rotation.m11 = leftVector.x;\n        rotation.m12 = leftVector.y;\n        rotation.m13 = leftVector.z;\n        rotation.m14 = 0.0;\n\n        rotation.m21 = upVector.x;\n        rotation.m22 = upVector.y;\n        rotation.m23 = upVector.z;\n        rotation.m24 = 0.0;\n\n        rotation.m31 = forwardVector.x;\n        rotation.m32 = forwardVector.y;\n        rotation.m33 = forwardVector.z;\n        rotation.m34 = 0.0;\n\n        rotation.m41 = 0.0;\n        rotation.m42 = 0.0;\n        rotation.m43 = 0.0;\n        rotation.m44 = 1.0;\n\n        return rotation.multiplyMatrix(translation);\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { ThirdPersonCameraScene } from '../third-person-camera/ThirdPersonCameraScene';\n\nexport class TitanEffectScene extends AbstractScene {\n\n  \n    private scene: ThirdPersonCameraScene;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.scene = new ThirdPersonCameraScene();\n        return Promise.all([\n            this.scene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.scene.render(framebuffer);\n        framebuffer.drawFog(new Color(10,25,10,45),0.04, 0);\n    }\n\n\n}\n","import { Matrix4f } from '../../math/index';\n\n/**\n * The primary purpose of the model view matrix class is to reduce\n * the instanciation of temporary matrix classes by reusing existing instances.\n */\nexport class ModelViewMatrix {\n\n    private currtentMatrix: Matrix4f;\n    private tempMatrix: Matrix4f;\n    private temp: Matrix4f;\n    private transformation: Matrix4f;\n\n    public constructor() {\n        this.currtentMatrix = new Matrix4f();\n        this.tempMatrix = new Matrix4f();\n        this.temp = new Matrix4f();\n        this.transformation = new Matrix4f();\n    }\n\n    public getMatrix(): Matrix4f {\n        return this.currtentMatrix;\n    }\n\n    public setIdentity(): void {\n        this.currtentMatrix.setIdentityMatrix();\n    }\n\n    public multMatrix(mat: Matrix4f): void {\n        this.currtentMatrix = this.currtentMatrix.multiplyMatrix(mat);\n    }\n\n    public trans(x: number, y: number, z: number): void {\n        this.transformation.setTranslationMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public scal(x: number, y: number, z: number): void {\n        this.transformation.setScaleMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public xRotate(x: number): void {\n        this.transformation.setXRotationMatrix(x);\n        this.applyMat();\n    }\n    public yRotate(x: number): void {\n        this.transformation.setYRotationMatrix(x);\n        this.applyMat();\n    }\n\n    private applyMat(): void {\n\n        this.tempMatrix.multiply2(this.currtentMatrix, this.transformation);\n        // switch back and front\n        this.temp = this.currtentMatrix;\n        this.currtentMatrix = this.tempMatrix;\n        this.tempMatrix = this.temp;\n    }\n\n}\n","export class Keyboard {\n\n    public static LEFT: number = 37;\n    public static UP: number = 38;\n    public static RIGHT: number = 39;\n    public static DOWN: number = 40;\n    public static KEY_A: number = 65;\n    public static KEY_D: number = 68;\n    public static KEY_L: number = 76;\n\n    private pressed: Array<boolean>;\n\n    constructor() {\n        this.pressed = new Array<boolean>(256);\n        this.pressed.fill(false);\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => this.onKeyUp(event), false);\n        window.addEventListener('keydown', (event: KeyboardEvent) => this.onKeyDown(event), false);\n    }\n\n    public isDown(code: number): boolean {\n        return this.pressed[code];\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = true;\n    }\n\n    public onKeyUp(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = false;\n    }\n\n}\n","import { Vector2f } from '../../math/index';\n\nexport class Player {\n\n    public position: Vector2f = new Vector2f(0, 0);\n    public angle: number = 0;\n\n    public moveForward(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.position.x += distance * -Math.sin(Math.PI * 2 / 360 * this.angle);\n        this.position.y += distance * -Math.cos(Math.PI * 2 / 360 * this.angle);\n    }\n\n    public moveBackward(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.position.x -= distance * -Math.sin(Math.PI * 2 / 360 * this.angle);\n        this.position.y -= distance * -Math.cos(Math.PI * 2 / 360 * this.angle);\n    }\n\n    public getDirection(): Vector2f {\n        return new Vector2f(-Math.sin(Math.PI * 2 / 360 * this.angle),\n            - Math.cos(Math.PI * 2 / 360 * this.angle));\n    }\n\n    public turnLeft(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.angle += distance;\n    }\n\n    public turnRight(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.angle -= distance;\n    }\n\n}\n","import { ThirdPersonCamera } from '../../camera/ThirdPersonCamera';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AisaGamepad } from '../../input/AisaGamepad';\nimport { Matrix4f, Vector3f, Vector4f } from '../../math/index';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Keyboard } from '../mode-7/Keyboard';\nimport { MD2Loader } from '../../model/md2/MD2Loader';\nimport { MD2Model } from '../../model/md2/MD2Model';\nimport { ModelViewMatrix } from '../md2/ModelViewMatrix';\nimport { Player } from './Player';\nimport { PlayerStateMachine } from './state-machine/PlayerStateMachine';\n\n/**\n * http://tfc.duke.free.fr/coding/mdl-specs-en.html\n * http://tfc.duke.free.fr/coding/md2-specs-en.html\n * https://github.com/mrdoob/three.js/tree/dev/examples/models/md2/ogro\n * http://tfc.duke.free.fr/old/models/md2.htm\n */\nexport class ThirdPersonCameraScene extends AbstractScene {\n\n    private static readonly CLEAR_COLOR: number = Color.SLATE_GRAY.toPackedFormat();\n\n    public lastTime: number = Date.now();\n\n    private keyboard: Keyboard = new Keyboard();\n    private gamepad: AisaGamepad = new AisaGamepad();\n\n    private ogroTexture: Texture;\n    private freakTexture: Texture;\n    private weaponTexture: Texture;\n    private texture4: Texture;\n    private glow: Texture;\n    private fontred: Texture;\n    private ground: Texture;\n    private md2: MD2Model;\n    private weapon: MD2Model;\n    private startTime: number;\n    private md2Freak: MD2Model;\n\n    private modelViewMatrix: ModelViewMatrix = new ModelViewMatrix();\n\n    private floor: TexturedMesh;\n    private shadow: TexturedMesh;\n\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private player: Player = new Player();\n\n    private camera: ThirdPersonCamera = new ThirdPersonCamera();\n\n    private oldEye: Vector3f = new Vector3f(0, 0, 0);\n    private attack: boolean = false;\n    private jump: boolean = false;\n    private run: boolean = false;\n\n    private playerStateMachine: PlayerStateMachine;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.texturedRenderingPipeline.setCullFace(CullFace.FRONT);\n        this.startTime = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/md2/hueteotl.png'), false).then(\n                (texture: Texture) => this.ogroTexture = texture),\n            TextureUtils.load(require('../../assets/md2/weapon.png'), false).then(\n                (texture: Texture) => this.weaponTexture = texture),\n            MD2Loader.load(require('../../assets/md2/tris.md2')).then(\n                (mesh: MD2Model) => this.md2 = mesh),\n            MD2Loader.load(require('../../assets/md2/weapon.md2')).then(\n                (mesh: MD2Model) => this.weapon = mesh),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n            TextureUtils.load(require('../../assets/fontred.png'), true).then(\n                (texture: Texture) => this.fontred = texture),\n            TextureUtils.load(require('../../assets/ground.png'), true).then(\n                (texture: Texture) => this.ground = texture),\n            TextureUtils.load(require('../../assets/glow.png'), true).then(\n                (texture: Texture) => this.glow = texture),\n                TextureUtils.load(require('../../assets/md2/texture2.jpg'), false).then(\n                    (texture: Texture) => this.freakTexture = texture\n                ),\n                MD2Loader.load(require('../../assets/md2/drfreak.md2')).then(\n                    (mesh: MD2Model) => this.md2Freak = mesh\n                )\n        ]).then(\n            () => {\n                this.playerStateMachine = new PlayerStateMachine([this.md2, this.weapon], this.player);\n                window.addEventListener('gamepadconnected', (e: GamepadEvent) => {\n                    console.log('Gamepad connected at index %d: %s. %d buttons, %d axes.',\n                        e.gamepad.index, e.gamepad.id,\n                        e.gamepad.buttons.length, e.gamepad.axes.length);\n                });\n\n                const mesh: TexturedMesh = new TexturedMesh();\n                mesh.points = [\n                    new Vector4f(-20, 0, 20),\n                    new Vector4f(20, 0, 20),\n                    new Vector4f(20, 0, -20),\n                    new Vector4f(-20, 0, -20)\n                ];\n                mesh.uv = [\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(2.0, 0),\n                    new TextureCoordinate(2.0, 2.0),\n                    new TextureCoordinate(0, 2.0)\n                ];\n                mesh.points2 = mesh.points.map(() => new Vector4f(0, 0, 0, 0));\n                mesh.faces = [\n                    {\n                        uv: [0, 1, 2],\n                        vertices: [0, 1, 2]\n                    },\n                    {\n                        uv: [2, 3, 0],\n                        vertices: [2, 3, 0]\n                    }\n                ];\n                this.floor = mesh;\n\n                const mesh2: TexturedMesh = new TexturedMesh();\n                mesh2.points = mesh.points;\n                mesh2.points2 = mesh.points2;\n                mesh2.faces = mesh.faces;\n                mesh2.uv =[\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1)\n                ];\n                this.shadow = mesh2;\n            });\n    }\n\n    public processInput(deltaTime: number): void {\n\n        if (this.keyboard.isDown(Keyboard.UP)) {\n            this.playerStateMachine.upButton();\n        }\n\n        if (!this.keyboard.isDown(Keyboard.UP)) {\n            this.playerStateMachine.upButtonNot();\n        }\n\n\n        const speed: number = 4.1;\n        const Angspeed: number = 110.0;\n\n        if (this.keyboard.isDown(Keyboard.UP) || this.gamepad.isLeft(1, -1)) {\n            this.player.moveForward(speed, deltaTime);\n        }\n\n        if (this.gamepad.isLeft(1, -1) && !this.run) {\n            // this.md2.setAnim( MD2Animation.RUN, Date.now(), true);\n            //  this.weapon.setAnim( MD2Animation.RUN, Date.now(), true);\n            this.run = true;\n        }\n\n        if (!this.gamepad.isLeft(1, -1) && this.run) {\n            //   this.md2.setAnim( MD2Animation.STAND, Date.now(), true);\n            //  this.weapon.setAnim( MD2Animation.STAND, Date.now(), true);\n            this.run = false;\n        }\n\n        if (this.keyboard.isDown(Keyboard.DOWN) || this.gamepad.isLeft(1, 1)) {\n            this.player.moveBackward(speed, deltaTime);\n        }\n\n        if (this.keyboard.isDown(Keyboard.LEFT) || this.gamepad.isLeft(0, -1)) {\n            this.player.turnLeft(Angspeed, deltaTime);\n        }\n\n        if (this.keyboard.isDown(Keyboard.RIGHT) || this.gamepad.isLeft(0, 1)) {\n            this.player.turnRight(Angspeed, deltaTime);\n        }\n\n        if (this.gamepad.isButtonPressed(3) && !this.attack) {\n            // this.md2.setAnim( MD2Animation.ATTACK, Date.now());\n            // this.weapon.setAnim( MD2Animation.ATTACK, Date.now());\n            this.attack = true;\n        }\n\n        if (!this.gamepad.isButtonPressed(3) && this.attack) {\n            this.attack = false;\n        }\n\n        if (this.gamepad.isButtonPressed(2) && !this.jump) {\n            //     this.md2.setAnim( MD2Animation.JUMP, Date.now());\n            //   this.weapon.setAnim( MD2Animation.JUMP, Date.now());\n            this.jump = true;\n        }\n\n        if (!this.gamepad.isButtonPressed(2) && this.jump) {\n            this.jump = false;\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n\n        const currentTime: number = Date.now();\n        const delta: number = (currentTime - this.lastTime) / 1000;\n        this.lastTime = currentTime;\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        this.processInput(delta);\n\n        framebuffer.clearColorBuffer(ThirdPersonCameraScene.CLEAR_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        //\n        framebuffer.setTexture(this.ground);\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        this.computeFloorMovement(delta);\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n        this.texturedRenderingPipeline.draw(framebuffer, this.floor);\n\n\n\n\n        this.modelViewMatrix.trans(0, 0.1, 0);\n\n        this.computeGlowMovement(delta);\n        framebuffer.setTexture(this.glow);\n\n        this.texturedRenderingPipeline.enableAlphaBlending();\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n        this.texturedRenderingPipeline.draw(framebuffer, this.shadow);\n        this.texturedRenderingPipeline.disableAlphaBlending();\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.FRONT);\n\n        this.renderPlayer(framebuffer, delta);\n\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(delta));\n        this.modelViewMatrix.trans(0, 24 * 0.05, 0);\n        this.modelViewMatrix.yRotate(Math.PI * 2 / 360 * (90 + 0));\n        this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n        this.modelViewMatrix.scal(0.05, 0.05, 0.05);\n\n        framebuffer.setTexture(this.freakTexture);\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n      this.texturedRenderingPipeline.draw(framebuffer, this.md2Freak.getMesh(currentTime));\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n        framebuffer.drawText(8, 16, 'TRIANGELS: ' +\n            (this.md2.header.numberOfTriangles + this.weapon.header.numberOfTriangles), this.texture4);\n        if ((currentTime % 1000) > 500) {\n            framebuffer.drawText(8, 200 - 16,\n                this.gamepad.isAvailable() ? 'GAMEPAD DETECTED' : 'NO GAMEPAD DETECTED', this.fontred);\n        }\n    }\n\n    private renderPlayer(framebuffer: Framebuffer, time: number): void {\n        this.computePlayerMovement(time);\n\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n\n        framebuffer.setTexture(this.ogroTexture);\n        this.texturedRenderingPipeline.draw(framebuffer, this.md2.getMesh2(time * 1000));\n\n        framebuffer.setTexture(this.weaponTexture);\n        this.texturedRenderingPipeline.draw(framebuffer, this.weapon.getMesh2(time * 1000));\n    }\n\n    private computeFloorMovement(elapsedTime: number): void {\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(elapsedTime));\n        this.modelViewMatrix.trans(0, 0, 0);\n        this.modelViewMatrix.yRotate(Math.PI * 2 / 360 * 90);\n        //  this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n    }\n    private getCamMatrix(delta: number): Matrix4f {\n        const dampFactor: number = 0.01 * 60 * delta;\n        const eyePos: Vector3f = this.oldEye.add(\n            new Vector3f(\n                this.player.position.x - this.player.getDirection().x * 5,\n                2.2, this.player.position.y - this.player.getDirection().y * 5\n            ).sub(this.oldEye).mul(dampFactor));\n        this.oldEye = eyePos;\n\n        return this.camera.computeMatrix(eyePos, new Vector3f(\n            this.player.position.x,\n            1.8,\n            this.player.position.y), new Vector3f(0, 1, 0));\n    }\n\n    private computePlayerMovement(elapsedTime: number): void {\n        // http://cubeengine.com/wiki/Importing_md2_and_md3_files\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(elapsedTime));\n        this.modelViewMatrix.trans(this.player.position.x, 24 * 0.05, this.player.position.y);\n        this.modelViewMatrix.yRotate(Math.PI * 2 / 360 * (90 + this.player.angle));\n        this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n        this.modelViewMatrix.scal(0.05, 0.05, 0.05);\n    }\n\n    private computeGlowMovement(delta: number): void {\n        // http://cubeengine.com/wiki/Importing_md2_and_md3_files\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(delta));\n        this.modelViewMatrix.trans(this.player.position.x, 0.03, this.player.position.y);\n        const scale: number = 0.85;\n        this.modelViewMatrix.scal(0.06 * scale, 0.06 * scale, 0.06 * scale);\n        this.texturedRenderingPipeline.setAlpha(0.70);\n    }\n\n}\n","import { MD2Animation } from '../../../model/md2/MD2AnimationNames';\nimport { PlayerStandingState } from './PlayerStandingState';\nimport { PlayerState } from './PlayerState';\n\nexport class PlayerRunningState extends PlayerState {\n\n    public entry(): void {\n        this.context.md2.forEach(x=> x.setAnim(MD2Animation.RUN, 0, true));\n    \n    }\n\n    public upButtonNot(): void {\n        this.context.setState(new PlayerStandingState(this.context));\n    }\n\n}\n","import { MD2Animation } from '../../../model/md2/MD2AnimationNames';\nimport { PlayerRunningState } from './PlayerRunningState';\nimport { PlayerState } from './PlayerState';\n\nexport class PlayerStandingState extends PlayerState {\n\n    public entry(): void {\n        this.context.md2.forEach(x => x.setAnim(MD2Animation.STAND, 0, true));\n    }\n\n    public upButton(): void {\n        this.context.setState(new PlayerRunningState(this.context));\n    }\n\n}\n","import { PlayerStateMachine } from './PlayerStateMachine';\n\nexport abstract class PlayerState {\n\n    constructor(protected context: PlayerStateMachine) {\n\n    }\n\n    public entry(): void {\n\n    }\n\n    public exit(): void {\n\n    }\n\n    public process(): void {\n\n    }\n\n    public upButton(): void {\n\n    }\n\n    public upButtonNot(): void {\n\n    }\n\n}\n","import { MD2Model } from '../../../model/md2/MD2Model';\nimport { Player } from '../Player';\nimport { PlayerStandingState } from './PlayerStandingState';\nimport { PlayerState } from './PlayerState';\n\n/**\n * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.9.8608&rep=rep1&type=pdf\n * http://www.iplab.cs.tsukuba.ac.jp/paper/international/ali-idpt99.pdf\n * https://www.reddit.com/r/gamedev/comments/45nn5i/article_tame_your_game_code_with_state_machines/\n * http://howtomakeanrpg.com/a/state-machines.html\n * https://gamedevacademy.org/how-to-use-state-machines-to-control-behavior-and-animations-in-phaser/\n * https://www.gamedev.net/articles/programming/general-and-gameplay-programming/from-user-input-to-animations-using-state-machines-r4155/\n * http://gameprogrammingpatterns.com/state.html\n */\nexport class PlayerStateMachine {\n\n    public md2: MD2Model[];\n    private activeState: PlayerState = null;\n\n    public constructor(md2: MD2Model[], public pl: Player) {\n        this.md2 = md2;\n        this.setState(new PlayerStandingState(this));\n    }\n\n    public upButton(): void {\n        this.activeState.upButton();\n    }\n\n    public upButtonNot(): void {\n        this.activeState.upButtonNot();\n    }\n\n    public setState(state: PlayerState): void {\n        if (this.activeState !== null) {\n            this.activeState.exit();\n        }\n\n        this.activeState = state;\n        this.activeState.entry();\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class AisaGamepad {\n\n    private gamepad: Gamepad = null;\n\n    constructor() {\n        window.addEventListener('gamepadconnected', (e: GamepadEvent) => {\n            console.log('Gamepad connected at index %d: %s. %d buttons, %d axes.',\n                e.gamepad.index, e.gamepad.id,\n                e.gamepad.buttons.length, e.gamepad.axes.length);\n\n            this.gamepad = e.gamepad;\n        });\n    }\n\n    public isAvailable(): boolean {\n        return this.gamepad !== null;\n    }\n\n    public isButtonPressed(index: number): boolean {\n        if (this.gamepad) {\n            return this.gamepad.buttons[index].pressed;\n        }\n\n        return false;\n    }\n\n    public isLeft(axis: number, value: number): boolean {\n        if (this.gamepad) {\n            return this.gamepad.axes[axis] === value;\n        }\n\n        return false;\n    }\n\n    public vl(): string {\n        return this.gamepad.id;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","export class InvalidFileFormatException {\n\n    constructor(private message: string) {\n\n    }\n\n}\n","// http://www.mbsoftworks.sk/tutorials/opengl3/24-animation-pt1-keyframe-md2/\n// https://www.gamedev.net/forums/topic/361176-md2-animation-speed/\n// https://www.allegro.cc/forums/thread/414171/414344\nexport class MD2Animation {\n\n    public static readonly STAND: MD2Animation = new MD2Animation(0, 39, 9);\n    public static readonly RUN: MD2Animation = new MD2Animation(40, 45, 10);\n    public static readonly ATTACK: MD2Animation = new MD2Animation(46, 53, 10);\n    public static readonly PAIN_A: MD2Animation = new MD2Animation(54, 57, 7);\n    public static readonly PAIN_B: MD2Animation = new MD2Animation(58, 61, 7);\n    public static readonly PAIN_C: MD2Animation = new MD2Animation(62, 65, 7);\n    public static readonly JUMP: MD2Animation = new MD2Animation(66, 71, 7);\n    public static readonly FLIP: MD2Animation = new MD2Animation(72, 83, 7);\n    public static readonly SALUTE: MD2Animation = new MD2Animation(84, 94, 7);\n    public static readonly FALLBACK: MD2Animation = new MD2Animation(95, 111, 10);\n    public static readonly WAVE: MD2Animation = new MD2Animation(112, 122, 7);\n    public static readonly POINTING: MD2Animation = new MD2Animation(123, 134, 6);\n\n    public static readonly CROUCH_STAND: MD2Animation = new MD2Animation(135, 153, 10);\n    public static readonly CROUCH_WALK: MD2Animation = new MD2Animation(154, 159, 7);\n    public static readonly CROUCH_ATTACK: MD2Animation = new MD2Animation(160, 168, 10);\n    public static readonly CROUCH_PAIN: MD2Animation = new MD2Animation(196, 172, 7);\n    public static readonly CROUCH_DEATH: MD2Animation = new MD2Animation(173, 177, 5);\n\n    public static readonly DEATH_FALLBACK: MD2Animation = new MD2Animation(178, 183, 7);\n    public static readonly DEATH_FALLFORWARD: MD2Animation = new MD2Animation(184, 189, 7);\n    public static readonly DEATH_FALLBACKSLOW: MD2Animation = new MD2Animation(190, 197, 7);\n    public static readonly BOOM: MD2Animation = new MD2Animation(198, 198, 5);\n\n    constructor(public first: number, public last: number, public fps: number) {\n\n    }\n\n}\n","import { Vector3f } from '../../math/index';\nimport { MD2Header } from './MD2Header';\nimport { MD2Vertex } from './MD2Vertex';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2Frame {\n\n    public scale: Vector3f;\n    public translate: Vector3f;\n    public vertices: Array<MD2Vertex>;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0, header: MD2Header) {\n        const stream: StreamReader = new StreamReader(arrayBuffer, offset);\n        const scale: Vector3f = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n        this.scale = scale;\n\n        const trans: Vector3f = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n        this.translate = trans;\n\n        const streamvert: StreamReader = new StreamReader(arrayBuffer, offset + 40);\n\n        const vertArray: Array<MD2Vertex> = new Array<MD2Vertex>();\n\n        for (let i: number = 0; i < header.numberOfVertices; i++) {\n            const px: number = streamvert.readUnsignedInt8();\n            const py: number = streamvert.readUnsignedInt8();\n            const pz: number = streamvert.readUnsignedInt8();\n            const nomralIndex: number = streamvert.readUnsignedInt8();\n\n            vertArray.push(new MD2Vertex(\n                new Vector3f(\n                    px * scale.x + trans.x,\n                    py * scale.y + trans.y,\n                    pz * scale.z + trans.z\n                ),\n                nomralIndex\n            ));\n        }\n        this.vertices = vertArray;\n\n    }\n\n}\n","import { InvalidFileFormatException } from './InvalidFileFormatException';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2Header {\n\n    private static readonly IDP2: number = 844121161;\n    private static readonly VERSION: number = 8;\n\n    public identifier: number;\n    public version: number;\n\n    public skinWidth: number;\n    public skinHeight: number;\n\n    // framesize in bytes\n    public frameSize: number;\n\n    public numberOfSkins: number;\n    public numberOfVertices: number;\n    public numberOfTexCoords: number;\n    public numberOfTriangles: number;\n    public numberOfGlCommands: number;\n    public numberOfFrames: number;\n\n    public skinsOffset: number;\n    public texCoordsOffset: number;\n    public triangleOffset: number;\n    public framesOffset: number;\n    public glCommandsOffset: number;\n    public endOffset: number;\n\n    public constructor(arrayBuffer: ArrayBuffer) {\n\n        if (!this.isValidMD2File(arrayBuffer)) {\n            throw new InvalidFileFormatException('Not a valid MD2 file.');\n        }\n\n        const stream: StreamReader = new StreamReader(arrayBuffer);\n\n        this.identifier = stream.readInt();\n        this.version = stream.readInt();\n        this.skinWidth = stream.readInt();\n        this.skinHeight = stream.readInt();\n        this.frameSize = stream.readInt();\n        this.numberOfSkins = stream.readInt();\n\n        this.numberOfVertices = stream.readInt();\n        this.numberOfTexCoords = stream.readInt();\n        this.numberOfTriangles = stream.readInt();\n        this.numberOfGlCommands = stream.readInt();\n        this.numberOfFrames = stream.readInt();\n\n        this.skinsOffset = stream.readInt();\n        this.texCoordsOffset = stream.readInt();\n        this.triangleOffset = stream.readInt();\n        this.framesOffset = stream.readInt();\n        this.glCommandsOffset = stream.readInt();\n        this.endOffset = stream.readInt();\n    }\n\n    public toString(): string {\n        return JSON.stringify(this, null, 2);\n    }\n\n    private isValidMD2File(arrayBuffer: ArrayBuffer): boolean {\n        const dataView: DataView = new DataView(arrayBuffer, 0);\n\n        const magicNumber: number = dataView.getInt32(0, true);\n        const version: number = dataView.getInt32(4, true);\n\n        return magicNumber === MD2Header.IDP2 && version === MD2Header.VERSION;\n    }\n\n}\n","import { MD2Frame } from './MD2Frame';\nimport { MD2Header } from './MD2Header';\nimport { MD2Model } from './MD2Model';\nimport { MD2Skin } from './MD2Skin';\nimport { MD2TexCoord } from './MD2TexCoord';\nimport { MD2Triangle } from './MD2Triangle';\nimport { StreamReader } from './StreamReader';\n\n/**\n * http://tfc.duke.free.fr/coding/md2-specs-en.html\n * http://tfc.duke.free.fr/old/models/md2.htm\n * https://fabiensanglard.net/quake2/quake2_software_renderer.php\n */\nexport class MD2Loader {\n\n    public static load(filename: string): Promise<MD2Model> {\n        return fetch(filename).then((response: Response) => {\n            return response.arrayBuffer();\n        }).then((arrayBuffer: ArrayBuffer) => {\n            try {\n                return MD2Loader.parse(arrayBuffer);\n            } catch (ex) {\n                console.error(ex.message);\n            }\n        });\n    }\n\n    private static parse(arrayBuffer: ArrayBuffer): MD2Model {\n        const header: MD2Header = MD2Loader.getHeader(arrayBuffer);\n\n        return new MD2Model(\n            MD2Loader.getTextureCoords(arrayBuffer, header),\n            MD2Loader.getTriangles(arrayBuffer, header),\n            MD2Loader.getFrames(arrayBuffer, header),\n            header\n        );\n    }\n\n    private static getHeader(arrayBuffer: ArrayBuffer): MD2Header {\n        return new MD2Header(arrayBuffer);\n    }\n\n    private static getSkins(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Skin> {\n        const skins: Array<MD2Skin> = new Array<MD2Skin>();\n\n        for (let k: number = 0; k < header.numberOfSkins; k++) {\n            const skin: MD2Skin = new MD2Skin(arrayBuffer, header.skinsOffset + 64 * k);\n            skins.push(skin);\n        }\n\n        return skins;\n    }\n\n    private static getTextureCoords(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2TexCoord> {\n        const texCoords: Array<MD2TexCoord> = new Array<MD2TexCoord>();\n        const stream: StreamReader = new StreamReader(arrayBuffer, header.texCoordsOffset);\n\n        for (let i: number = 0; i < header.numberOfTexCoords; i++) {\n            texCoords.push(new MD2TexCoord(stream, header));\n        }\n\n        return texCoords;\n    }\n\n    private static getTriangles(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Triangle> {\n        const triangles: Array<MD2Triangle> = new Array<MD2Triangle>();\n        const stream: StreamReader = new StreamReader(arrayBuffer, header.triangleOffset);\n\n        for (let i: number = 0; i < header.numberOfTriangles; i++) {\n            triangles.push(new MD2Triangle(stream));\n        }\n\n        return triangles;\n    }\n\n    private static getFrames(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Frame> {\n        const frames: Array<MD2Frame> = new Array<MD2Frame>();\n\n        for (let i: number = 0; i < header.numberOfFrames; i++) {\n            const frame: MD2Frame = new MD2Frame(arrayBuffer, header.framesOffset + header.frameSize * i, header);\n            frames.push(frame);\n        }\n\n        return frames;\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { MD2Animation } from './MD2AnimationNames';\nimport { MD2Frame } from './MD2Frame';\nimport { MD2Header } from './MD2Header';\nimport { MD2TexCoord } from './MD2TexCoord';\nimport { MD2Triangle } from './MD2Triangle';\nimport { MD2Vertex } from './MD2Vertex';\n\nexport class MD2Model {\n\n    private mesh: TexturedMesh;\n    private points: Array<Vector4f>;\n    private animation: MD2Animation = MD2Animation.STAND;\n    private currentFrame: number = 0;\n    private loop: boolean = false;\n\n    constructor(public textureCoordinates: Array<MD2TexCoord>,\n        public triangles: Array<MD2Triangle>,\n        public frames: Array<MD2Frame>, public header: MD2Header) {\n\n        const mesh: TexturedMesh = new TexturedMesh();\n\n        const texCoords2: Array<TextureCoordinate> = new Array<TextureCoordinate>();\n        this.textureCoordinates.forEach((textureCoordinate: MD2TexCoord) => {\n            texCoords2.push(new TextureCoordinate(textureCoordinate.s, textureCoordinate.t));\n        });\n\n        const points: Array<Vector4f> = new Array<Vector4f>();\n\n        for (let i: number = 0; i < header.numberOfVertices; i++) {\n            points.push(new Vector4f(0, 0, 0, 1));\n        }\n\n        this.points = points;\n\n        mesh.points = points;\n        mesh.points2 = points.map(() => new Vector4f(0, 0, 0, 0));\n        mesh.uv = texCoords2;\n        const faces: Array<{\n            vertices: Array<number>,\n            uv: Array<number>\n        }> = [];\n\n        this.triangles.forEach((triangle: MD2Triangle) => {\n\n            faces.push({\n                uv: triangle.texCoords,\n                vertices: triangle.vertices\n            });\n        });\n\n        mesh.faces = faces;\n        this.mesh = mesh;\n\n    }\n\n    public getMesh(time: number): TexturedMesh {\n\n        time = time *.006;\n        const f1: number = Math.floor(time) % this.frames.length;\n        const f2: number = (f1 + 1) % this.frames.length;\n        const cframe: MD2Frame = this.frames[f1];\n        const cframe2: MD2Frame = this.frames[f2];\n        const alpha: number = time - Math.floor(time);\n        const oneMinusAlpha: number = 1 - alpha;\n\n        for (let i: number = 0; i < cframe.vertices.length; i++) {\n            const x: MD2Vertex = cframe.vertices[i];\n            const x2: MD2Vertex = cframe2.vertices[i];\n            this.points[i].x = x.vector.x * oneMinusAlpha + x2.vector.x * alpha;\n            this.points[i].y = x.vector.y * oneMinusAlpha + x2.vector.y * alpha;\n            this.points[i].z = x.vector.z * oneMinusAlpha + x2.vector.z * alpha;\n        }\n\n        return this.mesh;\n    }\n\n    public setAnim(animation: MD2Animation, time: number, loop: boolean = false): void {\n        this.animation = animation;\n        this.currentFrame = 0;\n        this.loop = loop;\n    }\n\n    public getMesh2(delta: number): TexturedMesh {\n        this.currentFrame += delta * 0.009;\n\n        if (this.currentFrame > (this.animation.last - this.animation.first)) {\n            if (!this.loop) {\n                this.currentFrame = this.animation.last - this.animation.first;\n            }\n        }\n\n        const modulo: number = (this.animation.last - this.animation.first + 1);\n        const f1: number = Math.floor(this.currentFrame) % modulo;\n        const f2: number = (f1 + 1) % modulo;\n        const cframe: MD2Frame = this.frames[f1 + this.animation.first];\n        const cframe2: MD2Frame = this.frames[f2 + this.animation.first];\n        const alpha: number = this.currentFrame - Math.floor(this.currentFrame);\n        const oneMinusAlpha: number = 1 - alpha;\n\n        /**\n         * TODO: add animation blending??? expensive :(\n         */\n        for (let i: number = 0; i < cframe.vertices.length; i++) {\n            const x: MD2Vertex = cframe.vertices[i];\n            const x2: MD2Vertex = cframe2.vertices[i];\n            this.points[i].x = x.vector.x * oneMinusAlpha + x2.vector.x * alpha;\n            this.points[i].y = x.vector.y * oneMinusAlpha + x2.vector.y * alpha;\n            this.points[i].z = x.vector.z * oneMinusAlpha + x2.vector.z * alpha;\n        }\n\n        return this.mesh;\n    }\n\n}\n","import { StreamReader } from './StreamReader';\n\nexport class MD2Skin {\n\n    public name: string;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n        const stream: StreamReader = new StreamReader(arrayBuffer, offset);\n\n        let tempName: string;\n\n        for (let i: number = 0; i < 64; i++) {\n            const code: number = stream.readUnsignedInt8();\n\n            if (code === 0) {\n                break;\n            }\n\n            tempName += String.fromCharCode(code);\n        }\n\n        this.name = tempName;\n    }\n\n}\n","import { MD2Header } from './MD2Header';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2TexCoord {\n\n    public s: number;\n    public t: number;\n\n    constructor(stream: StreamReader, header: MD2Header) {\n        this.s = stream.readSignedShort() / (header.skinWidth - 1);\n        this.t = stream.readSignedShort() / (header.skinHeight - 1);\n    }\n\n}\n","import { StreamReader } from './StreamReader';\n\nexport class MD2Triangle {\n\n    public vertices: [number, number, number];\n    public texCoords: [number, number, number];\n\n    constructor(stream2: StreamReader) {\n        this.vertices = [\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort()\n        ];\n        this.texCoords = [\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort()\n        ];\n    }\n\n}\n","import { Vector3f } from '../../math/index';\n\nexport class MD2Vertex {\n\n    public vector: Vector3f;\n    public normalIndex: number;\n\n    constructor(vector: Vector3f, normalIndex: number) {\n        this.vector = vector;\n        this.normalIndex = normalIndex;\n    }\n}\n","export class StreamReader {\n\n    private position: number;\n    private dataView: DataView;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n        this.dataView = new DataView(arrayBuffer, offset);\n        this.position = 0;\n    }\n\n    public readInt(): number {\n        const value: number = this.dataView.getInt32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readFloat(): number {\n        const value: number = this.dataView.getFloat32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readUnsignedInt8(): number {\n        const value: number = this.dataView.getUint8(this.position);\n        this.position += 1;\n        return value;\n    }\n\n    public readSignedShort(): number {\n        const value: number = this.dataView.getInt16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n    public readUnsigbnedShort(): number {\n        const value: number = this.dataView.getUint16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { \n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n       \n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                    \n                \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                   \n                   \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { TextureCoordinate } from '../TextureCoordinate';\n\nexport class TexturedMesh {\n\n    public points: Array<Vector4f>;\n    public normals?: Array<Vector4f>;\n    public uv: Array<TextureCoordinate>;\n\n    public faces: Array<{\n        vertices: Array<number>,\n        normals?: Array<number>\n        uv: Array<number>\n    }>;\n\n    public points2: Array<Vector4f>;\n    public normals2?: Array<Vector4f>;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n                  \n\n                    this.clipConvexPolygon2(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // TODO: remove temp object here\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.projection = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].projection, projected[1].projection, projected[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon2(framebuffer, projected);\n    }\n\n\n    public clipConvexPolygon2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { TitanEffectScene } from './TitanEffectScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new TitanEffectScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","end","current","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawParticleWaves","noClear","num","cos","forEach","multiply","sort","a","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","y2","mu","mu2","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","sub","temp","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","computeMatrix","eyePosition","targetPosition","up","translation","forwardVector","normalize","leftVector","cross","upVector","rotation","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","TitanEffectScene","AbstractScene","ThirdPersonCameraScene","Promise","all","currtentMatrix","tempMatrix","transformation","getMatrix","setIdentity","setIdentityMatrix","multMatrix","mat","trans","setTranslationMatrix","applyMat","scal","setScaleMatrix","xRotate","setXRotationMatrix","yRotate","setYRotationMatrix","multiply2","pressed","window","onKeyUp","onKeyDown","isDown","code","keyCode","moveForward","speed","deltaTime","distance","moveBackward","getDirection","turnLeft","turnRight","SLATE_GRAY","lastTime","keyboard","Keyboard","gamepad","AisaGamepad","ogroTexture","freakTexture","weaponTexture","texture4","glow","fontred","ground","md2","weapon","md2Freak","modelViewMatrix","ModelViewMatrix","shadow","fpsStartTime","fpsCount","fps","player","Player","ThirdPersonCamera","oldEye","attack","jump","run","playerStateMachine","FRONT","TextureUtils","load","MD2Loader","mesh","PlayerStateMachine","e","console","log","buttons","axes","TexturedMesh","uv","map","faces","vertices","mesh2","processInput","UP","upButton","upButtonNot","isLeft","DOWN","LEFT","RIGHT","isButtonPressed","currentTime","delta","CLEAR_COLOR","computeFloorMovement","setModelViewMatrix","draw","computeGlowMovement","enableAlphaBlending","disableAlphaBlending","renderPlayer","getCamMatrix","getMesh","toString","header","numberOfTriangles","isAvailable","computePlayerMovement","getMesh2","dampFactor","eyePos","setAlpha","PlayerRunningState","PlayerState","entry","setAnim","MD2Animation","RUN","setState","PlayerStandingState","STAND","exit","process","pl","activeState","state","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","normals","n1","n2","n3","transformedPoints","transformedNormals","AbstractGeometricObject","invert","super","frame","frame2","right","axis","value","vl","Matrix3f","xScale","yScale","zScale","result","vector","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","sx","sy","sz","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","message","first","last","translate","stream","StreamReader","readFloat","streamvert","vertArray","numberOfVertices","px","readUnsignedInt8","py","pz","nomralIndex","MD2Vertex","MD2Header","identifier","version","skinWidth","skinHeight","frameSize","numberOfSkins","numberOfTexCoords","numberOfGlCommands","numberOfFrames","skinsOffset","texCoordsOffset","triangleOffset","framesOffset","glCommandsOffset","endOffset","isValidMD2File","InvalidFileFormatException","readInt","JSON","stringify","dataView","DataView","magicNumber","getInt32","IDP2","VERSION","filename","fetch","response","parse","ex","error","getHeader","MD2Model","getTextureCoords","getTriangles","getFrames","skins","skin","MD2Skin","texCoords","MD2TexCoord","triangles","MD2Triangle","frames","MD2Frame","textureCoordinates","animation","currentFrame","loop","texCoords2","s","t","triangle","f1","f2","cframe","cframe2","oneMinusAlpha","x2","modulo","name","tempName","String","fromCharCode","readSignedShort","stream2","readUnsigbnedShort","normalIndex","getFloat32","getUint8","getInt16","getUint16","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","dx","dy","sign","wDelta","isInFrontOfNearPlane","isTriangleCCW2","v4","normals2","AbstractRenderingPipeline","sphereMapping","vertexArray","Vertex","setSphereMapping","arg0","projectedVertices","setFramebuffer","drawMeshArray","meshes","model","normalMatrix","project2","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","subject","input","output","S","point","projected","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}