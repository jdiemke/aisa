{"version":3,"file":"fog.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/ThirdPersonCamera.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/fog/FogScene.ts","webpack://aisa/./src/examples/md2/ModelViewMatrix.ts","webpack://aisa/./src/examples/mode-7/Keyboard.ts","webpack://aisa/./src/examples/third-person-camera/Player.ts","webpack://aisa/./src/examples/third-person-camera/ThirdPersonCameraScene.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerRunningState.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerStandingState.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerState.ts","webpack://aisa/./src/examples/third-person-camera/state-machine/PlayerStateMachine.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/input/AisaGamepad.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/md2/InvalidFileFormatException.ts","webpack://aisa/./src/model/md2/MD2AnimationNames.ts","webpack://aisa/./src/model/md2/MD2Frame.ts","webpack://aisa/./src/model/md2/MD2Header.ts","webpack://aisa/./src/model/md2/MD2Loader.ts","webpack://aisa/./src/model/md2/MD2Model.ts","webpack://aisa/./src/model/md2/MD2Skin.ts","webpack://aisa/./src/model/md2/MD2TexCoord.ts","webpack://aisa/./src/model/md2/MD2Triangle.ts","webpack://aisa/./src/model/md2/MD2Vertex.ts","webpack://aisa/./src/model/md2/StreamReader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturedMesh.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/fog/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n        \n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n        \n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n        \n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Matrix4f, Vector3f } from '../math/index';\n\n/**\n * http://www.mathforgameprogrammers.com/gdc2016/GDC2016_Eiserloh_Squirrel_JuicingYourCameras.pdf\n * https://www.gamasutra.com/blogs/ItayKeren/20150511/243083/Scroll_Back_The_Theory_and_Practice_of_Cameras_in_SideScrollers.php\n * https://www.gameenginebook.com/resources/gameconn2011-final.pdf\n * https://en.wikipedia.org/wiki/Virtual_camera_system\n * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.924.6065&rep=rep1&type=pdf\n * https://gamedev.stackexchange.com/questions/123543/damping-the-camera-lookat-rotation/123553#123553\n * https://mashable.com/2017/04/03/video-game-cameras-suck/?europe=true#0bJy.os1Qmqs\n * https://www.gamasutra.com/blogs/SamanthaStahlke/20170919/305840/Prototyping_a_Dynamic_Camera_System.php\n * https://code.tutsplus.com/tutorials/unity3d-third-person-cameras--mobile-11230\n */\nexport class ThirdPersonCamera {\n\n    public computeMatrix(eyePosition: Vector3f, targetPosition: Vector3f, up: Vector3f): Matrix4f {\n\n        const translation: Matrix4f = Matrix4f.constructTranslationMatrix(\n            -eyePosition.x,\n            -eyePosition.y,\n            -eyePosition.z\n        );\n\n        const forwardVector: Vector3f = eyePosition.sub(targetPosition).normalize();\n        const leftVector: Vector3f = up.cross(forwardVector).normalize();\n        const upVector: Vector3f = forwardVector.cross(leftVector);\n\n        const rotation: Matrix4f = new Matrix4f();\n\n        rotation.m11 = leftVector.x;\n        rotation.m12 = leftVector.y;\n        rotation.m13 = leftVector.z;\n        rotation.m14 = 0.0;\n\n        rotation.m21 = upVector.x;\n        rotation.m22 = upVector.y;\n        rotation.m23 = upVector.z;\n        rotation.m24 = 0.0;\n\n        rotation.m31 = forwardVector.x;\n        rotation.m32 = forwardVector.y;\n        rotation.m33 = forwardVector.z;\n        rotation.m34 = 0.0;\n\n        rotation.m41 = 0.0;\n        rotation.m42 = 0.0;\n        rotation.m43 = 0.0;\n        rotation.m44 = 1.0;\n\n        return rotation.multiplyMatrix(translation);\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { ThirdPersonCameraScene } from '../third-person-camera/ThirdPersonCameraScene';\n\nexport class FogScene extends AbstractScene {\n\n    private scene: ThirdPersonCameraScene;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.scene = new ThirdPersonCameraScene();\n        return Promise.all([\n            this.scene.init(framebuffer)\n        ]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.scene.render(framebuffer);\n        framebuffer.drawFog(new Color(10,25,10,45),0.04, 0);\n    }\n\n\n}\n","import { Matrix4f } from '../../math/index';\n\n/**\n * The primary purpose of the model view matrix class is to reduce\n * the instanciation of temporary matrix classes by reusing existing instances.\n */\nexport class ModelViewMatrix {\n\n    private currtentMatrix: Matrix4f;\n    private tempMatrix: Matrix4f;\n    private temp: Matrix4f;\n    private transformation: Matrix4f;\n\n    public constructor() {\n        this.currtentMatrix = new Matrix4f();\n        this.tempMatrix = new Matrix4f();\n        this.temp = new Matrix4f();\n        this.transformation = new Matrix4f();\n    }\n\n    public getMatrix(): Matrix4f {\n        return this.currtentMatrix;\n    }\n\n    public setIdentity(): void {\n        this.currtentMatrix.setIdentityMatrix();\n    }\n\n    public multMatrix(mat: Matrix4f): void {\n        this.currtentMatrix = this.currtentMatrix.multiplyMatrix(mat);\n    }\n\n    public trans(x: number, y: number, z: number): void {\n        this.transformation.setTranslationMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public scal(x: number, y: number, z: number): void {\n        this.transformation.setScaleMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public xRotate(x: number): void {\n        this.transformation.setXRotationMatrix(x);\n        this.applyMat();\n    }\n    public yRotate(x: number): void {\n        this.transformation.setYRotationMatrix(x);\n        this.applyMat();\n    }\n\n    private applyMat(): void {\n\n        this.tempMatrix.multiply2(this.currtentMatrix, this.transformation);\n        // switch back and front\n        this.temp = this.currtentMatrix;\n        this.currtentMatrix = this.tempMatrix;\n        this.tempMatrix = this.temp;\n    }\n\n}\n","export class Keyboard {\n\n    public static LEFT: number = 37;\n    public static UP: number = 38;\n    public static RIGHT: number = 39;\n    public static DOWN: number = 40;\n    public static KEY_A: number = 65;\n    public static KEY_D: number = 68;\n    public static KEY_L: number = 76;\n\n    private pressed: Array<boolean>;\n\n    constructor() {\n        this.pressed = new Array<boolean>(256);\n        this.pressed.fill(false);\n\n        window.addEventListener('keyup', (event: KeyboardEvent) => this.onKeyUp(event), false);\n        window.addEventListener('keydown', (event: KeyboardEvent) => this.onKeyDown(event), false);\n    }\n\n    public isDown(code: number): boolean {\n        return this.pressed[code];\n    }\n\n    public onKeyDown(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = true;\n    }\n\n    public onKeyUp(event: KeyboardEvent): void {\n        this.pressed[event.keyCode] = false;\n    }\n\n}\n","import { Vector2f } from '../../math/index';\n\nexport class Player {\n\n    public position: Vector2f = new Vector2f(0, 0);\n    public angle: number = 0;\n\n    public moveForward(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.position.x += distance * -Math.sin(Math.PI * 2 / 360 * this.angle);\n        this.position.y += distance * -Math.cos(Math.PI * 2 / 360 * this.angle);\n    }\n\n    public moveBackward(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.position.x -= distance * -Math.sin(Math.PI * 2 / 360 * this.angle);\n        this.position.y -= distance * -Math.cos(Math.PI * 2 / 360 * this.angle);\n    }\n\n    public getDirection(): Vector2f {\n        return new Vector2f(-Math.sin(Math.PI * 2 / 360 * this.angle),\n            - Math.cos(Math.PI * 2 / 360 * this.angle));\n    }\n\n    public turnLeft(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.angle += distance;\n    }\n\n    public turnRight(speed: number, deltaTime: number): void {\n        const distance: number = speed * deltaTime;\n        this.angle -= distance;\n    }\n\n}\n","import { ThirdPersonCamera } from '../../camera/ThirdPersonCamera';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AisaGamepad } from '../../input/AisaGamepad';\nimport { Matrix4f, Vector3f, Vector4f } from '../../math/index';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Keyboard } from '../mode-7/Keyboard';\nimport { MD2Loader } from '../../model/md2/MD2Loader';\nimport { MD2Model } from '../../model/md2/MD2Model';\nimport { ModelViewMatrix } from '../md2/ModelViewMatrix';\nimport { Player } from './Player';\nimport { PlayerStateMachine } from './state-machine/PlayerStateMachine';\n\n/**\n * http://tfc.duke.free.fr/coding/mdl-specs-en.html\n * http://tfc.duke.free.fr/coding/md2-specs-en.html\n * https://github.com/mrdoob/three.js/tree/dev/examples/models/md2/ogro\n * http://tfc.duke.free.fr/old/models/md2.htm\n */\nexport class ThirdPersonCameraScene extends AbstractScene {\n\n    private static readonly CLEAR_COLOR: number = Color.SLATE_GRAY.toPackedFormat();\n\n    public lastTime: number = Date.now();\n\n    private keyboard: Keyboard = new Keyboard();\n    private gamepad: AisaGamepad = new AisaGamepad();\n\n    private ogroTexture: Texture;\n    private freakTexture: Texture;\n    private weaponTexture: Texture;\n    private texture4: Texture;\n    private glow: Texture;\n    private fontred: Texture;\n    private ground: Texture;\n    private md2: MD2Model;\n    private weapon: MD2Model;\n    private startTime: number;\n    private md2Freak: MD2Model;\n\n    private modelViewMatrix: ModelViewMatrix = new ModelViewMatrix();\n\n    private floor: TexturedMesh;\n    private shadow: TexturedMesh;\n\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private player: Player = new Player();\n\n    private camera: ThirdPersonCamera = new ThirdPersonCamera();\n\n    private oldEye: Vector3f = new Vector3f(0, 0, 0);\n    private attack: boolean = false;\n    private jump: boolean = false;\n    private run: boolean = false;\n\n    private playerStateMachine: PlayerStateMachine;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.texturedRenderingPipeline.setCullFace(CullFace.FRONT);\n        this.startTime = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/md2/hueteotl.png'), false).then(\n                (texture: Texture) => this.ogroTexture = texture),\n            TextureUtils.load(require('../../assets/md2/weapon.png'), false).then(\n                (texture: Texture) => this.weaponTexture = texture),\n            MD2Loader.load(require('../../assets/md2/tris.md2')).then(\n                (mesh: MD2Model) => this.md2 = mesh),\n            MD2Loader.load(require('../../assets/md2/weapon.md2')).then(\n                (mesh: MD2Model) => this.weapon = mesh),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n            TextureUtils.load(require('../../assets/fontred.png'), true).then(\n                (texture: Texture) => this.fontred = texture),\n            TextureUtils.load(require('../../assets/ground.png'), true).then(\n                (texture: Texture) => this.ground = texture),\n            TextureUtils.load(require('../../assets/glow.png'), true).then(\n                (texture: Texture) => this.glow = texture),\n                TextureUtils.load(require('../../assets/md2/texture2.jpg'), false).then(\n                    (texture: Texture) => this.freakTexture = texture\n                ),\n                MD2Loader.load(require('../../assets/md2/drfreak.md2')).then(\n                    (mesh: MD2Model) => this.md2Freak = mesh\n                )\n        ]).then(\n            () => {\n                this.playerStateMachine = new PlayerStateMachine([this.md2, this.weapon], this.player);\n                window.addEventListener('gamepadconnected', (e: GamepadEvent) => {\n                    console.log('Gamepad connected at index %d: %s. %d buttons, %d axes.',\n                        e.gamepad.index, e.gamepad.id,\n                        e.gamepad.buttons.length, e.gamepad.axes.length);\n                });\n\n                const mesh: TexturedMesh = new TexturedMesh();\n                mesh.points = [\n                    new Vector4f(-20, 0, 20),\n                    new Vector4f(20, 0, 20),\n                    new Vector4f(20, 0, -20),\n                    new Vector4f(-20, 0, -20)\n                ];\n                mesh.uv = [\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(2.0, 0),\n                    new TextureCoordinate(2.0, 2.0),\n                    new TextureCoordinate(0, 2.0)\n                ];\n                mesh.points2 = mesh.points.map(() => new Vector4f(0, 0, 0, 0));\n                mesh.faces = [\n                    {\n                        uv: [0, 1, 2],\n                        vertices: [0, 1, 2]\n                    },\n                    {\n                        uv: [2, 3, 0],\n                        vertices: [2, 3, 0]\n                    }\n                ];\n                this.floor = mesh;\n\n                const mesh2: TexturedMesh = new TexturedMesh();\n                mesh2.points = mesh.points;\n                mesh2.points2 = mesh.points2;\n                mesh2.faces = mesh.faces;\n                mesh2.uv =[\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1)\n                ];\n                this.shadow = mesh2;\n            });\n    }\n\n    public processInput(deltaTime: number): void {\n\n        if (this.keyboard.isDown(Keyboard.UP)) {\n            this.playerStateMachine.upButton();\n        }\n\n        if (!this.keyboard.isDown(Keyboard.UP)) {\n            this.playerStateMachine.upButtonNot();\n        }\n\n\n        const speed: number = 4.1;\n        const Angspeed: number = 110.0;\n\n        if (this.keyboard.isDown(Keyboard.UP) || this.gamepad.isLeft(1, -1)) {\n            this.player.moveForward(speed, deltaTime);\n        }\n\n        if (this.gamepad.isLeft(1, -1) && !this.run) {\n            // this.md2.setAnim( MD2Animation.RUN, Date.now(), true);\n            //  this.weapon.setAnim( MD2Animation.RUN, Date.now(), true);\n            this.run = true;\n        }\n\n        if (!this.gamepad.isLeft(1, -1) && this.run) {\n            //   this.md2.setAnim( MD2Animation.STAND, Date.now(), true);\n            //  this.weapon.setAnim( MD2Animation.STAND, Date.now(), true);\n            this.run = false;\n        }\n\n        if (this.keyboard.isDown(Keyboard.DOWN) || this.gamepad.isLeft(1, 1)) {\n            this.player.moveBackward(speed, deltaTime);\n        }\n\n        if (this.keyboard.isDown(Keyboard.LEFT) || this.gamepad.isLeft(0, -1)) {\n            this.player.turnLeft(Angspeed, deltaTime);\n        }\n\n        if (this.keyboard.isDown(Keyboard.RIGHT) || this.gamepad.isLeft(0, 1)) {\n            this.player.turnRight(Angspeed, deltaTime);\n        }\n\n        if (this.gamepad.isButtonPressed(3) && !this.attack) {\n            // this.md2.setAnim( MD2Animation.ATTACK, Date.now());\n            // this.weapon.setAnim( MD2Animation.ATTACK, Date.now());\n            this.attack = true;\n        }\n\n        if (!this.gamepad.isButtonPressed(3) && this.attack) {\n            this.attack = false;\n        }\n\n        if (this.gamepad.isButtonPressed(2) && !this.jump) {\n            //     this.md2.setAnim( MD2Animation.JUMP, Date.now());\n            //   this.weapon.setAnim( MD2Animation.JUMP, Date.now());\n            this.jump = true;\n        }\n\n        if (!this.gamepad.isButtonPressed(2) && this.jump) {\n            this.jump = false;\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n\n        const currentTime: number = Date.now();\n        const delta: number = (currentTime - this.lastTime) / 1000;\n        this.lastTime = currentTime;\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        this.processInput(delta);\n\n        framebuffer.clearColorBuffer(ThirdPersonCameraScene.CLEAR_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        //\n        framebuffer.setTexture(this.ground);\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        this.computeFloorMovement(delta);\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n        this.texturedRenderingPipeline.draw(framebuffer, this.floor);\n\n\n\n\n        this.modelViewMatrix.trans(0, 0.1, 0);\n\n        this.computeGlowMovement(delta);\n        framebuffer.setTexture(this.glow);\n\n        this.texturedRenderingPipeline.enableAlphaBlending();\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n        this.texturedRenderingPipeline.draw(framebuffer, this.shadow);\n        this.texturedRenderingPipeline.disableAlphaBlending();\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.FRONT);\n\n        this.renderPlayer(framebuffer, delta);\n\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(delta));\n        this.modelViewMatrix.trans(0, 24 * 0.05, 0);\n        this.modelViewMatrix.yRotate(Math.PI * 2 / 360 * (90 + 0));\n        this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n        this.modelViewMatrix.scal(0.05, 0.05, 0.05);\n\n        framebuffer.setTexture(this.freakTexture);\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n      this.texturedRenderingPipeline.draw(framebuffer, this.md2Freak.getMesh(currentTime));\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n        framebuffer.drawText(8, 16, 'TRIANGELS: ' +\n            (this.md2.header.numberOfTriangles + this.weapon.header.numberOfTriangles), this.texture4);\n        if ((currentTime % 1000) > 500) {\n            framebuffer.drawText(8, 200 - 16,\n                this.gamepad.isAvailable() ? 'GAMEPAD DETECTED' : 'NO GAMEPAD DETECTED', this.fontred);\n        }\n    }\n\n    private renderPlayer(framebuffer: Framebuffer, time: number): void {\n        this.computePlayerMovement(time);\n\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n\n        framebuffer.setTexture(this.ogroTexture);\n        this.texturedRenderingPipeline.draw(framebuffer, this.md2.getMesh2(time * 1000));\n\n        framebuffer.setTexture(this.weaponTexture);\n        this.texturedRenderingPipeline.draw(framebuffer, this.weapon.getMesh2(time * 1000));\n    }\n\n    private computeFloorMovement(elapsedTime: number): void {\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(elapsedTime));\n        this.modelViewMatrix.trans(0, 0, 0);\n        this.modelViewMatrix.yRotate(Math.PI * 2 / 360 * 90);\n        //  this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n    }\n    private getCamMatrix(delta: number): Matrix4f {\n        const dampFactor: number = 0.01 * 60 * delta;\n        const eyePos: Vector3f = this.oldEye.add(\n            new Vector3f(\n                this.player.position.x - this.player.getDirection().x * 5,\n                2.2, this.player.position.y - this.player.getDirection().y * 5\n            ).sub(this.oldEye).mul(dampFactor));\n        this.oldEye = eyePos;\n\n        return this.camera.computeMatrix(eyePos, new Vector3f(\n            this.player.position.x,\n            1.8,\n            this.player.position.y), new Vector3f(0, 1, 0));\n    }\n\n    private computePlayerMovement(elapsedTime: number): void {\n        // http://cubeengine.com/wiki/Importing_md2_and_md3_files\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(elapsedTime));\n        this.modelViewMatrix.trans(this.player.position.x, 24 * 0.05, this.player.position.y);\n        this.modelViewMatrix.yRotate(Math.PI * 2 / 360 * (90 + this.player.angle));\n        this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n        this.modelViewMatrix.scal(0.05, 0.05, 0.05);\n    }\n\n    private computeGlowMovement(delta: number): void {\n        // http://cubeengine.com/wiki/Importing_md2_and_md3_files\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.multMatrix(this.getCamMatrix(delta));\n        this.modelViewMatrix.trans(this.player.position.x, 0.03, this.player.position.y);\n        const scale: number = 0.85;\n        this.modelViewMatrix.scal(0.06 * scale, 0.06 * scale, 0.06 * scale);\n        this.texturedRenderingPipeline.setAlpha(0.70);\n    }\n\n}\n","import { MD2Animation } from '../../../model/md2/MD2AnimationNames';\nimport { PlayerStandingState } from './PlayerStandingState';\nimport { PlayerState } from './PlayerState';\n\nexport class PlayerRunningState extends PlayerState {\n\n    public entry(): void {\n        this.context.md2.forEach(x=> x.setAnim(MD2Animation.RUN, 0, true));\n    \n    }\n\n    public upButtonNot(): void {\n        this.context.setState(new PlayerStandingState(this.context));\n    }\n\n}\n","import { MD2Animation } from '../../../model/md2/MD2AnimationNames';\nimport { PlayerRunningState } from './PlayerRunningState';\nimport { PlayerState } from './PlayerState';\n\nexport class PlayerStandingState extends PlayerState {\n\n    public entry(): void {\n        this.context.md2.forEach(x => x.setAnim(MD2Animation.STAND, 0, true));\n    }\n\n    public upButton(): void {\n        this.context.setState(new PlayerRunningState(this.context));\n    }\n\n}\n","import { PlayerStateMachine } from './PlayerStateMachine';\n\nexport abstract class PlayerState {\n\n    constructor(protected context: PlayerStateMachine) {\n\n    }\n\n    public entry(): void {\n\n    }\n\n    public exit(): void {\n\n    }\n\n    public process(): void {\n\n    }\n\n    public upButton(): void {\n\n    }\n\n    public upButtonNot(): void {\n\n    }\n\n}\n","import { MD2Model } from '../../../model/md2/MD2Model';\nimport { Player } from '../Player';\nimport { PlayerStandingState } from './PlayerStandingState';\nimport { PlayerState } from './PlayerState';\n\n/**\n * http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.9.8608&rep=rep1&type=pdf\n * http://www.iplab.cs.tsukuba.ac.jp/paper/international/ali-idpt99.pdf\n * https://www.reddit.com/r/gamedev/comments/45nn5i/article_tame_your_game_code_with_state_machines/\n * http://howtomakeanrpg.com/a/state-machines.html\n * https://gamedevacademy.org/how-to-use-state-machines-to-control-behavior-and-animations-in-phaser/\n * https://www.gamedev.net/articles/programming/general-and-gameplay-programming/from-user-input-to-animations-using-state-machines-r4155/\n * http://gameprogrammingpatterns.com/state.html\n */\nexport class PlayerStateMachine {\n\n    public md2: MD2Model[];\n    private activeState: PlayerState = null;\n\n    public constructor(md2: MD2Model[], public pl: Player) {\n        this.md2 = md2;\n        this.setState(new PlayerStandingState(this));\n    }\n\n    public upButton(): void {\n        this.activeState.upButton();\n    }\n\n    public upButtonNot(): void {\n        this.activeState.upButtonNot();\n    }\n\n    public setState(state: PlayerState): void {\n        if (this.activeState !== null) {\n            this.activeState.exit();\n        }\n\n        this.activeState = state;\n        this.activeState.entry();\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class AisaGamepad {\n\n    private gamepad: Gamepad = null;\n\n    constructor() {\n        window.addEventListener('gamepadconnected', (e: GamepadEvent) => {\n            console.log('Gamepad connected at index %d: %s. %d buttons, %d axes.',\n                e.gamepad.index, e.gamepad.id,\n                e.gamepad.buttons.length, e.gamepad.axes.length);\n\n            this.gamepad = e.gamepad;\n        });\n    }\n\n    public isAvailable(): boolean {\n        return this.gamepad !== null;\n    }\n\n    public isButtonPressed(index: number): boolean {\n        if (this.gamepad) {\n            return this.gamepad.buttons[index].pressed;\n        }\n\n        return false;\n    }\n\n    public isLeft(axis: number, value: number): boolean {\n        if (this.gamepad) {\n            return this.gamepad.axes[axis] === value;\n        }\n\n        return false;\n    }\n\n    public vl(): string {\n        return this.gamepad.id;\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","export class InvalidFileFormatException {\n\n    constructor(private message: string) {\n\n    }\n\n}\n","// http://www.mbsoftworks.sk/tutorials/opengl3/24-animation-pt1-keyframe-md2/\n// https://www.gamedev.net/forums/topic/361176-md2-animation-speed/\n// https://www.allegro.cc/forums/thread/414171/414344\nexport class MD2Animation {\n\n    public static readonly STAND: MD2Animation = new MD2Animation(0, 39, 9);\n    public static readonly RUN: MD2Animation = new MD2Animation(40, 45, 10);\n    public static readonly ATTACK: MD2Animation = new MD2Animation(46, 53, 10);\n    public static readonly PAIN_A: MD2Animation = new MD2Animation(54, 57, 7);\n    public static readonly PAIN_B: MD2Animation = new MD2Animation(58, 61, 7);\n    public static readonly PAIN_C: MD2Animation = new MD2Animation(62, 65, 7);\n    public static readonly JUMP: MD2Animation = new MD2Animation(66, 71, 7);\n    public static readonly FLIP: MD2Animation = new MD2Animation(72, 83, 7);\n    public static readonly SALUTE: MD2Animation = new MD2Animation(84, 94, 7);\n    public static readonly FALLBACK: MD2Animation = new MD2Animation(95, 111, 10);\n    public static readonly WAVE: MD2Animation = new MD2Animation(112, 122, 7);\n    public static readonly POINTING: MD2Animation = new MD2Animation(123, 134, 6);\n\n    public static readonly CROUCH_STAND: MD2Animation = new MD2Animation(135, 153, 10);\n    public static readonly CROUCH_WALK: MD2Animation = new MD2Animation(154, 159, 7);\n    public static readonly CROUCH_ATTACK: MD2Animation = new MD2Animation(160, 168, 10);\n    public static readonly CROUCH_PAIN: MD2Animation = new MD2Animation(196, 172, 7);\n    public static readonly CROUCH_DEATH: MD2Animation = new MD2Animation(173, 177, 5);\n\n    public static readonly DEATH_FALLBACK: MD2Animation = new MD2Animation(178, 183, 7);\n    public static readonly DEATH_FALLFORWARD: MD2Animation = new MD2Animation(184, 189, 7);\n    public static readonly DEATH_FALLBACKSLOW: MD2Animation = new MD2Animation(190, 197, 7);\n    public static readonly BOOM: MD2Animation = new MD2Animation(198, 198, 5);\n\n    constructor(public first: number, public last: number, public fps: number) {\n\n    }\n\n}\n","import { Vector3f } from '../../math/index';\nimport { MD2Header } from './MD2Header';\nimport { MD2Vertex } from './MD2Vertex';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2Frame {\n\n    public scale: Vector3f;\n    public translate: Vector3f;\n    public vertices: Array<MD2Vertex>;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0, header: MD2Header) {\n        const stream: StreamReader = new StreamReader(arrayBuffer, offset);\n        const scale: Vector3f = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n        this.scale = scale;\n\n        const trans: Vector3f = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n        this.translate = trans;\n\n        const streamvert: StreamReader = new StreamReader(arrayBuffer, offset + 40);\n\n        const vertArray: Array<MD2Vertex> = new Array<MD2Vertex>();\n\n        for (let i: number = 0; i < header.numberOfVertices; i++) {\n            const px: number = streamvert.readUnsignedInt8();\n            const py: number = streamvert.readUnsignedInt8();\n            const pz: number = streamvert.readUnsignedInt8();\n            const nomralIndex: number = streamvert.readUnsignedInt8();\n\n            vertArray.push(new MD2Vertex(\n                new Vector3f(\n                    px * scale.x + trans.x,\n                    py * scale.y + trans.y,\n                    pz * scale.z + trans.z\n                ),\n                nomralIndex\n            ));\n        }\n        this.vertices = vertArray;\n\n    }\n\n}\n","import { InvalidFileFormatException } from './InvalidFileFormatException';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2Header {\n\n    private static readonly IDP2: number = 844121161;\n    private static readonly VERSION: number = 8;\n\n    public identifier: number;\n    public version: number;\n\n    public skinWidth: number;\n    public skinHeight: number;\n\n    // framesize in bytes\n    public frameSize: number;\n\n    public numberOfSkins: number;\n    public numberOfVertices: number;\n    public numberOfTexCoords: number;\n    public numberOfTriangles: number;\n    public numberOfGlCommands: number;\n    public numberOfFrames: number;\n\n    public skinsOffset: number;\n    public texCoordsOffset: number;\n    public triangleOffset: number;\n    public framesOffset: number;\n    public glCommandsOffset: number;\n    public endOffset: number;\n\n    public constructor(arrayBuffer: ArrayBuffer) {\n\n        if (!this.isValidMD2File(arrayBuffer)) {\n            throw new InvalidFileFormatException('Not a valid MD2 file.');\n        }\n\n        const stream: StreamReader = new StreamReader(arrayBuffer);\n\n        this.identifier = stream.readInt();\n        this.version = stream.readInt();\n        this.skinWidth = stream.readInt();\n        this.skinHeight = stream.readInt();\n        this.frameSize = stream.readInt();\n        this.numberOfSkins = stream.readInt();\n\n        this.numberOfVertices = stream.readInt();\n        this.numberOfTexCoords = stream.readInt();\n        this.numberOfTriangles = stream.readInt();\n        this.numberOfGlCommands = stream.readInt();\n        this.numberOfFrames = stream.readInt();\n\n        this.skinsOffset = stream.readInt();\n        this.texCoordsOffset = stream.readInt();\n        this.triangleOffset = stream.readInt();\n        this.framesOffset = stream.readInt();\n        this.glCommandsOffset = stream.readInt();\n        this.endOffset = stream.readInt();\n    }\n\n    public toString(): string {\n        return JSON.stringify(this, null, 2);\n    }\n\n    private isValidMD2File(arrayBuffer: ArrayBuffer): boolean {\n        const dataView: DataView = new DataView(arrayBuffer, 0);\n\n        const magicNumber: number = dataView.getInt32(0, true);\n        const version: number = dataView.getInt32(4, true);\n\n        return magicNumber === MD2Header.IDP2 && version === MD2Header.VERSION;\n    }\n\n}\n","import { MD2Frame } from './MD2Frame';\nimport { MD2Header } from './MD2Header';\nimport { MD2Model } from './MD2Model';\nimport { MD2Skin } from './MD2Skin';\nimport { MD2TexCoord } from './MD2TexCoord';\nimport { MD2Triangle } from './MD2Triangle';\nimport { StreamReader } from './StreamReader';\n\n/**\n * http://tfc.duke.free.fr/coding/md2-specs-en.html\n * http://tfc.duke.free.fr/old/models/md2.htm\n * https://fabiensanglard.net/quake2/quake2_software_renderer.php\n */\nexport class MD2Loader {\n\n    public static load(filename: string): Promise<MD2Model> {\n        return fetch(filename).then((response: Response) => {\n            return response.arrayBuffer();\n        }).then((arrayBuffer: ArrayBuffer) => {\n            try {\n                return MD2Loader.parse(arrayBuffer);\n            } catch (ex) {\n                console.error(ex.message);\n            }\n        });\n    }\n\n    private static parse(arrayBuffer: ArrayBuffer): MD2Model {\n        const header: MD2Header = MD2Loader.getHeader(arrayBuffer);\n\n        return new MD2Model(\n            MD2Loader.getTextureCoords(arrayBuffer, header),\n            MD2Loader.getTriangles(arrayBuffer, header),\n            MD2Loader.getFrames(arrayBuffer, header),\n            header\n        );\n    }\n\n    private static getHeader(arrayBuffer: ArrayBuffer): MD2Header {\n        return new MD2Header(arrayBuffer);\n    }\n\n    private static getSkins(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Skin> {\n        const skins: Array<MD2Skin> = new Array<MD2Skin>();\n\n        for (let k: number = 0; k < header.numberOfSkins; k++) {\n            const skin: MD2Skin = new MD2Skin(arrayBuffer, header.skinsOffset + 64 * k);\n            skins.push(skin);\n        }\n\n        return skins;\n    }\n\n    private static getTextureCoords(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2TexCoord> {\n        const texCoords: Array<MD2TexCoord> = new Array<MD2TexCoord>();\n        const stream: StreamReader = new StreamReader(arrayBuffer, header.texCoordsOffset);\n\n        for (let i: number = 0; i < header.numberOfTexCoords; i++) {\n            texCoords.push(new MD2TexCoord(stream, header));\n        }\n\n        return texCoords;\n    }\n\n    private static getTriangles(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Triangle> {\n        const triangles: Array<MD2Triangle> = new Array<MD2Triangle>();\n        const stream: StreamReader = new StreamReader(arrayBuffer, header.triangleOffset);\n\n        for (let i: number = 0; i < header.numberOfTriangles; i++) {\n            triangles.push(new MD2Triangle(stream));\n        }\n\n        return triangles;\n    }\n\n    private static getFrames(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Frame> {\n        const frames: Array<MD2Frame> = new Array<MD2Frame>();\n\n        for (let i: number = 0; i < header.numberOfFrames; i++) {\n            const frame: MD2Frame = new MD2Frame(arrayBuffer, header.framesOffset + header.frameSize * i, header);\n            frames.push(frame);\n        }\n\n        return frames;\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { MD2Animation } from './MD2AnimationNames';\nimport { MD2Frame } from './MD2Frame';\nimport { MD2Header } from './MD2Header';\nimport { MD2TexCoord } from './MD2TexCoord';\nimport { MD2Triangle } from './MD2Triangle';\nimport { MD2Vertex } from './MD2Vertex';\n\nexport class MD2Model {\n\n    private mesh: TexturedMesh;\n    private points: Array<Vector4f>;\n    private animation: MD2Animation = MD2Animation.STAND;\n    private currentFrame: number = 0;\n    private loop: boolean = false;\n\n    constructor(public textureCoordinates: Array<MD2TexCoord>,\n        public triangles: Array<MD2Triangle>,\n        public frames: Array<MD2Frame>, public header: MD2Header) {\n\n        const mesh: TexturedMesh = new TexturedMesh();\n\n        const texCoords2: Array<TextureCoordinate> = new Array<TextureCoordinate>();\n        this.textureCoordinates.forEach((textureCoordinate: MD2TexCoord) => {\n            texCoords2.push(new TextureCoordinate(textureCoordinate.s, textureCoordinate.t));\n        });\n\n        const points: Array<Vector4f> = new Array<Vector4f>();\n\n        for (let i: number = 0; i < header.numberOfVertices; i++) {\n            points.push(new Vector4f(0, 0, 0, 1));\n        }\n\n        this.points = points;\n\n        mesh.points = points;\n        mesh.points2 = points.map(() => new Vector4f(0, 0, 0, 0));\n        mesh.uv = texCoords2;\n        const faces: Array<{\n            vertices: Array<number>,\n            uv: Array<number>\n        }> = [];\n\n        this.triangles.forEach((triangle: MD2Triangle) => {\n\n            faces.push({\n                uv: triangle.texCoords,\n                vertices: triangle.vertices\n            });\n        });\n\n        mesh.faces = faces;\n        this.mesh = mesh;\n\n    }\n\n    public getMesh(time: number): TexturedMesh {\n\n        time = time *.006;\n        const f1: number = Math.floor(time) % this.frames.length;\n        const f2: number = (f1 + 1) % this.frames.length;\n        const cframe: MD2Frame = this.frames[f1];\n        const cframe2: MD2Frame = this.frames[f2];\n        const alpha: number = time - Math.floor(time);\n        const oneMinusAlpha: number = 1 - alpha;\n\n        for (let i: number = 0; i < cframe.vertices.length; i++) {\n            const x: MD2Vertex = cframe.vertices[i];\n            const x2: MD2Vertex = cframe2.vertices[i];\n            this.points[i].x = x.vector.x * oneMinusAlpha + x2.vector.x * alpha;\n            this.points[i].y = x.vector.y * oneMinusAlpha + x2.vector.y * alpha;\n            this.points[i].z = x.vector.z * oneMinusAlpha + x2.vector.z * alpha;\n        }\n\n        return this.mesh;\n    }\n\n    public setAnim(animation: MD2Animation, time: number, loop: boolean = false): void {\n        this.animation = animation;\n        this.currentFrame = 0;\n        this.loop = loop;\n    }\n\n    public getMesh2(delta: number): TexturedMesh {\n        this.currentFrame += delta * 0.009;\n\n        if (this.currentFrame > (this.animation.last - this.animation.first)) {\n            if (!this.loop) {\n                this.currentFrame = this.animation.last - this.animation.first;\n            }\n        }\n\n        const modulo: number = (this.animation.last - this.animation.first + 1);\n        const f1: number = Math.floor(this.currentFrame) % modulo;\n        const f2: number = (f1 + 1) % modulo;\n        const cframe: MD2Frame = this.frames[f1 + this.animation.first];\n        const cframe2: MD2Frame = this.frames[f2 + this.animation.first];\n        const alpha: number = this.currentFrame - Math.floor(this.currentFrame);\n        const oneMinusAlpha: number = 1 - alpha;\n\n        /**\n         * TODO: add animation blending??? expensive :(\n         */\n        for (let i: number = 0; i < cframe.vertices.length; i++) {\n            const x: MD2Vertex = cframe.vertices[i];\n            const x2: MD2Vertex = cframe2.vertices[i];\n            this.points[i].x = x.vector.x * oneMinusAlpha + x2.vector.x * alpha;\n            this.points[i].y = x.vector.y * oneMinusAlpha + x2.vector.y * alpha;\n            this.points[i].z = x.vector.z * oneMinusAlpha + x2.vector.z * alpha;\n        }\n\n        return this.mesh;\n    }\n\n}\n","import { StreamReader } from './StreamReader';\n\nexport class MD2Skin {\n\n    public name: string;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n        const stream: StreamReader = new StreamReader(arrayBuffer, offset);\n\n        let tempName: string;\n\n        for (let i: number = 0; i < 64; i++) {\n            const code: number = stream.readUnsignedInt8();\n\n            if (code === 0) {\n                break;\n            }\n\n            tempName += String.fromCharCode(code);\n        }\n\n        this.name = tempName;\n    }\n\n}\n","import { MD2Header } from './MD2Header';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2TexCoord {\n\n    public s: number;\n    public t: number;\n\n    constructor(stream: StreamReader, header: MD2Header) {\n        this.s = stream.readSignedShort() / (header.skinWidth - 1);\n        this.t = stream.readSignedShort() / (header.skinHeight - 1);\n    }\n\n}\n","import { StreamReader } from './StreamReader';\n\nexport class MD2Triangle {\n\n    public vertices: [number, number, number];\n    public texCoords: [number, number, number];\n\n    constructor(stream2: StreamReader) {\n        this.vertices = [\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort()\n        ];\n        this.texCoords = [\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort()\n        ];\n    }\n\n}\n","import { Vector3f } from '../../math/index';\n\nexport class MD2Vertex {\n\n    public vector: Vector3f;\n    public normalIndex: number;\n\n    constructor(vector: Vector3f, normalIndex: number) {\n        this.vector = vector;\n        this.normalIndex = normalIndex;\n    }\n}\n","export class StreamReader {\n\n    private position: number;\n    private dataView: DataView;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n        this.dataView = new DataView(arrayBuffer, offset);\n        this.position = 0;\n    }\n\n    public readInt(): number {\n        const value: number = this.dataView.getInt32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readFloat(): number {\n        const value: number = this.dataView.getFloat32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readUnsignedInt8(): number {\n        const value: number = this.dataView.getUint8(this.position);\n        this.position += 1;\n        return value;\n    }\n\n    public readSignedShort(): number {\n        const value: number = this.dataView.getInt16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n    public readUnsigbnedShort(): number {\n        const value: number = this.dataView.getUint16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { TextureCoordinate } from '../TextureCoordinate';\n\nexport class TexturedMesh {\n\n    public points: Array<Vector4f>;\n    public normals?: Array<Vector4f>;\n    public uv: Array<TextureCoordinate>;\n\n    public faces: Array<{\n        vertices: Array<number>,\n        normals?: Array<number>\n        uv: Array<number>\n    }>;\n\n    public points2: Array<Vector4f>;\n    public normals2?: Array<Vector4f>;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { FogScene } from './FogScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new FogScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","computeMatrix","eyePosition","targetPosition","up","translation","forwardVector","sub","normalize","leftVector","cross","upVector","rotation","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","num","FogScene","AbstractScene","ThirdPersonCameraScene","Promise","all","currtentMatrix","tempMatrix","temp","transformation","getMatrix","setIdentity","setIdentityMatrix","multMatrix","mat","trans","setTranslationMatrix","applyMat","scal","setScaleMatrix","xRotate","setXRotationMatrix","yRotate","setYRotationMatrix","multiply2","pressed","window","onKeyUp","onKeyDown","isDown","code","keyCode","moveForward","speed","deltaTime","distance","moveBackward","getDirection","turnLeft","turnRight","SLATE_GRAY","lastTime","keyboard","Keyboard","gamepad","AisaGamepad","ogroTexture","freakTexture","weaponTexture","texture4","glow","fontred","ground","md2","weapon","md2Freak","modelViewMatrix","ModelViewMatrix","shadow","fpsStartTime","fpsCount","fps","player","Player","ThirdPersonCamera","oldEye","attack","jump","run","playerStateMachine","FRONT","TextureUtils","load","MD2Loader","mesh","PlayerStateMachine","e","console","log","buttons","axes","TexturedMesh","uv","map","faces","vertices","mesh2","processInput","UP","upButton","upButtonNot","isLeft","DOWN","LEFT","RIGHT","isButtonPressed","currentTime","delta","CLEAR_COLOR","computeFloorMovement","setModelViewMatrix","draw","computeGlowMovement","enableAlphaBlending","disableAlphaBlending","renderPlayer","getCamMatrix","getMesh","toString","header","numberOfTriangles","isAvailable","computePlayerMovement","getMesh2","dampFactor","eyePos","setAlpha","PlayerRunningState","PlayerState","entry","setAnim","MD2Animation","RUN","setState","PlayerStandingState","STAND","exit","process","pl","activeState","state","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","normals","n1","n2","n3","transformedPoints","transformedNormals","AbstractGeometricObject","invert","super","frame","frame2","right","axis","value","vl","current","y2","mu","mu2","xScale","yScale","zScale","result","vector","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","sx","sy","sz","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","message","first","last","translate","stream","StreamReader","readFloat","streamvert","vertArray","numberOfVertices","px","readUnsignedInt8","py","pz","nomralIndex","MD2Vertex","MD2Header","identifier","version","skinWidth","skinHeight","frameSize","numberOfSkins","numberOfTexCoords","numberOfGlCommands","numberOfFrames","skinsOffset","texCoordsOffset","triangleOffset","framesOffset","glCommandsOffset","endOffset","isValidMD2File","InvalidFileFormatException","readInt","JSON","stringify","dataView","DataView","magicNumber","getInt32","IDP2","VERSION","filename","fetch","response","parse","ex","error","getHeader","MD2Model","getTextureCoords","getTriangles","getFrames","skins","skin","MD2Skin","texCoords","MD2TexCoord","triangles","MD2Triangle","frames","MD2Frame","textureCoordinates","animation","currentFrame","loop","texCoords2","s","t","triangle","f1","f2","cframe","cframe2","oneMinusAlpha","x2","modulo","name","tempName","String","fromCharCode","readSignedShort","stream2","readUnsigbnedShort","normalIndex","getFloat32","getUint8","getInt16","getUint16","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","dx","dy","sign","wDelta","isInFrontOfNearPlane","isTriangleCCW2","v4","normals2","AbstractRenderingPipeline","sphereMapping","vertexArray","Vertex","setSphereMapping","arg0","projectedVertices","setFramebuffer","drawMeshArray","meshes","model","normalMatrix","project2","clipConvexPolygon","zClipTriangle","computeNearPlaneIntersection2","subject","input","output","S","point","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}