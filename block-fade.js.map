{"version":3,"file":"block-fade.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/examples/block-fade/BlockFade.ts","webpack://aisa/./src/examples/block-fade/Particle.ts","webpack://aisa/./src/examples/block-fade/TransitionMethods.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/block-fade/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n        \n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n        \n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n        \n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Interpolator } from '../../math/Interpolator';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture/index';\nimport { TransitionMethods } from './TransitionMethods';\nimport { Particle } from './Particle';\n\nexport class BlockFade extends AbstractScene {\n    private ledTexture: Texture;\n    private startTime: number = Date.now();\n    private transitionFramebufferTo: Framebuffer;\n\n    public transitionCircle: Uint32Array;\n    public transitionWipe: Uint32Array;\n\n    // dissolve \n    private croud: Float32Array;        // Stores data for mask control\n    private prevMask: Array<boolean>;    // mask picture\n    private curMask: Array<boolean>;\n    private diff: Array<boolean>;       // difference mask\n    private noiseMask: Array<boolean>;  // particle mask\n    private croudMask: Uint32Array;     // cloud mask\n    private particleArray: Array<Particle>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.transitionFramebufferTo = new Framebuffer(framebuffer.width, framebuffer.height);\n\n        // draw side wipe\n        this.transitionWipe = new Uint32Array(framebuffer.width * framebuffer.height);\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const c2 = Utils.map(x, 0, framebuffer.width, 0, 255);\n                const color = new Color(c2, c2, c2, 255).toPackedFormat();\n                this.transitionWipe[x + y * framebuffer.width] = color;\n            }\n        }\n\n        // draw circle gradient\n        this.transitionCircle = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.transitionCircle.fill(Color.WHITE.toPackedFormat(), 0, this.transitionCircle.length);\n        for (let d = 0; d < framebuffer.width / 2; d += 1) {\n            const c3 = Utils.map(d, 0, framebuffer.width / 2, 0, 255);\n            this.drawCircle(framebuffer.width / 2, framebuffer.height / 2, d, c3);\n        }\n\n        //dissolve effect\n        this.initDissolve(framebuffer.width, framebuffer.height);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (textureBackground: Texture) => this.ledTexture = textureBackground\n            ),\n        ]);\n    }\n\n    private initDissolve(width: number, height: number) {\n        this.croud = new Float32Array(width * height);\n        this.prevMask = new Array<boolean>(width * height);\n        this.curMask = new Array<boolean>(width * height);\n        this.diff = new Array<boolean>(width * height);\n        this.noiseMask = new Array<boolean>(width * height);\n        this.particleArray = new Array<Particle>();\n\n        this.croudMask = new Uint32Array(width * height);\n        this.particleArray.splice(0, this.particleArray.length);\n\n        this.createCroud(width, height);\n        const threshold = 0;\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const index = y * width + x;\n                const isBackground = (this.croudMask[y * width + x] & 0xFF) < 0x80;\n                if (isBackground) {\n                    this.croud[index] = 0xFF000000;\n                }\n                this.prevMask[index] = this.curMask[index] = this.croud[index] < threshold;\n                if (Math.random() > 0.90) {\n                    this.noiseMask[index] = !isBackground;\n                }\n            }\n        }\n    }\n\n    private createCroud(width: number, height: number) {\n        if (this.croud == null) {\n            this.croud = new Float32Array(width * height);\n        }\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                this.croudMask[y * width + x] = 0xFFFFFFFF;\n            }\n        }\n\n        const bias: number = Math.min(150.0, 0xFF);\n        const xbase = Math.random() * 100;\n        const ybase = Math.random() * 100;\n\n        let xnoise = 0.0;\n        let ynoise = 0.0;\n        const inc = 0.02;\n\n        const pn = Utils.PerlinNoise;\n\n        for (let y = 0; y < height; y++) {\n            const curBias = y * bias / height;\n            for (let x = 0; x < width; x++) {\n                const _gray = (pn.noise((xnoise + xbase), (ynoise + ybase), 0) * (0xFF - bias) + curBias);\n                this.croud[y * width + x] = _gray;\n                xnoise += inc;\n            }\n            xnoise = 0.0;\n            ynoise += inc;\n        }\n    }\n\n    // dissolve\n    public dissolve(renderBuffer: Framebuffer, renderBuffer2: Uint32Array, time: number) {\n\n        if (time <= 5) {\n\n            // update mask for current scene\n            for (let y = 0; y < renderBuffer.height; y++) {\n                for (let x = 0; x < renderBuffer.width; x++) {\n                    const index = y * renderBuffer.width + x;\n                    const isBackground = (this.croudMask[y * renderBuffer.width + x] & 0xFF) < 0x80;\n                    if (isBackground) {\n                        this.croud[index] = renderBuffer2[index];\n                    }\n                    this.prevMask[index] = this.curMask[index] = this.croud[index] < 0;\n                    if (Math.random() > 0.90) {\n                        this.noiseMask[index] = !isBackground;\n                    }\n                }\n            }\n\n            // delete loose particles\n            this.particleArray.splice(0, this.particleArray.length);\n        }\n\n        for (let y = 0; y < renderBuffer.height; y++) {\n            for (let x = 0; x < renderBuffer.width; x++) {\n                const index = y * renderBuffer.width + x;\n                this.curMask[index] = this.croud[index] < time;\n                this.diff[index] = this.prevMask[index] != this.curMask[index];\n                this.prevMask[index] = this.curMask[index];\n\n                if (this.curMask[index]) {\n                    renderBuffer.framebuffer[index] = renderBuffer2[index];\n                }\n\n                if (this.diff[index]) {\n                    if (this.noiseMask[index]) {\n                        const particle = new Particle(x, y, renderBuffer[index], renderBuffer.width, renderBuffer.height);\n                        particle._color = renderBuffer.framebuffer[index];\n                        this.particleArray.push(particle);\n                    }\n                    renderBuffer.framebuffer[index] = 0xFFFFFFFF;\n                }\n            }\n        }\n\n        for (let it = 0; it < this.particleArray.length; it++) {\n            const p = this.particleArray[it];\n\n            if (!p.update()) {\n                this.particleArray.splice(it, 1); continue;\n            }\n            renderBuffer.framebuffer[p.y * renderBuffer.width + p.x] = Framebuffer.addColor(renderBuffer.framebuffer[p.y * renderBuffer.width + p.x], p._color);\n        }\n    }\n\n    private putpixel(x: number, y: number, color: number) {\n        this.transitionCircle[x + y * this.transitionFramebufferTo.width] = new Color(color, color, color, 255).toPackedFormat();\n    }\n\n    private drawCircle(x0: number, y0: number, radius: number, color: number) {\n        let x = 0;\n        let y = radius;\n        let d = -(radius >>> 1);\n\n        while (x <= y) {\n            this.putpixel(x + x0, y + y0, color);\n            this.putpixel(y + x0, x + y0, color);\n            this.putpixel(-x + x0, y + y0, color);\n            this.putpixel(-y + x0, x + y0, color);\n            this.putpixel(-x + x0, -y + y0, color);\n            this.putpixel(-y + x0, -x + y0, color);\n            this.putpixel(x + x0, -y + y0, color);\n            this.putpixel(y + x0, -x + y0, color);\n\n            if (d <= 0) {\n                x++;\n                d += x;\n            } else {\n                y--;\n                d -= y;\n            }\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now() - this.startTime;\n        framebuffer.clear();\n        this.blockFade(framebuffer, this.ledTexture.texture, this.ledTexture.width, time, 0);\n    }\n\n    /**\n     * Transitions from one effect to another using using \"transition\" value from JSRocket\n     *\n     * @param  {Framebuffer} framebuffer             pixels\n     * @param  {AbstractScene} transitionSceneFrom   previous effect\n     * @param  {AbstractScene} transitionSceneTo     effect we are transitioning to\n     * @param  {number} transitionMethod             transition effect to use (blend, wipe, crossfade, etc)\n     */\n    public transition(\n        framebuffer: Framebuffer,\n        transitionSceneFrom: AbstractScene,\n        transitionSceneTo: AbstractScene,\n        transitionMethod: TransitionMethods,\n        transitionValue: number,\n        time: number) {\n\n        // render the 'To' effect into the framebuffer\n        transitionSceneTo.render(this.transitionFramebufferTo, time);\n\n        // render 'From' effect into framebuffer\n        transitionSceneFrom.render(framebuffer, time);\n        // apply transition to framebuffer (fromEffect) using texture (toEffect) 0-255\n        switch (Math.trunc(transitionMethod)) {\n            case TransitionMethods.BLOCKFADE: // 0 - 12000\n                this.blockFade(framebuffer, this.transitionFramebufferTo.framebuffer, this.transitionFramebufferTo.width, Utils.map(transitionValue, 0, 255, 0, 12000), 0);\n                break;\n            case TransitionMethods.CROSSFADE: // 0 - 255\n                this.crossFade(framebuffer.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.DISSOLVE: // 0 - 255\n                this.dissolve(framebuffer, this.transitionFramebufferTo.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.FADEIN: // 0-255\n                this.fadeIn(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.FADEOUT: // 0-255\n                this.fadeOut(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.WIPE_LEFT: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionWipe);\n                break;\n            case TransitionMethods.CIRCLE: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionCircle);\n                break;\n            default: // 0 - 512\n                this.crossFade(framebuffer.framebuffer, Utils.map(transitionValue, 0, 255, 0, 12000));\n        }\n    }\n\n    public blockFade(framebuffer: Framebuffer, pixelArray: Uint32Array, pixelArrayWidth: number, time: number, startTime: number) {\n        const blockWidth = 20;\n        const horizontalUnits = Math.ceil(framebuffer.width / blockWidth);\n        const verticalUnits = Math.ceil(framebuffer.height / blockWidth);\n\n        const fadeArray = new Array<number>(horizontalUnits * verticalUnits);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                fadeArray[x + y * horizontalUnits] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, x * blockWidth, y * blockWidth, blockWidth, blockWidth, pixelArray, pixelArrayWidth,\n                    Interpolator.interpolate(startTime + fadeArray[x + y * horizontalUnits], startTime + fadeArray[x + y * horizontalUnits] + 700, time)\n                );\n            }\n        }\n    }\n\n    // blend entire image to another image\n    public crossFade(framebuffer: Uint32Array, alpha: number) {\n        for (let i = 0; i < framebuffer.length; i++) {\n            framebuffer[i] = Framebuffer.blend(\n                framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                alpha)\n        }\n    }\n\n    // transition using image\n    // https://github.com/Slynchy/SDL-AlphaMaskWipes/blob/master/Transition.h\n    public crossFadeImage(framebuffer: Framebuffer, alpha: number, transitionImage: Uint32Array) {\n        for (let i = 0; i < framebuffer.framebuffer.length; i++) {\n            framebuffer.framebuffer[i] = Framebuffer.blend(\n                framebuffer.framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                Utils.clamp(\n                    (alpha * 2) - (transitionImage[i] & 0xff),\n                    0, 255))\n        }\n    }\n\n    // fade in from solid color\n    public fadeIn(framebuffer: Framebuffer, alpha: number, startColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        startColor,\n                        this.transitionFramebufferTo.framebuffer[x + y * framebuffer.width],\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // fade out to solid color\n    public fadeOut(framebuffer: Framebuffer, alpha: number, endColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        framebuffer.framebuffer[x + y * framebuffer.width],\n                        endColor,\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // Alternating scanlines + RGB Distort /w external input\n    public renderScanlines(framebuffer: Framebuffer, shiftAmount: number) {\n        let i = 0;\n\n        const offRed = (2 * shiftAmount) << 0;\n        const offGreen = (5 * shiftAmount) << 0;\n        const offBlue = (2 * shiftAmount) << 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n\n            // horizontal scanlines * intensity\n            const strips = (y & 1) * 16;\n            const verticalPosition = y * framebuffer.width;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                const imagePixelR = framebuffer.framebuffer[Utils.clamp(x + offRed, 0, framebuffer.width - 1) + verticalPosition] & 0xFF;\n                const imagePixelG = framebuffer.framebuffer[Utils.clamp(x + offGreen, 0, framebuffer.width - 1) + verticalPosition] >> 8 & 0xFF;\n                const imagePixelB = framebuffer.framebuffer[Utils.clamp(x + offBlue, 0, framebuffer.width - 1) + verticalPosition] >> 16 & 0xFF;\n\n                framebuffer.framebuffer[i++] = new Color(\n                    Utils.clamp(imagePixelR - strips, 0, 255),\n                    Utils.clamp(imagePixelG - strips, 0, 255),\n                    Utils.clamp(imagePixelB - strips, 0, 255)).toPackedFormat();\n            }\n        }\n    }\n\n}\n","export class Particle {\n    public x: number;\n    public y: number;\n    public _color: number;\n\n    private _x: number;\n    private _y: number;\n    private dx: number;\n    private dy: number;\n\n    private TTL: number = Math.round(Math.random() * 50);\n    private time: number;\n    private isLiving: boolean;\n    private width: number;\n    private height: number;\n\n    constructor(x: number, y: number, _color: number, width: number, height: number) {\n        this._x = this.x = x;\n        this._y = this.y = y;\n\n        this.dx = 0;\n        this.dy = - (Math.random() * (3 - 0.1) + 0.1);\n        this.time = 0;\n        this._color = 0xFF000000 | _color;\n\n        this.isLiving = true;\n\n        this.width = width;\n        this.height = height;\n    }\n\n    update(): boolean {\n        if (!this.isLiving) return false;\n\n        this.x = Math.round((this._x += this.dx) + 0.5);\n        this.y = Math.round((this._y += this.dy) + 0.5);\n\n        const a = ((this.TTL - this.time) / this.TTL);\n        const r = Math.round((this._color >> 16 & 0xFF) * a + 0.5);\n        const g = Math.round((this._color >> 8 & 0xFF) * a + 0.5);\n        const b = Math.round((this._color & 0xFF) * a + 0.5);\n\n        this._color = 0xFF << 24 | r << 16 | g << 8 | b;\n\n        if (this.x < 0 || this.x >= this.width) this.isLiving = false;\n        if (this.y < 0 || this.y >= this.height) this.isLiving = false;\n        if (this.time++ >= this.TTL) this.isLiving = false;\n        return this.isLiving;\n    }\n}","export enum TransitionMethods {\n        FADEIN = 1,\n        FADEOUT = 2,\n        BLOCKFADE = 3,\n        CROSSFADE = 4,\n        CIRCLE = 5,\n        WIPE_LEFT = 6,\n        DISSOLVE = 7\n}","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { BlockFade } from './BlockFade';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new BlockFade());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","Utils","input","value","istart","istop","ostart","ostop","random","srcPosition","dst","dstPosition","slice","prototype","splice","apply","concat","fade","t","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","y0","y2","y3","mu","mu2","a0","BlockFade","AbstractScene","ledTexture","transitionFramebufferTo","transitionCircle","transitionWipe","croud","prevMask","curMask","diff","noiseMask","croudMask","particleArray","map","d","c3","drawCircle","initDissolve","Promise","all","TextureUtils","load","textureBackground","createCroud","isBackground","bias","xbase","ybase","xnoise","ynoise","pn","PerlinNoise","curBias","_gray","dissolve","renderBuffer","renderBuffer2","particle","Particle","_color","it","update","addColor","putpixel","x0","radius","blockFade","transition","transitionSceneFrom","transitionSceneTo","transitionMethod","transitionValue","trunc","TransitionMethods","BLOCKFADE","CROSSFADE","crossFade","DISSOLVE","FADEIN","fadeIn","FADEOUT","fadeOut","WIPE_LEFT","crossFadeImage","CIRCLE","pixelArray","pixelArrayWidth","blockWidth","horizontalUnits","verticalUnits","fadeArray","blend","transitionImage","clamp","startColor","endColor","renderScanlines","shiftAmount","offRed","offGreen","offBlue","strips","verticalPosition","imagePixelR","imagePixelG","imagePixelB","_x","_y","dx","dy","TTL","isLiving","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","cross","normalize","faces","n1","n2","n3","transformedPoints","transformedNormals","getMesh","AbstractGeometricObject","invert","super","frame","frame2","up","right","current","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","sphereMapping","vertexArray","Vertex","setSphereMapping","arg0","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","draw","normalMatrix","normals2","vertices","project2","uv","clipConvexPolygon","zClipTriangle","computeNearPlaneIntersection2","subject","output","S","point","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","maxWidth","maxHeight","setClamp","getPixel","getBilinearFilteredPixel","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","window","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}