{"version":3,"file":"block-fade.js","mappings":"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","sources":["webpack://aisa/./src/default-style.css","webpack://aisa/./node_modules/css-loader/dist/runtime/api.js","webpack://aisa/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://aisa/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://aisa/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/compat get default export","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/webpack/runtime/nonce","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/examples/block-fade/TransitionMethods.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/examples/block-fade/Particle.ts","webpack://aisa/./src/examples/block-fade/BlockFade.ts","webpack://aisa/./src/default-style.css?9c7b","webpack://aisa/./src/examples/block-fade/Application.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n    background-color: #000;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/default-style.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,sBAAsB;AAC1B\",\"sourcesContent\":[\"body {\\n    background-color: #000;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.nc = undefined;","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1,\n    DISABLED\n}\n","export enum TransitionMethods {\n        FADEIN = 1,\n        FADEOUT = 2,\n        BLOCKFADE = 3,\n        CROSSFADE = 4,\n        CIRCLE = 5,\n        WIPE_LEFT = 6,\n        DISSOLVE = 7\n}","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n\n    public setRotationMatrix(x: number,y: number,z: number, alpha: number): void {\n        const c = Math.cos(Math.PI * 2 *alpha / 360 );\n        const s = Math.sin(Math.PI * 2 *alpha / 360 );\n        const vector = new Vector3f(x,y,z);\n        vector.normalize2();\n\n        this.m11 = (1.0 - c) * vector.x * vector.x + c;\n        this.m12 = (1.0 - c) * vector.x * vector.y - s * vector.z;\n        this.m13 = (1.0 - c) * vector.x * vector.z + s * vector.y;\n        this.m14 = 0.0;\n\n        this.m21 = (1.0 - c) * vector.x * vector.y + s * vector.z;\n        this.m22 = (1.0 - c) * vector.y * vector.y + c;\n        this.m23 = (1.0 - c) * vector.y * vector.z - s * vector.x;\n        this.m24 = 0.0;\n\n        this.m31 = (1.0 - c) * vector.x * vector.z - s * vector.y;\n        this.m32 = (1.0 - c) * vector.y * vector.z + s * vector.x;\n        this.m33 = (1.0 - c) * vector.z * vector.z + c;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   //color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   //color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   //color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                  // color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) {\n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        if (this.cullMode == CullFace.DISABLED) {\n            return true;\n        }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n            if (this.cullMode == CullFace.DISABLED) {\n                return true;\n            }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0;\n        let  x1 ;\n        let  y0;\n        let y1 ;\n\n        if (this.clamp) {\n            x = Math.max(Math.min(x, this.width - 1), 0);\n            y = Math.max(Math.min(y, this.height - 1), 0);\n\n            //x= ((x%this.width)+ this.width) % this.width;\n            //y= ((y%this.height)+ this.height) % this.height;\n\n\n            x0 = Math.floor(x);\n            x1 =  Math.max(Math.min(x0+1, this.width - 1), 0);\n              y0 = Math.floor(y);\n             y1 =Math.max(Math.min(y0+1, this.height - 1), 0);\n        } else {\n            x= ((x%this.width)+ this.width) % this.width;\n            y= ((y%this.height)+ this.height) % this.height;\n\n\n        x0 = x | 0;\n        x1 = (x+ 1 | 0)%this.width ;\n          y0 = y | 0;\n         y1 = (y+ 1 | 0)%this.height ;\n        }\n\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0, x1y0 , x0y1, x1y1 );\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        let x0y0: number;\n        let x1y0: number;\n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n\n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n\n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n\n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        const x0y0_a = x0y0 >> 24 & 0xff;\n        const x1y0_a = x1y0 >> 24 & 0xff;\n        const x0y1_a = x0y1 >> 24 & 0xff;\n        const x1y1_a = x1y1 >> 24 & 0xff;\n\n        const col1_a = x0y0_a * oneMinusXfrac + x1y0_a * xFrac;\n        const col2_a = x0y1_a * oneMinusXfrac + x1y1_a * xFrac;\n        const col_a = col1_a * oneMinusYfrac + (col2_a * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | col_a << 24;\n    }\n\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedAlphaBlendingTriangleRasterizer } from './rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('@assets/lab2.json');\n// let bakedJson = <any>require('@assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n   \n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n               // console.log(xx, yy);\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export class Particle {\n    public x: number;\n    public y: number;\n    public _color: number;\n\n    private _x: number;\n    private _y: number;\n    private dx: number;\n    private dy: number;\n\n    private TTL: number = Math.round(Math.random() * 50);\n    private time: number;\n    private isLiving: boolean;\n    private width: number;\n    private height: number;\n\n    constructor(x: number, y: number, _color: number, width: number, height: number) {\n        this._x = this.x = x;\n        this._y = this.y = y;\n\n        this.dx = 0;\n        this.dy = - (Math.random() * (3 - 0.1) + 0.1);\n        this.time = 0;\n        this._color = 0xFF000000 | _color;\n\n        this.isLiving = true;\n\n        this.width = width;\n        this.height = height;\n    }\n\n    update(): boolean {\n        if (!this.isLiving) return false;\n\n        this.x = Math.round((this._x += this.dx) + 0.5);\n        this.y = Math.round((this._y += this.dy) + 0.5);\n\n        const a = ((this.TTL - this.time) / this.TTL);\n        const r = Math.round((this._color >> 16 & 0xFF) * a + 0.5);\n        const g = Math.round((this._color >> 8 & 0xFF) * a + 0.5);\n        const b = Math.round((this._color & 0xFF) * a + 0.5);\n\n        this._color = 0xFF << 24 | r << 16 | g << 8 | b;\n\n        if (this.x < 0 || this.x >= this.width) this.isLiving = false;\n        if (this.y < 0 || this.y >= this.height) this.isLiving = false;\n        if (this.time++ >= this.TTL) this.isLiving = false;\n        return this.isLiving;\n    }\n}","import { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Interpolator } from '../../math/Interpolator';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture/index';\nimport { TransitionMethods } from './TransitionMethods';\nimport { Particle } from './Particle';\n\nexport class BlockFade extends AbstractScene {\n    private ledTexture: Texture;\n    private startTime: number = Date.now();\n    private transitionFramebufferTo: Framebuffer;\n\n    public transitionCircle: Uint32Array;\n    public transitionWipe: Uint32Array;\n\n    // dissolve \n    private croud: Float32Array;        // Stores data for mask control\n    private prevMask: Array<boolean>;    // mask picture\n    private curMask: Array<boolean>;\n    private diff: Array<boolean>;       // difference mask\n    private noiseMask: Array<boolean>;  // particle mask\n    private croudMask: Uint32Array;     // cloud mask\n    private particleArray: Array<Particle>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.transitionFramebufferTo = new Framebuffer(framebuffer.width, framebuffer.height);\n\n        // draw side wipe\n        this.transitionWipe = new Uint32Array(framebuffer.width * framebuffer.height);\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const c2 = Utils.map(x, 0, framebuffer.width, 0, 255);\n                const color = new Color(c2, c2, c2, 255).toPackedFormat();\n                this.transitionWipe[x + y * framebuffer.width] = color;\n            }\n        }\n\n        // draw circle gradient\n        this.transitionCircle = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.transitionCircle.fill(Color.WHITE.toPackedFormat(), 0, this.transitionCircle.length);\n        for (let d = 0; d < framebuffer.width / 2; d += 1) {\n            const c3 = Utils.map(d, 0, framebuffer.width / 2, 0, 255);\n            this.drawCircle(framebuffer.width / 2, framebuffer.height / 2, d, c3);\n        }\n\n        //dissolve effect\n        this.initDissolve(framebuffer.width, framebuffer.height);\n\n        return Promise.all([\n            TextureUtils.load(require('@assets/atlantis.png'), false).then(\n                (textureBackground: Texture) => this.ledTexture = textureBackground\n            ),\n        ]);\n    }\n\n    private initDissolve(width: number, height: number) {\n        this.croud = new Float32Array(width * height);\n        this.prevMask = new Array<boolean>(width * height);\n        this.curMask = new Array<boolean>(width * height);\n        this.diff = new Array<boolean>(width * height);\n        this.noiseMask = new Array<boolean>(width * height);\n        this.particleArray = new Array<Particle>();\n\n        this.croudMask = new Uint32Array(width * height);\n        this.particleArray.splice(0, this.particleArray.length);\n\n        this.createCroud(width, height);\n        const threshold = 0;\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const index = y * width + x;\n                const isBackground = (this.croudMask[y * width + x] & 0xFF) < 0x80;\n                if (isBackground) {\n                    this.croud[index] = 0xFF000000;\n                }\n                this.prevMask[index] = this.curMask[index] = this.croud[index] < threshold;\n                if (Math.random() > 0.90) {\n                    this.noiseMask[index] = !isBackground;\n                }\n            }\n        }\n    }\n\n    private createCroud(width: number, height: number) {\n        if (this.croud == null) {\n            this.croud = new Float32Array(width * height);\n        }\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                this.croudMask[y * width + x] = 0xFFFFFFFF;\n            }\n        }\n\n        const bias: number = Math.min(150.0, 0xFF);\n        const xbase = Math.random() * 100;\n        const ybase = Math.random() * 100;\n\n        let xnoise = 0.0;\n        let ynoise = 0.0;\n        const inc = 0.02;\n\n        const pn = Utils.PerlinNoise;\n\n        for (let y = 0; y < height; y++) {\n            const curBias = y * bias / height;\n            for (let x = 0; x < width; x++) {\n                const _gray = (pn.noise((xnoise + xbase), (ynoise + ybase), 0) * (0xFF - bias) + curBias);\n                this.croud[y * width + x] = _gray;\n                xnoise += inc;\n            }\n            xnoise = 0.0;\n            ynoise += inc;\n        }\n    }\n\n    // dissolve\n    public dissolve(renderBuffer: Framebuffer, renderBuffer2: Uint32Array, time: number) {\n\n        if (time <= 5) {\n\n            // update mask for current scene\n            for (let y = 0; y < renderBuffer.height; y++) {\n                for (let x = 0; x < renderBuffer.width; x++) {\n                    const index = y * renderBuffer.width + x;\n                    const isBackground = (this.croudMask[y * renderBuffer.width + x] & 0xFF) < 0x80;\n                    if (isBackground) {\n                        this.croud[index] = renderBuffer2[index];\n                    }\n                    this.prevMask[index] = this.curMask[index] = this.croud[index] < 0;\n                    if (Math.random() > 0.90) {\n                        this.noiseMask[index] = !isBackground;\n                    }\n                }\n            }\n\n            // delete loose particles\n            this.particleArray.length = 0;\n        }\n\n        for (let y = 0; y < renderBuffer.height; y++) {\n            for (let x = 0; x < renderBuffer.width; x++) {\n                const index = y * renderBuffer.width + x;\n                this.curMask[index] = this.croud[index] < time;\n                this.diff[index] = this.prevMask[index] != this.curMask[index];\n                this.prevMask[index] = this.curMask[index];\n\n                if (this.curMask[index]) {\n                    renderBuffer.framebuffer[index] = renderBuffer2[index];\n                }\n\n                if (this.diff[index]) {\n                    if (this.noiseMask[index]) {\n                        const particle = new Particle(x, y, renderBuffer[index], renderBuffer.width, renderBuffer.height);\n                        particle._color = renderBuffer.framebuffer[index];\n                        this.particleArray.push(particle);\n                    }\n                    renderBuffer.framebuffer[index] = 0xFFFFFFFF;\n                }\n            }\n        }\n\n        for (let it = 0; it < this.particleArray.length; it++) {\n            const p = this.particleArray[it];\n\n            if (!p.update()) {\n                this.particleArray.splice(it, 1); continue;\n            }\n            renderBuffer.framebuffer[p.y * renderBuffer.width + p.x] = Framebuffer.addColor(renderBuffer.framebuffer[p.y * renderBuffer.width + p.x], p._color);\n        }\n    }\n\n    private putpixel(x: number, y: number, color: number) {\n        this.transitionCircle[x + y * this.transitionFramebufferTo.width] = new Color(color, color, color, 255).toPackedFormat();\n    }\n\n    private drawCircle(x0: number, y0: number, radius: number, color: number) {\n        let x = 0;\n        let y = radius;\n        let d = -(radius >>> 1);\n\n        while (x <= y) {\n            this.putpixel(x + x0, y + y0, color);\n            this.putpixel(y + x0, x + y0, color);\n            this.putpixel(-x + x0, y + y0, color);\n            this.putpixel(-y + x0, x + y0, color);\n            this.putpixel(-x + x0, -y + y0, color);\n            this.putpixel(-y + x0, -x + y0, color);\n            this.putpixel(x + x0, -y + y0, color);\n            this.putpixel(y + x0, -x + y0, color);\n\n            if (d <= 0) {\n                x++;\n                d += x;\n            } else {\n                y--;\n                d -= y;\n            }\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now() - this.startTime;\n        framebuffer.clear();\n        this.blockFade(framebuffer, this.ledTexture.texture, this.ledTexture.width, time, 0);\n    }\n\n    /**\n     * Transitions from one effect to another using using \"transition\" value from JSRocket\n     *\n     * @param  {Framebuffer} framebuffer             pixels\n     * @param  {AbstractScene} transitionSceneFrom   previous effect\n     * @param  {AbstractScene} transitionSceneTo     effect we are transitioning to\n     * @param  {number} transitionMethod             transition effect to use (blend, wipe, crossfade, etc)\n     */\n    public transition(\n        framebuffer: Framebuffer,\n        transitionSceneFrom: AbstractScene,\n        transitionSceneTo: AbstractScene,\n        transitionMethod: TransitionMethods,\n        transitionValue: number,\n        time: number) {\n\n        // render the 'To' effect into the framebuffer\n        transitionSceneTo.render(this.transitionFramebufferTo, time);\n\n        // render 'From' effect into framebuffer\n        transitionSceneFrom.render(framebuffer, time);\n        // apply transition to framebuffer (fromEffect) using texture (toEffect) 0-255\n        switch (Math.trunc(transitionMethod)) {\n            case TransitionMethods.BLOCKFADE: // 0 - 12000\n                this.blockFade(framebuffer, this.transitionFramebufferTo.framebuffer, this.transitionFramebufferTo.width, Utils.map(transitionValue, 0, 255, 0, 12000), 0);\n                break;\n            case TransitionMethods.CROSSFADE: // 0 - 255\n                this.crossFade(framebuffer.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.DISSOLVE: // 0 - 255\n                this.dissolve(framebuffer, this.transitionFramebufferTo.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.FADEIN: // 0-255\n                this.fadeIn(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.FADEOUT: // 0-255\n                this.fadeOut(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.WIPE_LEFT: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionWipe);\n                break;\n            case TransitionMethods.CIRCLE: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionCircle);\n                break;\n            default: // 0 - 512\n                this.crossFade(framebuffer.framebuffer, Utils.map(transitionValue, 0, 255, 0, 12000));\n        }\n    }\n\n    public blockFade(framebuffer: Framebuffer, pixelArray: Uint32Array, pixelArrayWidth: number, time: number, startTime: number) {\n        const blockWidth = 20;\n        const horizontalUnits = Math.ceil(framebuffer.width / blockWidth);\n        const verticalUnits = Math.ceil(framebuffer.height / blockWidth);\n\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n\n        const fadeArray = Array.from({ length: horizontalUnits * verticalUnits }, () => {\n            return 500 + Math.round(rng.getFloat() * 600000) % 10000;\n        });\n\n        for (let y = 0; y < verticalUnits; y++) {\n            const yPos = y * blockWidth;\n\n            for (let x = 0; x < horizontalUnits; x++) {\n                const xPos = x * blockWidth;\n                const fadeIndex = x + y * horizontalUnits;\n                framebuffer.drawTextureRect(xPos, yPos, xPos, yPos, blockWidth, blockWidth, pixelArray, pixelArrayWidth,\n                    Interpolator.interpolate(startTime + fadeArray[fadeIndex], startTime + fadeArray[fadeIndex] + 700, time)\n                );\n            }\n        }\n    }\n\n    // blend entire image to another image\n    public crossFade(framebuffer: Uint32Array, alpha: number) {\n        for (let i = 0; i < framebuffer.length; i++) {\n            framebuffer[i] = Framebuffer.blend(\n                framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                alpha)\n        }\n    }\n\n    // transition using image\n    // https://github.com/Slynchy/SDL-AlphaMaskWipes/blob/master/Transition.h\n    public crossFadeImage(framebuffer: Framebuffer, alpha: number, transitionImage: Uint32Array) {\n        for (let i = 0; i < framebuffer.framebuffer.length; i++) {\n            framebuffer.framebuffer[i] = Framebuffer.blend(\n                framebuffer.framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                Utils.clamp(\n                    (alpha * 2) - (transitionImage[i] & 0xff),\n                    0, 255))\n        }\n    }\n\n    // fade in from solid color\n    public fadeIn(framebuffer: Framebuffer, alpha: number, startColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        startColor,\n                        this.transitionFramebufferTo.framebuffer[x + y * framebuffer.width],\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // fade out to solid color\n    public fadeOut(framebuffer: Framebuffer, alpha: number, endColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        framebuffer.framebuffer[x + y * framebuffer.width],\n                        endColor,\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // Alternating scanlines + RGB Distort /w external input\n    public renderScanlines(framebuffer: Framebuffer, shiftAmount: number) {\n        let i = 0;\n\n        const offRed = (2 * shiftAmount) << 0;\n        const offGreen = (5 * shiftAmount) << 0;\n        const offBlue = (2 * shiftAmount) << 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n\n            // horizontal scanlines * intensity\n            const strips = (y & 1) * 16;\n            const verticalPosition = y * framebuffer.width;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                const imagePixelR = framebuffer.framebuffer[Utils.clamp(x + offRed, 0, framebuffer.width - 1) + verticalPosition] & 0xFF;\n                const imagePixelG = framebuffer.framebuffer[Utils.clamp(x + offGreen, 0, framebuffer.width - 1) + verticalPosition] >> 8 & 0xFF;\n                const imagePixelB = framebuffer.framebuffer[Utils.clamp(x + offBlue, 0, framebuffer.width - 1) + verticalPosition] >> 16 & 0xFF;\n\n                framebuffer.framebuffer[i++] = new Color(\n                    Utils.clamp(imagePixelR - strips, 0, 255),\n                    Utils.clamp(imagePixelG - strips, 0, 255),\n                    Utils.clamp(imagePixelB - strips, 0, 255)).toPackedFormat();\n            }\n        }\n    }\n\n}\n","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","import { Canvas } from '../../Canvas';\nimport { BlockFade } from './BlockFade';\n\nimport './../../default-style.css';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new BlockFade());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","options","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","insert","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","setAttributes","attributes","styleElement","nonce","setAttribute","insertStyleElement","styleTagTransform","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","currentScript","src","scripts","getElementsByTagName","replace","p","nc","ScaleClipBlitter","framebuffer","constructor","drawScaledTextureClip","xp","yp","width","height","texture","alphaBlend","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","Math","max","alphaScale","index2","y","x","textureIndex","alpha","inverseAlpha","framebufferPixel","texturePixel","r","b","Color","static","toPackedFormat","sub","color","add","div","num","mul","CullFace","TransitionMethods","Vector4f","z","w","vec","cross","normalize","reci","sqrt","sub2","vec1","vec2","add2","scal","componentWiseMul","dot","cross2","normalize2","AbstractGeometricObject","mesh","inverse","buildMesh","points","normals","Array","normal","faces","n1","n2","n3","v1","v2","v3","transformedPoints","transformedNormals","getMesh","Vector3f","mult","scale","Torus","invert","super","STEPS2","frame","torusFunction","PI","frame2","up","right","pos","sin","cos","j","Vector2f","perp","Matrix4f","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","constructIdentityMatrix","matrix","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","scale1","scale2","scale3","inverseRotation","multiplyMatrix","getInverseRotation","getRotation","constructShadowMatrix","planePoint","planeNormal","lightPosition","NdotL","shadowMatrix","constructTranslationMatrix","tx","ty","tz","setTranslationMatrix","constructXRotationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","setRotationMatrix","c","s","vector","constructYRotationMatrix","constructZRotationMatrix","constructScaleMatrix","multiply2","matrix2","multiply","multiplyHom","multiplyHomArr","multiplyHomArr2","multiplyArr","Matrix3f","angle","xScale","yScale","zScale","Interpolator","interpolate","start","end","current","cosineInterpolate","y1","y2","mu","mu2","RandomNumberGenerator","seed","getFloat","setSeed","AbstractTriangleRasterizer","AbstractScannlineTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","projection","fillLongRightTriangle","fillLongLeftTriangle","FlatShadingTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","round","wStart","framebufferIndex","wBuffer","LineRasterizerDda","drawLineDDA","xDistance","yDistance","dx","dy","abs","sign","wDelta","drawPixel","LineRasterizerNoZ","drawLineDDANoZ","TexturedTriangleRasterizer","tslope1u","textureCoordinate","u","tslope1v","v","curu1","curv1","tslope2u","tslope2v","curu2","curv2","spanuStep","spanvStep","uStart","vStart","min","bob","color2","TexturedAlphaBlendingTriangleRasterizer","pipeline","currentColor","getBilinearFilteredPixelRasterizer","TextureCoordinate","Vertex","position","AbstractRenderingPipeline","NEAR_PLANE_Z","cullMode","BACK","setCullFace","face","setAlpha","isInFrontOfNearPlane","isTriangleCCW","DISABLED","det","isTriangleCCW2","v4","TexturingRenderingPipeline","sphereMapping","triangleRasterizer","vertexArray","setSphereMapping","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","draw","normalMatrix","normals2","points2","vertices","project2","fakeSphere","uv","clipConvexPolygon","zClipTriangle","t1","computeNearPlaneIntersection","ratio","vertex","subject","input","output","S","point","clipRegion","edge","isInside2","computeIntersection2","AbstractClipEdge","BottomClipEdge","isInside","minWindow","computeIntersection","factor","textCoord","CohenSutherlandLineClipper","cohenSutherlandLineClipper","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","maxWindow","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","LeftClipEdge","RightClipEdge","TopClipEdge","Texture","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","x1","y0","x0y0","x1y0","x0y1","x1y1","col1","floor","col2","getBilinearFilteredPixel2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","Framebuffer","camera","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","lineRasterizer","lineRasterizerNo","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","plane","cylinder2","linerClipper","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","setTexture","getImageData","set","clear","BLACK","clearColorBuffer","fill","drawPixel4","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","roundedY","percent","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","drawRect2","drawText","text","xpos","firstIndex","charCodeAt","drawTextureRectFastAlpha","addReflections","Date","now","drawTextureRect2","xs","ys","xt","yt","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","blend","c1","c2","nAlpha","nInvAlpha","addColor","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","fastFramebufferCopyOffset","dest","offset","l","fastFramebufferCopy","noise","elapsedTime","rng","drawTexturedBillboard","drawParticle","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","textureRowOffset","framebufferRowOffset","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t2","project","t3","clearDepthBuffer","drawBox","wireFrameSphereClipping","sphereFunction2","modelViewMartrix","transformed","colred","colLine","wireFrameTerrain","heightmap","xOff","zOff","forEach","drawBoundingSphere","sphere","getRadius","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","dist2","atan2","color1","final","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","asin","fakeSphere2","tex","theta","phi","FullscreenUtils","toggleFullscreen","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","Canvas","scene","canvas","context","startTime","boundRenderLoop","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","Utils","value","istart","istop","ostart","ostop","getRandomInt","random","arrayCopy","srcPosition","dst","dstPosition","slice","fade","t","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","CubicInterpolate","y3","a0","CosineInterpolate","AbstractScene","Promise","all","TextureUtils","generateProceduralNoise","resolve","generateProceduralParticleTexture","generateProceduralParticleTexture2","load","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","Particle","_color","_x","_y","TTL","isLiving","BlockFade","ledTexture","transitionFramebufferTo","transitionCircle","transitionWipe","croud","prevMask","curMask","diff","noiseMask","croudMask","particleArray","WHITE","c3","drawCircle","initDissolve","textureBackground","createCroud","isBackground","bias","xbase","ybase","xnoise","ynoise","pn","PerlinNoise","curBias","_gray","dissolve","renderBuffer","renderBuffer2","particle","it","putpixel","radius","blockFade","transition","transitionSceneFrom","transitionSceneTo","transitionMethod","transitionValue","trunc","BLOCKFADE","CROSSFADE","crossFade","DISSOLVE","FADEIN","fadeIn","FADEOUT","fadeOut","WIPE_LEFT","crossFadeImage","CIRCLE","pixelArray","pixelArrayWidth","blockWidth","horizontalUnits","verticalUnits","fadeArray","from","yPos","xPos","fadeIndex","transitionImage","startColor","endColor","renderScanlines","shiftAmount","offRed","offGreen","offBlue","strips","verticalPosition","imagePixelR","imagePixelG","imagePixelB","locals","main"],"sourceRoot":""}