{"version":3,"file":"1935.js","mappings":"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","sources":["webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/examples/gears/GearsScene.ts","webpack://aisa/./src/examples/demo/parts/Scene14.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/model/blender/BlenderLoader.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts"],"sourcesContent":["import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\n\nexport class GearsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n    private gearsMesh: Array<FlatshadedMesh>;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/gear.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.gearsMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene4(framebuffer, time);\n        /*  [\n              { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n              { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n              { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n              { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n              { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n          ], this.dirt);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene4(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -21).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let scale: number = 0.1 * 2.1 * 2.1;\n        let factor: number = 2.1 - 0.09 - 0.09;\n        const fade: number = 0.09;\n        const dampFactor: number = Math.sin(elapsedTime * 0.00001) * 0.5 + 0.5;\n        for (let i: number = 1; i < 6; i++) {\n            scale *= factor;\n            factor -= fade;\n\n            const mv: Matrix4f = this.getModelViewMatrix(camera, dampFactor, scale, i, elapsedTime);\n\n            this.renderingPipeline.draw(framebuffer, this.gearsMesh[0], mv);\n        }\n        // let lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n        // framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n    private getModelViewMatrix(camera: Matrix4f, dampFactor: number, scale: number, i: number,\n        elapsedTime: number): Matrix4f {\n        const modelViewMartrix: Matrix4f =\n            Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.0005 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                    Matrix4f.constructScaleMatrix(scale, scale, scale)));\n\n        return camera.multiplyMatrix(modelViewMartrix);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { GearsScene } from '../../gears/GearsScene';\n\nexport class Scene14 {\n    private GearsScene: GearsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.GearsScene = new GearsScene();\n\n        return Promise.all([\n            this.GearsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.GearsScene.render(framebuffer, time);\n    }\n\n}","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { BlenderScene } from '../../blender/BlenderScene';\n\n/**\n * Load Wavefront OBJ file that was converted via obj2json utility.\n * to save the convertToMeshArray step\n * renamed to JSX file to load file at runtime\n */\nexport class BlenderLoader {\n\n    public static load(filename: string): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: string): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.getBlenderScene(meshes, false);\n        });\n    }\n\n    private constructor() {\n\n    }\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n"],"names":["BlenderJsonParser","static","blenderScene","invert","scene","forEach","object","points","Array","normals","vertices","v","push","x","y","z","mul","normalize","faces","f","n1","n2","n3","v1","v2","v3","obj","transformedNormals","map","transformedPoints","file","disp","coords","uv","u","add","sphere","computeBoundingSphere","getCenter","w","points2","normals2","boundingSphere","name","GearsScene","AbstractScene","blurred","noise","gearsMesh","accumulationBuffer","renderingPipeline","init","framebuffer","this","Uint32Array","width","height","GouraudShadingRenderingPipeline","setCullFace","CullFace","FRONT","Promise","all","BlenderLoader","load","then","mesh","TextureUtils","texture","generateProceduralNoise","render","time","drawScaledTextureClipBi","drawBlenderScene4","texture3","Texture","drawTexture","fastFramebufferCopy","elapsedTime","clearDepthBuffer","camera","Matrix4f","constructTranslationMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","scale","factor","dampFactor","Math","sin","i","mv","getModelViewMatrix","draw","modelViewMartrix","constructScaleMatrix","Scene14","ComputationalGeometryUtils","length","Error","center","radius","point","max","sub","Sphere","position","isInsidePositiveHalfSpace","plane","getNormal","dot","getDistance","getTran","mat","multiplyHom","getRadius","filename","fetch","response","json","meshes","parse","getBlenderScene","ColorInterpolator","startColor","colorSlope","setup","c1","c2","distance","r","g","b","advance","GouraudShadingTriangleRasterizer","colorInterpolator1","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","rightSlope","constructor","super","fillLongRightTriangle","color","yDistance","drawSpan","fillLongLeftTriangle","shortSlope","yPosition","yStart","round","currentX","framebufferIndex","spanzStep","currentZ","wStart","j","wBuffer","toPackedFormat","SlopeInterpolator","slope","zslope","top","bottom","projection","fog","lights","material","lighting","WHITE","triangleRasterizer","clipper","projectedVertices","vertexArray","light1","ambientIntensity","diffuseIntensity","specularIntensity","light2","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setFog","setLights","enableLighting","enable","setMaterial","setColor","drawMeshArray","model","normalMatrix","computeNormalMatrix","multiplyHomArr","normal1","normal2","normal3","isInFrontOfNearPlane","project2","normal","renderConvexPolygon","computeColor","output","zClipTriangle","project","t1","result","computeNearPlaneIntersection","p1","p2","ratio","NEAR_PLANE_Z","vertex","subject","input","S","projected","late","isTriangleCCW","isTriangleCCW2","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","drawTriangleDDA","vertexColor","computeVertexColor","min","SutherlandHodgman2DClipper","clipRegion","edge","isInside","computeIntersection","PhongLighting","finalColor","light","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","l","componentWiseMul","lightDirection","pow","Light","PointLight","Material","emissiveColor"],"sourceRoot":""}