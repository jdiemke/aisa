{"version":3,"file":"toxic-dots.js","mappings":"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","sources":["webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/examples/toxic-dots/ToxicDotsScene.ts","webpack://aisa/./src/examples/toxic-dots/Application.ts"],"sourcesContent":["import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1,\n    DISABLED\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n\n    public setRotationMatrix(x: number,y: number,z: number, alpha: number): void {\n        const c = Math.cos(Math.PI * 2 *alpha / 360 );\n        const s = Math.sin(Math.PI * 2 *alpha / 360 );\n        const vector = new Vector3f(x,y,z);\n        vector.normalize2();\n\n        this.m11 = (1.0 - c) * vector.x * vector.x + c;\n        this.m12 = (1.0 - c) * vector.x * vector.y - s * vector.z;\n        this.m13 = (1.0 - c) * vector.x * vector.z + s * vector.y;\n        this.m14 = 0.0;\n\n        this.m21 = (1.0 - c) * vector.x * vector.y + s * vector.z;\n        this.m22 = (1.0 - c) * vector.y * vector.y + c;\n        this.m23 = (1.0 - c) * vector.y * vector.z - s * vector.x;\n        this.m24 = 0.0;\n\n        this.m31 = (1.0 - c) * vector.x * vector.z - s * vector.y;\n        this.m32 = (1.0 - c) * vector.y * vector.z + s * vector.x;\n        this.m33 = (1.0 - c) * vector.z * vector.z + c;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) {\n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        if (this.cullMode == CullFace.DISABLED) {\n            return true;\n        }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n            if (this.cullMode == CullFace.DISABLED) {\n                return true;\n            }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection3(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                0);\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n\n        textCoord.u = (p1.textureCoordinate.u  + (p2.textureCoordinate.u  - p1.textureCoordinate.u ) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y));\n        textCoord.v = (p1.textureCoordinate.v  + (p2.textureCoordinate.v  - p1.textureCoordinate.v ) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y));\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n               0);\n\n        const textCoord = new TextureCoordinate();\n\n        textCoord.u = (p1.textureCoordinate.u  + (p2.textureCoordinate.u - p1.textureCoordinate.u) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) ;\n        textCoord.v = (p1.textureCoordinate.v  + (p2.textureCoordinate.v  - p1.textureCoordinate.v) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) ;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n    // no 3d clipping\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                0);\n\n        const textCoord = new TextureCoordinate();\n        textCoord.u = (p1.textureCoordinate.u + (p2.textureCoordinate.u - p1.textureCoordinate.u) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x));\n        textCoord.v = (p1.textureCoordinate.v + (p2.textureCoordinate.v - p1.textureCoordinate.v) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x));\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n    public computeIntersection3(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                0);\n\n        const textCoord = new TextureCoordinate();\n        textCoord.u = (p1.textureCoordinate.u  + (p2.textureCoordinate.u  - p1.textureCoordinate.u ) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) ;\n        textCoord.v = (p1.textureCoordinate.v  + (p2.textureCoordinate.v  - p1.textureCoordinate.v ) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y));\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0;\n        let  x1 ;\n        let  y0;\n        let y1 ;\n\n        if (this.clamp) {\n            x = Math.max(Math.min(x, this.width - 1), 0);\n            y = Math.max(Math.min(y, this.height - 1), 0);\n\n            //x= ((x%this.width)+ this.width) % this.width;\n            //y= ((y%this.height)+ this.height) % this.height;\n\n\n            x0 = Math.floor(x);\n            x1 =  Math.max(Math.min(x0+1, this.width - 1), 0);\n              y0 = Math.floor(y);\n             y1 =Math.max(Math.min(y0+1, this.height - 1), 0);\n        } else {\n            x= ((x%this.width)+ this.width) % this.width;\n            y= ((y%this.height)+ this.height) % this.height;\n\n\n        x0 = x | 0;\n        x1 = (x+ 1 | 0)%this.width ;\n          y0 = y | 0;\n         y1 = (y+ 1 | 0)%this.height ;\n        }\n\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0, x1y0 , x0y1, x1y1 );\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        let x0y0: number;\n        let x1y0: number;\n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n\n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n\n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n\n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        const x0y0_a = x0y0 >> 24 & 0xff;\n        const x1y0_a = x1y0 >> 24 & 0xff;\n        const x0y1_a = x0y1 >> 24 & 0xff;\n        const x1y1_a = x1y1 >> 24 & 0xff;\n\n        const col1_a = x0y0_a * oneMinusXfrac + x1y0_a * xFrac;\n        const col2_a = x0y1_a * oneMinusXfrac + x1y1_a * xFrac;\n        const col_a = col1_a * oneMinusYfrac + (col2_a * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | col_a << 24;\n    }\n\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedAlphaBlendingTriangleRasterizer } from './rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('@assets/lab2.json');\n// let bakedJson = <any>require('@assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n   \n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n               // console.log(xx, yy);\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f, Matrix4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\nexport class ToxicDotsScene extends AbstractScene {\n\n    private tmp: Uint32Array;\n    private tmp2: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.tmp = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.tmp2 = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now();\n\n        this.blur(framebuffer);\n        this.shadingTorus3(framebuffer, time * 0.003);\n    }\n\n    public shadingTorus3(framebuffer: Framebuffer, elapsedTime: number): void {\n        const points: Array<Vector3f> = [];\n        const STEPS = 15 * 2;\n        const STEPS2 = 12 * 2;\n        for (let i = 0; i < STEPS; i++) {\n            const frame = framebuffer.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = framebuffer.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos);\n            }\n        }\n\n        const scale = 1.2;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.09));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.04) * 25,\n            Math.sin(elapsedTime * 0.05) * 9, -34).multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiply(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z; // TODO: use translation matrix!\n\n            const xx = (framebuffer.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (framebuffer.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(Math.round(xx), Math.round(yy), z));\n        }\n\n        for (let i = 0; i < points2.length; i++) {\n            const v1 = points2[i];\n            const color = 0xffbbffbb;\n            if (v1.x > framebuffer.minWindow.x && v1.x < framebuffer.maxWindow.x &&\n                v1.y > framebuffer.minWindow.y && v1.y < framebuffer.maxWindow.y) {\n                framebuffer.drawPixel(v1.x, v1.y, color);\n            }\n        }\n    }\n\n    // optimization:\n    // - downscale image to half the size before bluring\n    // render result to texture in order to not blur the logo\n\n    public blur(framebuffer: Framebuffer) {\n        const scale = 1 / (3.1);\n        let r: number = 0;\n        let g: number = 0;\n        let b: number = 0;\n        let index = 1 + framebuffer.width;\n        let sumIndex = framebuffer.width;\n        let color: number;\n        for (let y = 0; y < framebuffer.height - 2; y++) {\n            for (let x = 0; x < framebuffer.width - 2; x++) {\n                color = framebuffer.framebuffer[sumIndex];\n                r = color & 0xff;\n                g = color >> 8 & 0xff;\n                b = color >> 16 & 0xff;\n                sumIndex++;\n\n                color = framebuffer.framebuffer[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex++;\n\n                color = framebuffer.framebuffer[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex++;\n\n                sumIndex -= 2;\n                r *= scale; g *= scale; b *= scale;\n                this.tmp[index] = r | g << 8 | b << 16 | 255 << 24;\n                index++;\n            }\n            sumIndex += 2;\n            index += 2;\n        }\n\n        index = framebuffer.width + 1;\n        sumIndex = 1;\n        for (let x = 1; x < framebuffer.width - 1; x++) {\n            sumIndex = x;\n            for (let y = 0; y < framebuffer.height - 2; y++) {\n                color = this.tmp[sumIndex];\n                r = color & 0xff;\n                g = color >> 8 & 0xff;\n                b = color >> 16 & 0xff;\n                sumIndex += framebuffer.width;\n\n                color = this.tmp[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex += framebuffer.width;\n\n                color = this.tmp[sumIndex];\n                r += color & 0xff;\n                g += color >> 8 & 0xff;\n                b += color >> 16 & 0xff;\n                sumIndex += framebuffer.width;\n\n                sumIndex -= framebuffer.width * 2;\n                r *= scale; g *= scale; b *= scale;\n                this.tmp2[index] = r | g << 8 | b << 16 | 255 << 24;\n                index += framebuffer.width;\n            }\n            index += -(framebuffer.height - 2) * framebuffer.width + 1;\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.tmp2);\n    }\n\n}\n","import { Canvas } from '../../Canvas';\nimport { ToxicDotsScene } from './ToxicDotsScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new ToxicDotsScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["ScaleClipBlitter","framebuffer","constructor","drawScaledTextureClip","xp","yp","width","height","texture","alphaBlend","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","this","Math","max","alphaScale","index2","y","x","textureIndex","alpha","inverseAlpha","framebufferPixel","texturePixel","r","g","b","Color","a","static","toPackedFormat","sub","color","add","div","num","mul","CullFace","Vector4f","z","w","vec","cross","normalize","reci","length","sqrt","sub2","vec1","vec2","add2","scal","componentWiseMul","dot","cross2","normalize2","AbstractGeometricObject","mesh","inverse","buildMesh","points","index","normals","Array","i","normal","push","faces","n1","n2","n3","v1","v2","v3","transformedPoints","map","transformedNormals","getMesh","Vector3f","mult","scale","Torus","invert","super","STEPS2","frame","torusFunction","PI","frame2","up","right","pos","sin","cos","j","Vector2f","perp","Matrix4f","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","constructIdentityMatrix","matrix","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","scale1","scale2","scale3","inverseRotation","multiplyMatrix","getInverseRotation","getRotation","constructShadowMatrix","planePoint","planeNormal","lightPosition","d","NdotL","shadowMatrix","constructTranslationMatrix","tx","ty","tz","setTranslationMatrix","constructXRotationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","setRotationMatrix","c","s","vector","constructYRotationMatrix","constructZRotationMatrix","constructScaleMatrix","result","multiply2","matrix2","multiply","multiplyHom","multiplyHomArr","multiplyHomArr2","multiplyArr","Matrix3f","angle","xScale","yScale","zScale","Interpolator","interpolate","start","end","current","cosineInterpolate","y1","y2","mu","mu2","RandomNumberGenerator","seed","getFloat","setSeed","AbstractTriangleRasterizer","AbstractScannlineTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","projection","fillLongRightTriangle","fillLongLeftTriangle","FlatShadingTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","round","wStart","framebufferIndex","wBuffer","LineRasterizerDda","drawLineDDA","xDistance","yDistance","dx","dy","abs","sign","wDelta","drawPixel","LineRasterizerNoZ","drawLineDDANoZ","TexturedTriangleRasterizer","tslope1u","textureCoordinate","u","tslope1v","v","curu1","curv1","tslope2u","tslope2v","curu2","curv2","spanuStep","spanvStep","uStart","vStart","min","bob","color2","getBilinearFilteredPixelRasterizer","TexturedAlphaBlendingTriangleRasterizer","pipeline","currentColor","TextureCoordinate","Vertex","position","AbstractRenderingPipeline","NEAR_PLANE_Z","cullMode","BACK","setCullFace","face","setAlpha","isInFrontOfNearPlane","p","isTriangleCCW","DISABLED","det","isTriangleCCW2","v4","TexturingRenderingPipeline","sphereMapping","triangleRasterizer","vertexArray","setSphereMapping","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","draw","normalMatrix","normals2","points2","vertices","project2","fakeSphere","uv","clipConvexPolygon","zClipTriangle","t1","computeNearPlaneIntersection","ratio","vertex","subject","input","output","S","point","clipRegion","edge","isInside2","computeIntersection2","AbstractClipEdge","BottomClipEdge","isInside","minWindow","computeIntersection","factor","textCoord","computeIntersection3","CohenSutherlandLineClipper","cohenSutherlandLineClipper","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","maxWindow","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","LeftClipEdge","RightClipEdge","TopClipEdge","Texture","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","x1","y0","x0y0","x1y0","x0y1","x1y1","col1","floor","col2","getBilinearFilteredPixel2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","Framebuffer","camera","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","lineRasterizer","lineRasterizerNo","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","plane","cylinder2","linerClipper","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","setTexture","getImageData","data","set","clear","BLACK","count","clearColorBuffer","fill","drawPixel4","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","roundedY","percent","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","drawRect2","drawText","text","xpos","firstIndex","charCodeAt","drawTextureRectFastAlpha","addReflections","Date","now","drawTextureRect2","xs","ys","xt","yt","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","blend","c1","c2","nAlpha","nInvAlpha","addColor","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","rng","drawTexturedBillboard","drawParticle","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","textureRowOffset","framebufferRowOffset","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t2","project","t3","clearDepthBuffer","drawBox","wireFrameSphereClipping","sphereFunction2","modelViewMartrix","transformed","colred","colLine","wireFrameTerrain","heightmap","xOff","zOff","forEach","element","drawBoundingSphere","sphere","getRadius","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","dist2","atan2","color1","final","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","asin","fakeSphere2","tex","theta","phi","FullscreenUtils","toggleFullscreen","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","document","mozCancelFullScreen","webkitExitFullscreen","Canvas","scene","canvas","context","startTime","boundRenderLoop","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","AbstractScene","Promise","all","ToxicDotsScene","tmp","tmp2","blur","shadingTorus3","sumIndex","main"],"sourceRoot":""}