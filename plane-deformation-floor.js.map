{"version":3,"file":"plane-deformation-floor.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/examples/plane-deformation-floor/PlaneDeformationFloorScene.ts","webpack://aisa/./src/examples/plane-deformation/PlaneDeformationScene.ts","webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/plane-deformation-floor/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n        \n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n        \n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n        \n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { PlaneDeformationScene } from '../plane-deformation/PlaneDeformationScene';\nimport { FontRenderer } from '../sine-scroller/FontRenderer';\n\nexport class PlaneDeformationFloorScene extends AbstractScene {\n\n    private hoodlumLogo: Texture;\n    private fontRenderer2: FontRenderer;\n    private startTime: number = Date.now();\n    private PlaneDeformationFloorScene = new PlaneDeformationScene(8, require('../../assets/heightmap.png'));\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        const fonts2: string =\n            ' !\"    \\'  ' +\n            '  ,-. 0123' +\n            '456789:; =' +\n            ' ? ABCDEFG' +\n            'HIJKLMNOPQ' +\n            'RSTUVWXYZ ';\n        this.fontRenderer2 = new FontRenderer(\n            framebuffer,\n            32, 32, fonts2,\n            require('./../../assets/equinox.png')\n        );\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/tristar.png'), true).then(\n                (texture: Texture) => this.hoodlumLogo = texture\n            ),\n            this.fontRenderer2.init(),\n            this.PlaneDeformationFloorScene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlaneDeformationFloorScene.drawPlaneDeformation(framebuffer, time >> 3, 0);\n        this.fontRenderer2.drawText(framebuffer, 0, framebuffer.height - 32 - 16,\n            '              WELCOME TO A NEW RELEASE FROM YOUR FRIENDS IN CRIME! HOW DO YOU LIKE THIS INTRO?'\n            , (time - this.startTime) * 0.8, false);\n        framebuffer.drawTexture((framebuffer.width/2)-(this.hoodlumLogo.width / 2), ((framebuffer.height / 2) - (this.hoodlumLogo.height / 2)) | 0, this.hoodlumLogo, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\n\n/**\n * Plane deformation\n *\n * 2D plane deformations using lookup tables was a great\n * way to get smooth animations of complex calculations\n * running on slower processors. These effects were very\n * common in the 90s demoscene.\n *\n * The idea was to take a texture and deform it using a\n * pre-calculated math reference table. Different formulas\n * gave different effects such as fake 3d tunnels, wormholes\n * and landscapes.\n *\n * https://www.iquilezles.org/www/articles/deform/deform.htm\n *\n */\n\nexport class PlaneDeformationScene {\n\n    private mLUT: Int32Array;\n    public texture: Texture;\n\n    constructor(\n        private effectStyle: number,\n        private texturePath: string\n    ) {\n    }\n\n    onInit() { }\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.texturePath, false).then(\n                (texture: Texture) => {\n                    this.texture = texture;\n                    this.createLUT(this.effectStyle, framebuffer.width, framebuffer.height, this.texture.width, this.texture.height);\n                }\n            ),\n        ]);\n\n    }\n\n    // fill math lookup table values with crazy values\n    public createLUT(effectStyle: number, effectWidth: number, effectHeight: number, textureWidth: number, textureHeight: number): Promise<any> {\n\n        // initializae lookup array\n        this.mLUT = new Int32Array(3 * effectWidth * effectHeight);\n\n        // increment placeholder\n        let k = 0;\n\n        // u and v are euclidean coordinates\n        let u = 0;\n        let v = 0\n        let bright = 0;\n\n        for (let j = 0; j < effectHeight; j++) {\n            const y = -1.00 + 2.00 * j / effectHeight;\n            for (let i = 0; i < effectWidth; i++) {\n                const x = -1.00 + 2.00 * i / effectWidth;\n                const d = Math.sqrt(x * x + y * y);\n                const a = Math.atan2(y, x);\n\n                const r = d;\n                switch (effectStyle) {\n                    case 1:   // stereographic projection / anamorphosis\n                        u = Math.cos(a) / d;\n                        v = Math.sin(a) / d;\n                        bright = -50 * (2 / (6 * r + 3 * x));\n                        break;\n                    case 2:  // hypnotic rainbow spiral\n                        v = Math.sin(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        u = Math.cos(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        bright = 1;\n                        break;\n                    case 3:  // rotating tunnel\n                        v = 2 / (6 * r + 3 * x);\n                        u = a * 3 / Math.PI;\n                        bright = 25 * -v;\n                        break;\n                    case 4:  // wavy star-burst\n                        v = (-0.4 / r) + .1 * Math.sin(8 * a);\n                        u = .5 + .5 * a / Math.PI;\n                        bright = 0;\n                        break;\n                    case 5:  // hyper-space travel\n                        u = (0.02 * y + 0.03) * Math.cos(a * 3) / r;\n                        v = (0.02 * y + 0.03) * Math.sin(a * 3) / r;\n                        bright = 0;\n                        break;\n                    case 6:  // five point magnetic flare\n                        u = 1 / (r + 0.5 + 0.5 * Math.sin(5 * a));\n                        v = a * 3 / Math.PI;\n                        bright = 0;\n                        break;\n                    case 7:  // cloud like dream scroll\n                        u = 0.1 * x / (0.11 + r * 0.5);\n                        v = 0.1 * y / (0.11 + r * 0.5);\n                        bright = 0;\n                        break;\n                    case 8:  // floor and ceiling with fade to dark horizon\n                        u = x / Math.abs(y);\n                        v = 1 / Math.abs(y);\n                        bright = 40 * -v;\n                        break;\n                    case 9:  // hot magma liquid swirl\n                        u = 0.5 * (a) / Math.PI;\n                        v = Math.sin(2 * r);\n                        bright = 0;\n                        break;\n                    case 10:  // clockwise flush down the toilet\n                        v = Math.pow(r, 0.1);\n                        u = (1 * a / Math.PI) + r;\n                        bright = 0;\n                        break;\n                    case 11:  // 3D ball\n                        v = x * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        u = y * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        bright = 7 * -18.7 * (x + y + r * r - (x + y - 1) * Math.sqrt(4 - 5 * r * r) / 3) / (r * r + 1);\n                        break;\n                    default:  // show texture with no deformation or lighting\n                        u = x;\n                        v = y;\n                        bright = 0;\n                        break;\n                }\n                this.mLUT[k++] = (textureWidth * u) & textureWidth - 1;\n                this.mLUT[k++] = (textureHeight * v) & textureHeight - 1;\n                this.mLUT[k++] = Utils.clamp(bright, -255, 255);\n            }\n        }\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // this.drawOldPlaneDeformationStar(framebuffer, time >> 3);\n        // this.drawOldPlaneDeformationFloor(framebuffer, time >> 3);\n        this.drawPlaneDeformation(framebuffer, time >> 3, time >> 3);\n    }\n\n    /**\n     * For every frame, go through every pixel and use the reference table (mLUT)\n     * to get which pixel of the texture it should draw at the current pixel.\n     *\n     * TODO:\n     * - Rotate effect via rotozoomer class\n     *   use drawOldPlaneDeformationStar to add another lookup layer [mLUT * 4]\n     *   use drawOldPlaneDeformationFloor to update createLUT(8) floor algorithm\n     *\n     */\n    drawPlaneDeformation(framebuffer: Framebuffer, elapsedTimeY: number, elapsedTimeX: number) {\n\n        for (let pixelCount = 0; pixelCount < framebuffer.framebuffer.length; pixelCount++) {\n            const o = (pixelCount << 1) + pixelCount; // equivalent to 3 * pixelCount\n            const u = this.mLUT[o + 0] + elapsedTimeX; // to look like its animating, add timeDisplacement\n            const v = this.mLUT[o + 1] + elapsedTimeY;\n            const adjustBrightness = this.mLUT[o + 2]; // fade out\n\n            // get the R,G,B values from texture\n            let currentPixel = this.texture.texture[this.texture.width * (v & this.texture.height - 1) + (u & this.texture.width - 1)];\n\n            // only apply brightness if it was calculated\n            if (adjustBrightness !== 0) {\n\n                // disassemble pixel using bit mask to remove color components for greater speed\n                let r = currentPixel & 0xFF;        // get red\n                let g = currentPixel >> 8 & 0xFF;   // get green\n                let b = currentPixel >> 16 & 0xFF;  // get blue\n\n                // make darker or brighter\n                r += adjustBrightness;\n                g += adjustBrightness;\n                b += adjustBrightness;\n\n                // constrain RGB to make sure they are within 0-255 color range\n                r = Utils.clamp(r, 0, 255);\n                g = Utils.clamp(g, 0, 255);\n                b = Utils.clamp(b, 0, 255);\n\n                // reassemble colors back into pixel\n                currentPixel = new Color(r, g, b, 255).toPackedFormat();\n            }\n\n            // put texture pixel on buffer screen\n            framebuffer.framebuffer[pixelCount] = currentPixel;\n        }\n    }\n\n    /**\n     *\n     * Previous Plane deformation without lookup tables for reference\n     *\n     * http://sol.gfxile.net/gp/ch17.html\n     * TODO:\n     * - better textures\n     * - precalc lookup tables\n     * - fadeout\n     * - substraction to create black holes\n     */\n    drawOldPlaneDeformationFloor(framebuffer: Framebuffer, elapsedTime: number) {\n        /*\n        mLUT(8)\n            u = x / Math.abs(y);\n            v = 1 / Math.abs(y);\n            bright = 10 * -v;\n        */\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            const ydist = (y - framebuffer.height / 2);\n            const v = (((1 / Math.abs(ydist / 100 * 0.02) + elapsedTime * 0.069) % 256) + 256) % 256;\n            const alpha = 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2));\n                const u = (((((xdist / framebuffer.width) / Math.abs(ydist / 100 * 0.02))) % 256) + 256) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawOldPlaneDeformationStar(framebuffer: Framebuffer, elapsedTime: number) {\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2)) / (framebuffer.width / 2);\n                const ydist = (y - framebuffer.height / 2) / (framebuffer.height / 2);\n                const alpha = 1;// 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n                const a = Math.atan2(ydist, xdist) + elapsedTime * 0.0004;\n                const v = (a * 3 / Math.PI + elapsedTime * 0.0004) * 128 % 256;\n                const d = Math.sqrt(xdist * xdist + ydist * ydist);\n                const u = (1 / (d + 0.5 + 0.5 * Math.sin(5 * a)) * 32 + elapsedTime * 0.03) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { PlaneDeformationFloorScene } from './PlaneDeformationFloorScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new PlaneDeformationFloorScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","Utils","input","value","istart","istop","ostart","ostop","random","srcPosition","dst","dstPosition","slice","prototype","splice","apply","concat","fade","t","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","y0","y2","y3","mu","mu2","a0","PlaneDeformationFloorScene","AbstractScene","hoodlumLogo","fontRenderer2","PlaneDeformationScene","FontRenderer","Promise","all","TextureUtils","load","effectStyle","texturePath","mLUT","createLUT","effectWidth","effectHeight","textureWidth","textureHeight","Int32Array","bright","d","pow","clamp","elapsedTimeY","elapsedTimeX","pixelCount","o","adjustBrightness","currentPixel","drawOldPlaneDeformationFloor","drawOldPlaneDeformationStar","file","fontTexture","charToIndex","fonts","Map","addCharInex","draw","drawText2","xFonts","asciiCode","has","get","sine","textOff","startW","endW","yDisp","char","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","cross","normalize","faces","n1","n2","n3","transformedPoints","map","transformedNormals","getMesh","AbstractGeometricObject","invert","super","frame","frame2","up","right","current","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","sphereMapping","vertexArray","Vertex","setSphereMapping","arg0","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","normalMatrix","normals2","vertices","project2","uv","clipConvexPolygon","zClipTriangle","computeNearPlaneIntersection2","subject","output","S","point","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","maxWidth","maxHeight","setClamp","getPixel","getBilinearFilteredPixel","x0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","window","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}