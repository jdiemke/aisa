{"version":3,"file":"blender-camera.js","mappings":"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","sources":["webpack://aisa/./src/assets/camera-path.jsx","webpack://aisa/./src/assets/font.png","webpack://aisa/./src/assets/monkey.obj","webpack://aisa/./src/assets/skybox/skybox_back.png","webpack://aisa/./src/assets/skybox/skybox_down.png","webpack://aisa/./src/assets/skybox/skybox_front.png","webpack://aisa/./src/assets/skybox/skybox_left.png","webpack://aisa/./src/assets/skybox/skybox_right.png","webpack://aisa/./src/assets/skybox/skybox_up.png","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/SkyBox.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/animation/BlenderCameraAnimator.ts","webpack://aisa/./src/animation/CameraKeyFrame.ts","webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/blender/face.ts","webpack://aisa/./src/blender/mesh.ts","webpack://aisa/./src/blender/parseUtils.ts","webpack://aisa/./src/blender/tex-coord.ts","webpack://aisa/./src/blender/vector.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/CameraFrame.ts","webpack://aisa/./src/camera/CameraLoader.ts","webpack://aisa/./src/camera/CameraPath.ts","webpack://aisa/./src/camera/EulerAngleCamera.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/examples/blender-camera-animation/WavefrontScene.ts","webpack://aisa/./src/examples/md2/ModelViewMatrix.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/wavefront-obj/WavefrontLoader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/blender-camera-animation/Application.ts"],"sourcesContent":["export default __webpack_public_path__ + \"63bc9d90c462bcc100459f7d44dab7e2.jsx\";","export default __webpack_public_path__ + \"aa2528d7a8a813247c2d2b90b028e437.png\";","export default __webpack_public_path__ + \"9f414e332643b34517d7742639d22b0a.obj\";","export default __webpack_public_path__ + \"29fc676286325d45f7deef5e593b6da6.png\";","export default __webpack_public_path__ + \"fe1ca8bac15e02a2d14cf9d558c69def.png\";","export default __webpack_public_path__ + \"780c7edd8a9410b8261fdb12d9d6191d.png\";","export default __webpack_public_path__ + \"c83bb5502d841707edd4423f41ebcca0.png\";","export default __webpack_public_path__ + \"8f18731da1a9e273cf0432f3b1c862f1.png\";","export default __webpack_public_path__ + \"5cf778e15448cf90b764416629d74108.png\";","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n     \n         //this.cylinder = this.createCylinder();\n       \n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array) {\n        src.set(dest);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n   \n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    \n    /*\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n*/\n   /*\n\n*/\n    \n   \n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n     /*\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { Matrix4f, Vector4f } from './math';\nimport { Texture, TextureUtils } from './texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { TexturedMesh } from './rendering-pipelines/TexturedMesh';\n\nexport class SkyBox {\n\n    private back: Texture;\n    private down: Texture;\n    private front: Texture;\n    private left: Texture;\n    private right: Texture;\n    private up: Texture;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline = new TexturingRenderingPipeline(null);\n    public init(): Promise<any> {\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/skybox/skybox_back.png'), false).then(\n                (texture: Texture) => this.back = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_down.png'), false).then(\n                (texture: Texture) => this.down = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_front.png'), false).then(\n                (texture: Texture) => this.front = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_left.png'), false).then(\n                (texture: Texture) => this.left = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_right.png'), false).then(\n                (texture: Texture) => this.right = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_up.png'), false).then(\n                (texture: Texture) => this.up = texture\n            )]).then(() => {\n                this.back.setClamp(true);\n                this.down.setClamp(true);\n                this.front.setClamp(true);\n                this.left.setClamp(true);\n                this.right.setClamp(true);\n                this.up.setClamp(true);\n            });\n    }\n\n    // move code from framebuffer into draw method!\n    public draw(framebuffer: Framebuffer, mv: Matrix4f): void {\n    \n        this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n        this.drawSkyBox(framebuffer, mv.getRotation());\n    }\n\n    public drawSkyBox(framebuffer: Framebuffer, rotation: Matrix4f): void {\n        const sclae = 20;\n        const textures = [\n            this.back,\n            this.left,\n            this.front,\n            this.right\n        ];\n\n        let camera: Matrix4f;\n        let mv: Matrix4f;\n        let skyBoxSideModel: TexturedMesh;\n\n        const skyPoints = [\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, -1, -1, 1)\n        ];\n\n        for (let i = 0; i < 4; i++) {\n            camera =\n                rotation.multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI).multiplyMatrix(\n                        Matrix4f.constructYRotationMatrix(+ Math.PI * 2 / 4 * i)));\n\n\n            mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n\n            // skybox: starz\n            skyBoxSideModel = {\n                points: skyPoints,\n                points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n                uv: [\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                ],\n                faces: [\n                    {\n                        vertices: [0, 1, 2],\n                        uv: [0, 1, 2]\n                    },\n                    {\n                        vertices: [3, 4, 5],\n                        uv: [3, 4, 5]\n                    }\n                ]\n            };\n\n            framebuffer.setTexture(textures[i]);\n            this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n            this.texturedRenderingPipeline.setModelViewMatrix(mv);\n            this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n        }\n\n        camera = rotation.multiplyMatrix(\n            Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(0)\n                    .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 4 * 1).multiplyMatrix(Matrix4f.constructXRotationMatrix(-Math.PI * 2 / 4)))\n            );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.up);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n\n        camera =\n            rotation.multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(0)\n                        .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 2).multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI * 2 / 4)))\n\n                );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.down);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { EulerAngleCamera } from '../camera/EulerAngleCamera';\nimport { Utils } from '../core/Utils';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector3f } from '../math/Vector3f';\nimport { CameraKeyFrame } from './CameraKeyFrame';\n\nexport class BlenderCameraAnimator {\n\n    public pos: Vector3f;\n    private keyFrames: Array<CameraKeyFrame>;\n\n    // TODO:\n    // - should we really loop or better restart??\n    // - dont use linear interpolation see bourke\n    // - maybe quaternions and slerp for rotation\n    // temp solution: no linear for\n\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getViewMatrix(elapsedTime: number): Matrix4f {\n        const keyFrameDuration = 2600;\n\n        elapsedTime *= 1.0;\n\n        const first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        const zero = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        const second = (first + 1) % this.keyFrames.length;\n        const third = (first + 2) % this.keyFrames.length;\n        const fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        const mu2 = (1 - Math.cos(fraction * Math.PI)) / 2;\n        const position = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].position.x, this.keyFrames[first].position.x, this.keyFrames[second].position.x, this.keyFrames[third].position.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.y, this.keyFrames[first].position.y, this.keyFrames[second].position.y, this.keyFrames[third].position.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.z, this.keyFrames[first].position.z, this.keyFrames[second].position.z, this.keyFrames[third].position.z, fraction)\n        );\n        let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\n\n        look = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.x, this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x, this.keyFrames[third].rotation.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.y, this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y, this.keyFrames[third].rotation.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.z, this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z, this.keyFrames[third].rotation.z, fraction)\n        );\n        this.pos = position;\n\n        return new EulerAngleCamera(position, look.x, look.y, look.z).getViewMatrix();\n    }\n\n}\n\n","import { Vector3f } from '../math';\n\nexport class CameraKeyFrame {\n\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(position: Vector3f, rotation: Vector3f) {\n        this.position = position;\n        this.rotation = rotation;\n    }\n\n}","import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Face {\n    public vertices: Array<number>;\n    public normals: Array<number>;\n    public uv: Array<number>;\n}\n","import { Face } from './face';\nimport { TexCoord } from './tex-coord';\nimport { Vector } from './vector';\n\nexport class Mesh {\n\n    public name: string;\n    public vertices: Array<Vector>;\n    public normals: Array<Vector>;\n    public uv: Array<TexCoord>;\n    public faces: Array<Face>;\n\n}\n","import { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexCoord } from './tex-coord';\nimport { Face } from './face';\n\nexport function convertToMeshArray(data: string): Array<Mesh> {\n    const json: Array<Mesh> = new Array<Mesh>();\n\n    let currentObject: Mesh = null;\n\n    let normalCount: number = 0;\n    let vertexCount: number = 0;\n    let uvCount: number = 0;\n    let normalOffset: number = 0;\n    let vertexOffset: number = 0;\n    let uvOffset: number = 0;\n\n    data.toString().split('\\n').forEach((line: string) => {\n\n        if (line.startsWith('o ')) {\n            const coords: Array<string> = line.split(' ');\n\n            currentObject = new Mesh();\n            currentObject.name = coords[1];\n            currentObject.normals = [];\n            currentObject.vertices = [];\n            currentObject.faces = [];\n            currentObject.uv = []; // OPTIONAL\n\n            json.push(currentObject);\n            normalOffset = normalCount;\n            vertexOffset = vertexCount;\n            uvOffset = uvCount;\n        }\n\n        if (currentObject === null &&\n            (line.startsWith('v ') ||\n                line.startsWith('vn ') ||\n                line.startsWith('vt '))) {\n            console.error('Error: OBJ file does not contain Objects.');\n            throw Error();\n        }\n\n        if (line.startsWith('v ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const vertex: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.vertices.push(vertex);\n            vertexCount++;\n        }\n\n        if (line.startsWith('vn ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const normal: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.normals.push(normal);\n            normalCount++;\n        }\n\n        if (line.startsWith('vt ')) { // OPTIONAL\n            const coords: Array<string> = line.split(' ');\n\n            const uv: TexCoord = new TexCoord(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2])\n            );\n\n            currentObject.uv.push(uv);\n            uvCount++;\n        }\n\n        if (line.startsWith('f ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const face: Face = new Face();\n            face.vertices = [];\n            face.normals = [];\n            face.uv = [];\n\n            // vertex indices\n            face.vertices.push(Number(coords[1].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[2].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[3].split('/')[0]) - 1 - vertexOffset);\n\n            // uv indices OPTIONAL!\n            face.uv.push(Number(coords[1].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[2].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[3].split('/')[1]) - 1 - uvOffset);\n\n            // normal indices\n            face.normals.push(Number(coords[1].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[2].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[3].split('/')[2]) - 1 - normalOffset);\n\n            currentObject.faces.push(face);\n        }\n    });\n\n    return json;\n}\n","\nexport class TexCoord {\n\n    public u: number;\n    public v: number;\n\n    public constructor(u: number, v: number) {\n        this.u = u;\n        this.v = v;\n    }\n\n}\n","export class Vector {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\n\nexport class CameraFrame {\n    public frame: number;\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(frame: number, position: Vector3f, rotation: Vector3f) {\n        this.frame = frame;\n        this.position = position;\n        this.rotation = rotation;\n    }\n}\n","import { CameraKeyFrame } from '../animation/CameraKeyFrame';\nimport { Vector3f } from '../math';\nimport { CameraPath } from './CameraPath';\nimport { CameraFrame } from './CameraFrame';\n\nexport class CameraLoader {\n\n    public static load(filename: string): Promise<Array<CameraKeyFrame>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<CameraKeyFrame> => {\n\n            const json: any = JSON.parse(text);\n            const cameraPath: CameraPath = new CameraPath();\n            const keys = new Array<CameraKeyFrame>();\n\n            for (let i = 0; i < json.length; i++) {\n                const frame = json[i];\n\n                const myFrame = new CameraFrame(\n                    frame.frame,\n                    new Vector3f(\n                        frame.location[0],\n                        frame.location[1],\n                        frame.location[2]\n                    ),\n                    new Vector3f(\n                        frame.rotation[0],\n                        frame.rotation[1],\n                        frame.rotation[2]\n                    ));\n\n                cameraPath.frames.push(myFrame);\n                keys.push(new CameraKeyFrame(new Vector3f(\n                    frame.location[0],\n                    frame.location[2],\n                    -frame.location[1]\n                ),\n                    new Vector3f(\n                        frame.rotation[0] - 90 * 0.0174533,\n                        frame.rotation[2],\n                        frame.rotation[1]\n                    )));\n\n            }\n\n            return keys;\n        });\n    }\n\n}\n","import { CameraFrame } from './CameraFrame';\n\nexport class CameraPath {\n    public frames: Array<CameraFrame>;\n    constructor() {\n        this.frames = new Array<CameraFrame>();\n    }\n}\n\n","import { Matrix4f, Vector3f } from '../math';\n\nexport class EulerAngleCamera {\n\n    protected position: Vector3f;\n    protected rx: number;\n    protected ry: number;\n    protected rz: number;\n\n    constructor(position: Vector3f, rx: number, ry: number, rz: number) {\n        this.position = position;\n        this.rx = rx;\n        this.ry = ry;\n        this.rz = rz;\n    }\n\n    public getViewMatrix(): Matrix4f {\n        const rz = Matrix4f.constructZRotationMatrix(-this.rz);\n        const rx = Matrix4f.constructXRotationMatrix(-this.rx);\n        const ry = Matrix4f.constructYRotationMatrix(-this.ry);\n\n        const translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\n\n        return rx.multiplyMatrix(ry).multiplyMatrix(rz).multiplyMatrix(translation);\n    }\n\n    public getPosition(): Vector3f {\n        return this.position;\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { CameraKeyFrame } from '../../animation/CameraKeyFrame';\nimport { CameraLoader } from '../../camera/CameraLoader';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { WavefrontLoader } from '../../model/wavefront-obj/WavefrontLoader';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { PointLight } from '../../shading/light/PointLight';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { ModelViewMatrix } from '../md2/ModelViewMatrix';\n\nimport CameraPathFile from '../../assets/camera-path.jsx';\nimport { BlenderCameraAnimator } from '../../animation/BlenderCameraAnimator';\nimport { SkyBox } from '../../SkyBox';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class BlenderCameraScene extends AbstractScene {\n\n    private static readonly CLEAR_COLOR: number = Color.ORANGE.toPackedFormat();\n\n    private texture4: Texture;\n    private startTime: number;\n\n    private modelViewMatrix: ModelViewMatrix = new ModelViewMatrix();\n\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private meshes: Array<FlatshadedMesh>;\n    private path: Array<CameraKeyFrame>;\n    private skyBox: SkyBox;\n\n    private light1: PointLight;\n    private light2: PointLight;\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.light1 = new PointLight();\n        this.light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        this.light1.diffuseIntensity = new Vector4f(1, 0.0, 1, 1);\n        this.light1.specularIntensity = new Vector4f(0.5, 0.5, 0.7, 1);\n        this.light1.position = new Vector4f(0, -10, -1, 1);\n\n        this.light2 = new PointLight();\n        this.light2.ambientIntensity = new Vector4f(0.5, 0.5, 1, 1);\n        this.light2.diffuseIntensity = new Vector4f(0.3, 0.3, 1, 1);\n        this.light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        this.light2.position = new Vector4f(3, 0, -2, 1);\n\n        this.renderingPipeline.setLights([this.light1, this.light2]);\n\n        this.skyBox = new SkyBox();\n        this.startTime = Date.now();\n        return Promise.all([\n            this.skyBox.init(),\n            WavefrontLoader.load(require('../../assets/monkey.obj')).then(\n                (value: Array<FlatshadedMesh>) => this.meshes = value\n            ),\n            CameraLoader.load(CameraPathFile).then(\n                (value: Array<CameraKeyFrame>) => this.path = value\n            ),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, timeInput: number): void {\n        const currentTime: number = Date.now();\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n        this.renderingPipeline.setLights([this.light1, this.light2]);\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        const cameraAnimator = new BlenderCameraAnimator();\n        cameraAnimator.setKeyFrames(this.path);\n\n        const modelViewMartrix: Matrix4f = cameraAnimator.getViewMatrix(timeInput);\n\n        // framebuffer.clearColorBuffer(WavefrontScene.CLEAR_COLOR);\n        this.skyBox.draw(framebuffer, modelViewMartrix);\n        framebuffer.clearDepthBuffer();\n\n        this.computeCameraMovement();\n\n\n\n        // TODO: move loop into render pipeline\n        // TODO: use frame position for interpolation speed\n        let faces: number = 0;\n        for (let j = 0; j < this.meshes.length; j++) {\n            this.renderingPipeline.draw(framebuffer, this.meshes[j], modelViewMartrix);\n            faces += this.meshes[j].faces.length;\n        }\n\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n        framebuffer.drawText(8, 16, 'FACES: ' + faces, this.texture4);\n    }\n\n    private computeCameraMovement(): void {\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.trans(0, 0, -15);\n\n    }\n\n}\n","import { Matrix4f } from '../../math/index';\n\n/**\n * The primary purpose of the model view matrix class is to reduce\n * the instanciation of temporary matrix classes by reusing existing instances.\n */\nexport class ModelViewMatrix {\n\n    private currtentMatrix: Matrix4f;\n    private tempMatrix: Matrix4f;\n    private temp: Matrix4f;\n    private transformation: Matrix4f;\n\n    public constructor() {\n        this.currtentMatrix = new Matrix4f();\n        this.tempMatrix = new Matrix4f();\n        this.temp = new Matrix4f();\n        this.transformation = new Matrix4f();\n    }\n\n    public getMatrix(): Matrix4f {\n        return this.currtentMatrix;\n    }\n\n    public setIdentity(): void {\n        this.currtentMatrix.setIdentityMatrix();\n    }\n\n    public multMatrix(mat: Matrix4f): void {\n        this.currtentMatrix = this.currtentMatrix.multiplyMatrix(mat);\n    }\n\n    public trans(x: number, y: number, z: number): void {\n        this.transformation.setTranslationMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public scal(x: number, y: number, z: number): void {\n        this.transformation.setScaleMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public xRotate(x: number): void {\n        this.transformation.setXRotationMatrix(x);\n        this.applyMat();\n    }\n    public yRotate(x: number): void {\n        this.transformation.setYRotationMatrix(x);\n        this.applyMat();\n    }\n\n    private applyMat(): void {\n\n        this.tempMatrix.multiply2(this.currtentMatrix, this.transformation);\n        // switch back and front\n        this.temp = this.currtentMatrix;\n        this.currtentMatrix = this.tempMatrix;\n        this.tempMatrix = this.temp;\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Mesh } from '../../blender/mesh';\nimport { convertToMeshArray } from '../../blender/parseUtils';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class WavefrontLoader {\n\n    public static load(filename: any): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename.default).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: any): Promise<Array<TexturedMesh>> {\n        return fetch(filename.default).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.getBlenderScene(meshes);\n        });\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { \n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n       \n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                    \n                \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                   \n                   \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n                /*\n                                const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n                                    v.projection = this.project(v.position);\n                                    return v;\n                                });*/\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n                  \n\n                    this.clipConvexPolygon2(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // TODO: remove temp object here\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.projection = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].projection, projected[1].projection, projected[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon2(framebuffer, projected);\n    }\n\n\n    public clipConvexPolygon2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename.default;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { BlenderCameraScene } from './WavefrontScene';\n\nclass Application {\n\n    public main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new BlenderCameraScene());\n        canvas.init();\n    }\n\n}\n\nnew Application().main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","end","current","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawParticleWaves","noClear","num","cos","forEach","multiply","sort","a","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","y2","mu","mu2","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","sub","temp","theta","phi","Vector4f","seed","back","down","front","left","right","up","Promise","all","TextureUtils","load","setClamp","draw","mv","setFramebuffer","drawSkyBox","getRotation","rotation","sclae","textures","skyBoxSideModel","skyPoints","map","uv","TextureCoordinate","faces","vertices","setModelViewMatrix","position","projection","keyFrames","setKeyFrames","getViewMatrix","first","zero","second","third","fraction","Utils","CubicInterpolate","look","EulerAngleCamera","blenderScene","invert","object","normals","normalize","f","n1","n2","n3","obj","transformedNormals","transformedPoints","file","disp","coords","ComputationalGeometryUtils","computeBoundingSphere","normals2","boundingSphere","name","json","currentObject","normalCount","vertexCount","uvCount","normalOffset","vertexOffset","uvOffset","toString","split","line","startsWith","Mesh","console","error","Error","Vector","Number","parseFloat","TexCoord","Face","drawScaledTextureClip","frame","filename","fetch","response","JSON","parse","cameraPath","CameraPath","keys","myFrame","CameraFrame","location","frames","CameraKeyFrame","rx","ry","rz","constructZRotationMatrix","translation","getPosition","input","value","istart","istop","ostart","ostop","random","srcPosition","dst","dstPosition","slice","prototype","splice","apply","concat","fade","t","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","y0","y3","a0","BlenderCameraScene","AbstractScene","ORANGE","texture4","modelViewMatrix","ModelViewMatrix","fpsStartTime","fpsCount","fps","meshes","path","skyBox","light1","light2","renderingPipeline","GouraudShadingRenderingPipeline","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","setLights","SkyBox","WavefrontLoader","CameraLoader","timeInput","currentTime","cameraAnimator","BlenderCameraAnimator","computeCameraMovement","setIdentity","trans","currtentMatrix","tempMatrix","transformation","getMatrix","setIdentityMatrix","multMatrix","mat","setTranslationMatrix","applyMat","scal","setScaleMatrix","xRotate","setXRotationMatrix","yRotate","setYRotationMatrix","multiply2","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","cross","getMesh","AbstractGeometricObject","super","frame2","Sphere","center","radius","point","Matrix3f","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","sx","sy","sz","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","isInsidePositiveHalfSpace","getNormal","getDistance","getTran","perp","vec","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","default","convertToMeshArray","BlenderJsonParser","getBlenderScene","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","distance","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","Material","ambientColor","diffuseColor","specularColor","shininess","setFog","enableLighting","enable","setMaterial","setColor","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","S","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","enableAlphaBlending","disableAlphaBlending","drawMeshArray","model","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","getPixel","getBilinearFilteredPixel","x0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","definition","key","o","Object","defineProperty","enumerable","get","globalThis","Function","e","window","prop","hasOwnProperty","call","Symbol","toStringTag","scriptUrl","importScripts","currentScript","scripts","getElementsByTagName","replace","main","Canvas"],"sourceRoot":""}