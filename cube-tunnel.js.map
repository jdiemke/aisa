{"version":3,"file":"cube-tunnel.js","mappings":"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","sources":["webpack://aisa/./src/default-style.css","webpack://aisa/./node_modules/css-loader/dist/runtime/api.js","webpack://aisa/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://aisa/./src/default-style.css?9c7b","webpack://aisa/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://aisa/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/cube-tunnel/CubeTunnelScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/compat get default export","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/nonce","webpack://aisa/./src/examples/cube-tunnel/Application.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n    background-color: #000;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/default-style.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,sBAAsB;AAC1B\",\"sourcesContent\":[\"body {\\n    background-color: #000;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector4f } from '../../math';\nimport { Material } from '../../shading/material/Material';\nimport { PointLight } from '../../shading/light/PointLight';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class CubeTunnelScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.DARK_GRAY.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(0, 0, -10, 1);\n\n        this.renderingPipeline.setLights([light1]);\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.renderingPipeline.setMaterial(mat);\n\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        //   framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.clearColorBuffer(CubeTunnelScene.BACKGROUND_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        const xSteps = 40;\n        const rot = 25;\n        const rand = new RandomNumberGenerator();\n        rand.setSeed(22);\n\n        for (let x = 0; x < xSteps; x++) {\n            const rotSpeed = rand.getFloat() * 0.3 + 0.2;\n            for (let z = 0; z < rot; z++) {\n\n                const scale = rand.getFloat() * 2.3 + 0.7 + 0.2 * (Math.sin(time * 0.0044 + rand.getFloat() * 3));\n                const size = (xSteps - 1) * 0.7;\n                const mat =\n                    Matrix4f.constructXRotationMatrix(0.2 * Math.sin(time * 0.00044)).multiplyMatrix(\n                        Matrix4f.constructYRotationMatrix(0.2 * Math.sin(time * 0.0004)).multiplyMatrix(\n                            Matrix4f.constructTranslationMatrix(0, 0,\n                                -20 - ((x * 0.7 + time * 0.002) % size) + size\n                            ).multiplyMatrix(\n\n                                Matrix4f.constructZRotationMatrix(Math.PI * 2 / rot * z + time * rotSpeed * 0.002 + x * 0.2).multiplyMatrix(\n                                    Matrix4f.constructTranslationMatrix(+ 3, 0, 0)\n                                        .multiplyMatrix(\n                                            Matrix4f.constructScaleMatrix(scale, 0.5, 0.5)))))); // .multiplyMatrix(\n                //       Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                //           Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n\n                this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), mat);\n            }\n\n        }\n\n\n        // const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        //  framebuffer.drawTextureFullscreen(texture3, 0.75);\n        //  framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n    }\n\n\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nc = undefined;","import { Canvas } from '../../Canvas';\nimport { CubeTunnelScene } from './CubeTunnelScene';\n\nimport './../../default-style.css';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new CubeTunnelScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","attributes","styleElement","nonce","setAttribute","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","set","clear","color","Color","BLACK","toPackedFormat","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","CubeTunnelScene","AbstractScene","DARK_GRAY","renderingPipeline","cubeMesh","Cube","accumulationBuffer","GouraudShadingRenderingPipeline","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","setLights","mat","Material","ambientColor","diffuseColor","specularColor","shininess","setMaterial","Promise","all","BACKGROUND_COLOR","rand","rotSpeed","constructZRotationMatrix","draw","getMesh","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","cross","normalize","faces","n1","n2","n3","transformedPoints","transformedNormals","AbstractGeometricObject","super","invert","frame","frame2","up","right","current","y2","mu","mu2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","distance","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light2","setFramebuffer","setFog","enableLighting","enable","setColor","drawMeshArray","meshes","model","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","point","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","normals2","vertices","uv","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","definition","key","o","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","nc","Canvas","main"],"sourceRoot":""}