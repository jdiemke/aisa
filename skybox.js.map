{"version":3,"file":"skybox.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/SkyBox.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/environment-mapping-torus/EnvironmentMappingTorusScene.ts","webpack://aisa/./src/examples/skybox/MetalHeadzScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturedMesh.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/special-effects/LensFlare.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/skybox/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { Matrix4f, Vector4f } from './math';\nimport { Texture, TextureUtils } from './texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { TexturedMesh } from './rendering-pipelines/TexturedMesh';\n\nexport class SkyBox {\n\n    private back: Texture;\n    private down: Texture;\n    private front: Texture;\n    private left: Texture;\n    private right: Texture;\n    private up: Texture;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline = new TexturingRenderingPipeline(null);\n    public init(): Promise<any> {\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/skybox/skybox_back.png'), false).then(\n                (texture: Texture) => this.back = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_down.png'), false).then(\n                (texture: Texture) => this.down = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_front.png'), false).then(\n                (texture: Texture) => this.front = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_left.png'), false).then(\n                (texture: Texture) => this.left = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_right.png'), false).then(\n                (texture: Texture) => this.right = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_up.png'), false).then(\n                (texture: Texture) => this.up = texture\n            )]).then(() => {\n                this.back.setClamp(true);\n                this.down.setClamp(true);\n                this.front.setClamp(true);\n                this.left.setClamp(true);\n                this.right.setClamp(true);\n                this.up.setClamp(true);\n            });\n    }\n\n    // move code from framebuffer into draw method!\n    public draw(framebuffer: Framebuffer, mv: Matrix4f): void {\n    \n        this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n        this.drawSkyBox(framebuffer, mv.getRotation());\n    }\n\n    public drawSkyBox(framebuffer: Framebuffer, rotation: Matrix4f): void {\n        const sclae = 20;\n        const textures = [\n            this.back,\n            this.left,\n            this.front,\n            this.right\n        ];\n\n        let camera: Matrix4f;\n        let mv: Matrix4f;\n        let skyBoxSideModel: TexturedMesh;\n\n        const skyPoints = [\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, -1, -1, 1)\n        ];\n\n        for (let i = 0; i < 4; i++) {\n            camera =\n                rotation.multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI).multiplyMatrix(\n                        Matrix4f.constructYRotationMatrix(+ Math.PI * 2 / 4 * i)));\n\n\n            mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n\n            // skybox: starz\n            skyBoxSideModel = {\n                points: skyPoints,\n                points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n                uv: [\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                ],\n                faces: [\n                    {\n                        vertices: [0, 1, 2],\n                        uv: [0, 1, 2]\n                    },\n                    {\n                        vertices: [3, 4, 5],\n                        uv: [3, 4, 5]\n                    }\n                ]\n            };\n\n            framebuffer.setTexture(textures[i]);\n            this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n            this.texturedRenderingPipeline.setModelViewMatrix(mv);\n            this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n        }\n\n        camera = rotation.multiplyMatrix(\n            Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(0)\n                    .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 4 * 1).multiplyMatrix(Matrix4f.constructXRotationMatrix(-Math.PI * 2 / 4)))\n            );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.up);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n\n        camera =\n            rotation.multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(0)\n                        .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 2).multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI * 2 / 4)))\n\n                );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.down);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f, Vector4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { Vertex } from '../../Vertex';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\ninterface IndexMesh {\n    points: Array<Vector4f>,\n    points2: Array<Vector4f>,\n    normals: Array<Vector4f>,\n    normals2: Array<Vector4f>,\n    index: Array<number>\n}\n\nexport class EnvironmentMappingScene extends AbstractScene {\n\n    private flood: Texture;\n    public env: Texture;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n    private mesh: TexturedMesh ;\n    points: Array<Vector4f> = [];\n    textCoords: Array<TextureCoordinate> = [];\n    index: Array<number> = [];\n    normals: Array<Vector4f> = new Array<Vector4f>();\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.buildTorusMesh();\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/flood.png'), false).then(\n                texture => this.flood = texture\n            ),\n            TextureUtils.load(require('../../assets/envmap.png'), false).then(\n                texture => this.env = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.setCullFace(CullFace.FRONT);\n        framebuffer.clearColorBuffer(Color.BLACK.toPackedFormat());\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.flood.texture);\n        framebuffer.setTexture(this.env);\n\n        let scale = 2.1;\n        const elapsedTime =  time * 0.008;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.09) * 10+20, Math.sin(elapsedTime * 0.1) * 10\n            , -85)\n            .multiplyMatrix(modelViewMartrix);\n\n            framebuffer.wBuffer.fill(100);\n           \n        this.shadingTorusENvironment(framebuffer,modelViewMartrix);\n     \n    }\n\n    private buildTorusMesh(): void {\n        const STEPS = 35 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n        const frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.01);\n            const tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize();\n            const right = tangent.cross(up).normalize().mul(4.4);\n            up = right.cross(tangent).normalize().mul(4.4);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                this.points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                this.normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                this.textCoords.push(t);\n            }\n        }\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                this.index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                this.index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                this.index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                this.index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                this.index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                this.index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n    \n      this.mesh = new TexturedMesh();\n      this.mesh.points = this.points;\n      this.mesh.normals = this.normals;\n      this.mesh.normals2 = this.normals.map(() => new Vector4f(0,0,0));\n      this.mesh.points2 = this.points.map(() => new Vector4f(0,0,0));\n      this.mesh.uv = this.points.map(() => new TextureCoordinate());\n     let faces = [];\n      for (let i = 0; i < this.index.length; i += 3) {\n\n\n\n\n        let face = {\n            vertices: [this.index[i], this.index[i+1], this.index[i+2]],\n            uv: null,\n            normals: [this.index[i], this.index[i+1], this.index[i+2]]\n        };\n        faces.push(face);\n      }\n      this.mesh.faces = faces;\n    }\n\n    private torusFunction3(alpha: number): Vector3f {\n        const p = 2\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector3f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(10);\n    }\n\n\n    public shadingTorusENvironment(framebuffer: Framebuffer,modelViewMartrix: Matrix4f): void {\n   \n      \n\n        \n        this.texturedRenderingPipeline.setSphereMapping(true);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.texturedRenderingPipeline.setModelViewMatrix(modelViewMartrix);\n       this.texturedRenderingPipeline.draw(framebuffer, this.mesh);\n    }\n\n\n}","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture, TextureUtils } from '../../texture';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { EnvironmentMappingScene } from '../environment-mapping-torus/EnvironmentMappingTorusScene';\nimport { LensFlare } from '../../special-effects/LensFlare';\n\nexport class MetalHeadzScene extends AbstractScene {\n\n    private metalheadz: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private noise: Texture;\n    private dirt: Texture;\n    private skyBox: SkyBox;\n\n    private torus: EnvironmentMappingScene;\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n        // TODO:\n        // make classes for assets\n        // lens flare, 3d modell\n        this.torus = new EnvironmentMappingScene();\n        return Promise.all([\n            this.skyBox.init(),\n            this.torus.init(framebuffer),\n\n            TextureUtils.load(require('../../assets/metalheadz.png'), false).then(\n                (texture: Texture) => this.metalheadz = texture\n            ),\n            TextureUtils.load(require('../../assets/ring.png'), true).then(\n                (texture: Texture) => this.texture11 = texture\n            ),\n            TextureUtils.load(require('../../assets/bokeh.png'), true).then(\n                (texture: Texture) => this.texture13 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n            TextureUtils.load(require('../../assets/dirt.png'), true).then(\n                (texture: Texture) => this.dirt = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        const elapsedTime: number = 0.4 * time;\n\n        framebuffer.clearDepthBuffer();\n        const camera: Matrix4f = this.computeCameraMovement(elapsedTime);\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(4, 4, 4));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.metalheadz);\n        framebuffer.setCullFace(CullFace.FRONT);\n\n        framebuffer.setTexture(this.torus.env);\n        this.torus.shadingTorusENvironment(framebuffer, mv);\n\n        this.drawLensFlare(framebuffer, camera, elapsedTime);\n        this.drawMotionBlur(framebuffer, time);\n       // framebuffer.noise(time, this.noise);\n    }\n\n    private drawLensFlare(framebuffer: Framebuffer, camera: Matrix4f, elapsedTime: number): void {\n        const scale: number = 15;\n        const lensflareScreenSpace: Vector3f =\n            framebuffer.project(camera.getRotation().multiply(new Vector3f(1.1 * scale, 2 * scale, -0.9 * scale)));\n\n        LensFlare.drawLensFlare(framebuffer, lensflareScreenSpace, elapsedTime * 1.2, [\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.35 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.32 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.32 },\n        ], this.dirt);\n\n    }\n\n    private drawMotionBlur(framebuffer: Framebuffer, time: number): void {\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n    private computeCameraMovement(elapsedTime: number): Matrix4f {\n        return Matrix4f.constructTranslationMatrix(0, 0, -284 + (Math.sin(elapsedTime * 0.001) * 0.5 + 0.5) * 37)\n            .multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0008).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0009).multiplyMatrix(\n                        Matrix4f.constructZRotationMatrix(-elapsedTime * 0.0007)\n                    )\n                )\n            );\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { TextureCoordinate } from '../TextureCoordinate';\n\nexport class TexturedMesh {\n\n    public points: Array<Vector4f>;\n    public normals?: Array<Vector4f>;\n    public uv: Array<TextureCoordinate>;\n\n    public faces: Array<{\n        vertices: Array<number>,\n        normals?: Array<number>\n        uv: Array<number>\n    }>;\n\n    public points2: Array<Vector4f>;\n    public normals2?: Array<Vector4f>;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math\";\nimport { Interpolator } from \"../math/Interpolator\";\nimport { Texture } from \"../texture\";\n\nexport class LensFlare {\n\n    public static drawLensFlare(framebuffer: Framebuffer, screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < framebuffer.width &&\n            pos.y > 0 && pos.y < framebuffer.height &&\n            framebuffer.wBuffer[pos.x + (pos.y * framebuffer.width)] > (1 / pos.z)) {\n            if (!framebuffer.lensFlareVisible) {\n                framebuffer.lensFlareVisible = true;\n                framebuffer.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (framebuffer.lensFlareVisible) {\n                framebuffer.lensFlareVisible = false;\n                framebuffer.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = Interpolator.interpolate(framebuffer.lensFlareStart, framebuffer.lensFlareStart + 100, elapsedTime);\n        if (framebuffer.lensFlareVisible !== true) {\n            scale *= (1 - Interpolator.interpolate(framebuffer.lensFlareEnd, framebuffer.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(framebuffer.width / 2, framebuffer.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                framebuffer.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        framebuffer.drawScaledTextureClipBi(0, 0, framebuffer.width, framebuffer.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { MetalHeadzScene } from './MetalHeadzScene';\n\nclass Application {\n\n    public main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new MetalHeadzScene());\n        canvas.init();\n    }\n\n}\n\nnew Application().main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","back","down","front","left","right","up","Promise","all","TextureUtils","load","setClamp","draw","mv","setFramebuffer","drawSkyBox","getRotation","rotation","sclae","textures","skyBoxSideModel","skyPoints","map","uv","TextureCoordinate","faces","vertices","setModelViewMatrix","position","projection","drawScaledTextureClip","sub","num","EnvironmentMappingScene","AbstractScene","flood","env","mesh","textCoords","normals","buildTorusMesh","FRONT","shadingTorusENvironment","STEPS","frame","torusFunction3","frame2","tangent","normalize","cross","t","TexturedMesh","normals2","setSphereMapping","MetalHeadzScene","metalheadz","texture11","texture13","dirt","skyBox","accumulationBuffer","SkyBox","generateProceduralNoise","computeCameraMovement","drawLensFlare","drawMotionBlur","lensflareScreenSpace","LensFlare","texture3","constructZRotationMatrix","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","n1","n2","n3","transformedPoints","transformedNormals","getMesh","AbstractGeometricObject","invert","super","current","y2","mu","mu2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","sphereMapping","vertexArray","Vertex","arg0","modelViewMatrix","projectedVertices","enableAlphaBlending","disableAlphaBlending","drawMeshArray","meshes","model","normalMatrix","project2","clipConvexPolygon","zClipTriangle","computeNearPlaneIntersection2","subject","input","output","S","point","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","screenPos","dir","maxWidth","maxHeight","clamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","window","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","main","Canvas"],"sourceRoot":""}