{"version":3,"file":"md2.js","mappings":"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","sources":["webpack://aisa/./src/default-style.css","webpack://aisa/./node_modules/css-loader/dist/runtime/api.js","webpack://aisa/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://aisa/./src/default-style.css?9c7b","webpack://aisa/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://aisa/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/md2/Md2ModelScene.ts","webpack://aisa/./src/examples/md2/ModelViewMatrix.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/md2/InvalidFileFormatException.ts","webpack://aisa/./src/model/md2/MD2AnimationNames.ts","webpack://aisa/./src/model/md2/MD2Frame.ts","webpack://aisa/./src/model/md2/MD2Header.ts","webpack://aisa/./src/model/md2/MD2Loader.ts","webpack://aisa/./src/model/md2/MD2Model.ts","webpack://aisa/./src/model/md2/MD2Skin.ts","webpack://aisa/./src/model/md2/MD2TexCoord.ts","webpack://aisa/./src/model/md2/MD2Triangle.ts","webpack://aisa/./src/model/md2/MD2Vertex.ts","webpack://aisa/./src/model/md2/StreamReader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturedMesh.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/compat get default export","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/webpack/runtime/nonce","webpack://aisa/./src/examples/md2/Application.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n    background-color: #000;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/default-style.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,sBAAsB;AAC1B\",\"sourcesContent\":[\"body {\\n    background-color: #000;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { MD2Loader } from './../../model/md2/MD2Loader';\nimport { MD2Model } from './../../model/md2/MD2Model';\nimport { ModelViewMatrix } from './ModelViewMatrix';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\n/**\n * http://tfc.duke.free.fr/coding/mdl-specs-en.html\n * http://tfc.duke.free.fr/coding/md2-specs-en.html\n * https://github.com/mrdoob/three.js/tree/dev/examples/models/md2/ogro\n * http://tfc.duke.free.fr/old/models/md2.htm\n */\nexport class Md2ModelScene extends AbstractScene {\n\n    private static readonly CLEAR_COLOR: number = Color.SLATE_GRAY.toPackedFormat();\n\n    private ogroTexture: Texture;\n    private md2: MD2Model;\n    private startTime: number;\n\n    private modelViewMatrix: ModelViewMatrix = new ModelViewMatrix();\n\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.texturedRenderingPipeline.setCullFace(CullFace.FRONT);\n        this.startTime = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/md2/texture2.jpg'), false).then(\n                (texture: Texture) => this.ogroTexture = texture\n            ),\n            MD2Loader.load(require('../../assets/md2/drfreak.md2')).then(\n                (mesh: MD2Model) => this.md2 = mesh\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.FRONT);\n\n        if (time > this.fpsStartTime + 1000) {\n            this.fpsStartTime = time;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        framebuffer.clearColorBuffer(Md2ModelScene.CLEAR_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        this.computeCameraMovement(time * 0.6);\n\n        framebuffer.setTexture(this.ogroTexture);\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n        this.texturedRenderingPipeline.draw(framebuffer, this.md2.getMesh(time));\n    }\n\n    private computeCameraMovement(elapsedTime: number): void {\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.trans(0, 0, -120 + (Math.sin(elapsedTime * 0.0007) * 0.5 + 0.5) * 87);\n        this.modelViewMatrix.yRotate(-elapsedTime * 0.006);\n        this.modelViewMatrix.xRotate(Math.PI * 2 / 360 * -90);\n    }\n\n}\n","import { Matrix4f } from '../../math/index';\n\n/**\n * The primary purpose of the model view matrix class is to reduce\n * the instanciation of temporary matrix classes by reusing existing instances.\n */\nexport class ModelViewMatrix {\n\n    private currtentMatrix: Matrix4f;\n    private tempMatrix: Matrix4f;\n    private temp: Matrix4f;\n    private transformation: Matrix4f;\n\n    public constructor() {\n        this.currtentMatrix = new Matrix4f();\n        this.tempMatrix = new Matrix4f();\n        this.temp = new Matrix4f();\n        this.transformation = new Matrix4f();\n    }\n\n    public getMatrix(): Matrix4f {\n        return this.currtentMatrix;\n    }\n\n    public setIdentity(): void {\n        this.currtentMatrix.setIdentityMatrix();\n    }\n\n    public multMatrix(mat: Matrix4f): void {\n        this.currtentMatrix = this.currtentMatrix.multiplyMatrix(mat);\n    }\n\n    public trans(x: number, y: number, z: number): void {\n        this.transformation.setTranslationMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public scal(x: number, y: number, z: number): void {\n        this.transformation.setScaleMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public xRotate(x: number): void {\n        this.transformation.setXRotationMatrix(x);\n        this.applyMat();\n    }\n    public yRotate(x: number): void {\n        this.transformation.setYRotationMatrix(x);\n        this.applyMat();\n    }\n\n    private applyMat(): void {\n\n        this.tempMatrix.multiply2(this.currtentMatrix, this.transformation);\n        // switch back and front\n        this.temp = this.currtentMatrix;\n        this.currtentMatrix = this.tempMatrix;\n        this.tempMatrix = this.temp;\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","export class InvalidFileFormatException {\n\n    constructor(private message: string) {\n\n    }\n\n}\n","// http://www.mbsoftworks.sk/tutorials/opengl3/24-animation-pt1-keyframe-md2/\n// https://www.gamedev.net/forums/topic/361176-md2-animation-speed/\n// https://www.allegro.cc/forums/thread/414171/414344\nexport class MD2Animation {\n\n    public static readonly STAND: MD2Animation = new MD2Animation(0, 39, 9);\n    public static readonly RUN: MD2Animation = new MD2Animation(40, 45, 10);\n    public static readonly ATTACK: MD2Animation = new MD2Animation(46, 53, 10);\n    public static readonly PAIN_A: MD2Animation = new MD2Animation(54, 57, 7);\n    public static readonly PAIN_B: MD2Animation = new MD2Animation(58, 61, 7);\n    public static readonly PAIN_C: MD2Animation = new MD2Animation(62, 65, 7);\n    public static readonly JUMP: MD2Animation = new MD2Animation(66, 71, 7);\n    public static readonly FLIP: MD2Animation = new MD2Animation(72, 83, 7);\n    public static readonly SALUTE: MD2Animation = new MD2Animation(84, 94, 7);\n    public static readonly FALLBACK: MD2Animation = new MD2Animation(95, 111, 10);\n    public static readonly WAVE: MD2Animation = new MD2Animation(112, 122, 7);\n    public static readonly POINTING: MD2Animation = new MD2Animation(123, 134, 6);\n\n    public static readonly CROUCH_STAND: MD2Animation = new MD2Animation(135, 153, 10);\n    public static readonly CROUCH_WALK: MD2Animation = new MD2Animation(154, 159, 7);\n    public static readonly CROUCH_ATTACK: MD2Animation = new MD2Animation(160, 168, 10);\n    public static readonly CROUCH_PAIN: MD2Animation = new MD2Animation(196, 172, 7);\n    public static readonly CROUCH_DEATH: MD2Animation = new MD2Animation(173, 177, 5);\n\n    public static readonly DEATH_FALLBACK: MD2Animation = new MD2Animation(178, 183, 7);\n    public static readonly DEATH_FALLFORWARD: MD2Animation = new MD2Animation(184, 189, 7);\n    public static readonly DEATH_FALLBACKSLOW: MD2Animation = new MD2Animation(190, 197, 7);\n    public static readonly BOOM: MD2Animation = new MD2Animation(198, 198, 5);\n\n    constructor(public first: number, public last: number, public fps: number) {\n\n    }\n\n}\n","import { Vector3f } from '../../math/index';\nimport { MD2Header } from './MD2Header';\nimport { MD2Vertex } from './MD2Vertex';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2Frame {\n\n    public scale: Vector3f;\n    public translate: Vector3f;\n    public vertices: Array<MD2Vertex>;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0, header: MD2Header) {\n        const stream: StreamReader = new StreamReader(arrayBuffer, offset);\n        const scale: Vector3f = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n        this.scale = scale;\n\n        const trans: Vector3f = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n        this.translate = trans;\n\n        const streamvert: StreamReader = new StreamReader(arrayBuffer, offset + 40);\n\n        const vertArray: Array<MD2Vertex> = new Array<MD2Vertex>();\n\n        for (let i: number = 0; i < header.numberOfVertices; i++) {\n            const px: number = streamvert.readUnsignedInt8();\n            const py: number = streamvert.readUnsignedInt8();\n            const pz: number = streamvert.readUnsignedInt8();\n            const nomralIndex: number = streamvert.readUnsignedInt8();\n\n            vertArray.push(new MD2Vertex(\n                new Vector3f(\n                    px * scale.x + trans.x,\n                    py * scale.y + trans.y,\n                    pz * scale.z + trans.z\n                ),\n                nomralIndex\n            ));\n        }\n        this.vertices = vertArray;\n\n    }\n\n}\n","import { InvalidFileFormatException } from './InvalidFileFormatException';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2Header {\n\n    private static readonly IDP2: number = 844121161;\n    private static readonly VERSION: number = 8;\n\n    public identifier: number;\n    public version: number;\n\n    public skinWidth: number;\n    public skinHeight: number;\n\n    // framesize in bytes\n    public frameSize: number;\n\n    public numberOfSkins: number;\n    public numberOfVertices: number;\n    public numberOfTexCoords: number;\n    public numberOfTriangles: number;\n    public numberOfGlCommands: number;\n    public numberOfFrames: number;\n\n    public skinsOffset: number;\n    public texCoordsOffset: number;\n    public triangleOffset: number;\n    public framesOffset: number;\n    public glCommandsOffset: number;\n    public endOffset: number;\n\n    public constructor(arrayBuffer: ArrayBuffer) {\n\n        if (!this.isValidMD2File(arrayBuffer)) {\n            throw new InvalidFileFormatException('Not a valid MD2 file.');\n        }\n\n        const stream: StreamReader = new StreamReader(arrayBuffer);\n\n        this.identifier = stream.readInt();\n        this.version = stream.readInt();\n        this.skinWidth = stream.readInt();\n        this.skinHeight = stream.readInt();\n        this.frameSize = stream.readInt();\n        this.numberOfSkins = stream.readInt();\n\n        this.numberOfVertices = stream.readInt();\n        this.numberOfTexCoords = stream.readInt();\n        this.numberOfTriangles = stream.readInt();\n        this.numberOfGlCommands = stream.readInt();\n        this.numberOfFrames = stream.readInt();\n\n        this.skinsOffset = stream.readInt();\n        this.texCoordsOffset = stream.readInt();\n        this.triangleOffset = stream.readInt();\n        this.framesOffset = stream.readInt();\n        this.glCommandsOffset = stream.readInt();\n        this.endOffset = stream.readInt();\n    }\n\n    public toString(): string {\n        return JSON.stringify(this, null, 2);\n    }\n\n    private isValidMD2File(arrayBuffer: ArrayBuffer): boolean {\n        const dataView: DataView = new DataView(arrayBuffer, 0);\n\n        const magicNumber: number = dataView.getInt32(0, true);\n        const version: number = dataView.getInt32(4, true);\n\n        return magicNumber === MD2Header.IDP2 && version === MD2Header.VERSION;\n    }\n\n}\n","import { MD2Frame } from './MD2Frame';\nimport { MD2Header } from './MD2Header';\nimport { MD2Model } from './MD2Model';\nimport { MD2Skin } from './MD2Skin';\nimport { MD2TexCoord } from './MD2TexCoord';\nimport { MD2Triangle } from './MD2Triangle';\nimport { StreamReader } from './StreamReader';\n\n/**\n * http://tfc.duke.free.fr/coding/md2-specs-en.html\n * http://tfc.duke.free.fr/old/models/md2.htm\n * https://fabiensanglard.net/quake2/quake2_software_renderer.php\n */\nexport class MD2Loader {\n\n    public static load(filename: string): Promise<MD2Model> {\n        return fetch(filename).then((response: Response) => {\n            return response.arrayBuffer();\n        }).then((arrayBuffer: ArrayBuffer) => {\n            try {\n                return MD2Loader.parse(arrayBuffer);\n            } catch (ex) {\n                console.error(ex.message);\n            }\n        });\n    }\n\n    private static parse(arrayBuffer: ArrayBuffer): MD2Model {\n        const header: MD2Header = MD2Loader.getHeader(arrayBuffer);\n\n        return new MD2Model(\n            MD2Loader.getTextureCoords(arrayBuffer, header),\n            MD2Loader.getTriangles(arrayBuffer, header),\n            MD2Loader.getFrames(arrayBuffer, header),\n            header\n        );\n    }\n\n    private static getHeader(arrayBuffer: ArrayBuffer): MD2Header {\n        return new MD2Header(arrayBuffer);\n    }\n\n    private static getSkins(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Skin> {\n        const skins: Array<MD2Skin> = new Array<MD2Skin>();\n\n        for (let k: number = 0; k < header.numberOfSkins; k++) {\n            const skin: MD2Skin = new MD2Skin(arrayBuffer, header.skinsOffset + 64 * k);\n            skins.push(skin);\n        }\n\n        return skins;\n    }\n\n    private static getTextureCoords(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2TexCoord> {\n        const texCoords: Array<MD2TexCoord> = new Array<MD2TexCoord>();\n        const stream: StreamReader = new StreamReader(arrayBuffer, header.texCoordsOffset);\n\n        for (let i: number = 0; i < header.numberOfTexCoords; i++) {\n            texCoords.push(new MD2TexCoord(stream, header));\n        }\n\n        return texCoords;\n    }\n\n    private static getTriangles(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Triangle> {\n        const triangles: Array<MD2Triangle> = new Array<MD2Triangle>();\n        const stream: StreamReader = new StreamReader(arrayBuffer, header.triangleOffset);\n\n        for (let i: number = 0; i < header.numberOfTriangles; i++) {\n            triangles.push(new MD2Triangle(stream));\n        }\n\n        return triangles;\n    }\n\n    private static getFrames(arrayBuffer: ArrayBuffer, header: MD2Header): Array<MD2Frame> {\n        const frames: Array<MD2Frame> = new Array<MD2Frame>();\n\n        for (let i: number = 0; i < header.numberOfFrames; i++) {\n            const frame: MD2Frame = new MD2Frame(arrayBuffer, header.framesOffset + header.frameSize * i, header);\n            frames.push(frame);\n        }\n\n        return frames;\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { MD2Animation } from './MD2AnimationNames';\nimport { MD2Frame } from './MD2Frame';\nimport { MD2Header } from './MD2Header';\nimport { MD2TexCoord } from './MD2TexCoord';\nimport { MD2Triangle } from './MD2Triangle';\nimport { MD2Vertex } from './MD2Vertex';\n\nexport class MD2Model {\n\n    private mesh: TexturedMesh;\n    private points: Array<Vector4f>;\n    private animation: MD2Animation = MD2Animation.STAND;\n    private currentFrame: number = 0;\n    private loop: boolean = false;\n\n    constructor(public textureCoordinates: Array<MD2TexCoord>,\n        public triangles: Array<MD2Triangle>,\n        public frames: Array<MD2Frame>, public header: MD2Header) {\n\n        const mesh: TexturedMesh = new TexturedMesh();\n\n        const texCoords2: Array<TextureCoordinate> = new Array<TextureCoordinate>();\n        this.textureCoordinates.forEach((textureCoordinate: MD2TexCoord) => {\n            texCoords2.push(new TextureCoordinate(textureCoordinate.s, textureCoordinate.t));\n        });\n\n        const points: Array<Vector4f> = new Array<Vector4f>();\n\n        for (let i: number = 0; i < header.numberOfVertices; i++) {\n            points.push(new Vector4f(0, 0, 0, 1));\n        }\n\n        this.points = points;\n\n        mesh.points = points;\n        mesh.points2 = points.map(() => new Vector4f(0, 0, 0, 0));\n        mesh.uv = texCoords2;\n        const faces: Array<{\n            vertices: Array<number>,\n            uv: Array<number>\n        }> = [];\n\n        this.triangles.forEach((triangle: MD2Triangle) => {\n\n            faces.push({\n                uv: triangle.texCoords,\n                vertices: triangle.vertices\n            });\n        });\n\n        mesh.faces = faces;\n        this.mesh = mesh;\n\n    }\n\n    public getMesh(time: number): TexturedMesh {\n\n        time = time *.006;\n        const f1: number = Math.floor(time) % this.frames.length;\n        const f2: number = (f1 + 1) % this.frames.length;\n        const cframe: MD2Frame = this.frames[f1];\n        const cframe2: MD2Frame = this.frames[f2];\n        const alpha: number = time - Math.floor(time);\n        const oneMinusAlpha: number = 1 - alpha;\n\n        for (let i: number = 0; i < cframe.vertices.length; i++) {\n            const x: MD2Vertex = cframe.vertices[i];\n            const x2: MD2Vertex = cframe2.vertices[i];\n            this.points[i].x = x.vector.x * oneMinusAlpha + x2.vector.x * alpha;\n            this.points[i].y = x.vector.y * oneMinusAlpha + x2.vector.y * alpha;\n            this.points[i].z = x.vector.z * oneMinusAlpha + x2.vector.z * alpha;\n        }\n\n        return this.mesh;\n    }\n\n    public setAnim(animation: MD2Animation, time: number, loop: boolean = false): void {\n        this.animation = animation;\n        this.currentFrame = 0;\n        this.loop = loop;\n    }\n\n    public getMesh2(delta: number): TexturedMesh {\n        this.currentFrame += delta * 0.009;\n\n        if (this.currentFrame > (this.animation.last - this.animation.first)) {\n            if (!this.loop) {\n                this.currentFrame = this.animation.last - this.animation.first;\n            }\n        }\n\n        const modulo: number = (this.animation.last - this.animation.first + 1);\n        const f1: number = Math.floor(this.currentFrame) % modulo;\n        const f2: number = (f1 + 1) % modulo;\n        const cframe: MD2Frame = this.frames[f1 + this.animation.first];\n        const cframe2: MD2Frame = this.frames[f2 + this.animation.first];\n        const alpha: number = this.currentFrame - Math.floor(this.currentFrame);\n        const oneMinusAlpha: number = 1 - alpha;\n\n        /**\n         * TODO: add animation blending??? expensive :(\n         */\n        for (let i: number = 0; i < cframe.vertices.length; i++) {\n            const x: MD2Vertex = cframe.vertices[i];\n            const x2: MD2Vertex = cframe2.vertices[i];\n            this.points[i].x = x.vector.x * oneMinusAlpha + x2.vector.x * alpha;\n            this.points[i].y = x.vector.y * oneMinusAlpha + x2.vector.y * alpha;\n            this.points[i].z = x.vector.z * oneMinusAlpha + x2.vector.z * alpha;\n        }\n\n        return this.mesh;\n    }\n\n}\n","import { StreamReader } from './StreamReader';\n\nexport class MD2Skin {\n\n    public name: string;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n        const stream: StreamReader = new StreamReader(arrayBuffer, offset);\n\n        let tempName: string;\n\n        for (let i: number = 0; i < 64; i++) {\n            const code: number = stream.readUnsignedInt8();\n\n            if (code === 0) {\n                break;\n            }\n\n            tempName += String.fromCharCode(code);\n        }\n\n        this.name = tempName;\n    }\n\n}\n","import { MD2Header } from './MD2Header';\nimport { StreamReader } from './StreamReader';\n\nexport class MD2TexCoord {\n\n    public s: number;\n    public t: number;\n\n    constructor(stream: StreamReader, header: MD2Header) {\n        this.s = stream.readSignedShort() / (header.skinWidth - 1);\n        this.t = stream.readSignedShort() / (header.skinHeight - 1);\n    }\n\n}\n","import { StreamReader } from './StreamReader';\n\nexport class MD2Triangle {\n\n    public vertices: [number, number, number];\n    public texCoords: [number, number, number];\n\n    constructor(stream2: StreamReader) {\n        this.vertices = [\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort()\n        ];\n        this.texCoords = [\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort(),\n            stream2.readUnsigbnedShort()\n        ];\n    }\n\n}\n","import { Vector3f } from '../../math/index';\n\nexport class MD2Vertex {\n\n    public vector: Vector3f;\n    public normalIndex: number;\n\n    constructor(vector: Vector3f, normalIndex: number) {\n        this.vector = vector;\n        this.normalIndex = normalIndex;\n    }\n}\n","export class StreamReader {\n\n    private position: number;\n    private dataView: DataView;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n        this.dataView = new DataView(arrayBuffer, offset);\n        this.position = 0;\n    }\n\n    public readInt(): number {\n        const value: number = this.dataView.getInt32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readFloat(): number {\n        const value: number = this.dataView.getFloat32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readUnsignedInt8(): number {\n        const value: number = this.dataView.getUint8(this.position);\n        this.position += 1;\n        return value;\n    }\n\n    public readSignedShort(): number {\n        const value: number = this.dataView.getInt16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n    public readUnsigbnedShort(): number {\n        const value: number = this.dataView.getUint16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { TextureCoordinate } from '../TextureCoordinate';\n\nexport class TexturedMesh {\n\n    public points: Array<Vector4f>;\n    public normals?: Array<Vector4f>;\n    public uv: Array<TextureCoordinate>;\n\n    public faces: Array<{\n        vertices: Array<number>,\n        normals?: Array<number>\n        uv: Array<number>\n    }>;\n\n    public points2: Array<Vector4f>;\n    public normals2?: Array<Vector4f>;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.nc = undefined;","import { Canvas } from '../../Canvas';\nimport { Md2ModelScene } from './Md2ModelScene';\n\nimport './../../default-style.css';\n\nclass Application {\n\n    public main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new Md2ModelScene());\n        canvas.init();\n    }\n\n}\n\nnew Application().main();\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","attributes","styleElement","nonce","setAttribute","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","set","clear","color","Color","BLACK","toPackedFormat","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","Md2ModelScene","AbstractScene","SLATE_GRAY","ogroTexture","md2","modelViewMatrix","ModelViewMatrix","fpsStartTime","fpsCount","fps","FRONT","Promise","all","TextureUtils","load","MD2Loader","mesh","CLEAR_COLOR","computeCameraMovement","setModelViewMatrix","getMatrix","draw","getMesh","setIdentity","trans","yRotate","xRotate","currtentMatrix","tempMatrix","temp","transformation","setIdentityMatrix","multMatrix","mat","setTranslationMatrix","applyMat","scal","setScaleMatrix","setXRotationMatrix","setYRotationMatrix","multiply2","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","normals","cross","normalize","faces","n1","n2","n3","transformedPoints","transformedNormals","AbstractGeometricObject","invert","super","frame","frame2","up","right","current","y2","mu","mu2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","vector","m14","m24","m34","m41","m42","m43","m44","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","sx","sy","sz","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","message","MD2Animation","first","last","translate","vertices","header","stream","StreamReader","readFloat","streamvert","vertArray","numberOfVertices","px","readUnsignedInt8","py","pz","nomralIndex","MD2Vertex","MD2Header","version","skinWidth","skinHeight","frameSize","numberOfSkins","numberOfTexCoords","numberOfTriangles","numberOfGlCommands","numberOfFrames","skinsOffset","texCoordsOffset","triangleOffset","framesOffset","glCommandsOffset","endOffset","isValidMD2File","InvalidFileFormatException","readInt","dataView","DataView","magicNumber","getInt32","IDP2","VERSION","filename","fetch","response","parse","ex","console","error","getHeader","MD2Model","getTextureCoords","getTriangles","getFrames","skins","skin","MD2Skin","texCoords","MD2TexCoord","triangles","MD2Triangle","frames","MD2Frame","textureCoordinates","animation","STAND","currentFrame","loop","TexturedMesh","texCoords2","s","t","uv","triangle","f1","f2","cframe","cframe2","oneMinusAlpha","x2","setAnim","getMesh2","delta","modulo","name","tempName","code","String","fromCharCode","readSignedShort","stream2","readUnsigbnedShort","normalIndex","value","getFloat32","getUint8","getInt16","getUint16","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","wStart","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","yDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","normals2","AbstractRenderingPipeline","sphereMapping","vertexArray","Vertex","setSphereMapping","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","drawMeshArray","meshes","model","normalMatrix","project2","clipConvexPolygon","zClipTriangle","computeNearPlaneIntersection","subject","input","output","S","point","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","definition","key","o","Object","defineProperty","enumerable","get","globalThis","Function","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","replace","nc","main","Canvas"],"sourceRoot":""}