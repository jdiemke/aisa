{"version":3,"file":"wireframe-cube.js","mappings":"qMACIA,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,CCtBAJ,EAAoBO,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAOC,MAAQ,IAAIC,SAAS,cAAb,EAChB,CAAE,MAAOC,GACR,GAAsB,iBAAXC,OAAqB,OAAOA,MACxC,CACA,CAPuB,G,MCAxB,IAAIC,EACAb,EAAoBO,EAAEO,gBAAeD,EAAYb,EAAoBO,EAAEQ,SAAW,IACtF,IAAIC,EAAWhB,EAAoBO,EAAES,SACrC,IAAKH,GAAaG,IACbA,EAASC,gBACZJ,EAAYG,EAASC,cAAcC,MAC/BL,GAAW,CACf,IAAIM,EAAUH,EAASI,qBAAqB,UAC5C,GAAGD,EAAQE,OAEV,IADA,IAAIC,EAAIH,EAAQE,OAAS,EAClBC,GAAK,IAAMT,GAAWA,EAAYM,EAAQG,KAAKJ,GAExD,CAID,IAAKL,EAAW,MAAM,IAAIU,MAAM,yDAChCV,EAAYA,EAAUW,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpFxB,EAAoByB,EAAIZ,C,WCfjB,MAAMa,EAEWC,YAApBC,YAAoBD,GAAA,KAAAA,YAAAA,CAEpB,CAEOE,sBAAsBC,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBC,GAClG,MAAMC,EAAQF,EAAQF,MAAQA,EACxBK,EAAQH,EAAQD,OAASA,EAC/B,IAGIK,EACAC,EACAC,EACAC,EAkBAC,EAxBAC,EAAK,EACLC,EAAK,EAOT,GAAIb,EAAKE,EAAS,GACdF,EAAMtB,KAAKkB,YAAYM,OAAS,GAChCH,EAAKE,EAAQ,GACbF,EAAMrB,KAAKkB,YAAYK,MAAQ,EAC/B,OAGAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAASxB,KAAKkB,YAAYM,OAAQ,GAC5EO,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,EAASxB,KAAKkB,YAAYM,OAAQ,IAKrEH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAYP,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKkB,YAAYK,MAAO,GACxES,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWP,EAAQa,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKkB,YAAYK,MAAO,IAGrE,MAAMe,EAAa,EAAI,IAAMZ,EAC7B,IAAIa,EAAS,EAAW,EAAWvC,KAAKkB,YAAYK,MACpD,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAC/B,MAEMC,GAFa,EAALR,IACK,EAALC,GACuBV,EAAQF,MAIvCoB,GAASlB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQJ,EACvDM,EAAe,EAAID,EAEnBE,EAAmB7C,KAAKkB,YAAYA,YAAYqB,GAChDO,EAAerB,EAAQA,QAAQiB,GAE/BK,GAAKF,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EACjF7C,GAAK+C,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EACjFK,GAAKH,GAAoB,GAAK,KAAQD,GAAgBE,GAAgB,GAAK,KAAQH,EAEzF3C,KAAKkB,YAAYA,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAC1Ed,GAAMP,EACNY,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKkB,YAAYK,K,CAE/C,ECpEG,MAAM0B,EAgBUF,EAAsBjD,EAAsBkD,EAAsBE,EAd9EC,aAA+B,IAAIF,EAAM,EAAG,EAAG,EAAG,KAClDE,aAA+B,IAAIF,EAAM,IAAK,IAAK,IAAK,KACxDE,WAA6B,IAAIF,EAAM,IAAK,EAAG,EAAG,KAClDE,aAA+B,IAAIF,EAAM,EAAG,IAAK,EAAG,KACpDE,YAA8B,IAAIF,EAAM,EAAG,IAAK,EAAG,KACnDE,YAA8B,IAAIF,EAAM,EAAG,EAAG,IAAK,KACnDE,iBAAmC,IAAIF,EAAM,EAAG,EAAG,GAAI,KACvDE,cAAgC,IAAIF,EAAM,IAAK,IAAK,EAAG,KACvDE,YAA8B,IAAIF,EAAM,EAAG,IAAK,IAAK,KACrDE,eAAiC,IAAIF,EAAM,IAAK,EAAG,IAAK,KACxDE,kBAAoC,IAAIF,EAAM,IAAK,IAAK,IAAK,KAC7DE,iBAAmC,IAAIF,EAAM,GAAI,GAAI,GAAI,KACzDE,cAAgC,IAAIF,EAAM,IAAK,IAAK,KAE3D9B,YAAmB4B,EAAY,EAAUjD,EAAY,EAAUkD,EAAY,EAAUE,EAAY,KAA9E,KAAAH,EAAAA,EAAsB,KAAAjD,EAAAA,EAAsB,KAAAkD,EAAAA,EAAsB,KAAAE,EAAAA,CACrF,CAEOE,iBACH,OAAOpD,KAAK+C,EAAI/C,KAAKF,GAAK,EAAIE,KAAKgD,GAAK,GAAKhD,KAAKkD,GAAK,EAC3D,CAEOG,IAAIC,GACP,OAAO,IAAIL,EAAMjD,KAAK+C,EAAIO,EAAMP,EAAG/C,KAAKF,EAAIwD,EAAMxD,EAAGE,KAAKgD,EAAIM,EAAMN,EAAG,IAC3E,CAEOO,IAAID,GACP,OAAO,IAAIL,EAAMjD,KAAK+C,EAAIO,EAAMP,EAAG/C,KAAKF,EAAIwD,EAAMxD,EAAGE,KAAKgD,EAAIM,EAAMN,EAAG,IAC3E,CAEOQ,IAAIC,GACP,OAAO,IAAIR,EAAMjD,KAAK+C,EAAIU,EAAKzD,KAAKF,EAAI2D,EAAKzD,KAAKgD,EAAIS,EAAK,IAC/D,CAEOC,IAAID,GACP,OAAO,IAAIR,EAAMjD,KAAK+C,EAAIU,EAAKzD,KAAKF,EAAI2D,EAAKzD,KAAKgD,EAAIS,EAAK,IAC/D,EC7CJ,IAAYE,GAAZ,SAAYA,GACR,qBACA,mBACA,0BACH,CAJD,CAAYA,IAAAA,EAAQ,KCAb,MAAMC,EAEFnB,EACAD,EACAqB,EACAC,EAEP3C,YAAYsB,EAAWD,EAAWqB,EAAWC,EAAY,GACrD9D,KAAKyC,EAAIA,EACTzC,KAAKwC,EAAIA,EACTxC,KAAK6D,EAAIA,EACT7D,KAAK8D,EAAIA,CACb,CAEOT,IAAIU,GACP,OAAO,IAAIH,EAAS5D,KAAKyC,EAAIsB,EAAItB,EAAGzC,KAAKwC,EAAIuB,EAAIvB,EAAGxC,KAAK6D,EAAIE,EAAIF,EAAG7D,KAAK8D,EAAIC,EAAID,EACrF,CAEOP,IAAIQ,GACP,OAAO,IAAIH,EAAS5D,KAAKyC,EAAIsB,EAAItB,EAAGzC,KAAKwC,EAAIuB,EAAIvB,EAAGxC,KAAK6D,EAAIE,EAAIF,EAAG7D,KAAK8D,EAAIC,EAAID,EACrF,CAEOE,MAAMD,GACT,OAAO,IAAIH,EAAS5D,KAAKwC,EAAIuB,EAAIF,EAAI7D,KAAK6D,EAAIE,EAAIvB,EAC9CxC,KAAK6D,EAAIE,EAAItB,EAAIzC,KAAKyC,EAAIsB,EAAIF,EAC9B7D,KAAKyC,EAAIsB,EAAIvB,EAAIxC,KAAKwC,EAAIuB,EAAItB,EAAG,EACzC,CAEOwB,YACH,MAAMC,EAAe,EAAMlE,KAAKY,SAChC,OAAOZ,KAAK0D,IAAIQ,EACpB,CAEOtD,SACH,OAAOwB,KAAK+B,KAAKnE,KAAKyC,EAAIzC,KAAKyC,EAAIzC,KAAKwC,EAAIxC,KAAKwC,EAAIxC,KAAK6D,EAAI7D,KAAK6D,EACvE,CAGOO,KAAKC,EAAgBC,GACxBtE,KAAKyC,EAAI4B,EAAK5B,EAAI6B,EAAK7B,EACvBzC,KAAKwC,EAAI6B,EAAK7B,EAAI8B,EAAK9B,EACvBxC,KAAK6D,EAAIQ,EAAKR,EAAIS,EAAKT,CAC3B,CAEOU,KAAKR,EAAeO,GACvBtE,KAAKyC,EAAIsB,EAAItB,EAAI6B,EAAK7B,EACtBzC,KAAKwC,EAAIuB,EAAIvB,EAAI8B,EAAK9B,EACtBxC,KAAK6D,EAAIE,EAAIF,EAAIS,EAAKT,CAC1B,CAGOH,IAAIc,GACP,OAAO,IAAIZ,EAAS5D,KAAKyC,EAAI+B,EAAMxE,KAAKwC,EAAIgC,EAAMxE,KAAK6D,EAAIW,EAAMxE,KAAK8D,EAC1E,CAEOW,iBAAiBV,GACpB,OAAO,IAAIH,EAAS5D,KAAKyC,EAAIsB,EAAItB,EAAGzC,KAAKwC,EAAIuB,EAAIvB,EAAGxC,KAAK6D,EAAIE,EAAIF,EAAG7D,KAAK8D,EAAIC,EAAID,EACrF,CAEOY,IAAIX,GACP,OAAO/D,KAAKyC,EAAIsB,EAAItB,EAAIzC,KAAKwC,EAAIuB,EAAIvB,EAAIxC,KAAK6D,EAAIE,EAAIF,CAC1D,CAEOc,OAAON,EAAgBC,GAC1BtE,KAAKyC,EAAI4B,EAAK7B,EAAI8B,EAAKT,EAAIQ,EAAKR,EAAIS,EAAK9B,EACzCxC,KAAKwC,EAAI6B,EAAKR,EAAIS,EAAK7B,EAAI4B,EAAK5B,EAAI6B,EAAKT,EACzC7D,KAAK6D,EAAIQ,EAAK5B,EAAI6B,EAAK9B,EAAI6B,EAAK7B,EAAI8B,EAAK7B,CAC7C,CAEOmC,aACH,MAAMV,EAAe,EAAMlE,KAAKY,SAChCZ,KAAKyC,GAAKyB,EACVlE,KAAKwC,GAAK0B,EACVlE,KAAK6D,GAAKK,CACd,ECtEG,MAAMW,EAECC,KACAC,QAEAC,UAAUC,EAAyBC,EAAsBH,GAAmB,GAClF/E,KAAK+E,QAAUA,EACf,MAAMI,EAA2B,IAAIC,MAKrC,IAAK,IAAIvE,EAAI,EAAGA,EAAIqE,EAAMtE,OAAQC,GAAK,EAAG,CACtC,MAAMwE,EAASJ,EAAOC,EAAMrE,EAAI,IAAIwC,IAAI4B,EAAOC,EAAMrE,KAAKmD,MAAMiB,EAAOC,EAAMrE,EAAI,IAAIwC,IAAI4B,EAAOC,EAAMrE,MACtGsE,EAAQG,KAAKtF,KAAK+E,QAAUM,EAAOpB,YAAYP,KAAK,GAAK2B,EAAOpB,Y,CAIpE,MAAMsB,EAA+B,IAAIH,MAEzC,IAAK,IAAIvE,EAAI,EAAGA,EAAIqE,EAAMtE,OAAQC,GAAK,EAEnC0E,EAAMD,KAAK,CACPE,GAAI3E,EAAI,EACR4E,GAAI5E,EAAI,EACR6E,GAAI7E,EAAI,EACR8E,GAAIT,EAAM,EAAIrE,GACd+E,GAAIV,EAAM,EAAIrE,GACdgF,GAAIX,EAAM,EAAIrE,KAKtBb,KAAK8E,KAAO,CACRG,SACAE,UACAI,QACAO,kBAAmBb,EAAOc,KAAI,IAAM,IAAInC,EAAS,EAAG,EAAG,EAAG,KAC1DoC,mBAAoBb,EAAQY,KAAI,IAAM,IAAInC,EAAS,EAAG,EAAG,EAAG,KAEpE,CAEOqC,UACH,OAAOjG,KAAK8E,IAChB,EChDG,MAAMoB,EAEFzD,EACAD,EACAqB,EAEP1C,YAAYsB,EAAY,EAAGD,EAAY,EAAGqB,EAAY,GAClD7D,KAAKyC,EAAIA,EACTzC,KAAKwC,EAAIA,EACTxC,KAAK6D,EAAIA,CACb,CAEOsC,KAAKC,GACR,OAAO,IAAIF,EAASlG,KAAKyC,EAAI2D,EAAOpG,KAAKwC,EAAI4D,EAAOpG,KAAK6D,EAAIuC,EACjE,CAEO/C,IAAIU,GACP,OAAO,IAAImC,EAASlG,KAAKyC,EAAIsB,EAAItB,EAAGzC,KAAKwC,EAAIuB,EAAIvB,EAAGxC,KAAK6D,EAAIE,EAAIF,EACrE,CAEOO,KAAKC,EAAgBC,GACxBtE,KAAKyC,EAAI4B,EAAK5B,EAAI6B,EAAK7B,EACvBzC,KAAKwC,EAAI6B,EAAK7B,EAAI8B,EAAK9B,EACvBxC,KAAK6D,EAAIQ,EAAKR,EAAIS,EAAKT,CAC3B,CAEOH,IAAIc,GACP,OAAO,IAAI0B,EAASlG,KAAKyC,EAAI+B,EAAMxE,KAAKwC,EAAIgC,EAAMxE,KAAK6D,EAAIW,EAC/D,CAEOjB,IAAIQ,GACP,OAAO,IAAImC,EAASlG,KAAKyC,EAAIsB,EAAItB,EAAGzC,KAAKwC,EAAIuB,EAAIvB,EAAGxC,KAAK6D,EAAIE,EAAIF,EACrE,CAEOU,KAAKR,EAAeO,GACvBtE,KAAKyC,EAAIsB,EAAItB,EAAI6B,EAAK7B,EACtBzC,KAAKwC,EAAIuB,EAAIvB,EAAI8B,EAAK9B,EACtBxC,KAAK6D,EAAIE,EAAIF,EAAIS,EAAKT,CAC1B,CAEOG,MAAMD,GACT,OAAO,IAAImC,EAASlG,KAAKwC,EAAIuB,EAAIF,EAAI7D,KAAK6D,EAAIE,EAAIvB,EAC9CxC,KAAK6D,EAAIE,EAAItB,EAAIzC,KAAKyC,EAAIsB,EAAIF,EAC9B7D,KAAKyC,EAAIsB,EAAIvB,EAAIxC,KAAKwC,EAAIuB,EAAItB,EACtC,CAEOkC,OAAON,EAAgBC,GAC1BtE,KAAKyC,EAAI4B,EAAK7B,EAAI8B,EAAKT,EAAIQ,EAAKR,EAAIS,EAAK9B,EACzCxC,KAAKwC,EAAI6B,EAAKR,EAAIS,EAAK7B,EAAI4B,EAAK5B,EAAI6B,EAAKT,EACzC7D,KAAK6D,EAAIQ,EAAK5B,EAAI6B,EAAK9B,EAAI6B,EAAK7B,EAAI8B,EAAK7B,CAC7C,CAEO7B,SACH,OAAOwB,KAAK+B,KAAKnE,KAAKyC,EAAIzC,KAAKyC,EAAIzC,KAAKwC,EAAIxC,KAAKwC,EAAIxC,KAAK6D,EAAI7D,KAAK6D,EACvE,CAEOI,YACH,MAAMC,EAAe,EAAMlE,KAAKY,SAChC,OAAOZ,KAAK0D,IAAIQ,EACpB,CAEOU,aACH,MAAMV,EAAe,EAAMlE,KAAKY,SAChCZ,KAAKyC,GAAKyB,EACVlE,KAAKwC,GAAK0B,EACVlE,KAAK6D,GAAKK,CACd,CAEOQ,IAAIX,GACP,OAAO/D,KAAKyC,EAAIsB,EAAItB,EAAIzC,KAAKwC,EAAIuB,EAAIvB,EAAIxC,KAAK6D,EAAIE,EAAIF,CAC1D,EClEG,MAAMwC,UAAcxB,EAEvB,YAAmByB,GAAkB,GACjCC,QAEA,MAAMtB,EAA0B,GAG1BuB,EAAS,GAIfxG,KAAK+E,QAAUuB,EAEf,IAAK,IAAIzF,EAAI,EAAGA,EAPF,GAOaA,IAAK,CAC5B,MAAM4F,EAAQzG,KAAK0G,cAAkB,EAAJ7F,EAAQuB,KAAKuE,GARpC,IASJC,EAAS5G,KAAK0G,cAAkB,EAAJ7F,EAAQuB,KAAKuE,GATrC,GASkD,IACtDE,EAAK,IAAIX,EAAS,EAAK,EAAK,GAC5BY,EAAQF,EAAOvD,IAAIoD,GAAOzC,MAAM6C,GAEtC,IAAK,IAAI9D,EAAI,EAAGA,EAAIyD,EAAQzD,IAAK,CAC7B,MAAMgE,EAAMF,EAAGnD,IAAItB,KAAK4E,IAAQ,EAAJjE,EAAQX,KAAKuE,GAAKH,IAASjD,IAAIuD,EAAMpD,IAAItB,KAAK6E,IAAQ,EAAJlE,EAAQX,KAAKuE,GAAKH,KAAUjD,IAAIkD,GAC9GxB,EAAOK,KAAK,IAAI1B,EAASmD,EAAItE,EAAGsE,EAAIvE,EAAGuE,EAAIlD,EAAG,G,EAItD,MAAMqB,EAAuB,GAE7B,IAAK,IAAIgC,EAAI,EAAGA,EArBF,GAqBaA,IACvB,IAAK,IAAIrG,EAAI,EAAGA,EAAI2F,EAAQ3F,IACxBqE,EAAMI,MAAOkB,EAASU,GAAM,EAAIrG,GAAK2F,GAAUvB,EAAOrE,QACtDsE,EAAMI,MAAOkB,EAASU,GAAM,EAAIrG,GAAK2F,GAAUvB,EAAOrE,QACtDsE,EAAMI,MAAOkB,EAASU,EAAKV,GAAU,EAAI3F,GAAK2F,GAAUvB,EAAOrE,QAC/DsE,EAAMI,MAAOkB,EAASU,EAAKV,GAAU,EAAI3F,GAAK2F,GAAUvB,EAAOrE,QAC/DsE,EAAMI,MAAOkB,EAASU,EAAKV,GAAU,EAAI3F,GAAK2F,GAAUvB,EAAOrE,QAC/DsE,EAAMI,MAAOkB,EAASU,GAAM,EAAIrG,GAAK2F,GAAUvB,EAAOrE,QAI9DZ,KAAKgF,UAAUC,EAAQC,EAC3B,CAEOwB,cAAc/D,GACjB,OAAO,IAAIuD,EAA2B,GAAlB9D,KAAK4E,IAAIrE,GAAa,EAAqB,GAAlBP,KAAK6E,IAAItE,GAC1D,EC/CG,MAAMwE,EAEU1E,EAAkBD,EAArCrB,YAAmBsB,EAAkBD,GAAlB,KAAAC,EAAAA,EAAkB,KAAAD,EAAAA,CAErC,CAEO4E,OACH,OAAO,IAAID,GAAUnH,KAAKwC,EAAGxC,KAAKyC,EACtC,CAEOY,IAAIU,GACP,OAAO,IAAIoD,EAASnH,KAAKyC,EAAIsB,EAAItB,EAAGzC,KAAKwC,EAAIuB,EAAIvB,EACrD,CAEOkB,IAAIc,GACP,OAAO,IAAI2C,EAASnH,KAAKyC,EAAI+B,EAAMxE,KAAKwC,EAAIgC,EAChD,CAEO5D,SACH,OAAOwB,KAAK+B,KAAKnE,KAAKyC,EAAIzC,KAAKyC,EAAIzC,KAAKwC,EAAIxC,KAAKwC,EACrD,CAEOyB,YACH,MAAMC,EAAe,EAAMlE,KAAKY,SAChC,OAAOZ,KAAK0D,IAAIQ,EACpB,CAEOQ,IAAIX,GACP,OAAO/D,KAAKyC,EAAIsB,EAAItB,EAAIzC,KAAKwC,EAAIuB,EAAIvB,CACzC,ECXG,MAAM6E,EAEFC,IACAC,IACAC,IACAC,IAEAC,IACAC,IACAC,IACAC,IAEAC,IACAC,IACAC,IACAC,IAEAC,IACAC,IACAC,IACAC,IAEPlF,iCACI,MAAMmF,EAAmB,IAAIjB,EAsB7B,OApBAiB,EAAOhB,IAAM,EACbgB,EAAOf,IAAM,EACbe,EAAOd,IAAM,EACbc,EAAOb,IAAM,EAEba,EAAOZ,IAAM,EACbY,EAAOX,IAAM,EACbW,EAAOV,IAAM,EACbU,EAAOT,IAAM,EAEbS,EAAOR,IAAM,EACbQ,EAAOP,IAAM,EACbO,EAAON,IAAM,EACbM,EAAOL,IAAM,EAEbK,EAAOJ,IAAM,EACbI,EAAOH,IAAM,EACbG,EAAOF,IAAM,EACbE,EAAOD,IAAM,EAENC,CACX,CAGOC,oBAGHvI,KAAKsH,IAAM,EACXtH,KAAKuH,IAAM,EACXvH,KAAKwH,IAAM,EACXxH,KAAKyH,IAAM,EAEXzH,KAAK0H,IAAM,EACX1H,KAAK2H,IAAM,EACX3H,KAAK4H,IAAM,EACX5H,KAAK6H,IAAM,EAEX7H,KAAK8H,IAAM,EACX9H,KAAK+H,IAAM,EACX/H,KAAKgI,IAAM,EACXhI,KAAKiI,IAAM,EAEXjI,KAAKkI,IAAM,EACXlI,KAAKmI,IAAM,EACXnI,KAAKoI,IAAM,EACXpI,KAAKqI,IAAM,CACf,CAEOG,YACH,MAAMA,EAAsB,IAAInB,EAsBhC,OApBAmB,EAAUlB,IAAMtH,KAAKsH,IACrBkB,EAAUjB,IAAMvH,KAAK0H,IACrBc,EAAUhB,IAAMxH,KAAK8H,IACrBU,EAAUf,IAAMzH,KAAKkI,IAErBM,EAAUd,IAAM1H,KAAKuH,IACrBiB,EAAUb,IAAM3H,KAAK2H,IACrBa,EAAUZ,IAAM5H,KAAK+H,IACrBS,EAAUX,IAAM7H,KAAKmI,IAErBK,EAAUV,IAAM9H,KAAKwH,IACrBgB,EAAUT,IAAM/H,KAAK4H,IACrBY,EAAUR,IAAMhI,KAAKgI,IACrBQ,EAAUP,IAAMjI,KAAKoI,IAErBI,EAAUN,IAAMlI,KAAKyH,IACrBe,EAAUL,IAAMnI,KAAK6H,IACrBW,EAAUJ,IAAMpI,KAAKiI,IACrBO,EAAUH,IAAMrI,KAAKqI,IAEdG,CACX,CAEOC,sBAIH,OAAOzI,KAAK+E,UAAUyD,WAC1B,CAEOzD,UAKH,MAAM2D,EAA+BrB,EAASsB,0BAC9CD,EAAmBjB,KAAOzH,KAAKyH,IAC/BiB,EAAmBb,KAAO7H,KAAK6H,IAC/Ba,EAAmBT,KAAOjI,KAAKiI,IAE/B,MAAMW,EAAS,EAAMxG,KAAK+B,KAAKnE,KAAKsH,IAAMtH,KAAKsH,IAAMtH,KAAKuH,IAAMvH,KAAKuH,IAAMvH,KAAKwH,IAAMxH,KAAKwH,KACrFqB,EAAS,EAAMzG,KAAK+B,KAAKnE,KAAK0H,IAAM1H,KAAK0H,IAAM1H,KAAK2H,IAAM3H,KAAK2H,IAAM3H,KAAK4H,IAAM5H,KAAK4H,KACrFkB,EAAS,EAAM1G,KAAK+B,KAAKnE,KAAK8H,IAAM9H,KAAK8H,IAAM9H,KAAK+H,IAAM/H,KAAK+H,IAAM/H,KAAKgI,IAAMhI,KAAKgI,KACrFe,EAA4B1B,EAASsB,0BAa3C,OAZAI,EAAgBzB,IAAMtH,KAAKsH,IAAMsB,EACjCG,EAAgBrB,IAAM1H,KAAKuH,IAAMqB,EACjCG,EAAgBjB,IAAM9H,KAAKwH,IAAMoB,EAEjCG,EAAgBxB,IAAMvH,KAAK0H,IAAMmB,EACjCE,EAAgBpB,IAAM3H,KAAK2H,IAAMkB,EACjCE,EAAgBhB,IAAM/H,KAAK4H,IAAMiB,EAEjCE,EAAgBvB,IAAMxH,KAAK8H,IAAMgB,EACjCC,EAAgBnB,IAAM5H,KAAK+H,IAAMe,EACjCC,EAAgBf,IAAMhI,KAAKgI,IAAMc,EAE1BC,EAAgBC,eAAeN,EAC1C,CAEOO,qBACH,MACMF,EAAkB1B,EAASsB,0BAajC,OAZAI,EAAgBzB,IAFF,EAEQtH,KAAKsH,IAC3ByB,EAAgBrB,IAHF,EAGQ1H,KAAKuH,IAC3BwB,EAAgBjB,IAJF,EAIQ9H,KAAKwH,IAE3BuB,EAAgBxB,IANF,EAMQvH,KAAK0H,IAC3BqB,EAAgBpB,IAPF,EAOQ3H,KAAK2H,IAC3BoB,EAAgBhB,IARF,EAQQ/H,KAAK4H,IAE3BmB,EAAgBvB,IAVF,EAUQxH,KAAK8H,IAC3BiB,EAAgBnB,IAXF,EAWQ5H,KAAK+H,IAC3BgB,EAAgBf,IAZF,EAYQhI,KAAKgI,IAEpBe,CACX,CAEOG,cAEH,MAAMH,EAAkB1B,EAASsB,0BAajC,OAZAI,EAAgBzB,IAAMtH,KAAKsH,IAC3ByB,EAAgBrB,IAAM1H,KAAK0H,IAC3BqB,EAAgBjB,IAAM9H,KAAK8H,IAE3BiB,EAAgBxB,IAAMvH,KAAKuH,IAC3BwB,EAAgBpB,IAAM3H,KAAK2H,IAC3BoB,EAAgBhB,IAAM/H,KAAK+H,IAE3BgB,EAAgBvB,IAAMxH,KAAKwH,IAC3BuB,EAAgBnB,IAAM5H,KAAK4H,IAC3BmB,EAAgBf,IAAMhI,KAAKgI,IAEpBe,CACX,CAEA5F,+BACI,MAAMgG,EAAuB,IAAIjD,EAAS,GAAI,IAAK,GAC7CkD,EAAwB,IAAIlD,EAAS,EAAG,EAAG,GAC3CmD,EAA0B,IAAInD,EAAS,EAAG,GAAI,GAE9CoD,GAAKH,EAAWzE,IAAI0E,GACpBG,EAAQH,EAAY3G,EAAI4G,EAAc5G,EACxC2G,EAAY5G,EAAI6G,EAAc7G,EAC9B4G,EAAYvF,EAAIwF,EAAcxF,EAE5B2F,EAAyB,IAAInC,EAsBnC,OApBAmC,EAAalC,IAAMiC,EAAQD,EAAID,EAAc5G,EAAI2G,EAAY3G,EAC7D+G,EAAajC,KAAQ8B,EAAc5G,EAAI2G,EAAY5G,EACnDgH,EAAahC,KAAQ6B,EAAc5G,EAAI2G,EAAYvF,EACnD2F,EAAa/B,KAAQ4B,EAAc5G,EAAI6G,EAEvCE,EAAa9B,KAAQ2B,EAAc7G,EAAI4G,EAAY3G,EACnD+G,EAAa7B,IAAM4B,EAAQD,EAAID,EAAc7G,EAAI4G,EAAY5G,EAC7DgH,EAAa5B,KAAQyB,EAAc7G,EAAI4G,EAAYvF,EACnD2F,EAAa3B,KAAQwB,EAAc7G,EAAI8G,EAEvCE,EAAa1B,KAAQuB,EAAcxF,EAAIuF,EAAY3G,EACnD+G,EAAazB,KAAQsB,EAAcxF,EAAIuF,EAAY5G,EACnDgH,EAAaxB,IAAMuB,EAAQD,EAAID,EAAcxF,EAAIuF,EAAYvF,EAC7D2F,EAAavB,KAAQoB,EAAcxF,EAAIyF,EAEvCE,EAAatB,KAAQkB,EAAY3G,EACjC+G,EAAarB,KAAQiB,EAAY5G,EACjCgH,EAAapB,KAAQgB,EAAYvF,EACjC2F,EAAanB,IAAMkB,EAEZC,CAEX,CAEArG,kCAAkCsG,EAAYC,EAAYC,GACtD,MAAMrB,EAAmB,IAAIjB,EAsB7B,OApBAiB,EAAOhB,IAAM,EACbgB,EAAOf,IAAM,EACbe,EAAOd,IAAM,EACbc,EAAOb,IAAMgC,EAEbnB,EAAOZ,IAAM,EACbY,EAAOX,IAAM,EACbW,EAAOV,IAAM,EACbU,EAAOT,IAAM6B,EAEbpB,EAAOR,IAAM,EACbQ,EAAOP,IAAM,EACbO,EAAON,IAAM,EACbM,EAAOL,IAAM0B,EAEbrB,EAAOJ,IAAM,EACbI,EAAOH,IAAM,EACbG,EAAOF,IAAM,EACbE,EAAOD,IAAM,EAENC,CACX,CAEOsB,qBAAqBH,EAAYC,EAAYC,GAChD3J,KAAKsH,IAAM,EACXtH,KAAKuH,IAAM,EACXvH,KAAKwH,IAAM,EACXxH,KAAKyH,IAAMgC,EAEXzJ,KAAK0H,IAAM,EACX1H,KAAK2H,IAAM,EACX3H,KAAK4H,IAAM,EACX5H,KAAK6H,IAAM6B,EAEX1J,KAAK8H,IAAM,EACX9H,KAAK+H,IAAM,EACX/H,KAAKgI,IAAM,EACXhI,KAAKiI,IAAM0B,EAEX3J,KAAKkI,IAAM,EACXlI,KAAKmI,IAAM,EACXnI,KAAKoI,IAAM,EACXpI,KAAKqI,IAAM,CACf,CAEAlF,gCAAgCR,GAC5B,MAAM2F,EAAmB,IAAIjB,EAsB7B,OApBAiB,EAAOhB,IAAM,EACbgB,EAAOf,IAAM,EACbe,EAAOd,IAAM,EACbc,EAAOb,IAAM,EAEba,EAAOZ,IAAM,EACbY,EAAOX,IAAMvF,KAAK6E,IAAItE,GACtB2F,EAAOV,KAAOxF,KAAK4E,IAAIrE,GACvB2F,EAAOT,IAAM,EAEbS,EAAOR,IAAM,EACbQ,EAAOP,IAAM3F,KAAK4E,IAAIrE,GACtB2F,EAAON,IAAM5F,KAAK6E,IAAItE,GACtB2F,EAAOL,IAAM,EAEbK,EAAOJ,IAAM,EACbI,EAAOH,IAAM,EACbG,EAAOF,IAAM,EACbE,EAAOD,IAAM,EAENC,CACX,CAEOuB,mBAAmBlH,GACtB3C,KAAKsH,IAAM,EACXtH,KAAKuH,IAAM,EACXvH,KAAKwH,IAAM,EACXxH,KAAKyH,IAAM,EAEXzH,KAAK0H,IAAM,EACX1H,KAAK2H,IAAMvF,KAAK6E,IAAItE,GACpB3C,KAAK4H,KAAOxF,KAAK4E,IAAIrE,GACrB3C,KAAK6H,IAAM,EAEX7H,KAAK8H,IAAM,EACX9H,KAAK+H,IAAM3F,KAAK4E,IAAIrE,GACpB3C,KAAKgI,IAAM5F,KAAK6E,IAAItE,GACpB3C,KAAKiI,IAAM,EAEXjI,KAAKkI,IAAM,EACXlI,KAAKmI,IAAM,EACXnI,KAAKoI,IAAM,EACXpI,KAAKqI,IAAM,CACf,CAEOyB,mBAAmBnH,GACtB3C,KAAKsH,IAAMlF,KAAK6E,IAAItE,GACpB3C,KAAKuH,KAAOnF,KAAK4E,IAAIrE,GACrB3C,KAAKwH,IAAM,EACXxH,KAAKyH,IAAM,EAEXzH,KAAK0H,IAAMtF,KAAK4E,IAAIrE,GACpB3C,KAAK2H,IAAMvF,KAAK6E,IAAItE,GACpB3C,KAAK4H,IAAM,EACX5H,KAAK6H,IAAM,EAEX7H,KAAK8H,IAAM,EACX9H,KAAK+H,IAAM,EACX/H,KAAKgI,IAAM,EACXhI,KAAKiI,IAAM,EAEXjI,KAAKkI,IAAM,EACXlI,KAAKmI,IAAM,EACXnI,KAAKoI,IAAM,EACXpI,KAAKqI,IAAM,CACf,CAEO0B,eAAeC,EAAYC,EAAYC,GAC1ClK,KAAKsH,IAAM0C,EACXhK,KAAKuH,IAAM,EACXvH,KAAKwH,IAAM,EACXxH,KAAKyH,IAAM,EAEXzH,KAAK0H,IAAM,EACX1H,KAAK2H,IAAMsC,EACXjK,KAAK4H,IAAM,EACX5H,KAAK6H,IAAM,EAEX7H,KAAK8H,IAAM,EACX9H,KAAK+H,IAAM,EACX/H,KAAKgI,IAAMkC,EACXlK,KAAKiI,IAAM,EAEXjI,KAAKkI,IAAM,EACXlI,KAAKmI,IAAM,EACXnI,KAAKoI,IAAM,EACXpI,KAAKqI,IAAM,CACf,CAEO8B,mBAAmBxH,GACtB3C,KAAKsH,IAAMlF,KAAK6E,IAAItE,GACpB3C,KAAKuH,IAAM,EACXvH,KAAKwH,IAAMpF,KAAK4E,IAAIrE,GACpB3C,KAAKyH,IAAM,EAEXzH,KAAK0H,IAAM,EACX1H,KAAK2H,IAAM,EACX3H,KAAK4H,IAAM,EACX5H,KAAK6H,IAAM,EAEX7H,KAAK8H,KAAO1F,KAAK4E,IAAIrE,GACrB3C,KAAK+H,IAAM,EACX/H,KAAKgI,IAAM5F,KAAK6E,IAAItE,GACpB3C,KAAKiI,IAAM,EAEXjI,KAAKkI,IAAM,EACXlI,KAAKmI,IAAM,EACXnI,KAAKoI,IAAM,EACXpI,KAAKqI,IAAM,CACf,CAGO+B,kBAAkB3H,EAAUD,EAAUqB,EAAWlB,GACpD,MAAM0H,EAAIjI,KAAK6E,IAAc,EAAV7E,KAAKuE,GAAQhE,EAAQ,KAClC2H,EAAIlI,KAAK4E,IAAc,EAAV5E,KAAKuE,GAAQhE,EAAQ,KAClC4H,EAAS,IAAIrE,EAASzD,EAAED,EAAEqB,GAChC0G,EAAO3F,aAEP5E,KAAKsH,KAAO,EAAM+C,GAAKE,EAAO9H,EAAI8H,EAAO9H,EAAI4H,EAC7CrK,KAAKuH,KAAO,EAAM8C,GAAKE,EAAO9H,EAAI8H,EAAO/H,EAAI8H,EAAIC,EAAO1G,EACxD7D,KAAKwH,KAAO,EAAM6C,GAAKE,EAAO9H,EAAI8H,EAAO1G,EAAIyG,EAAIC,EAAO/H,EACxDxC,KAAKyH,IAAM,EAEXzH,KAAK0H,KAAO,EAAM2C,GAAKE,EAAO9H,EAAI8H,EAAO/H,EAAI8H,EAAIC,EAAO1G,EACxD7D,KAAK2H,KAAO,EAAM0C,GAAKE,EAAO/H,EAAI+H,EAAO/H,EAAI6H,EAC7CrK,KAAK4H,KAAO,EAAMyC,GAAKE,EAAO/H,EAAI+H,EAAO1G,EAAIyG,EAAIC,EAAO9H,EACxDzC,KAAK6H,IAAM,EAEX7H,KAAK8H,KAAO,EAAMuC,GAAKE,EAAO9H,EAAI8H,EAAO1G,EAAIyG,EAAIC,EAAO/H,EACxDxC,KAAK+H,KAAO,EAAMsC,GAAKE,EAAO/H,EAAI+H,EAAO1G,EAAIyG,EAAIC,EAAO9H,EACxDzC,KAAKgI,KAAO,EAAMqC,GAAKE,EAAO1G,EAAI0G,EAAO1G,EAAIwG,EAC7CrK,KAAKiI,IAAM,EAEXjI,KAAKkI,IAAM,EACXlI,KAAKmI,IAAM,EACXnI,KAAKoI,IAAM,EACXpI,KAAKqI,IAAM,CACf,CAEAlF,gCAAgCR,GAC5B,MAAM2F,EAAmB,IAAIjB,EAsB7B,OApBAiB,EAAOhB,IAAMlF,KAAK6E,IAAItE,GACtB2F,EAAOf,IAAM,EACbe,EAAOd,IAAMpF,KAAK4E,IAAIrE,GACtB2F,EAAOb,IAAM,EAEba,EAAOZ,IAAM,EACbY,EAAOX,IAAM,EACbW,EAAOV,IAAM,EACbU,EAAOT,IAAM,EAEbS,EAAOR,KAAO1F,KAAK4E,IAAIrE,GACvB2F,EAAOP,IAAM,EACbO,EAAON,IAAM5F,KAAK6E,IAAItE,GACtB2F,EAAOL,IAAM,EAEbK,EAAOJ,IAAM,EACbI,EAAOH,IAAM,EACbG,EAAOF,IAAM,EACbE,EAAOD,IAAM,EAENC,CACX,CAEAnF,gCAAgCR,GAC5B,MAAM2F,EAAmB,IAAIjB,EAsB7B,OApBAiB,EAAOhB,IAAMlF,KAAK6E,IAAItE,GACtB2F,EAAOf,KAAOnF,KAAK4E,IAAIrE,GACvB2F,EAAOd,IAAM,EACbc,EAAOb,IAAM,EAEba,EAAOZ,IAAMtF,KAAK4E,IAAIrE,GACtB2F,EAAOX,IAAMvF,KAAK6E,IAAItE,GACtB2F,EAAOV,IAAM,EACbU,EAAOT,IAAM,EAEbS,EAAOR,IAAM,EACbQ,EAAOP,IAAM,EACbO,EAAON,IAAM,EACbM,EAAOL,IAAM,EAEbK,EAAOJ,IAAM,EACbI,EAAOH,IAAM,EACbG,EAAOF,IAAM,EACbE,EAAOD,IAAM,EAENC,CACX,CAEAnF,4BAA4B6G,EAAYC,EAAaD,EAAIE,EAAaD,GAClE,MAAM3B,EAAmB,IAAIjB,EAsB7B,OApBAiB,EAAOhB,IAAM0C,EACb1B,EAAOf,IAAM,EACbe,EAAOd,IAAM,EACbc,EAAOb,IAAM,EAEba,EAAOZ,IAAM,EACbY,EAAOX,IAAMsC,EACb3B,EAAOV,IAAM,EACbU,EAAOT,IAAM,EAEbS,EAAOR,IAAM,EACbQ,EAAOP,IAAM,EACbO,EAAON,IAAMkC,EACb5B,EAAOL,IAAM,EAEbK,EAAOJ,IAAM,EACbI,EAAOH,IAAM,EACbG,EAAOF,IAAM,EACbE,EAAOD,IAAM,EAENC,CACX,CAEOU,eAAeV,GAClB,MAAMkC,EAAS,IAAInD,EAsBnB,OApBAmD,EAAOlD,IAAMtH,KAAKsH,IAAMgB,EAAOhB,IAAMtH,KAAKuH,IAAMe,EAAOZ,IAAM1H,KAAKwH,IAAMc,EAAOR,IAAM9H,KAAKyH,IAAMa,EAAOJ,IACvGsC,EAAO9C,IAAM1H,KAAK0H,IAAMY,EAAOhB,IAAMtH,KAAK2H,IAAMW,EAAOZ,IAAM1H,KAAK4H,IAAMU,EAAOR,IAAM9H,KAAK6H,IAAMS,EAAOJ,IACvGsC,EAAO1C,IAAM9H,KAAK8H,IAAMQ,EAAOhB,IAAMtH,KAAK+H,IAAMO,EAAOZ,IAAM1H,KAAKgI,IAAMM,EAAOR,IAAM9H,KAAKiI,IAAMK,EAAOJ,IACvGsC,EAAOtC,IAAMlI,KAAKkI,IAAMI,EAAOhB,IAAMtH,KAAKmI,IAAMG,EAAOZ,IAAM1H,KAAKoI,IAAME,EAAOR,IAAM9H,KAAKqI,IAAMC,EAAOJ,IAEvGsC,EAAOjD,IAAMvH,KAAKsH,IAAMgB,EAAOf,IAAMvH,KAAKuH,IAAMe,EAAOX,IAAM3H,KAAKwH,IAAMc,EAAOP,IAAM/H,KAAKyH,IAAMa,EAAOH,IACvGqC,EAAO7C,IAAM3H,KAAK0H,IAAMY,EAAOf,IAAMvH,KAAK2H,IAAMW,EAAOX,IAAM3H,KAAK4H,IAAMU,EAAOP,IAAM/H,KAAK6H,IAAMS,EAAOH,IACvGqC,EAAOzC,IAAM/H,KAAK8H,IAAMQ,EAAOf,IAAMvH,KAAK+H,IAAMO,EAAOX,IAAM3H,KAAKgI,IAAMM,EAAOP,IAAM/H,KAAKiI,IAAMK,EAAOH,IACvGqC,EAAOrC,IAAMnI,KAAKkI,IAAMI,EAAOf,IAAMvH,KAAKmI,IAAMG,EAAOX,IAAM3H,KAAKoI,IAAME,EAAOP,IAAM/H,KAAKqI,IAAMC,EAAOH,IAEvGqC,EAAOhD,IAAMxH,KAAKsH,IAAMgB,EAAOd,IAAMxH,KAAKuH,IAAMe,EAAOV,IAAM5H,KAAKwH,IAAMc,EAAON,IAAMhI,KAAKyH,IAAMa,EAAOF,IACvGoC,EAAO5C,IAAM5H,KAAK0H,IAAMY,EAAOd,IAAMxH,KAAK2H,IAAMW,EAAOV,IAAM5H,KAAK4H,IAAMU,EAAON,IAAMhI,KAAK6H,IAAMS,EAAOF,IACvGoC,EAAOxC,IAAMhI,KAAK8H,IAAMQ,EAAOd,IAAMxH,KAAK+H,IAAMO,EAAOV,IAAM5H,KAAKgI,IAAMM,EAAON,IAAMhI,KAAKiI,IAAMK,EAAOF,IACvGoC,EAAOpC,IAAMpI,KAAKkI,IAAMI,EAAOd,IAAMxH,KAAKmI,IAAMG,EAAOV,IAAM5H,KAAKoI,IAAME,EAAON,IAAMhI,KAAKqI,IAAMC,EAAOF,IAEvGoC,EAAO/C,IAAMzH,KAAKsH,IAAMgB,EAAOb,IAAMzH,KAAKuH,IAAMe,EAAOT,IAAM7H,KAAKwH,IAAMc,EAAOL,IAAMjI,KAAKyH,IAAMa,EAAOD,IACvGmC,EAAO3C,IAAM7H,KAAK0H,IAAMY,EAAOb,IAAMzH,KAAK2H,IAAMW,EAAOT,IAAM7H,KAAK4H,IAAMU,EAAOL,IAAMjI,KAAK6H,IAAMS,EAAOD,IACvGmC,EAAOvC,IAAMjI,KAAK8H,IAAMQ,EAAOb,IAAMzH,KAAK+H,IAAMO,EAAOT,IAAM7H,KAAKgI,IAAMM,EAAOL,IAAMjI,KAAKiI,IAAMK,EAAOD,IACvGmC,EAAOnC,IAAMrI,KAAKkI,IAAMI,EAAOb,IAAMzH,KAAKmI,IAAMG,EAAOT,IAAM7H,KAAKoI,IAAME,EAAOL,IAAMjI,KAAKqI,IAAMC,EAAOD,IAEhGmC,CACX,CAEOC,UAAUnC,EAAkBoC,GAC/B1K,KAAKsH,IAAMgB,EAAOhB,IAAMoD,EAAQpD,IAAMgB,EAAOf,IAAMmD,EAAQhD,IAAMY,EAAOd,IAAMkD,EAAQ5C,IAAMQ,EAAOb,IAAMiD,EAAQxC,IACjHlI,KAAK0H,IAAMY,EAAOZ,IAAMgD,EAAQpD,IAAMgB,EAAOX,IAAM+C,EAAQhD,IAAMY,EAAOV,IAAM8C,EAAQ5C,IAAMQ,EAAOT,IAAM6C,EAAQxC,IACjHlI,KAAK8H,IAAMQ,EAAOR,IAAM4C,EAAQpD,IAAMgB,EAAOP,IAAM2C,EAAQhD,IAAMY,EAAON,IAAM0C,EAAQ5C,IAAMQ,EAAOL,IAAMyC,EAAQxC,IACjHlI,KAAKkI,IAAMI,EAAOJ,IAAMwC,EAAQpD,IAAMgB,EAAOH,IAAMuC,EAAQhD,IAAMY,EAAOF,IAAMsC,EAAQ5C,IAAMQ,EAAOD,IAAMqC,EAAQxC,IAEjHlI,KAAKuH,IAAMe,EAAOhB,IAAMoD,EAAQnD,IAAMe,EAAOf,IAAMmD,EAAQ/C,IAAMW,EAAOd,IAAMkD,EAAQ3C,IAAMO,EAAOb,IAAMiD,EAAQvC,IACjHnI,KAAK2H,IAAMW,EAAOZ,IAAMgD,EAAQnD,IAAMe,EAAOX,IAAM+C,EAAQ/C,IAAMW,EAAOV,IAAM8C,EAAQ3C,IAAMO,EAAOT,IAAM6C,EAAQvC,IACjHnI,KAAK+H,IAAMO,EAAOR,IAAM4C,EAAQnD,IAAMe,EAAOP,IAAM2C,EAAQ/C,IAAMW,EAAON,IAAM0C,EAAQ3C,IAAMO,EAAOL,IAAMyC,EAAQvC,IACjHnI,KAAKmI,IAAMG,EAAOJ,IAAMwC,EAAQnD,IAAMe,EAAOH,IAAMuC,EAAQ/C,IAAMW,EAAOF,IAAMsC,EAAQ3C,IAAMO,EAAOD,IAAMqC,EAAQvC,IAEjHnI,KAAKwH,IAAMc,EAAOhB,IAAMoD,EAAQlD,IAAMc,EAAOf,IAAMmD,EAAQ9C,IAAMU,EAAOd,IAAMkD,EAAQ1C,IAAMM,EAAOb,IAAMiD,EAAQtC,IACjHpI,KAAK4H,IAAMU,EAAOZ,IAAMgD,EAAQlD,IAAMc,EAAOX,IAAM+C,EAAQ9C,IAAMU,EAAOV,IAAM8C,EAAQ1C,IAAMM,EAAOT,IAAM6C,EAAQtC,IACjHpI,KAAKgI,IAAMM,EAAOR,IAAM4C,EAAQlD,IAAMc,EAAOP,IAAM2C,EAAQ9C,IAAMU,EAAON,IAAM0C,EAAQ1C,IAAMM,EAAOL,IAAMyC,EAAQtC,IACjHpI,KAAKoI,IAAME,EAAOJ,IAAMwC,EAAQlD,IAAMc,EAAOH,IAAMuC,EAAQ9C,IAAMU,EAAOF,IAAMsC,EAAQ1C,IAAMM,EAAOD,IAAMqC,EAAQtC,IAEjHpI,KAAKyH,IAAMa,EAAOhB,IAAMoD,EAAQjD,IAAMa,EAAOf,IAAMmD,EAAQ7C,IAAMS,EAAOd,IAAMkD,EAAQzC,IAAMK,EAAOb,IAAMiD,EAAQrC,IACjHrI,KAAK6H,IAAMS,EAAOZ,IAAMgD,EAAQjD,IAAMa,EAAOX,IAAM+C,EAAQ7C,IAAMS,EAAOV,IAAM8C,EAAQzC,IAAMK,EAAOT,IAAM6C,EAAQrC,IACjHrI,KAAKiI,IAAMK,EAAOR,IAAM4C,EAAQjD,IAAMa,EAAOP,IAAM2C,EAAQ7C,IAAMS,EAAON,IAAM0C,EAAQzC,IAAMK,EAAOL,IAAMyC,EAAQrC,IACjHrI,KAAKqI,IAAMC,EAAOJ,IAAMwC,EAAQjD,IAAMa,EAAOH,IAAMuC,EAAQ7C,IAAMS,EAAOF,IAAMsC,EAAQzC,IAAMK,EAAOD,IAAMqC,EAAQrC,GACrH,CAEOsC,SAASJ,GACZ,OAAO,IAAIrE,EAASlG,KAAKsH,IAAMiD,EAAO9H,EAAIzC,KAAKuH,IAAMgD,EAAO/H,EAAIxC,KAAKwH,IAAM+C,EAAO1G,EAAI7D,KAAKyH,IACvFzH,KAAK0H,IAAM6C,EAAO9H,EAAIzC,KAAK2H,IAAM4C,EAAO/H,EAAIxC,KAAK4H,IAAM2C,EAAO1G,EAAI7D,KAAK6H,IACvE7H,KAAK8H,IAAMyC,EAAO9H,EAAIzC,KAAK+H,IAAMwC,EAAO/H,EAAIxC,KAAKgI,IAAMuC,EAAO1G,EAAI7D,KAAKiI,IAC/E,CAEO2C,YAAYL,GACf,OAAO,IAAI3G,EAAS5D,KAAKsH,IAAMiD,EAAO9H,EAAIzC,KAAKuH,IAAMgD,EAAO/H,EAAIxC,KAAKwH,IAAM+C,EAAO1G,EAAI7D,KAAKyH,IAAM8C,EAAOzG,EACpG9D,KAAK0H,IAAM6C,EAAO9H,EAAIzC,KAAK2H,IAAM4C,EAAO/H,EAAIxC,KAAK4H,IAAM2C,EAAO1G,EAAI7D,KAAK6H,IAAM0C,EAAOzG,EACpF9D,KAAK8H,IAAMyC,EAAO9H,EAAIzC,KAAK+H,IAAMwC,EAAO/H,EAAIxC,KAAKgI,IAAMuC,EAAO1G,EAAI7D,KAAKiI,IAAMsC,EAAOzG,EACpF9D,KAAKkI,IAAMqC,EAAO9H,EAAIzC,KAAKmI,IAAMoC,EAAO/H,EAAIxC,KAAKoI,IAAMmC,EAAO1G,EAAI7D,KAAKqI,IAAMkC,EAAOzG,EAC5F,CAEO+G,eAAeN,EAAkBC,GACpCA,EAAO/H,EAAIzC,KAAKsH,IAAMiD,EAAO9H,EAAIzC,KAAKuH,IAAMgD,EAAO/H,EAAIxC,KAAKwH,IAAM+C,EAAO1G,EAAI7D,KAAKyH,IAAM8C,EAAOzG,EAC/F0G,EAAOhI,EAAIxC,KAAK0H,IAAM6C,EAAO9H,EAAIzC,KAAK2H,IAAM4C,EAAO/H,EAAIxC,KAAK4H,IAAM2C,EAAO1G,EAAI7D,KAAK6H,IAAM0C,EAAOzG,EAC/F0G,EAAO3G,EAAI7D,KAAK8H,IAAMyC,EAAO9H,EAAIzC,KAAK+H,IAAMwC,EAAO/H,EAAIxC,KAAKgI,IAAMuC,EAAO1G,EAAI7D,KAAKiI,IAAMsC,EAAOzG,CACnG,CAEOgH,gBAAgBP,EAAkBC,GACrCA,EAAO/H,EAAIzC,KAAKsH,IAAMiD,EAAO9H,EAAIzC,KAAKuH,IAAMgD,EAAO/H,EAAIxC,KAAKwH,IAAM+C,EAAO1G,EAAI7D,KAAKyH,IAAM8C,EAAOzG,EAC/F0G,EAAOhI,EAAIxC,KAAK0H,IAAM6C,EAAO9H,EAAIzC,KAAK2H,IAAM4C,EAAO/H,EAAIxC,KAAK4H,IAAM2C,EAAO1G,EAAI7D,KAAK6H,IAAM0C,EAAOzG,EAC/F0G,EAAO3G,EAAI7D,KAAK8H,IAAMyC,EAAO9H,EAAIzC,KAAK+H,IAAMwC,EAAO/H,EAAIxC,KAAKgI,IAAMuC,EAAO1G,EAAI7D,KAAKiI,IAAMsC,EAAOzG,EAC/F0G,EAAO1G,EAAI9D,KAAKkI,IAAMqC,EAAO9H,EAAIzC,KAAKmI,IAAMoC,EAAO/H,EAAIxC,KAAKoI,IAAMmC,EAAO1G,EAAI7D,KAAKqI,IAAMkC,EAAOzG,EAC/F0G,EAAO/H,GAAK+H,EAAO1G,EACnB0G,EAAOhI,GAAKgI,EAAO1G,EACnB0G,EAAO3G,GAAK2G,EAAO1G,CACvB,CAEOiH,YAAYR,EAAkBC,GACjCA,EAAO/H,EAAIzC,KAAKsH,IAAMiD,EAAO9H,EAAIzC,KAAKuH,IAAMgD,EAAO/H,EAAIxC,KAAKwH,IAAM+C,EAAO1G,EAAI7D,KAAKyH,IAClF+C,EAAOhI,EAAIxC,KAAK0H,IAAM6C,EAAO9H,EAAIzC,KAAK2H,IAAM4C,EAAO/H,EAAIxC,KAAK4H,IAAM2C,EAAO1G,EAAI7D,KAAK6H,IAClF2C,EAAO3G,EAAI7D,KAAK8H,IAAMyC,EAAO9H,EAAIzC,KAAK+H,IAAMwC,EAAO/H,EAAIxC,KAAKgI,IAAMuC,EAAO1G,EAAI7D,KAAKiI,GACtF,EC7jBG,MAAM+C,EAEF1D,IACAC,IACAC,IAEAE,IACAC,IACAC,IAEAE,IACAC,IACAC,IAEP7E,gCAAgC8H,GAC5B,MAAM3C,EAAS,IAAI0C,EAEb/D,EAAM7E,KAAK6E,IAAIgE,GACfjE,EAAM5E,KAAK4E,IAAIiE,GAcrB,OAZA3C,EAAOhB,IAAM,EACbgB,EAAOf,IAAM,EACbe,EAAOd,IAAM,EAEbc,EAAOZ,IAAM,EACbY,EAAOX,IAAMV,EACbqB,EAAOV,KAAOZ,EAEdsB,EAAOR,IAAM,EACbQ,EAAOP,IAAMf,EACbsB,EAAON,IAAMf,EAENqB,CACX,CAEAnF,gCAAgC8H,GAC5B,MAAM3C,EAAS,IAAI0C,EAcnB,OAZA1C,EAAOhB,IAAMlF,KAAK6E,IAAIgE,GACtB3C,EAAOf,IAAM,EACbe,EAAOd,IAAMpF,KAAK4E,IAAIiE,GAEtB3C,EAAOZ,IAAM,EACbY,EAAOX,IAAM,EACbW,EAAOV,IAAM,EAEbU,EAAOR,KAAO1F,KAAK4E,IAAIiE,GACvB3C,EAAOP,IAAM,EACbO,EAAON,IAAM5F,KAAK6E,IAAIgE,GAEf3C,CACX,CAEAnF,gCAAgC8H,GAC5B,MAAM3C,EAAS,IAAI0C,EAcnB,OAZA1C,EAAOhB,IAAMlF,KAAK6E,IAAIgE,GACtB3C,EAAOf,KAAOnF,KAAK4E,IAAIiE,GACvB3C,EAAOd,IAAM,EAEbc,EAAOZ,IAAMtF,KAAK4E,IAAIiE,GACtB3C,EAAOX,IAAMvF,KAAK6E,IAAIgE,GACtB3C,EAAOV,IAAM,EAEbU,EAAOR,IAAM,EACbQ,EAAOP,IAAM,EACbO,EAAON,IAAM,EAENM,CACX,CAEAnF,4BAA4B+H,EAAgBC,EAAgBC,GACxD,MAAM9C,EAAS,IAAI0C,EAcnB,OAZA1C,EAAOhB,IAAM4D,EACb5C,EAAOf,IAAM,EACbe,EAAOd,IAAM,EAEbc,EAAOZ,IAAM,EACbY,EAAOX,IAAMwD,EACb7C,EAAOV,IAAM,EAEbU,EAAOR,IAAM,EACbQ,EAAOP,IAAM,EACbO,EAAON,IAAMoD,EAEN9C,CACX,CAEOU,eAAeV,GAClB,MAAMkC,EAAS,IAAIQ,EAcnB,OAZAR,EAAOlD,IAAMtH,KAAKsH,IAAMgB,EAAOhB,IAAMtH,KAAKuH,IAAMe,EAAOZ,IAAM1H,KAAKwH,IAAMc,EAAOR,IAC/E0C,EAAO9C,IAAM1H,KAAK0H,IAAMY,EAAOhB,IAAMtH,KAAK2H,IAAMW,EAAOZ,IAAM1H,KAAK4H,IAAMU,EAAOR,IAC/E0C,EAAO1C,IAAM9H,KAAK8H,IAAMQ,EAAOhB,IAAMtH,KAAK+H,IAAMO,EAAOZ,IAAM1H,KAAKgI,IAAMM,EAAOR,IAE/E0C,EAAOjD,IAAMvH,KAAKsH,IAAMgB,EAAOf,IAAMvH,KAAKuH,IAAMe,EAAOX,IAAM3H,KAAKwH,IAAMc,EAAOP,IAC/EyC,EAAO7C,IAAM3H,KAAK0H,IAAMY,EAAOf,IAAMvH,KAAK2H,IAAMW,EAAOX,IAAM3H,KAAK4H,IAAMU,EAAOP,IAC/EyC,EAAOzC,IAAM/H,KAAK8H,IAAMQ,EAAOf,IAAMvH,KAAK+H,IAAMO,EAAOX,IAAM3H,KAAKgI,IAAMM,EAAOP,IAE/EyC,EAAOhD,IAAMxH,KAAKsH,IAAMgB,EAAOd,IAAMxH,KAAKuH,IAAMe,EAAOV,IAAM5H,KAAKwH,IAAMc,EAAON,IAC/EwC,EAAO5C,IAAM5H,KAAK0H,IAAMY,EAAOd,IAAMxH,KAAK2H,IAAMW,EAAOV,IAAM5H,KAAK4H,IAAMU,EAAON,IAC/EwC,EAAOxC,IAAMhI,KAAK8H,IAAMQ,EAAOd,IAAMxH,KAAK+H,IAAMO,EAAOV,IAAM5H,KAAKgI,IAAMM,EAAON,IAExEwC,CAEX,CAEOG,SAASJ,GACZ,OAAO,IAAIrE,EAASlG,KAAKsH,IAAMiD,EAAO9H,EAAIzC,KAAKuH,IAAMgD,EAAO/H,EAAIxC,KAAKwH,IAAM+C,EAAO1G,EAC9E7D,KAAK0H,IAAM6C,EAAO9H,EAAIzC,KAAK2H,IAAM4C,EAAO/H,EAAIxC,KAAK4H,IAAM2C,EAAO1G,EAC9D7D,KAAK8H,IAAMyC,EAAO9H,EAAIzC,KAAK+H,IAAMwC,EAAO/H,EAAIxC,KAAKgI,IAAMuC,EAAO1G,EACtE,EClHG,MAAMwH,EAEFlI,mBAAmBmI,EAAeC,EAAaC,GAClD,OAAIA,GAAWF,EACJ,EAEPE,GAAWD,EACJ,GAEHC,EAAUF,IAAUC,EAAMD,EACtC,CAEOnI,yBAAyBsI,EAAYC,EAAYC,GACpD,GAAIA,GAAMF,EAAM,OAAO,EACvB,GAAIE,GAAMD,EAAM,OAAO,EACvB,MAAME,GAAOD,EAAKF,IAAOC,EAAKD,GAC9B,OAAQ,EAAIrJ,KAAK6E,IAAI2E,EAAMxJ,KAAKuE,KAAO,CAC3C,ECjBW,MAAMkF,EAETC,KAER,cACI9L,KAAK8L,KAAO,CAChB,CAEOC,WAEH,OADA/L,KAAK8L,MAAoB,KAAZ9L,KAAK8L,KAAc,OAAS,OAClC9L,KAAK8L,KAAO,MACvB,CAEOE,QAAQF,GACX9L,KAAK8L,KAAOA,CAChB,ECZG,MAAeG,GCCf,MAAeC,UAA4CD,EAEtDE,KAAe,KAMhBC,gBAAgBlL,EAA0BmL,EAAYC,EAAYC,GAEjEF,EAAGG,WAAWhK,EAAI+J,EAAGC,WAAWhK,IAChCxC,KAAKmM,KAAOE,EACZA,EAAKE,EACLA,EAAKvM,KAAKmM,MAGVE,EAAGG,WAAWhK,EAAI8J,EAAGE,WAAWhK,IAChCxC,KAAKmM,KAAOE,EACZA,EAAKC,EACLA,EAAKtM,KAAKmM,MAGVG,EAAGE,WAAWhK,EAAI+J,EAAGC,WAAWhK,IAChCxC,KAAKmM,KAAOG,EACZA,EAAKC,EACLA,EAAKvM,KAAKmM,MAGVE,EAAGG,WAAWhK,IAAM+J,EAAGC,WAAWhK,KAGf+J,EAAGC,WAAW/J,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,IACpF+J,EAAGC,WAAWhK,EAAI6J,EAAGG,WAAWhK,GAAK6J,EAAGG,WAAW/J,EAChD6J,EAAGE,WAAW/J,EAClBzC,KAAKyM,sBAAsBvL,EAAamL,EAAIC,EAAIC,GAEhDvM,KAAK0M,qBAAqBxL,EAAYmL,EAAGC,EAAGC,GAGxD,ECvCG,MAAMI,UAAsCT,EAY3BhL,YAVZ0L,OACAC,OACAC,QACAC,QACAC,MACAC,MACAC,UACAC,WACAC,UAERjM,YAAoBD,GAChBqF,QADgB,KAAArF,YAAAA,CAEpB,CAEUuL,sBAAsBvL,EAA0ByE,EAAYC,EAAYC,GAC9E,MAAMvC,EAAgBqC,EAAGrC,MAAMF,iBAE/B,IAAIiK,EAAgBzH,EAAG4G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EACpD,MAAM8K,EAAiBzH,EAAG2G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EAEvDxC,KAAK4M,QAAUhH,EAAG4G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK4K,EACpDrN,KAAK6M,QAAUhH,EAAG2G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK6K,EAEpDtN,KAAK8M,SAAW,EAAIlH,EAAG4G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKwJ,EAC7DrN,KAAK+M,SAAW,EAAIlH,EAAG2G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKyJ,EAE7DtN,KAAKgN,MAAQ,EAAMrH,EAAG6G,WAAW3I,EACjC7D,KAAKiN,MAAQ,EAAMtH,EAAG6G,WAAW3I,EAEjC7D,KAAKkN,UAAYvH,EAAG6G,WAAW/J,EAC/BzC,KAAKmN,WAAaxH,EAAG6G,WAAW/J,EAChCzC,KAAKoN,UAAYzH,EAAG6G,WAAWhK,EAE/BxC,KAAKuN,SAASrM,EAAamM,EAAe/J,GAE1C+J,EAAgBxH,EAAG2G,WAAWhK,EAAIoD,EAAG4G,WAAWhK,EAChDxC,KAAK4M,QAAU/G,EAAG2G,WAAW/J,EAAImD,EAAG4G,WAAW/J,GAAK4K,EACpDrN,KAAK8M,SAAW,EAAIjH,EAAG2G,WAAW3I,EAAI,EAAI+B,EAAG4G,WAAW3I,GAAKwJ,EAE7DrN,KAAKkN,UAAYtH,EAAG4G,WAAW/J,EAC/BzC,KAAKoN,UAAYxH,EAAG4G,WAAWhK,EAE/BxC,KAAKuN,SAASrM,EAAamM,EAAe/J,EAC9C,CAEUoJ,qBAAqBxL,EAA0ByE,EAAYC,EAAYC,GAC7E,MAAMvC,EAAgBqC,EAAGrC,MAAMF,iBAE/B,IAAIkK,EAAiB1H,EAAG4G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EACrD,MAAM6K,EAAgBxH,EAAG2G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EAEtDxC,KAAK6M,QAAUjH,EAAG4G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK6K,EACpDtN,KAAK4M,QAAU/G,EAAG2G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK4K,EAEpDrN,KAAK+M,SAAW,EAAInH,EAAG4G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKyJ,EAC7DtN,KAAK8M,SAAW,EAAIjH,EAAG2G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKwJ,EAE7DrN,KAAKgN,MAAQ,EAAMrH,EAAG6G,WAAW3I,EACjC7D,KAAKiN,MAAQ,EAAMtH,EAAG6G,WAAW3I,EAEjC7D,KAAKkN,UAAYvH,EAAG6G,WAAW/J,EAC/BzC,KAAKmN,WAAaxH,EAAG6G,WAAW/J,EAChCzC,KAAKoN,UAAYzH,EAAG6G,WAAWhK,EAE/BxC,KAAKuN,SAASrM,EAAaoM,EAAgBhK,GAE3CgK,EAAiBzH,EAAG2G,WAAWhK,EAAIoD,EAAG4G,WAAWhK,EACjDxC,KAAK6M,QAAUhH,EAAG2G,WAAW/J,EAAImD,EAAG4G,WAAW/J,GAAK6K,EACpDtN,KAAK+M,SAAW,EAAIlH,EAAG2G,WAAW3I,EAAI,EAAI+B,EAAG4G,WAAW3I,GAAKyJ,EAE7DtN,KAAKiN,MAAQ,EAAMrH,EAAG4G,WAAW3I,EACjC7D,KAAKmN,WAAavH,EAAG4G,WAAW/J,EAChCzC,KAAKoN,UAAYxH,EAAG4G,WAAWhK,EAE/BxC,KAAKuN,SAASrM,EAAaoM,EAAgBhK,EAC/C,CAEAiK,SAASrM,EAA0BsM,EAAkBlK,GACjD,IAAK,IAAIzC,EAAI,EAAGA,EAAI2M,EAAU3M,IAAK,CAC/B,MAAMD,EAAUZ,KAAe,WAAKA,KAAc,UAC5CyN,EAAYrL,KAAKsL,MAAM1N,KAAKiN,MAAQjN,KAAKgN,OAASpM,EACxD,IAAI+M,EAAS3N,KAAKgN,MAClB,IAAK,IAAI9F,EAAI,EAAGA,EAAItG,EAAQsG,IAAK,CAC7B,MAAM0G,EAAmBxL,KAAKsL,MAAM1N,KAAKoN,WAAalM,EAAYK,MAAQa,KAAKsL,MAAM1N,KAAKkN,UAAYhG,GAClGyG,EAASzM,EAAY2M,QAAQD,KAC7B1M,EAAY2M,QAAQD,GAAoBD,EACxCzM,EAAYA,YAAY0M,GAAoBtK,GAEhDqK,GAAUF,C,CAEdzN,KAAKkN,WAAalN,KAAK4M,OACvB5M,KAAKmN,YAAcnN,KAAK6M,OACxB7M,KAAKoN,YACLpN,KAAKgN,OAAShN,KAAK8M,QACnB9M,KAAKiN,OAASjN,KAAK+M,O,CAE3B,EC9FG,MAAMe,EAEW5M,YAApBC,YAAoBD,GAAA,KAAAA,YAAAA,CAA4B,CAEzC6M,YAAYzC,EAAiBC,EAAejI,GAC/C,MAAM0K,EAAoBzC,EAAI9I,EAAI6I,EAAM7I,EAClCwL,EAAoB1C,EAAI/I,EAAI8I,EAAM9I,EAExC,IAAI0L,EACAC,EACAvN,EAEAwB,KAAKgM,IAAIJ,GAAa5L,KAAKgM,IAAIH,IAC/BC,EAAK9L,KAAKiM,KAAKL,GACfG,EAAKF,EAAY7L,KAAKgM,IAAIJ,GAC1BpN,EAASwB,KAAKgM,IAAIJ,KAElBE,EAAKF,EAAY5L,KAAKgM,IAAIH,GAC1BE,EAAK/L,KAAKiM,KAAKJ,GACfrN,EAASwB,KAAKgM,IAAIH,IAGtB,IAAIf,EAAoB5B,EAAM7I,EAC1B2K,EAAoB9B,EAAM9I,EAG1BmL,EAAS,EAAKrC,EAAO,EACzB,MAAMgD,GAAU,EAAI/C,EAAI1H,EAAI,EAAIyH,EAAMzH,GAAKjD,EAE3C,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,IACrB8M,EAAS3N,KAAKkB,YAAY2M,QAAQzL,KAAKsL,MAAMR,GAAa9K,KAAKsL,MAAMN,GAAapN,KAAKkB,YAAYK,SACnGvB,KAAKkB,YAAY2M,QAAQzL,KAAKsL,MAAMR,GAAa9K,KAAKsL,MAAMN,GAAapN,KAAKkB,YAAYK,OAASoM,EACnG3N,KAAKkB,YAAYqN,UAAUnM,KAAKsL,MAAMR,GAAY9K,KAAKsL,MAAMN,GAAY9J,IAE7E4J,GAAagB,EACbd,GAAae,EACbR,GAAUW,CAElB,EC3CG,MAAME,EAEWtN,YAApBC,YAAoBD,GAAA,KAAAA,YAAAA,CAA4B,CAEzCuN,eAAenD,EAAiBC,EAAejI,GAClD,MAAM0K,EAAoBzC,EAAI9I,EAAI6I,EAAM7I,EAClCwL,EAAoB1C,EAAI/I,EAAI8I,EAAM9I,EAExC,IAAI0L,EACAC,EACAvN,EAEAwB,KAAKgM,IAAIJ,GAAa5L,KAAKgM,IAAIH,IAC/BC,EAAK9L,KAAKiM,KAAKL,GACfG,EAAKF,EAAY7L,KAAKgM,IAAIJ,GAC1BpN,EAASwB,KAAKgM,IAAIJ,KAElBE,EAAKF,EAAY5L,KAAKgM,IAAIH,GAC1BE,EAAK/L,KAAKiM,KAAKJ,GACfrN,EAASwB,KAAKgM,IAAIH,IAGtB,IAAIf,EAAoB5B,EAAM7I,EAC1B2K,EAAoB9B,EAAM9I,EAE9B,IAAK,IAAI3B,EAAI,EAAGA,GAAKD,EAAQC,IAEzBb,KAAKkB,YAAYqN,UAAUnM,KAAKsL,MAAMR,GAAY9K,KAAKsL,MAAMN,GAAY9J,GAEzE4J,GAAagB,EACbd,GAAae,CAGrB,EChCG,MAAMO,UAAmCxC,EAIxBhL,YAApBC,YAAoBD,GAChBqF,QADgB,KAAArF,YAAAA,CAEpB,CAEUuL,sBAAsBvL,EAA0ByE,EAAYC,EAAYC,GAG9E,IAAIwH,EAAgBzH,EAAG4G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EAChDoK,GAAUhH,EAAG4G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK4K,EAC/CsB,GAAY/I,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,GAAKwJ,EACnGyB,GAAYlJ,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,GAAKwJ,EACnGP,GAAW,EAAIlH,EAAG4G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKwJ,EACxDL,EAAQ,EAAMrH,EAAG6G,WAAW3I,EAC5BmL,EAAQrJ,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,EAC/CoL,EAAQtJ,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,EAC/CqJ,EAAYvH,EAAG6G,WAAW/J,EAG9B,MAAM6K,EAAiBzH,EAAG2G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EACjDqK,GAAUhH,EAAG2G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK6K,EAC/C4B,GAAYrJ,EAAG+I,kBAAkBC,EAAIhJ,EAAG2G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,GAAKyJ,EACnG6B,GAAYtJ,EAAG+I,kBAAkBG,EAAIlJ,EAAG2G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,GAAKyJ,EACnGP,GAAW,EAAIlH,EAAG2G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKyJ,EAC9D,IAAIL,EAAQ,EAAMtH,EAAG6G,WAAW3I,EAC5BuL,EAAQzJ,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,EAC/CwL,EAAQ1J,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,EAC/CsJ,EAAaxH,EAAG6G,WAAW/J,EAE3B2K,EAAYzH,EAAG6G,WAAWhK,EAE9B,IAAK,IAAI3B,EAAI,EAAGA,EAAIwM,EAAexM,IAAK,CACpC,MAAMD,EAASwB,KAAKsL,MAAMP,GAAc/K,KAAKsL,MAAMR,GACnD,IAAIU,EAAmBxL,KAAKsL,MAAMN,GAAalM,EAAYK,MAAQa,KAAKsL,MAAMR,GAC9E,MAAMO,GAAaR,EAAQD,GAASpM,EAC9B0O,GAAaF,EAAQJ,GAASpO,EAC9B2O,GAAaF,EAAQJ,GAASrO,EACpC,IAAI+M,EAASX,EAETwC,EAASR,EACTS,EAASR,EACb,IAAK,IAAI/H,EAAI,EAAGA,EAAItG,EAAQsG,IAAK,CAC7B,GAAIyG,EAASzM,EAAY2M,QAAQD,GAAmB,CAChD1M,EAAY2M,QAAQD,GAAoBD,EACxC,MAAM9J,EAAI,EAAI8J,EAEd,IAAIkB,EAA6F,EAAzFzM,KAAKC,IAAID,KAAKsN,IAAKF,EAAS3L,EAAI3C,EAAYyO,IAAIpO,MAAQL,EAAYyO,IAAIpO,MAAQ,GAAI,GACxFwN,EAA+F,EAA3F3M,KAAKC,IAAID,KAAKsN,IAAKD,EAAS5L,EAAI3C,EAAYyO,IAAInO,OAASN,EAAYyO,IAAInO,OAAS,GAAI,GAC1FoO,EAAS1O,EAAYyO,IAAIlO,QAAQoN,EAAIE,EAAI7N,EAAYyO,IAAIpO,OAG7DsN,EAAIW,EAAS3L,GAAK3C,EAAYyO,IAAIpO,MAAM,GACxCwN,EAAIU,EAAS5L,GAAK3C,EAAYyO,IAAInO,OAAO,GAE1CoO,EAAS1O,EAAYyO,IAAIE,mCAAmChB,EAAEE,GAE7D7N,EAAYA,YAAY0M,GAAoBgC,C,CAGhDhC,IACAD,GAAUF,EACV+B,GAAUF,EACVG,GAAUF,C,CAGdrC,GAAaN,EACbO,GAAcN,EACdO,IAEAJ,GAASF,EACTG,GAASF,EAETiC,GAASL,EACTS,GAASF,EAETD,GAASH,EACTO,GAASF,C,CAMb,GAFA9B,EAAgBxH,EAAG2G,WAAWhK,EAAIoD,EAAG4G,WAAWhK,EAE1B,IAAlB6K,EAAJ,CAIAT,GAAU/G,EAAG2G,WAAW/J,EAAImD,EAAG4G,WAAW/J,GAAK4K,EAC/CP,GAAW,EAAIjH,EAAG2G,WAAW3I,EAAI,EAAI+B,EAAG4G,WAAW3I,GAAKwJ,EACxDsB,GAAY9I,EAAG+I,kBAAkBC,EAAIhJ,EAAG2G,WAAW3I,EAAI+B,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,GAAKwJ,EACnGyB,GAAYjJ,EAAG+I,kBAAkBG,EAAIlJ,EAAG2G,WAAW3I,EAAI+B,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,GAAKwJ,EAEnGL,EAAQ,EAAMpH,EAAG4G,WAAW3I,EAC5BmL,EAAQpJ,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,EAC/CoL,EAAQrJ,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,EAC/CqJ,EAAYtH,EAAG4G,WAAW/J,EAC1B2K,EAAYxH,EAAG4G,WAAWhK,EAE1B,IAAK,IAAI3B,EAAI,EAAGA,EAAIwM,EAAexM,IAAK,CACpC,MAAMD,EAASwB,KAAKsL,MAAMP,GAAc/K,KAAKsL,MAAMR,GACnD,IAAIU,EAAmBxL,KAAKsL,MAAMN,GAAalM,EAAYK,MAAQa,KAAKsL,MAAMR,GAE9E,MAAMO,GAAaR,EAAQD,GAASpM,EAC9B0O,GAAaF,EAAQJ,GAASpO,EAC9B2O,GAAaF,EAAQJ,GAASrO,EACpC,IAAI+M,EAASX,EAETwC,EAASR,EACTS,EAASR,EACb,IAAK,IAAI/H,EAAI,EAAGA,EAAItG,EAAQsG,IAAK,CAC7B,GAAIyG,EAASzM,EAAY2M,QAAQD,GAAmB,CAChD1M,EAAY2M,QAAQD,GAAoBD,EAExC,MAAM9J,EAAI,EAAI8J,EAGd,IAAIkB,EAA6F,EAAzFzM,KAAKC,IAAID,KAAKsN,IAAKF,EAAS3L,EAAI3C,EAAYyO,IAAIpO,MAAQL,EAAYyO,IAAIpO,MAAQ,GAAI,GACxFwN,EAA+F,EAA3F3M,KAAKC,IAAID,KAAKsN,IAAKD,EAAS5L,EAAI3C,EAAYyO,IAAInO,OAASN,EAAYyO,IAAInO,OAAS,GAAI,GAC1FoO,EAAS1O,EAAYyO,IAAIlO,QAAQoN,EAAIE,EAAI7N,EAAYyO,IAAIpO,OAE7DsN,EAAIW,EAAS3L,GAAK3C,EAAYyO,IAAIpO,MAAM,GACxCwN,EAAIU,EAAS5L,GAAK3C,EAAYyO,IAAInO,OAAO,GAE1CoO,EAAS1O,EAAYyO,IAAIE,mCAAmChB,EAAEE,GAE7D7N,EAAYA,YAAY0M,GAAoBgC,C,CAEhDhC,IACAD,GAAUF,EACV+B,GAAUF,EACVG,GAAUF,C,CAGdrC,GAAaN,EACbO,GAAcN,EACdO,IAIAJ,GAASF,EACTG,GAASF,EAETiC,GAASL,EACTS,GAASF,EAETD,GAASH,EACTO,GAASF,C,EAEjB,CAEUzC,qBAAqBxL,EAA0ByE,EAAYC,EAAYC,GAE7E,IAAIyH,EAAiB1H,EAAG4G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EACrD,MAAM6K,EAAgBxH,EAAG2G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EAEtD,IAAIqK,GAAUjH,EAAG4G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK6K,EACnD,MAAMV,GAAU/G,EAAG2G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK4K,EAE/CsB,GAAY9I,EAAG+I,kBAAkBC,EAAIhJ,EAAG2G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,GAAKwJ,EACzG,IAAI6B,GAAYtJ,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,GAAKyJ,EAEvG,MAAMwB,GAAYjJ,EAAG+I,kBAAkBG,EAAIlJ,EAAG2G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,GAAKwJ,EACzG,IAAI8B,GAAYvJ,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,GAAKyJ,EAGnGP,GAAW,EAAInH,EAAG4G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKyJ,EAC5D,MAAMR,GAAW,EAAIjH,EAAG2G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKwJ,EAE9D,IAAIL,EAAQ,EAAMrH,EAAG6G,WAAW3I,EAC5BoJ,EAAQ,EAAMtH,EAAG6G,WAAW3I,EAE5BmL,EAAQrJ,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,EAC/CoL,EAAQtJ,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,EAC/CuL,EAAQzJ,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,EAC/CwL,EAAQ1J,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,EAE/CqJ,EAAYvH,EAAG6G,WAAW/J,EAC1B0K,EAAaxH,EAAG6G,WAAW/J,EAC3B2K,EAAYzH,EAAG6G,WAAWhK,EAE9B,IAAK,IAAI3B,EAAI,EAAGA,EAAIyM,EAAgBzM,IAAK,CACrC,MAAMD,EAASwB,KAAKsL,MAAMP,GAAc/K,KAAKsL,MAAMR,GACnD,IAAIU,EAAmBxL,KAAKsL,MAAMN,GAAalM,EAAYK,MAAQa,KAAKsL,MAAMR,GAC9E,MAAMO,GAAaR,EAAQD,GAASpM,EAC9B0O,GAAaF,EAAQJ,GAASpO,EAC9B2O,GAAaF,EAAQJ,GAASrO,EACpC,IAAI+M,EAASX,EAETwC,EAASR,EACTS,EAASR,EACb,IAAK,IAAI/H,EAAI,EAAGA,EAAItG,EAAQsG,IAAK,CAC7B,GAAIyG,EAASzM,EAAY2M,QAAQD,GAAmB,CAChD1M,EAAY2M,QAAQD,GAAoBD,EACxC,MAAM9J,EAAI,EAAI8J,EAGd,IAAIkB,EAA6F,EAAzFzM,KAAKC,IAAID,KAAKsN,IAAKF,EAAS3L,EAAI3C,EAAYyO,IAAIpO,MAAQL,EAAYyO,IAAIpO,MAAQ,GAAI,GACxFwN,EAA+F,EAA3F3M,KAAKC,IAAID,KAAKsN,IAAKD,EAAS5L,EAAI3C,EAAYyO,IAAInO,OAASN,EAAYyO,IAAInO,OAAS,GAAI,GAC1FoO,EAAS1O,EAAYyO,IAAIlO,QAAQoN,EAAIE,EAAI7N,EAAYyO,IAAIpO,OAI7DsN,EAAIW,EAAS3L,GAAK3C,EAAYyO,IAAIpO,MAAM,GACxCwN,EAAIU,EAAS5L,GAAK3C,EAAYyO,IAAInO,OAAO,GAE1CoO,EAAS1O,EAAYyO,IAAIE,mCAAmChB,EAAEE,GAE7D7N,EAAYA,YAAY0M,GAAoBgC,C,CAEhDhC,IACAD,GAAUF,EACV+B,GAAUF,EACVG,GAAUF,C,CAGdrC,GAAaN,EACbO,GAAcN,EACdO,IAEAJ,GAASF,EACTG,GAASF,EAETiC,GAASL,EACTS,GAASF,EAETD,GAASH,EACTO,GAASF,C,CAGb7B,EAAiBzH,EAAG2G,WAAWhK,EAAIoD,EAAG4G,WAAWhK,EACjDqK,GAAUhH,EAAG2G,WAAW/J,EAAImD,EAAG4G,WAAW/J,GAAK6K,EAC/CP,GAAW,EAAIlH,EAAG2G,WAAW3I,EAAI,EAAI+B,EAAG4G,WAAW3I,GAAKyJ,EAExD4B,GAAYrJ,EAAG+I,kBAAkBC,EAAIhJ,EAAG2G,WAAW3I,EAAI+B,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,GAAKyJ,EACnG6B,GAAYtJ,EAAG+I,kBAAkBG,EAAIlJ,EAAG2G,WAAW3I,EAAI+B,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,GAAKyJ,EAEnGL,EAAQ,EAAMrH,EAAG4G,WAAW3I,EAE5BuL,EAAQxJ,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,EAC/CwL,EAAQzJ,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,EAE/CsJ,EAAavH,EAAG4G,WAAW/J,EAC3B2K,EAAYxH,EAAG4G,WAAWhK,EAE1B,IAAK,IAAI3B,EAAI,EAAGA,EAAIyM,EAAgBzM,IAAK,CACrC,MAAMD,EAASwB,KAAKsL,MAAMP,GAAc/K,KAAKsL,MAAMR,GACnD,IAAIU,EAAmBxL,KAAKsL,MAAMN,GAAalM,EAAYK,MAAQa,KAAKsL,MAAMR,GAG9E,MAAMO,GAAaR,EAAQD,GAASpM,EAC9B0O,GAAaF,EAAQJ,GAASpO,EAC9B2O,GAAaF,EAAQJ,GAASrO,EACpC,IAAI+M,EAASX,EAETwC,EAASR,EACTS,EAASR,EACb,IAAK,IAAI/H,EAAI,EAAGA,EAAItG,EAAQsG,IAAK,CAC7B,GAAIyG,EAASzM,EAAY2M,QAAQD,GAAmB,CAChD1M,EAAY2M,QAAQD,GAAoBD,EACxC,MAAM9J,EAAI,EAAI8J,EAEd,IAAIkB,EAA6F,EAAzFzM,KAAKC,IAAID,KAAKsN,IAAKF,EAAS3L,EAAI3C,EAAYyO,IAAIpO,MAAQL,EAAYyO,IAAIpO,MAAQ,GAAI,GACxFwN,EAA+F,EAA3F3M,KAAKC,IAAID,KAAKsN,IAAKD,EAAS5L,EAAI3C,EAAYyO,IAAInO,OAASN,EAAYyO,IAAInO,OAAS,GAAI,GAC1FoO,EAAS1O,EAAYyO,IAAIlO,QAAQoN,EAAIE,EAAI7N,EAAYyO,IAAIpO,OAE7DsN,EAAIW,EAAS3L,GAAK3C,EAAYyO,IAAIpO,MAAM,GACxCwN,EAAIU,EAAS5L,GAAK3C,EAAYyO,IAAInO,OAAO,GAE1CoO,EAAS1O,EAAYyO,IAAIE,mCAAmChB,EAAEE,GAE7D7N,EAAYA,YAAY0M,GAAoBgC,C,CAEhDhC,IACAD,GAAUF,EACV+B,GAAUF,EACVG,GAAUF,C,CAGdrC,GAAaN,EACbO,GAAcN,EACdO,IAEAJ,GAASF,EACTG,GAASF,EAETiC,GAASL,EACTS,GAASF,EAETD,GAASH,EACTO,GAASF,C,CAEjB,ECpSG,MAAMW,UAAgD5D,EAMrChL,YAAkC6O,SAAtD5O,YAAoBD,EAAkC6O,GAClDxJ,QADgB,KAAArF,YAAAA,EAAkC,KAAA6O,SAAAA,CAEtD,CAGUtD,sBAAsBvL,EAA0ByE,EAAYC,EAAYC,GAC9E,IAAIwH,EAAgBzH,EAAG4G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EAKpD,MAAM8K,EAAiBzH,EAAG2G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EAEvD,IAAIoK,GAAUhH,EAAG4G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK4K,EACnD,MAAMR,GAAUhH,EAAG2G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK6K,EAErD,IAAIqB,GAAY/I,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,GAAKwJ,EACvG,MAAM6B,GAAYrJ,EAAG+I,kBAAkBC,EAAIhJ,EAAG2G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,GAAKyJ,EAEzG,IAAIwB,GAAYlJ,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,GAAKwJ,EACvG,MAAM8B,GAAYtJ,EAAG+I,kBAAkBG,EAAIlJ,EAAG2G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,GAAKyJ,EAEzG,IAAIR,GAAW,EAAIlH,EAAG4G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKwJ,EAC5D,MAAMN,GAAW,EAAIlH,EAAG2G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKyJ,EAE9D,IAAIN,EAAQ,EAAMrH,EAAG6G,WAAW3I,EAC5BoJ,EAAQ,EAAMtH,EAAG6G,WAAW3I,EAE5BmL,EAAQrJ,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,EAC/CoL,EAAQtJ,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,EAC/CuL,EAAQzJ,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,EAC/CwL,EAAQ1J,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,EAE/CqJ,EAAYvH,EAAG6G,WAAW/J,EAC1B0K,EAAaxH,EAAG6G,WAAW/J,EAC3B2K,EAAYzH,EAAG6G,WAAWhK,EAE9B,IAAK,IAAI3B,EAAI,EAAGA,EAAIwM,EAAexM,IAAK,CACpC,MAAMD,EAASwB,KAAKsL,MAAMP,GAAc/K,KAAKsL,MAAMR,GACnD,IAAIU,EAAmBxL,KAAKsL,MAAMN,GAAapN,KAAKkB,YAAYK,MAAQa,KAAKsL,MAAMR,GACnF,MAAMO,GAAaR,EAAQD,GAASpM,EAC9B0O,GAAaF,EAAQJ,GAASpO,EAC9B2O,GAAaF,EAAQJ,GAASrO,EACpC,IAAI+M,EAASX,EAETwC,EAASR,EACTS,EAASR,EACb,IAAK,IAAI/H,EAAI,EAAGA,EAAItG,EAAQsG,IAAK,CAC7B,MAAM8I,EAAehQ,KAAKkB,YAAYA,YAAY0M,GAClD,GAAID,EAAS3N,KAAKkB,YAAY2M,QAAQD,GAAmB,CACrD5N,KAAKkB,YAAY2M,QAAQD,GAAoBD,EAC7C,MAAM9J,EAAI,EAAI8J,EAEd,IAAIkB,EAAuG,EAAnGzM,KAAKC,IAAID,KAAKsN,IAAKF,EAAS3L,EAAI7D,KAAKkB,YAAYyO,IAAIpO,MAAQvB,KAAKkB,YAAYyO,IAAIpO,MAAQ,GAAI,GAClGwN,EAAyG,EAArG3M,KAAKC,IAAID,KAAKsN,IAAKD,EAAS5L,EAAI7D,KAAKkB,YAAYyO,IAAInO,OAASxB,KAAKkB,YAAYyO,IAAInO,OAAS,GAAI,GACpGoO,EAAS5P,KAAKkB,YAAYyO,IAAIlO,QAAQoN,EAAIE,EAAI/O,KAAKkB,YAAYyO,IAAIpO,OAEvEsN,EAAIW,EAAS3L,GAAK3C,EAAYyO,IAAIpO,MAAM,GACxCwN,EAAIU,EAAS5L,GAAK3C,EAAYyO,IAAInO,OAAO,GAE1CoO,EAAS1O,EAAYyO,IAAIE,mCAAmChB,EAAEE,GAI7D,MAAMpM,EAAQ3C,KAAK+P,SAASpN,OAASiN,GAAU,GAAK,KAAQ,IACtDhN,EAAe,EAAID,EAGnBI,GAAKiN,GAAgB,EAAI,KAAQpN,GAAgBgN,GAAU,EAAI,KAAQjN,EACvE7C,GAAKkQ,GAAgB,EAAI,KAAQpN,GAAgBgN,GAAU,EAAI,KAAQjN,EACvEK,GAAKgN,GAAgB,GAAK,KAAQpN,GAAgBgN,GAAU,GAAK,KAAQjN,EAE/E3C,KAAKkB,YAAYA,YAAY0M,GAAoB7K,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAGxF4K,IACAD,GAAUF,EACV+B,GAAUF,EACVG,GAAUF,C,CAGdrC,GAAaN,EACbO,GAAcN,EACdO,IAEAJ,GAASF,EACTG,GAASF,EAETiC,GAASL,EACTS,GAASF,EAETD,GAASH,EACTO,GAASF,C,CAMb,GAFA9B,EAAgBxH,EAAG2G,WAAWhK,EAAIoD,EAAG4G,WAAWhK,EAE1B,IAAlB6K,EAAJ,CAIAT,GAAU/G,EAAG2G,WAAW/J,EAAImD,EAAG4G,WAAW/J,GAAK4K,EAC/CP,GAAW,EAAIjH,EAAG2G,WAAW3I,EAAI,EAAI+B,EAAG4G,WAAW3I,GAAKwJ,EACxDsB,GAAY9I,EAAG+I,kBAAkBC,EAAIhJ,EAAG2G,WAAW3I,EAAI+B,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,GAAKwJ,EACnGyB,GAAYjJ,EAAG+I,kBAAkBG,EAAIlJ,EAAG2G,WAAW3I,EAAI+B,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,GAAKwJ,EAEnGL,EAAQ,EAAMpH,EAAG4G,WAAW3I,EAC5BmL,EAAQpJ,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,EAC/CoL,EAAQrJ,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,EAC/CqJ,EAAYtH,EAAG4G,WAAW/J,EAC1B2K,EAAYxH,EAAG4G,WAAWhK,EAE1B,IAAK,IAAI3B,EAAI,EAAGA,EAAIwM,EAAexM,IAAK,CACpC,MAAMD,EAASwB,KAAKsL,MAAMP,GAAc/K,KAAKsL,MAAMR,GACnD,IAAIU,EAAmBxL,KAAKsL,MAAMN,GAAapN,KAAKkB,YAAYK,MAAQa,KAAKsL,MAAMR,GAEnF,MAAMO,GAAaR,EAAQD,GAASpM,EAC9B0O,GAAaF,EAAQJ,GAASpO,EAC9B2O,GAAaF,EAAQJ,GAASrO,EACpC,IAAI+M,EAASX,EAETwC,EAASR,EACTS,EAASR,EACb,IAAK,IAAI/H,EAAI,EAAGA,EAAItG,EAAQsG,IAAK,CAC7B,GAAIyG,EAAS3N,KAAKkB,YAAY2M,QAAQD,GAAmB,CACrD5N,KAAKkB,YAAY2M,QAAQD,GAAoBD,EAE7C,MAAM9J,EAAI,EAAI8J,EAGd,IAAIkB,EAAuG,EAAnGzM,KAAKC,IAAID,KAAKsN,IAAKF,EAAS3L,EAAI7D,KAAKkB,YAAYyO,IAAIpO,MAAQvB,KAAKkB,YAAYyO,IAAIpO,MAAQ,GAAI,GAClGwN,EAAyG,EAArG3M,KAAKC,IAAID,KAAKsN,IAAKD,EAAS5L,EAAI7D,KAAKkB,YAAYyO,IAAInO,OAASxB,KAAKkB,YAAYyO,IAAInO,OAAS,GAAI,GACpGoO,EAAS5P,KAAKkB,YAAYyO,IAAIlO,QAAQoN,EAAIE,EAAI/O,KAAKkB,YAAYyO,IAAIpO,OAEvEsN,EAAIW,EAAS3L,GAAK3C,EAAYyO,IAAIpO,MAAM,GACxCwN,EAAIU,EAAS5L,GAAK3C,EAAYyO,IAAInO,OAAO,GAE1CoO,EAAS1O,EAAYyO,IAAIE,mCAAmChB,EAAEE,GAE7D,MAAMpM,EAAQ3C,KAAK+P,SAASpN,OAASiN,GAAU,GAAK,KAAQ,IACtDhN,EAAe,EAAID,EAGnBI,GAAK/C,KAAKkB,YAAYA,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBgN,GAAU,EAAI,KAAQjN,EACzG7C,GAAKE,KAAKkB,YAAYA,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBgN,GAAU,EAAI,KAAQjN,EACzGK,GAAKhD,KAAKkB,YAAYA,YAAY0M,IAAqB,GAAK,KAAQhL,GAAgBgN,GAAU,GAAK,KAAQjN,EAEjH3C,KAAKkB,YAAYA,YAAY0M,GAAoB7K,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAExF4K,IACAD,GAAUF,EACV+B,GAAUF,EACVG,GAAUF,C,CAGdrC,GAAaN,EACbO,GAAcN,EACdO,IAIAJ,GAASF,EACTG,GAASF,EAETiC,GAASL,EACTS,GAASF,EAETD,GAASH,EACTO,GAASF,C,EAEjB,CAGUzC,qBAAqBxL,EAA2ByE,EAAYC,EAAYC,GAE9E,IAAIyH,EAAiB1H,EAAG4G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EACrD,MAAM6K,EAAgBxH,EAAG2G,WAAWhK,EAAImD,EAAG6G,WAAWhK,EAEtD,IAAIqK,GAAUjH,EAAG4G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK6K,EACnD,MAAMV,GAAU/G,EAAG2G,WAAW/J,EAAIkD,EAAG6G,WAAW/J,GAAK4K,EAE/CsB,GAAY9I,EAAG+I,kBAAkBC,EAAIhJ,EAAG2G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,GAAKwJ,EACzG,IAAI6B,GAAYtJ,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,GAAKyJ,EAEvG,MAAMwB,GAAYjJ,EAAG+I,kBAAkBG,EAAIlJ,EAAG2G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBG,EAAKpJ,EAAG6G,WAAW3I,GAAKwJ,EAC1G,IAAI8B,GAAYvJ,EAAGgJ,kBAAkBG,EAAKnJ,EAAG4G,WAAW3I,EAAI8B,EAAGiJ,kBAAkBG,EAAKpJ,EAAG6G,WAAW3I,GAAKyJ,EAGrGP,GAAW,EAAInH,EAAG4G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKyJ,EAC5D,MAAMR,GAAW,EAAIjH,EAAG2G,WAAW3I,EAAI,EAAI8B,EAAG6G,WAAW3I,GAAKwJ,EAE9D,IAAIL,EAAQ,EAAMrH,EAAG6G,WAAW3I,EAC5BoJ,EAAQ,EAAMtH,EAAG6G,WAAW3I,EAE5BmL,EAAQrJ,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,EAC/CoL,EAAQtJ,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,EAC/CuL,EAAQzJ,EAAGiJ,kBAAkBC,EAAIlJ,EAAG6G,WAAW3I,EAC/CwL,EAAQ1J,EAAGiJ,kBAAkBG,EAAIpJ,EAAG6G,WAAW3I,EAE/CqJ,EAAYvH,EAAG6G,WAAW/J,EAC1B0K,EAAaxH,EAAG6G,WAAW/J,EAC3B2K,EAAYzH,EAAG6G,WAAWhK,EAE9B,IAAK,IAAI3B,EAAI,EAAGA,EAAIyM,EAAgBzM,IAAK,CACrC,MAAMD,EAASwB,KAAKsL,MAAMP,GAAc/K,KAAKsL,MAAMR,GACnD,IAAIU,EAAmBxL,KAAKsL,MAAMN,GAAapN,KAAKkB,YAAYK,MAAQa,KAAKsL,MAAMR,GACnF,MAAMO,GAAaR,EAAQD,GAASpM,EAC9B0O,GAAaF,EAAQJ,GAASpO,EAC9B2O,GAAaF,EAAQJ,GAASrO,EACpC,IAAI+M,EAASX,EAETwC,EAASR,EACTS,EAASR,EACb,IAAK,IAAI/H,EAAI,EAAGA,EAAItG,EAAQsG,IAAK,CAC7B,GAAIyG,EAAS3N,KAAKkB,YAAY2M,QAAQD,GAAmB,CACrD5N,KAAKkB,YAAY2M,QAAQD,GAAoBD,EAC7C,MAAM9J,EAAI,EAAI8J,EAGd,IAAIkB,EAAuG,EAAnGzM,KAAKC,IAAID,KAAKsN,IAAKF,EAAS3L,EAAI7D,KAAKkB,YAAYyO,IAAIpO,MAAQvB,KAAKkB,YAAYyO,IAAIpO,MAAQ,GAAI,GAClGwN,EAAyG,EAArG3M,KAAKC,IAAID,KAAKsN,IAAKD,EAAS5L,EAAI7D,KAAKkB,YAAYyO,IAAInO,OAASxB,KAAKkB,YAAYyO,IAAInO,OAAS,GAAI,GACpGoO,EAAS5P,KAAKkB,YAAYyO,IAAIlO,QAAQoN,EAAIE,EAAI/O,KAAKkB,YAAYyO,IAAIpO,OAEvEsN,EAAIW,EAAS3L,GAAK3C,EAAYyO,IAAIpO,MAAM,GACxCwN,EAAIU,EAAS5L,GAAK3C,EAAYyO,IAAInO,OAAO,GAE1CoO,EAAS1O,EAAYyO,IAAIE,mCAAmChB,EAAEE,GAE7D,MAAMpM,EAAQ3C,KAAK+P,SAASpN,OAASiN,GAAU,GAAK,KAAQ,IACtDhN,EAAe,EAAID,EAGnBI,GAAK/C,KAAKkB,YAAYA,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBgN,GAAU,EAAI,KAAQjN,EACzG7C,GAAKE,KAAKkB,YAAYA,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBgN,GAAU,EAAI,KAAQjN,EACzGK,GAAKhD,KAAKkB,YAAYA,YAAY0M,IAAqB,GAAK,KAAQhL,GAAgBgN,GAAU,GAAK,KAAQjN,EAEjH3C,KAAKkB,YAAYA,YAAY0M,GAAoB7K,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAExF4K,IACAD,GAAUF,EACV+B,GAAUF,EACVG,GAAUF,C,CAGdrC,GAAaN,EACbO,GAAcN,EACdO,IAGAJ,GAASF,EACTG,GAASF,EAETiC,GAASL,EACTS,GAASF,EAETD,GAASH,EACTO,GAASF,C,CAGb7B,EAAiBzH,EAAG2G,WAAWhK,EAAIoD,EAAG4G,WAAWhK,EACjDqK,GAAUhH,EAAG2G,WAAW/J,EAAImD,EAAG4G,WAAW/J,GAAK6K,EAC/CP,GAAW,EAAIlH,EAAG2G,WAAW3I,EAAI,EAAI+B,EAAG4G,WAAW3I,GAAKyJ,EAExD4B,GAAYrJ,EAAG+I,kBAAkBC,EAAIhJ,EAAG2G,WAAW3I,EAAI+B,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,GAAKyJ,EACnG6B,GAAYtJ,EAAG+I,kBAAkBG,EAAIlJ,EAAG2G,WAAW3I,EAAI+B,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,GAAKyJ,EAEnGL,EAAQ,EAAMrH,EAAG4G,WAAW3I,EAE5BuL,EAAQxJ,EAAGgJ,kBAAkBC,EAAIjJ,EAAG4G,WAAW3I,EAC/CwL,EAAQzJ,EAAGgJ,kBAAkBG,EAAInJ,EAAG4G,WAAW3I,EAE/CsJ,EAAavH,EAAG4G,WAAW/J,EAC3B2K,EAAYxH,EAAG4G,WAAWhK,EAE1B,IAAK,IAAI3B,EAAI,EAAGA,EAAIyM,EAAgBzM,IAAK,CACrC,MAAMD,EAASwB,KAAKsL,MAAMP,GAAc/K,KAAKsL,MAAMR,GACnD,IAAIU,EAAmBxL,KAAKsL,MAAMN,GAAapN,KAAKkB,YAAYK,MAAQa,KAAKsL,MAAMR,GAGnF,MAAMO,GAAaR,EAAQD,GAASpM,EAC9B0O,GAAaF,EAAQJ,GAASpO,EAC9B2O,GAAaF,EAAQJ,GAASrO,EACpC,IAAI+M,EAASX,EAETwC,EAASR,EACTS,EAASR,EACb,IAAK,IAAI/H,EAAI,EAAGA,EAAItG,EAAQsG,IAAK,CAC7B,GAAIyG,EAAS3N,KAAKkB,YAAY2M,QAAQD,GAAmB,CACrD5N,KAAKkB,YAAY2M,QAAQD,GAAoBD,EAC7C,MAAM9J,EAAI,EAAI8J,EAEd,IAAIkB,EAAuG,EAAnGzM,KAAKC,IAAID,KAAKsN,IAAKF,EAAS3L,EAAI7D,KAAKkB,YAAYyO,IAAIpO,MAAQvB,KAAKkB,YAAYyO,IAAIpO,MAAQ,GAAI,GAClGwN,EAAyG,EAArG3M,KAAKC,IAAID,KAAKsN,IAAKD,EAAS5L,EAAI7D,KAAKkB,YAAYyO,IAAInO,OAASxB,KAAKkB,YAAYyO,IAAInO,OAAS,GAAI,GACpGoO,EAAS5P,KAAKkB,YAAYyO,IAAIlO,QAAQoN,EAAIE,EAAI/O,KAAKkB,YAAYyO,IAAIpO,OAEvEsN,EAAIW,EAAS3L,GAAK3C,EAAYyO,IAAIpO,MAAM,GACxCwN,EAAIU,EAAS5L,GAAK3C,EAAYyO,IAAInO,OAAO,GAE1CoO,EAAS1O,EAAYyO,IAAIE,mCAAmChB,EAAEE,GAE7D,MAAMpM,EAAQ3C,KAAK+P,SAASpN,OAASiN,GAAU,GAAK,KAAQ,IACtDhN,EAAe,EAAID,EAGnBI,GAAK/C,KAAKkB,YAAYA,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBgN,GAAU,EAAI,KAAQjN,EACzG7C,GAAKE,KAAKkB,YAAYA,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBgN,GAAU,EAAI,KAAQjN,EACzGK,GAAKhD,KAAKkB,YAAYA,YAAY0M,IAAqB,GAAK,KAAQhL,GAAgBgN,GAAU,GAAK,KAAQjN,EAEjH3C,KAAKkB,YAAYA,YAAY0M,GAAoB7K,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAExF4K,IACAD,GAAUF,EACV+B,GAAUF,EACVG,GAAUF,C,CAGdrC,GAAaN,EACbO,GAAcN,EACdO,IAEAJ,GAASF,EACTG,GAASF,EAETiC,GAASL,EACTS,GAASF,EAETD,GAASH,EACTO,GAASF,C,CAEjB,ECrVG,MAAMc,EACFpB,EACAE,EAEP5N,YAAY0N,EAAYE,GACpB/O,KAAK6O,EAAIA,EACT7O,KAAK+O,EAAIA,CACb,ECHG,MAAMmB,EACFC,SACA3D,WAAuB,IAAI5I,EAAS,EAAE,EAAE,GACxCyB,OACA/B,MACAsL,kBAAuC,IAAIqB,ECN/C,MAAMG,EAMalP,YAJfmP,cAAwB,IACxB1N,MACC2N,SAAqB3M,EAAS4M,KAEtCpP,YAAsBD,GAAA,KAAAA,YAAAA,CAA4B,CAE3CsP,YAAYC,GACfzQ,KAAKsQ,SAAWG,CACpB,CAEOC,SAAS/N,GACZ3C,KAAK2C,MAAQP,KAAKC,IAAID,KAAKsN,IAAI/M,EAAO,GAAM,EAChD,CAEOgO,qBAAqB3P,GACxB,OAAOA,EAAE6C,EAAI7D,KAAKqQ,YACtB,CAiBOO,cAAcjL,EACjBC,EACAC,GACA,GAAI7F,KAAKsQ,UAAY3M,EAASkN,SAC1B,OAAO,EAEX,MAAMC,EACFnL,EAAGlD,EAAImD,EAAGpD,EAAIoD,EAAGnD,EAAIkD,EAAGnD,EACxBoD,EAAGnD,EAAIoD,EAAGrD,EAAIqD,EAAGpD,EAAImD,EAAGpD,EACxBqD,EAAGpD,EAAIkD,EAAGnD,EAAImD,EAAGlD,EAAIoD,EAAGrD,EAC5B,OAAIxC,KAAKsQ,UAAY3M,EAAS4M,KACnBO,EAAM,EAENA,EAAM,CAErB,CAEOC,eAAepL,EAClBC,EACAC,EACAmL,GACI,GAAIhR,KAAKsQ,UAAY3M,EAASkN,SAC1B,OAAO,EAEf,MAAMC,EACFnL,EAAGlD,EAAImD,EAAGpD,EAAIoD,EAAGnD,EAAIkD,EAAGnD,EACxBoD,EAAGnD,EAAIoD,EAAGrD,EAAIqD,EAAGpD,EAAImD,EAAGpD,EACxBqD,EAAGpD,EAAIuO,EAAGxO,EAAIwO,EAAGvO,EAAIoD,EAAGrD,EACxBwO,EAAGvO,EAAIkD,EAAGnD,EAAImD,EAAGlD,EAAIuO,EAAGxO,EAC5B,OAAIxC,KAAKsQ,WAAa3M,EAAS4M,KACpBO,EAAM,EAENA,EAAM,CAErB,EC7DG,MAAMG,UAAmCb,EAEpCc,eAAyB,EAC1BC,mBAAiD,KAEhDC,YAA6B,IAAIhM,MACrC,IAAI8K,EAAU,IAAIA,EAAU,IAAIA,GAEpCmB,iBAAiBH,GACblR,KAAKkR,cAAgBA,CACzB,CAEQI,gBAEAC,kBAAqC,IAAInM,MAC7C,IAAIxB,EAAS,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAS,EAAG,EAAG,EAAG,GAAI,IAAIA,EAAS,EAAG,EAAG,EAAG,IAG9EzC,YAAYD,GACRqF,MAAMrF,GACNlB,KAAK0Q,SAAS,GACd1Q,KAAKmR,mBAAqB,IAAIzC,EAA2BxN,EAC7D,CAEOsQ,eAAetQ,GAClBlB,KAAKkB,YAAcA,CACvB,CAEOuQ,sBACHzR,KAAKmR,mBAAqB,IAAIrB,EAAwC9P,KAAKkB,YAAalB,KAC5F,CAEO0R,uBACH1R,KAAKmR,mBAAqB,IAAIzC,EAA2B1O,KAAKkB,YAClE,CAEOyQ,mBAAmBrJ,GACtBtI,KAAKsR,gBAAkBhJ,CAC3B,CAEOsJ,cAAc1Q,EAA0B2Q,GAC3C,IAAK,IAAI3K,EAAY,EAAGA,EAAI2K,EAAOjR,OAAQsG,IAAK,CAC5C,MAAM4K,EAAsBD,EAAO3K,GACnClH,KAAK+R,KAAK7Q,EAAa4Q,E,CAE/B,CAEOC,KAAK7Q,EAA0B4D,GAClC,GAAIA,EAAKK,QAAS,CACd,MAAM6M,EAAyBhS,KAAKsR,gBAAgB7I,sBAEpD,IAAK,IAAI5H,EAAY,EAAGA,EAAIiE,EAAKK,QAAQvE,OAAQC,IAC7CmR,EAAanH,eAAe/F,EAAKK,QAAQtE,GAAIiE,EAAKmN,SAASpR,G,CAInE,IAAK,IAAIA,EAAY,EAAGA,EAAIiE,EAAKG,OAAOrE,OAAQC,IAC5Cb,KAAKsR,gBAAgBzG,eAAe/F,EAAKG,OAAOpE,GAAIiE,EAAKoN,QAAQrR,IAGrE,IAAK,IAAIA,EAAY,EAAGA,EAAIiE,EAAKS,MAAM3E,OAAQC,IAAK,CAChD,MAAM8E,EAAeb,EAAKoN,QAAQpN,EAAKS,MAAM1E,GAAGsR,SAAS,IACnDvM,EAAed,EAAKoN,QAAQpN,EAAKS,MAAM1E,GAAGsR,SAAS,IACnDtM,EAAef,EAAKoN,QAAQpN,EAAKS,MAAM1E,GAAGsR,SAAS,IAEzD,GAAInS,KAAK2Q,qBAAqBhL,IAC1B3F,KAAK2Q,qBAAqB/K,IAC1B5F,KAAK2Q,qBAAqB9K,IAM1B,GAJA7F,KAAKoS,SAASzM,EAAI3F,KAAKuR,kBAAkB,IACzCvR,KAAKoS,SAASxM,EAAI5F,KAAKuR,kBAAkB,IACzCvR,KAAKoS,SAASvM,EAAI7F,KAAKuR,kBAAkB,IAErCvR,KAAK4Q,cACL5Q,KAAKuR,kBAAkB,GACvBvR,KAAKuR,kBAAkB,GACvBvR,KAAKuR,kBAAkB,IAAK,CAM5B,GAJAvR,KAAKoR,YAAY,GAAG5E,WAAaxM,KAAKuR,kBAAkB,GACxDvR,KAAKoR,YAAY,GAAG5E,WAAaxM,KAAKuR,kBAAkB,GACxDvR,KAAKoR,YAAY,GAAG5E,WAAaxM,KAAKuR,kBAAkB,GAEpDvR,KAAKkR,cAAe,CACpB,MAAM1L,EAAeV,EAAKmN,SAASnN,EAAKS,MAAM1E,GAAGsE,QAAQ,IACnDM,EAAeX,EAAKmN,SAASnN,EAAKS,MAAM1E,GAAGsE,QAAQ,IACnDO,EAAeZ,EAAKmN,SAASnN,EAAKS,MAAM1E,GAAGsE,QAAQ,IACzDjE,EAAYmR,WAAW7M,EAAIxF,KAAKoR,YAAY,IAC5ClQ,EAAYmR,WAAW5M,EAAIzF,KAAKoR,YAAY,IAC5ClQ,EAAYmR,WAAW3M,EAAI1F,KAAKoR,YAAY,G,MAE5CpR,KAAKoR,YAAY,GAAGxC,kBAAoB9J,EAAKwN,GAAGxN,EAAKS,MAAM1E,GAAGyR,GAAG,IACjEtS,KAAKoR,YAAY,GAAGxC,kBAAoB9J,EAAKwN,GAAGxN,EAAKS,MAAM1E,GAAGyR,GAAG,IACjEtS,KAAKoR,YAAY,GAAGxC,kBAAoB9J,EAAKwN,GAAGxN,EAAKS,MAAM1E,GAAGyR,GAAG,IAGrEtS,KAAKuS,kBAAkBrR,EAAalB,KAAKoR,Y,MAE1C,MAAKpR,KAAK2Q,qBAAqBhL,IACjC3F,KAAK2Q,qBAAqB/K,IAC1B5F,KAAK2Q,qBAAqB9K,IAC3B,SAEA7F,KAAKoR,YAAY,GAAGjB,SAAWxK,EAC/B3F,KAAKoR,YAAY,GAAGxC,kBAAoB9J,EAAKwN,GAAGxN,EAAKS,MAAM1E,GAAGyR,GAAG,IAEjEtS,KAAKoR,YAAY,GAAGjB,SAAWvK,EAC/B5F,KAAKoR,YAAY,GAAGxC,kBAAoB9J,EAAKwN,GAAGxN,EAAKS,MAAM1E,GAAGyR,GAAG,IAEjEtS,KAAKoR,YAAY,GAAGjB,SAAWtK,EAC/B7F,KAAKoR,YAAY,GAAGxC,kBAAoB9J,EAAKwN,GAAGxN,EAAKS,MAAM1E,GAAGyR,GAAG,IAEjEtS,KAAKwS,cAActR,EAAalB,KAAKoR,Y,EAGjD,CAEOgB,SAASK,EAAyCjI,GACrDA,EAAO/H,EAAIL,KAAKsL,MAAO1N,KAAKkB,YAAYK,MAAQ,EAAM,IAAMkR,EAAGhQ,GAAMgQ,EAAG5O,GACxE2G,EAAOhI,EAAIJ,KAAKsL,MAAO1N,KAAKkB,YAAYM,OAAS,EAAa,IAAPiR,EAAGjQ,GAAYiQ,EAAG5O,GACzE2G,EAAO3G,EAAI4O,EAAG5O,CAClB,CAEO6O,6BAA6BrG,EAAYC,GAC5C,MAAMqG,GAAiB3S,KAAKqQ,aAAehE,EAAG8D,SAAStM,IAAMyI,EAAG6D,SAAStM,EAAIwI,EAAG8D,SAAStM,GACnF+O,EAAiB,IAAI1C,EAa3B,OAXA0C,EAAOzC,SAAW,IAAIvM,EAClB+O,GAASrG,EAAG6D,SAAS1N,EAAI4J,EAAG8D,SAAS1N,GAAK4J,EAAG8D,SAAS1N,EACtDkQ,GAASrG,EAAG6D,SAAS3N,EAAI6J,EAAG8D,SAAS3N,GAAK6J,EAAG8D,SAAS3N,EACtDxC,KAAKqQ,cAGTuC,EAAOhE,kBAAoB,IAAIqB,EAC3B0C,GAASrG,EAAGsC,kBAAkBC,EAAIxC,EAAGuC,kBAAkBC,GAAKxC,EAAGuC,kBAAkBC,EACjF8D,GAASrG,EAAGsC,kBAAkBG,EAAI1C,EAAGuC,kBAAkBG,GAAK1C,EAAGuC,kBAAkBG,GAG9E6D,CACX,CAEOJ,cAActR,EAA0B2R,GAC3C,MAAMC,EAAuBD,EACvBE,EAAwB,IAAI3N,MAClC,IAAI4N,EAAYF,EAAMA,EAAMlS,OAAS,GAErC,IAAK,IAAIC,EAAY,EAAGA,EAAIiS,EAAMlS,OAAQC,IAAK,CAC3C,MAAMoS,EAAgBH,EAAMjS,GACxBb,KAAK2Q,qBAAqBsC,EAAM9C,WAC3BnQ,KAAK2Q,qBAAqBqC,EAAE7C,WAC7B4C,EAAOzN,KAAKtF,KAAK0S,6BAA6BM,EAAGC,IAErDF,EAAOzN,KAAK2N,IACLjT,KAAK2Q,qBAAqBqC,EAAE7C,WACnC4C,EAAOzN,KAAKtF,KAAK0S,6BAA6BM,EAAGC,IAErDD,EAAIC,C,CAGR,KAAIF,EAAOnS,OAAS,GAApB,CAIA,IAAK,IAAIsG,EAAY,EAAGA,EAAI6L,EAAOnS,OAAQsG,IACvClH,KAAKoS,SAASW,EAAO7L,GAAGiJ,SAAU4C,EAAO7L,GAAGsF,aAG1B,IAAlBuG,EAAOnS,QACNZ,KAAK4Q,cAAcmC,EAAO,GAAGvG,WAAYuG,EAAO,GAAGvG,WAAYuG,EAAO,GAAGvG,eAIxD,IAAlBuG,EAAOnS,QACNZ,KAAK+Q,eACFgC,EAAO,GAAGvG,WACVuG,EAAO,GAAGvG,WACVuG,EAAO,GAAGvG,WACVuG,EAAO,GAAGvG,cAKlBxM,KAAKuS,kBAAkBrR,EAAa6R,E,CACxC,CAGOR,kBAAkBrR,EAA0B2R,GAE/C,IAAIE,EAASF,EAEb,IAAK,IAAI3L,EAAI,EAAGA,EAAIhG,EAAYgS,WAAWtS,OAAQsG,IAAK,CACpD,MAAMiM,EAAOjS,EAAYgS,WAAWhM,GAC9B4L,EAAQC,EACdA,EAAS,IAAI3N,MACb,IAAI4N,EAAIF,EAAMA,EAAMlS,OAAS,GAE7B,IAAK,IAAIC,EAAI,EAAGA,EAAIiS,EAAMlS,OAAQC,IAAK,CACnC,MAAMoS,EAAQH,EAAMjS,GAChBsS,EAAKC,UAAUH,IACVE,EAAKC,UAAUJ,IAChBD,EAAOzN,KAAK6N,EAAKE,qBAAqBL,EAAGC,IAE7CF,EAAOzN,KAAK2N,IACLE,EAAKC,UAAUJ,IACtBD,EAAOzN,KAAK6N,EAAKE,qBAAqBL,EAAGC,IAE7CD,EAAIC,C,EAIZ,KAAIF,EAAOnS,OAAS,GAKpB,IAAK,IAAIC,EAAI,EAAGA,EAAIkS,EAAOnS,OAAS,EAAGC,IACnCb,KAAKmR,mBAAmB/E,gBAAgBlL,EAAa6R,EAAO,GAAIA,EAAO,EAAIlS,GAAIkS,EAAO,EAAIlS,GAElG,EC/NG,MAAeyS,GCCf,MAAMC,UAAuBD,EAGZpS,YAApBC,YAAoBD,GAChBqF,QADgB,KAAArF,YAAAA,CAEpB,CAEOsS,SAASxS,GACZ,OAAOA,EAAEwL,WAAWhK,GAAKxC,KAAKkB,YAAYuS,UAAUjR,CACxD,CAEO4Q,UAAUpS,GACb,OAAOA,EAAEwL,WAAWhK,GAAKxC,KAAKkB,YAAYuS,UAAUjR,CACxD,CAEOkR,oBAAoBrH,EAAYC,GACnC,MAAMsG,EAAiB,IAAI1C,EAErByD,GAAkB3T,KAAKkB,YAAYuS,UAAUjR,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,GAM3G,OALAoQ,EAAOtP,MAAQgJ,EAAGhJ,MAAMD,IAAIgJ,EAAG/I,OAAOI,IAAIiQ,GAAQpQ,IAAI8I,EAAG/I,OACzDsP,EAAOpG,WAAa,IAAI5I,EACpBxB,KAAKsL,MAAMrB,EAAGG,WAAW/J,GAAK6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,GAAKkR,GACnE3T,KAAKkB,YAAYuS,UAAUjR,EAC3B,GAAK,EAAI6J,EAAGG,WAAW3I,GAAK,EAAIyI,EAAGE,WAAW3I,EAAI,EAAIwI,EAAGG,WAAW3I,GAAK8P,IACtEf,CACX,CAEOS,qBAAqBhH,EAAYC,GACpC,MAAMsG,EAAiB,IAAI1C,EAC3B0C,EAAOpG,WACH,IAAI5I,EACAxB,KAAKsL,MAAMrB,EAAGG,WAAW/J,GAAK6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,IAAMzC,KAAKkB,YAAYuS,UAAUjR,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,IACvJxC,KAAKkB,YAAYuS,UAAUjR,EAC3B,GAAK,EAAI6J,EAAGG,WAAW3I,GAAK,EAAIyI,EAAGE,WAAW3I,EAAI,EAAIwI,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYuS,UAAUjR,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,KAErK,MAAMoR,EAA+B,IAAI3D,EACnCpM,EAAY+O,EAAOpG,WAAW3I,EAKpC,OAJA+P,EAAU/E,GAAKxC,EAAGuC,kBAAkBC,EAAIxC,EAAGG,WAAW3I,GAAKyI,EAAGsC,kBAAkBC,EAAIvC,EAAGE,WAAW3I,EAAIwI,EAAGuC,kBAAkBC,EAAIxC,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYuS,UAAUjR,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,IAAMqB,EAC5O+P,EAAU7E,GAAK1C,EAAGuC,kBAAkBG,EAAI1C,EAAGG,WAAW3I,GAAKyI,EAAGsC,kBAAkBG,EAAIzC,EAAGE,WAAW3I,EAAIwI,EAAGuC,kBAAkBG,EAAI1C,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYuS,UAAUjR,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,IAAMqB,EAC5O+O,EAAOhE,kBAAoBgF,EAEpBhB,CACX,EC7CG,MAAMiB,EAQW3S,YANbiC,0BAA4B,EAC5BA,wBAA0B,EAC1BA,yBAA2B,EAC3BA,0BAA4B,EAC5BA,uBAAyB,EAEhChC,YAAoBD,GAAA,KAAAA,YAAAA,CAA4B,CAEzC4S,2BAA2BxI,EAAiBC,EAAewI,GAC9D,IAAI1H,EAAe,IAAInG,EAASoF,EAAM7I,EAAG6I,EAAM9I,EAAG8I,EAAMzH,GACpDyI,EAAe,IAAIpG,EAASqF,EAAI9I,EAAG8I,EAAI/I,EAAG+I,EAAI1H,GAE9CmQ,EAAgBhU,KAAKiU,kBAAkB5H,GACvC6H,EAAgBlU,KAAKiU,kBAAkB3H,GAEvC6H,GAAkB,EAClBC,GAAgB,EAEpB,MAAQA,GAEJ,GAAIpU,KAAKqU,gBAAgBL,EAAOE,GAC5BC,GAAS,EACTC,GAAO,OACJ,GAAIpU,KAAKsU,gBAAgBN,EAAOE,GACnCE,GAAO,MACJ,CAEH,GAAIJ,IAAUH,EAA2BU,mBAAoB,CACzD,MAAMC,EAAmBR,EACzBA,EAAQE,EACRA,EAAQM,EAER,MAAMC,EAAsBpI,EAC5BA,EAAKC,EACLA,EAAKmI,C,EAGJT,EAAQH,EAA2Ba,mBAAqBb,EAA2BU,oBACpFlI,EAAG5J,EAAK4J,EAAG5J,GAAK6J,EAAG7J,EAAI4J,EAAG5J,IAAMzC,KAAKkB,YAAYyT,UAAUnS,EAAI6J,EAAG7J,IAAM8J,EAAG9J,EAAI6J,EAAG7J,GAClF6J,EAAG7J,EAAIxC,KAAKkB,YAAYyT,UAAUnS,IAC1BwR,EAAQH,EAA2Be,sBAAwBf,EAA2BU,oBAC9FlI,EAAG5J,EAAK4J,EAAG5J,GAAK6J,EAAG7J,EAAI4J,EAAG5J,IAAMzC,KAAKkB,YAAYuS,UAAUjR,EAAI6J,EAAG7J,IAAM8J,EAAG9J,EAAI6J,EAAG7J,GAClF6J,EAAG7J,EAAIxC,KAAKkB,YAAYuS,UAAUjR,IAC1BwR,EAAQH,EAA2BgB,qBAAuBhB,EAA2BU,oBAC7FlI,EAAG7J,EAAK6J,EAAG7J,GAAK8J,EAAG9J,EAAI6J,EAAG7J,IAAMxC,KAAKkB,YAAYyT,UAAUlS,EAAI4J,EAAG5J,IAAM6J,EAAG7J,EAAI4J,EAAG5J,GAClF4J,EAAG5J,EAAIzC,KAAKkB,YAAYyT,UAAUlS,IAC1BuR,EAAQH,EAA2BiB,oBAAsBjB,EAA2BU,qBAC5FlI,EAAG7J,EAAK6J,EAAG7J,GAAK8J,EAAG9J,EAAI6J,EAAG7J,IAAMxC,KAAKkB,YAAYuS,UAAUhR,EAAI4J,EAAG5J,IAAM6J,EAAG7J,EAAI4J,EAAG5J,GAClF4J,EAAG5J,EAAIzC,KAAKkB,YAAYuS,UAAUhR,GAGtCuR,EAAQhU,KAAKiU,kBAAkB5H,E,CAInC8H,GACAnU,KAAKkB,YAAY6M,YAAY1B,EAAIC,EAAIyH,EAE7C,CAEOM,gBAAgBL,EAAeE,GAClC,OAAQF,EAAQE,KAAWL,EAA2BU,kBAC1D,CAEOD,gBAAgBN,EAAeE,GAClC,OAAQF,EAAQE,KAAWL,EAA2BU,kBAC1D,CAEON,kBAAkBhB,GACrB,IAAI8B,EAAqBlB,EAA2BU,mBAcpD,OAZItB,EAAMxQ,EAAIzC,KAAKkB,YAAYuS,UAAUhR,EACrCsS,GAAclB,EAA2BiB,iBAClC7B,EAAMxQ,EAAIzC,KAAKkB,YAAYyT,UAAUlS,IAC5CsS,GAAclB,EAA2BgB,mBAGzC5B,EAAMzQ,EAAIxC,KAAKkB,YAAYuS,UAAUjR,EACrCuS,GAAclB,EAA2Be,mBAClC3B,EAAMzQ,EAAIxC,KAAKkB,YAAYyT,UAAUnS,IAC5CuS,GAAclB,EAA2Ba,iBAGtCK,CACX,ECnFG,MAAMC,UAAqB1B,EAEVpS,YAApBC,YAAoBD,GAChBqF,QADgB,KAAArF,YAAAA,CAEpB,CAEOsS,SAASxS,GACZ,OAAOA,EAAEwL,WAAW/J,GAAK,CAC7B,CAEO2Q,UAAUpS,GACb,OAAOA,EAAEwL,WAAW/J,GAAK,CAC7B,CAEOiR,oBAAoBrH,EAAYC,GACnC,MAAMsG,EAAS,IAAI1C,EACbyD,GAAkB3T,KAAKkB,YAAYuS,UAAUhR,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,GAK3G,OAJAmQ,EAAOtP,MAAQgJ,EAAGhJ,MAAMD,IAAIgJ,EAAG/I,OAAOI,IAAIiQ,GAAQpQ,IAAI8I,EAAG/I,OACzDsP,EAAOpG,WAAa,IAAI5I,EAAS5D,KAAKkB,YAAYuS,UAAUhR,EACxDL,KAAKsL,MAAMrB,EAAGG,WAAWhK,GAAK8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,GAAKmR,GACnE,GAAK,EAAItH,EAAGG,WAAW3I,GAAK,EAAIyI,EAAGE,WAAW3I,EAAI,EAAIwI,EAAGG,WAAW3I,GAAK8P,IACtEf,CACX,CAEOS,qBAAqBhH,EAAYC,GACpC,MAAMsG,EAAS,IAAI1C,EACnB0C,EAAOpG,WACH,IAAI5I,EAAS5D,KAAKkB,YAAYuS,UAAUhR,EACpCL,KAAKsL,MAAMrB,EAAGG,WAAWhK,GAAK8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,IAAMxC,KAAKkB,YAAYuS,UAAUhR,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,IACvJ,GAAK,EAAI4J,EAAGG,WAAW3I,GAAK,EAAIyI,EAAGE,WAAW3I,EAAI,EAAIwI,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYuS,UAAUhR,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,KAErK,MAAMmR,EAAY,IAAI3D,EAChBpM,EAAI+O,EAAOpG,WAAW3I,EAK5B,OAJA+P,EAAU/E,GAAKxC,EAAGuC,kBAAkBC,EAAIxC,EAAGG,WAAW3I,GAAKyI,EAAGsC,kBAAkBC,EAAIvC,EAAGE,WAAW3I,EAAIwI,EAAGuC,kBAAkBC,EAAIxC,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYuS,UAAUhR,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,IAAMoB,EAC5O+P,EAAU7E,GAAK1C,EAAGuC,kBAAkBG,EAAI1C,EAAGG,WAAW3I,GAAKyI,EAAGsC,kBAAkBG,EAAIzC,EAAGE,WAAW3I,EAAIwI,EAAGuC,kBAAkBG,EAAI1C,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYuS,UAAUhR,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,IAAMoB,EAC5O+O,EAAOhE,kBAAoBgF,EAEpBhB,CACX,ECtCG,MAAMqC,UAAsB3B,EAEXpS,YAApBC,YAAoBD,GAChBqF,QADgB,KAAArF,YAAAA,CAEpB,CAEOsS,SAASxS,GACZ,OAAOA,EAAEwL,WAAW/J,EAAIzC,KAAKkB,YAAYK,KAC7C,CAEO6R,UAAUpS,GACb,OAAOA,EAAEwL,WAAW/J,EAAIzC,KAAKkB,YAAYK,KAC7C,CAEOmS,oBAAoBrH,EAAYC,GACnC,MAAMsG,EAAS,IAAI1C,EACbyD,GAAkB3T,KAAKkB,YAAYyT,UAAUlS,EAAI,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,GAK/G,OAJAmQ,EAAOtP,MAAQgJ,EAAGhJ,MAAMD,IAAIgJ,EAAG/I,OAAOI,IAAIiQ,GAAQpQ,IAAI8I,EAAG/I,OACzDsP,EAAOpG,WAAa,IAAI5I,EAAS5D,KAAKkB,YAAYyT,UAAUlS,EAAI,EAC5DL,KAAKsL,MAAMrB,EAAGG,WAAWhK,GAAK8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,GAAKmR,GACnE,GAAK,EAAItH,EAAGG,WAAW3I,GAAK,EAAIyI,EAAGE,WAAW3I,EAAI,EAAIwI,EAAGG,WAAW3I,GAAK8P,IACtEf,CACX,CAEOS,qBAAqBhH,EAAYC,GACpC,MAAMsG,EAAS,IAAI1C,EACnB0C,EAAOpG,WACH,IAAI5I,EAAS5D,KAAKkB,YAAYyT,UAAUlS,EAAI,EACxCL,KAAKsL,MAAMrB,EAAGG,WAAWhK,GAAK8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,IAAMxC,KAAKkB,YAAYyT,UAAUlS,EAAI,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,IAC3J,GAAK,EAAI4J,EAAGG,WAAW3I,GAAK,EAAIyI,EAAGE,WAAW3I,EAAI,EAAIwI,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYyT,UAAUlS,EAAI,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,KAEzK,MAAMmR,EAAY,IAAI3D,EAChBpM,EAAI+O,EAAOpG,WAAW3I,EAK5B,OAJA+P,EAAU/E,GAAKxC,EAAGuC,kBAAkBC,EAAIxC,EAAGG,WAAW3I,GAAKyI,EAAGsC,kBAAkBC,EAAIvC,EAAGE,WAAW3I,EAAIwI,EAAGuC,kBAAkBC,EAAIxC,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYyT,UAAUlS,EAAI,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,IAAMoB,EAChP+P,EAAU7E,GAAK1C,EAAGuC,kBAAkBG,EAAI1C,EAAGG,WAAW3I,GAAKyI,EAAGsC,kBAAkBG,EAAIzC,EAAGE,WAAW3I,EAAIwI,EAAGuC,kBAAkBG,EAAI1C,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYyT,UAAUlS,EAAI,EAAI4J,EAAGG,WAAW/J,IAAM6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,IAAMoB,EAEhP+O,EAAOhE,kBAAoBgF,EACpBhB,CACX,ECtCG,MAAMsC,UAAoB5B,EAETpS,YAApBC,YAAoBD,GAChBqF,QADgB,KAAArF,YAAAA,CAEpB,CAEOsS,SAASxS,GACZ,OAAOA,EAAEwL,WAAWhK,EAAIxC,KAAKkB,YAAYyT,UAAUnS,EAAI,CAC3D,CAEO4Q,UAAUpS,GACb,OAAOA,EAAEwL,WAAWhK,EAAIxC,KAAKkB,YAAYyT,UAAUnS,EAAI,CAC3D,CAEOkR,oBAAoBrH,EAAYC,GACnC,MAAMsG,EAAS,IAAI1C,EACbyD,GAAkB3T,KAAKkB,YAAYyT,UAAUnS,EAAI,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,GAO/G,OALAoQ,EAAOtP,MAAQgJ,EAAGhJ,MAAMD,IAAIgJ,EAAG/I,OAAOI,IAAIiQ,GAAQpQ,IAAI8I,EAAG/I,OACzDsP,EAAOpG,WAAa,IAAI5I,EACpBxB,KAAKsL,MAAMrB,EAAGG,WAAW/J,GAAK6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,GAAKkR,GACnE3T,KAAKkB,YAAYyT,UAAUnS,EAAI,EAC/B,GAAK,EAAI6J,EAAGG,WAAW3I,GAAK,EAAIyI,EAAGE,WAAW3I,EAAI,EAAIwI,EAAGG,WAAW3I,GAAK8P,IACtEf,CACX,CAEOS,qBAAqBhH,EAAYC,GACpC,MAAMsG,EAAS,IAAI1C,EACnB0C,EAAOpG,WACH,IAAI5I,EACAxB,KAAKsL,MAAMrB,EAAGG,WAAW/J,GAAK6J,EAAGE,WAAW/J,EAAI4J,EAAGG,WAAW/J,IAAMzC,KAAKkB,YAAYyT,UAAUnS,EAAI,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,IAC3JxC,KAAKkB,YAAYyT,UAAUnS,EAAI,EAC/B,GAAK,EAAI6J,EAAGG,WAAW3I,GAAK,EAAIyI,EAAGE,WAAW3I,EAAI,EAAIwI,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYyT,UAAUnS,EAAI,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,KAEzK,MAAMoR,EAAY,IAAI3D,EAChBpM,EAAI+O,EAAOpG,WAAW3I,EAK5B,OAJA+P,EAAU/E,GAAKxC,EAAGuC,kBAAkBC,EAAIxC,EAAGG,WAAW3I,GAAKyI,EAAGsC,kBAAkBC,EAAIvC,EAAGE,WAAW3I,EAAIwI,EAAGuC,kBAAkBC,EAAIxC,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYyT,UAAUnS,EAAI,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,IAAMqB,EAChP+P,EAAU7E,GAAK1C,EAAGuC,kBAAkBG,EAAI1C,EAAGG,WAAW3I,GAAKyI,EAAGsC,kBAAkBG,EAAIzC,EAAGE,WAAW3I,EAAIwI,EAAGuC,kBAAkBG,EAAI1C,EAAGG,WAAW3I,IAAM7D,KAAKkB,YAAYyT,UAAUnS,EAAI,EAAI6J,EAAGG,WAAWhK,IAAM8J,EAAGE,WAAWhK,EAAI6J,EAAGG,WAAWhK,IAAMqB,EAEhP+O,EAAOhE,kBAAoBgF,EACpBhB,CACX,EC/CG,MAAMuC,EAGF1T,QACAF,MACAC,OACA4T,SACAC,UACCC,OAAiB,EAEzBC,SAASD,GACLtV,KAAKsV,MAAQA,CACjB,CACAnU,YAAYM,EAAuBF,EAAgBC,GAC/CxB,KAAKyB,QAAUA,EACfzB,KAAKuB,MAAQA,EACbvB,KAAKwB,OAASA,EACdxB,KAAKqV,UAAa7T,EAAO,EAAI,EAC7BxB,KAAKoV,SAAY7T,EAAM,EAAG,CAC9B,CAEOiU,SAAS/T,EAAkBgB,EAAWD,GACzC,OAAOf,EAAQA,SAAa,IAAJgB,GAAyB,KAAR,IAAJD,GACzC,CAEOiT,yBAAyBhT,EAAWD,GACvC,MAAMkT,IAAY,EAAJjT,GAAS,IAAO,KAAO,IAC/BkT,IAASlT,EAAI,EAAK,GAAK,IAAO,KAAO,IACrCmT,IAAY,EAAJpT,GAAS,IAAO,KAAO,IAC/BiJ,IAASjJ,EAAI,EAAK,GAAK,IAAO,KAAO,IAErCqT,EAAqC,IAA9B7V,KAAKwV,SAASxV,KAAM0V,EAAIE,GAC/BE,EAAqC,IAA9B9V,KAAKwV,SAASxV,KAAM2V,EAAIC,GAC/BG,EAAqC,IAA9B/V,KAAKwV,SAASxV,KAAM0V,EAAIjK,GAC/BuK,EAAqC,IAA9BhW,KAAKwV,SAASxV,KAAM2V,EAAIlK,GAE/BwK,EAAOJ,GAAQ,GAAKpT,EAAIL,KAAK8T,MAAMzT,KAAQqT,GAASrT,EAAIL,KAAK8T,MAAMzT,IACnE0T,EAAOJ,GAAQ,GAAKtT,EAAIL,KAAK8T,MAAMzT,KAAQuT,GAASvT,EAAIL,KAAK8T,MAAMzT,IAGzE,OAFYwT,GAAQ,GAAKzT,EAAIJ,KAAK8T,MAAM1T,KAAQ2T,GAAS3T,EAAIJ,KAAK8T,MAAM1T,GAG5E,CAEO4T,0BAA0B3T,EAAWD,GAExC,IAAIkT,EACCC,EACAC,EACDnK,EAEAzL,KAAKsV,OACL7S,EAAIL,KAAKC,IAAID,KAAKsN,IAAIjN,EAAGzC,KAAKuB,MAAQ,GAAI,GAC1CiB,EAAIJ,KAAKC,IAAID,KAAKsN,IAAIlN,EAAGxC,KAAKwB,OAAS,GAAI,GAM3CkU,EAAKtT,KAAK8T,MAAMzT,GAChBkT,EAAMvT,KAAKC,IAAID,KAAKsN,IAAIgG,EAAG,EAAG1V,KAAKuB,MAAQ,GAAI,GAC7CqU,EAAKxT,KAAK8T,MAAM1T,GACjBiJ,EAAIrJ,KAAKC,IAAID,KAAKsN,IAAIkG,EAAG,EAAG5V,KAAKwB,OAAS,GAAI,KAE/CiB,GAAKA,EAAEzC,KAAKuB,MAAQvB,KAAKuB,OAASvB,KAAKuB,MACvCiB,GAAKA,EAAExC,KAAKwB,OAASxB,KAAKwB,QAAUxB,KAAKwB,OAG7CkU,EAAS,EAAJjT,EACLkT,GAAMlT,EAAG,EAAI,GAAGzC,KAAKuB,MACnBqU,EAAS,EAAJpT,EACNiJ,GAAMjJ,EAAG,EAAI,GAAGxC,KAAKwB,QAKtB,MAAMqU,EAAO7V,KAAKqW,UAAUrW,KAAM0V,EAAIE,GAChCE,EAAO9V,KAAKqW,UAAUrW,KAAM2V,EAAIC,GAChCG,EAAO/V,KAAKqW,UAAUrW,KAAM0V,EAAIjK,GAChCuK,EAAOhW,KAAKqW,UAAUrW,KAAM2V,EAAIlK,GAEtC,OAAOzL,KAAKsW,gBAAgB7T,EAAGD,EAAGqT,EAAMC,EAAOC,EAAMC,EACzD,CAEOK,UAAU5U,EAAkBgB,EAAWD,GAC1C,OAAOxC,KAAKyB,QAAQgB,EAAID,EAAIxC,KAAKuB,MACrC,CAKOsO,mCAAmCpN,EAAWD,GACjD,IAKIqT,EACAC,EACAC,EACAC,EARAN,EAAS,EAAJjT,EACLkT,EAAe,GAAL,EAAJlT,GACNmT,EAAS,EAAJpT,EACLiJ,EAAe,GAAL,EAAJjJ,GAuBV,OAhBIxC,KAAKsV,OACJI,EAAKtT,KAAKC,IAAID,KAAKsN,IAAIgG,EAAI1V,KAAKuB,MAAQ,GAAI,GAC5CoU,EAAKvT,KAAKC,IAAID,KAAKsN,IAAIiG,EAAI3V,KAAKuB,MAAQ,GAAI,GAC5CqU,EAAKxT,KAAKC,IAAID,KAAKsN,IAAIkG,EAAI5V,KAAKwB,OAAS,GAAI,GAC7CiK,EAAKrJ,KAAKC,IAAID,KAAKsN,IAAIjE,EAAIzL,KAAKwB,OAAS,GAAI,GAE7CqU,EAAO7V,KAAKqW,UAAUrW,KAAM0V,EAAIE,GAChCE,EAAO9V,KAAKqW,UAAUrW,KAAM2V,EAAIC,GAChCG,EAAO/V,KAAKqW,UAAUrW,KAAM0V,EAAIjK,GAChCuK,EAAOhW,KAAKqW,UAAUrW,KAAM2V,EAAIlK,KAEjCoK,EAAO7V,KAAKuW,mBAAmBvW,KAAM0V,EAAIE,GACzCE,EAAO9V,KAAKuW,mBAAmBvW,KAAM2V,EAAIC,GACzCG,EAAO/V,KAAKuW,mBAAmBvW,KAAM0V,EAAIjK,GACzCuK,EAAOhW,KAAKuW,mBAAmBvW,KAAM2V,EAAIlK,IAEtCzL,KAAKsW,gBAAgB7T,EAAGD,EAAGqT,EAAMC,EAAMC,EAAMC,EACxD,CAEOO,mBAAmB9U,EAAkBgB,EAAWD,GACnD,OAAOxC,KAAKyB,SAASgB,EAAKzC,KAAKuB,MAAM,IAAOiB,EAAGxC,KAAKwB,OAAO,GAAMxB,KAAKuB,MAC1E,CAEOiV,UAAU/U,EAAkBgB,EAAWD,GAC1C,OAAOxC,KAAKyB,SACLgB,EAAIzC,KAAKuB,MAASvB,KAAKuB,OAASvB,KAAKuB,OACrCiB,EAAIxC,KAAKwB,OAAUxB,KAAKwB,QAAUxB,KAAKwB,OAAUxB,KAAKuB,MACjE,CAEQ+U,gBAAgB7T,EAAGD,EAAGqT,EAAMC,EAAMC,EAAMC,GAE5C,MAAMS,EAAQhU,GAAS,EAAJA,GACbiU,EAAQlU,GAAS,EAAJA,GACbmU,EAAgB,EAAIF,EACpBG,EAAgB,EAAIF,EAsC1B,QApCsB,IAAPb,GAKSc,GAJF,IAAPb,GAIkCW,GAE1BG,IALD,IAAPb,GAISY,GAHF,IAAPX,GAGkCS,GACAC,IAElCb,GAAQ,EAAI,KAKHc,GAJTb,GAAQ,EAAI,KAIsBW,GAE1BG,IALRb,GAAQ,EAAI,KAIHY,GAHTX,GAAQ,EAAI,KAGsBS,GACAC,GAoBzB,IAlBTb,GAAQ,GAAK,KAKJc,GAJTb,GAAQ,GAAK,KAIqBW,GAE1BG,IALRb,GAAQ,GAAK,KAIJY,GAHTX,GAAQ,GAAK,KAGqBS,GACAC,GAWZ,KATtBb,GAAQ,GAAK,KAKJc,GAJTb,GAAQ,GAAK,KAIqBW,GAE1BG,IALRb,GAAQ,GAAK,KAIJY,GAHTX,GAAQ,GAAK,KAGqBS,GACAC,GAEE,EACvD,ECzIG,MAAMG,EAEF1T,2BAA6B,EAE7BsQ,UACAkB,UAGAzT,YACA2M,QAEAyC,SAAqB3M,EAAS4M,KAE9BuG,OACAnH,IACAwB,mBAAqB,IAAIxE,EAA8B3M,MACvD+W,2BAA6B,IAAIrI,EAA2B1O,MAE5DgX,iBAAmB,IAAI/V,EAAiBjB,MAEvCiX,0BACDC,eAAiB,IAAIpJ,EAAkB9N,MACvCmX,iBAAmB,IAAI3I,EAAkBxO,MACzCoX,UAEAC,kBAA4B,EAC5BC,eAAiB,EACjBC,aAAe,EAEfhW,MACAC,OACCgW,UACAC,iBAEAC,MAAQ,IAAIrR,EAEZsR,MAQAC,UAQAC,aAAe,IAAIhE,EAA2B7T,MAC/CkT,WAAa9N,QACZ3D,QAAU,IAAI0T,EAEtBhU,YAAYI,EAAeC,GACvBxB,KAAKuB,MAAQA,EACbvB,KAAKwB,OAASA,EAEdxB,KAAKwX,UAAY,IAAIM,UAAUvW,EAAOC,GACtCxB,KAAK6N,QAAU,IAAIkK,aAAaxW,EAAQC,GACxC,MAAMwW,EAAc,IAAIC,YAAYjY,KAAKuB,MAAQvB,KAAKwB,OAASqV,EAAYqB,qBAC3ElY,KAAKyX,iBAAmB,IAAIU,kBAAkBH,GAC9ChY,KAAKkB,YAAc,IAAIkX,YAAYJ,GACnChY,KAAKoX,UAAY,IAAIgB,YAAY7W,EAAQC,GAE5CxB,KAAKiX,0BAA4B,IAAIhG,EAA2BjR,MAC7DA,KAAKyT,UAAY,IAAItM,EAAS,EAAG,GACjCnH,KAAK2U,UAAY,IAAIxN,EAAS5F,EAAQ,EAAGC,EAAS,GAElDxB,KAAKkT,WAAa,IAAI9N,MAClB,IAAI6P,EAAcjV,MAClB,IAAIgV,EAAahV,MACjB,IAAIuT,EAAevT,MACnB,IAAIkV,EAAYlV,MAExB,CAEOwQ,YAAYC,GACfzQ,KAAKsQ,SAAWG,CACpB,CAEO4H,WAAW5W,GACdzB,KAAK2P,IAAMlO,CACf,CAYO6W,eAEH,OADAtY,KAAKwX,UAAUe,KAAKC,IAAIxY,KAAKyX,kBACtBzX,KAAKwX,SAChB,CAEOiB,QACH,MAAMnV,EAAgBL,EAAMyV,MAAMtV,iBAC5BuV,EAAgB3Y,KAAKuB,MAAQvB,KAAKwB,OACxC,IAAK,IAAIX,EAAI,EAAGA,EAAI8X,EAAO9X,IACvBb,KAAKkB,YAAYL,GAAKyC,CAE9B,CAEOsV,iBAAiBtV,GACpBtD,KAAKkB,YAAY2X,KAAKvV,EAC1B,CAEOiL,UAAU9L,EAAWD,EAAWc,GACnCtD,KAAKkB,YAAYuB,EAAID,EAAIxC,KAAKuB,OAAS+B,CAE3C,CACOwV,WAAWrW,EAAWD,EAAWc,EAAeX,GACnD,MAAMuC,EAAgBzC,EAAID,EAAIxC,KAAKuB,MAC7BqB,EAAe,EAAID,EACnBI,GAAO/C,KAAKkB,YAAYgE,IAAU,EAAK,KAAQ,GAC7C5B,GAAS,EAAK,KAAQ,EAAW,EACnCxD,GAAOE,KAAKkB,YAAYgE,IAAU,EAAK,KAAQ,GAC/C5B,GAAS,EAAK,KAAQ,EAAW,EACjCN,GAAOhD,KAAKkB,YAAYgE,IAAU,GAAM,KAAQ,GAChD5B,GAAS,GAAM,KAAQ,EAAW,EACxCtD,KAAKkB,YAAYuB,EAAID,EAAIxC,KAAKuB,OAASwB,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,EAE9E,CAEO+V,WAAWtW,EAAWD,EAAWc,EAAe0V,GAEnD,MAAM9T,EAAgBzC,EAAID,EAAIxC,KAAKuB,MAC7BoB,GAAUW,GAAS,GAAM,KAAQ,IAAM0V,EACvCpW,EAAe,EAAID,EAEnBI,GAAO/C,KAAKkB,YAAYgE,IAAU,EAAK,KAAQ,GAC7C5B,GAAS,EAAK,KAAQ,EAAW,EACnCxD,GAAOE,KAAKkB,YAAYgE,IAAU,EAAK,KAAQ,GAC/C5B,GAAS,EAAK,KAAQ,EAAW,EACjCN,GAAOhD,KAAKkB,YAAYgE,IAAU,GAAM,KAAQ,GAChD5B,GAAS,GAAM,KAAQ,EAAW,EAExCtD,KAAKkB,YAAYgE,GAASnC,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,EACjE,CAUAiW,qBAAqBxW,EAAWD,EAAWc,GACvC,GAAKb,EAAI,GAAKA,GAAKzC,KAAKuB,OAAWiB,EAAI,GAAKA,GAAKxC,KAAKwB,OAAS,OAC/D,MAAM0X,EAAW9W,KAAK8T,MAAMzT,GACtB0W,EAAW/W,KAAK8T,MAAM1T,GAGtB4W,GAFW,EAAIhX,KAAKgM,IAAI3L,EAAIyW,KACjB,EAAI9W,KAAKgM,IAAI5L,EAAI2W,IAElCnZ,KAAK+Y,WAAWG,EAAUC,EAAU7V,EAAO8V,EAC/C,CAMAC,iBAAiB5W,EAAWD,EAAWc,GACnC,GAAKb,EAAI,GAAKA,GAAKzC,KAAKuB,OAAWiB,EAAI,GAAKA,GAAKxC,KAAKwB,OAAS,OAC/D,MAAM0X,EAAW9W,KAAKsL,MAAMjL,GACtB0W,EAAW/W,KAAKsL,MAAMlL,GAC5BxC,KAAKuO,UAAU2K,EAAUC,EAAU7V,EACvC,CAOAgW,4BAA4B7W,EAAWD,EAAWc,GAC9C,KAAKb,EAAI,GAAKA,GAAKzC,KAAKuB,OAAWiB,EAAI,GAAKA,GAAKxC,KAAKwB,QACtD,IAAK,IAAI0X,EAAW9W,KAAK8T,MAAMzT,GAAIyW,GAAY9W,KAAKmX,KAAK9W,GAAIyW,IACzD,IAAK,IAAIC,EAAW/W,KAAK8T,MAAM1T,GAAI2W,GAAY/W,KAAKmX,KAAK/W,GAAI2W,IAAY,CACrE,MAEMC,GAFW,EAAIhX,KAAKgM,IAAI3L,EAAIyW,KACjB,EAAI9W,KAAKgM,IAAI5L,EAAI2W,IAElCnZ,KAAK8Y,WAAWI,EAAUC,EAAU7V,EAAO8V,E,CAGvD,CAEOI,UAAU/W,EAAWD,GACxB,OAAOxC,KAAKkB,YAAYuB,EAAID,EAAIxC,KAAKuB,MACzC,CAEOkY,SAAShX,EAAGD,EAAGjB,EAAO+B,GACzB,IAAIgI,EAAQ7I,EAAID,EAAIxC,KAAKuB,MAEzB,IAAK,IAAIV,EAAI,EAAGA,EAAIU,EAAOV,IACvBb,KAAKkB,YAAYoK,KAAWhI,CAEpC,CAEOoW,UAAUjX,EAAWD,EAAWjB,EAAeC,EAAgB8B,GAClE,IAAIgI,EAAQ7I,EAAID,EAAIxC,KAAKuB,MACzB,IAAK,IAAI2F,EAAI,EAAGA,EAAI1F,EAAQ0F,IAAK,CAC7B,IAAK,IAAIrG,EAAI,EAAGA,EAAIU,EAAOV,IAEvBb,KAAKkB,YAAYoK,KAAWhI,EAGhCgI,GAAStL,KAAKuB,MAAQA,C,CAE9B,CAEOoY,SAASlX,EAAWD,EAAWoX,EAAcnY,GAChD,IAAIoY,EAAOpX,EACX,MAAMqX,EAAa,IAAIC,WAAW,GAClC,IAAK,IAAIlZ,EAAI,EAAGA,EAAI+Y,EAAKhZ,OAAQC,IAAK,CAClC,MAAMqE,EAAQ0U,EAAKG,WAAWlZ,GAAKiZ,EAC7BrQ,EAA8B,EAAzBrH,KAAK8T,MAAMhR,EAAQ,IACxBwE,EAA8B,EAAzBtH,KAAK8T,MAAMhR,EAAQ,IAC9BlF,KAAKga,yBAAyBH,EAAMrX,EAAGiH,EAAIC,EAAI,EAAG,EAAGjI,GACrDoY,GAAQ,C,CAEhB,CAEOI,iBAEH,IAAK,IAAIpZ,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAI4B,EAAI,EAAGA,EAAIzC,KAAKuB,MAAOkB,IAC5BzC,KAAKkB,aAHC,IAGoBL,GAAKb,KAAKuB,MAAQkB,GAAKzC,KAAKkB,aAHhD,IAGyE,EAAJL,EAAQ,GAAKb,KAAKuB,MAAQkB,EACjG4I,EAAa6O,YAAY,EAAG,GAAIrZ,IAA+C,GAAzCuB,KAAK4E,IAAiB,KAAbmT,KAAKC,MAAoB,GAAJvZ,IAAiB,EAGrG,CAEOwZ,iBAAiBC,EAAYC,EAAYC,EAAYC,EAAYlZ,EAAeC,EAAgBC,EAAkBuX,GACrH,IAAK,IAAIlV,EAAI,EAAGA,EAAIvC,EAAOuC,IACvB,IAAK,IAAI4W,EAAI,EAAGA,EAAIlZ,EAAQkZ,IAAK,CAC7B,MAAMC,EAAYH,EAAK1W,GAAO2W,EAAKC,GAAKjZ,EAAQF,MAC1CqZ,EAAWN,EAAKxW,GAAOyW,EAAKG,GAAK1a,KAAKuB,MACtCoB,GAAUlB,EAAQA,QAAQkZ,IAAa,GAAM,KAAQ,IAAM3B,EAC3DpW,EAAe,EAAID,EAEnBI,GAAO/C,KAAKkB,YAAY0Z,IAAY,EAAK,KAAQ,GAAmBnZ,EAAQA,QAAQkZ,IAAa,EAAK,KAAQ,EAAW,EACzH7a,GAAOE,KAAKkB,YAAY0Z,IAAY,EAAK,KAAQ,GAAmBnZ,EAAQA,QAAQkZ,IAAa,EAAK,KAAQ,EAAW,EACzH3X,GAAOhD,KAAKkB,YAAY0Z,IAAY,GAAM,KAAQ,GAAmBnZ,EAAQA,QAAQkZ,IAAa,GAAM,KAAQ,EAAW,EAEjI3a,KAAKkB,YAAY0Z,GAAW7X,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAG3E,CAEOgX,yBAAyBM,EAAYC,EAAYC,EAAYC,EAAYlZ,EAAeC,EAAgBC,GAC3G,IAAIkZ,EAAWH,EAAKC,EAAKhZ,EAAQF,MAC7BqZ,EAAUN,EAAKC,EAAKva,KAAKuB,MAE7B,IAAK,IAAImZ,EAAI,EAAGA,EAAIlZ,EAAQkZ,IAAK,CAC7B,IAAK,IAAI5W,EAAI,EAAGA,EAAIvC,EAAOuC,IAAK,CAC5B,MAAMR,EAAQ7B,EAAQA,QAAQkZ,GAClB,WAARrX,IACAtD,KAAKkB,YAAY0Z,GAAWtX,GAEhCqX,IACAC,G,CAEJD,GAAYlZ,EAAQF,MAAQA,EAC5BqZ,GAAW5a,KAAKuB,MAAQA,C,CAEhC,CAGOsZ,qBAAqBpY,EAAWD,EAAWf,EAAkB6B,GAEhE,IAAIsX,EAAUnY,EAAID,EAAIxC,KAAKuB,MACvBoZ,EAAW,EAEf,IAAK,IAAID,EAAI,EAAGA,EAAIjZ,EAAQD,OAAQkZ,IAAK,CACrC,IAAK,IAAI5W,EAAI,EAAGA,EAAIrC,EAAQF,MAAOuC,IAAK,CACpC,MAAMgX,EAAUrZ,EAAQA,QAAQkZ,GAG1B5X,GAAK+X,GAAW,EAAI,KAAQxX,EAAMP,EAAI,IACtCjD,GAAKgb,GAAW,EAAI,KAAQxX,EAAMxD,EAAI,IACtCkD,GAAK8X,GAAW,GAAK,KAAQxX,EAAMN,EAAI,IAE7ChD,KAAKkB,YAAY0Z,GAAW7X,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAE/D2X,IACAC,G,CAGJA,GAAW5a,KAAKuB,MAAQE,EAAQF,K,CAExC,CAEOwZ,uBAAuBT,EAAYC,EAAYC,EAAYC,EAAYlZ,EAAeC,EAAgBC,GACzG,IAAIkZ,EAAWH,EAAKC,EAAKhZ,EAAQF,MAC7BqZ,EAAUN,EAAKC,EAAKva,KAAKuB,MAE7B,IAAK,IAAImZ,EAAI,EAAGA,EAAIlZ,EAAQkZ,IAAK,CAC7B,IAAK,IAAI5W,EAAI,EAAGA,EAAIvC,EAAOuC,IACvB9D,KAAKkB,YAAY0Z,GAAWnZ,EAAQA,QAAQkZ,GAC5CA,IACAC,IAEJD,GAAYlZ,EAAQF,MAAQA,EAC5BqZ,GAAW5a,KAAKuB,MAAQA,C,CAEhC,CAUO4B,aAAa6X,EAAYC,EAAYC,GAExC,GAAI,IAAMA,EACN,OAAOF,EAGX,GAAI,MAAQE,EACR,OAAOD,EAGX,MAAME,EAAoB,IAAMD,EAchC,OAAO,aAXkB,SAALD,IAAoB,IAChBC,IAFC,SAALF,IAAoB,IAEFG,GAAc,GAU3B,KAPA,MAALF,IAAoB,GAChBC,IAFC,MAALF,IAAoB,GAEFG,GAAc,GAMjB,GAHV,IAALF,GACIC,GAFC,IAALF,GAEkBG,GAAc,CAGxD,CAGOhY,gBAAgB6X,EAAYC,GAE/B,MAAMG,EAAMJ,GAAM,GAAM,IAClBK,EAAML,GAAO,EAAK,IAClBM,EAAkB,IAAZN,EAENO,EAAMN,GAAM,GAAM,IAClBO,EAAMP,GAAO,EAAK,IAClBQ,EAAkB,IAAZR,EAMZ,OAAQ,KAAQ,IAJNG,EAAKG,EAAK,IAAOH,EAAKG,EAAK,MAIX,IAHhBF,EAAKG,EAAK,IAAOH,EAAKG,EAAK,MAGD,GAF1BF,EAAKG,EAAK,IAAOH,EAAKG,EAAK,IAGvC,CAEKC,gBAAgBpB,EAAYC,EAAYC,EAAYC,EAAYlZ,EAAeC,EAAgBC,EAAsBka,EAAoB3C,GAC5I,IAAI2B,EAAWH,EAAKC,EAAKkB,EACrBf,EAAUN,EAAKC,EAAKva,KAAKuB,MAE7B,IAAK,IAAImZ,EAAI,EAAGA,EAAIlZ,EAAQkZ,IAAK,CAC7B,IAAK,IAAI5W,EAAI,EAAGA,EAAIvC,EAAOuC,IAAK,CAC5B,MAAMnB,GAAUlB,EAAQkZ,IAAa,GAAM,KAAQ,IAAM3B,EACnDpW,EAAe,EAAID,EAEnBiZ,EAAU5b,KAAKkB,YAAY0Z,GAC3BE,EAAUrZ,EAAQkZ,GAElB5X,GAAK6Y,GAAW,EAAI,KAAQhZ,GAAgBkY,GAAW,EAAI,KAAQnY,EACnE7C,GAAK8b,GAAW,EAAI,KAAQhZ,GAAgBkY,GAAW,EAAI,KAAQnY,EACnEK,GAAK4Y,GAAW,GAAK,KAAQhZ,GAAgBkY,GAAW,GAAK,KAAQnY,EAE3E3C,KAAKkB,YAAY0Z,GAAW7X,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAC/D2X,IACAC,G,CAEJD,GAAYgB,EAAapa,EACzBqZ,GAAW5a,KAAKuB,MAAQA,C,CAEhC,CAEOsa,mBAAmBvB,EAAYC,EAAYC,EAAYC,EAAYlZ,EAAeC,EAAgBC,EAAkBuX,GACvH,IAAI2B,EAAWH,EAAKC,EAAKhZ,EAAQF,MAC7BqZ,EAAUN,EAAKC,EAAKva,KAAKuB,MAE7B,IAAK,IAAImZ,EAAI,EAAGA,EAAIlZ,EAAQkZ,IAAK,CAC7B,IAAK,IAAI5W,EAAI,EAAGA,EAAIvC,EAAOuC,IAAK,CAC5B,MAAMnB,GAAUlB,EAAQA,QAAQkZ,IAAa,GAAM,KAAQ,IAAM3B,EAE3D4C,EAAU5b,KAAKkB,YAAY0Z,GAC3BE,EAAUrZ,EAAQA,QAAQkZ,GAE1B5X,EAAIX,KAAKsN,IAAI,KAAMkM,GAAW,EAAI,MAASd,GAAW,EAAI,KAAQnY,GAClE7C,EAAIsC,KAAKsN,IAAI,KAAMkM,GAAW,EAAI,MAASd,GAAW,EAAI,KAAQnY,GAClEK,EAAIZ,KAAKsN,IAAI,KAAMkM,GAAW,GAAK,MAASd,GAAW,GAAK,KAAQnY,GAE1E3C,KAAKkB,YAAY0Z,GAAW7X,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAC/D2X,IACAC,G,CAEJD,GAAYlZ,EAAQF,MAAQA,EAC5BqZ,GAAW5a,KAAKuB,MAAQA,C,CAEhC,CAEOua,WACH,MAAMC,EAAO,IACPC,EAAO,GAEb,IAAK,IAAIvZ,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAID,EAAI,EAAGA,EAAI,GAAIA,IACpBxC,KAAKic,SAAa,GAAJxZ,EAASsZ,EAAU,GAAJvZ,EAASwZ,EAAM,GAAI,GAAIhc,KAAKwZ,UAAc,GAAJ/W,EAASsZ,EAAU,GAAJvZ,EAASwZ,IAGnGhc,KAAK+N,YAAY,IAAI7H,EAAS6V,EAAMC,GAAO,IAAM,IAAI9V,EAAS6V,IAAeC,GAAO,IAAM,YAC1Fhc,KAAK+N,YAAY,IAAI7H,EAAS6V,EAAMC,KAAgB,IAAM,IAAI9V,EAAS6V,IAAeC,KAAgB,IAAM,YAC5Ghc,KAAK+N,YAAY,IAAI7H,EAAS6V,EAAMC,GAAO,IAAM,IAAI9V,EAAS6V,EAAMC,KAAgB,IAAM,YAC1Fhc,KAAK+N,YAAY,IAAI7H,EAAS6V,IAAeC,GAAO,IAAM,IAAI9V,EAAS6V,IAAeC,KAAgB,IAAM,WAChH,CAEOE,0BAA0Bzb,EAAkB0b,EAAmBC,EAAS,GAC3E,IAAIvb,EAAIb,KAAKuB,MAAQvB,KAAKwB,OAAS,GAAK,EACpC6a,EAAIrc,KAAKuB,MAAQvB,KAAKwB,OACtB8a,EAAItc,KAAKuB,OAASvB,KAAKwB,OAAS4a,GACpC,OAASvb,GACLJ,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GAExC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GAExC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GAExC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,GACxC7b,IAAM4b,GAAKF,IAAOG,GAAI7b,IAAM4b,GAAKF,IAAOG,EAEhD,CAGOC,oBAAoBJ,EAAmB1b,GAC1C0b,EAAK3D,IAAI/X,EACb,CAEO+b,MAAMC,EAAqBhb,EAAkB2E,EAAgB,KAChE,MAAMsW,EAAM,IAAI7Q,EAChB6Q,EAAI1Q,QAAQyQ,GACZ,IAAK,IAAIja,EAAI,EAAGA,EAAIxC,KAAKwB,OAAQgB,IAC7BxC,KAAK0b,gBAAgB,EAAGlZ,EAAGJ,KAAK8T,MAAMwG,EAAI3Q,YAActK,EAAQA,QAAQb,OAASZ,KAAKuB,QAAS,EAAGvB,KAAKuB,MAAO,EAAGE,EAAQA,QAASA,EAAQF,MAAO6E,EAEzJ,CAEOuW,sBAAsBtb,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBoC,GAClG,MAAMlC,EAAQF,EAAQF,MAAQA,EACxBK,EAAQH,EAAQD,OAASA,EAC/B,IAGIK,EACAC,EACAC,EACAC,EAkBAC,EAxBAC,EAAK,EACLC,EAAK,EAOT,GAAIb,EAAKE,EAAS,GACdF,EAAMtB,KAAKwB,OAAS,GACpBH,EAAKE,EAAQ,GACbF,EAAMrB,KAAKuB,MAAQ,EACnB,OAGAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,GAChEO,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,IAKzDH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAYP,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,GAC5DS,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWP,EAAQa,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,IAGzD,IAAIgB,EAAS,EAAW,EAAWvC,KAAKuB,MACxC,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAC/B,GAAIzC,KAAK6N,QAAQtL,GAAUsB,EAAG,CAC1B7D,KAAK6N,QAAQtL,GAAUsB,EACvB,MAAMnB,EAAeN,KAAKsN,IAAS,EAALxN,EAAQT,EAAQF,MAAQ,GAAKa,KAAKsN,IAAS,EAALvN,EAAQV,EAAQD,OAAS,GAAKC,EAAQF,MAEpGwB,GAAK/C,KAAKkB,YAAYqB,IAAW,EAAI,MAASd,EAAQA,QAAQiB,IAAiB,EAAI,KACnF5C,GAAKE,KAAKkB,YAAYqB,IAAW,EAAI,MAASd,EAAQA,QAAQiB,IAAiB,EAAI,KACnFM,GAAKhD,KAAKkB,YAAYqB,IAAW,GAAK,MAASd,EAAQA,QAAQiB,IAAiB,GAAK,KAE3F1C,KAAKkB,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAElEd,GAAMN,EACNW,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKuB,K,CAEnC,CAEOqb,aAAavb,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBoC,EAAWnC,GACpG,MAAMC,EAAQF,EAAQF,MAAQA,EACxBK,EAAQH,EAAQD,OAASA,EAC/B,IAGIK,EACAC,EACAC,EACAC,EAkBAC,EAxBAC,EAAK,EACLC,EAAK,EAOT,GAAIb,EAAKE,EAAS,GACdF,EAAMtB,KAAKwB,OAAS,GACpBH,EAAKE,EAAQ,GACbF,EAAMrB,KAAKuB,MAAQ,EACnB,OAGAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,GAChEO,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,IAKzDH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAYP,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,GAC5DS,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWP,EAAQa,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,IAGzD,MAAMe,EAAa,EAAI,IAAMZ,EAC7B,IAAIa,EAAS,EAAW,EAAWvC,KAAKuB,MACxC,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAC/B,GAAIzC,KAAK6N,QAAQtL,GAAUsB,EAAG,CAE1B,MAAMnB,EAAeN,KAAKsN,IAAS,EAALxN,EAAQT,EAAQF,MAAQ,GAAKa,KAAKsN,IAAS,EAALvN,EAAQV,EAAQD,OAAS,GAAKC,EAAQF,MAEpGoB,GAASlB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQJ,EACvDM,EAAe,EAAID,EACnBE,EAAmB7C,KAAKkB,YAAYqB,GACpCO,EAAerB,EAAQA,QAAQiB,GAE/BK,GAAKF,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EACjF7C,GAAK+C,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EACjFK,GAAKH,GAAoB,GAAK,KAAQD,GAAgBE,GAAgB,GAAK,KAAQH,EAEzF3C,KAAKkB,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAElEd,GAAMP,EACNY,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKuB,K,CAEnC,CAEOsb,cACHxb,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBoC,EAAWnC,EACpFob,EAAiB,EAAGC,GACpB,MAAMpb,EAAQF,EAAQF,MAAQA,EACxBK,EAAQmb,EAASvb,EACvB,IAEIK,EACAC,EACAC,EACAC,EAeAC,EApBAC,EAAK,EACLC,EAAK,EAKT,GAAIb,EAAKE,EAAS,GACdF,EAAMtB,KAAKwB,OAAS,GACpBH,EAAKE,EAAQ,GACbF,EAAMrB,KAAKuB,MAAQ,EACnB,OAEAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,GAChEO,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,IAGzDH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAYP,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,GAC5DS,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWP,EAAQa,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,IAEzD,MAAMe,EAAa,EAAI,IAAMZ,EAC7B,IAAIa,EAAS,EAAW,EAAWvC,KAAKuB,MACxC,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAC/B,GAAIzC,KAAK6N,QAAQtL,GAAUsB,EAAG,CAE1B,MAAMnB,EAAeN,KAAKsN,IAAS,EAALxN,EAAQT,EAAQF,MAAQ,GAAKa,KAAKsN,IAAS,EAALvN,EAAQ4a,EAAS,GAAKtb,EAAQF,MAC9Fwb,EAAStb,EAAQF,MAAQub,EAEvBna,GAASlB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQJ,EACvDM,EAAe,EAAID,EACnBE,EAAmB7C,KAAKkB,YAAYqB,GACpCO,EAAerB,EAAQA,QAAQiB,GAE/BK,GAAKF,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EACjF7C,GAAK+C,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EACjFK,GAAKH,GAAoB,GAAK,KAAQD,GAAgBE,GAAgB,GAAK,KAAQH,EAEzF3C,KAAKkB,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAElEd,GAAMP,EACNY,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKuB,K,CAEnC,CAEOyb,iBACH3b,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBoC,EAAWnC,EACpFob,EAAiB,EAAGC,EAAgBE,EAAU,EAAEC,EAAU,EAAEC,EAAU,GACtE,MAAMxb,EAAQF,EAAQF,MAAQA,EACxBK,EAAQmb,EAASvb,EACvB,IAGIK,EACAC,EACAC,EACAC,EAkBAC,EAxBAC,EAAK,EACLC,EAAK,EAOT,GAAIb,EAAKE,EAAS,GACdF,EAAKtB,KAAKwB,OAAS,GACnBH,EAAKE,EAAQ,GACbF,EAAKrB,KAAKuB,MAAQ,EAClB,OAGAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAAUxB,KAAW,OAAG,GAClE+B,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,GAAUxB,KAAKwB,OAAS,GAAI,IAK/DH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAWM,KAAKmX,KAAMhY,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAASvB,KAAU,MAAG,IACxEgC,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWM,KAAKmX,KAAKhY,EAAQa,KAAKC,IAAIhB,EAAKE,GAASvB,KAAKuB,MAAQ,GAAI,KAKzEU,IAFoBG,KAAKmX,KAAKlY,GAAMA,GAEbM,EACvBQ,IAFqBC,KAAKmX,KAAKjY,GAAMA,GAExBM,EAEb,MAAMU,EAAa,EAAI,IAAMZ,EAC7B,IAAIa,EAASH,KAAKmX,KAAKvX,GAAUI,KAAKmX,KAAKxX,GAAU/B,KAAKuB,MAC1D,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAC/B,GAAIzC,KAAK6N,QAAQtL,GAAUsB,EAAG,CAE1B,MAAMnB,EAAeN,KAAKsN,IAAqB,EAAjBtN,KAAKsL,MAAMxL,GAAST,EAAQF,MAAQ,GAC9Da,KAAKsN,IAAqB,EAAjBtN,KAAKsL,MAAMvL,GAAS4a,EAAS,GAAKtb,EAAQF,MACnDwb,EAAStb,EAAQF,MAAQub,EACvBna,GAASlB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQJ,EACvDM,EAAe,EAAID,EACnBE,EAAmB7C,KAAKkB,YAAYqB,GACpCO,EAAerB,EAAQA,QAAQiB,GAC/BK,GAAKF,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EAAMsa,EACvFnd,GAAK+C,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EAAMua,EACvFla,GAAKH,GAAoB,GAAK,KAAQD,GAAgBE,GAAgB,GAAK,KAAQH,EAAMwa,EAC/Fnd,KAAKkB,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAElEd,GAAMP,EACNY,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKuB,K,CAEnC,CAEO6b,oBAAoB/b,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBC,GAChG,MAAMC,EAAQF,EAAQF,MAAQA,EACxBK,EAAQH,EAAQD,OAASA,EAC/B,IAGIK,EACAC,EACAC,EACAC,EAkBAC,EAxBAC,EAAK,EACLC,EAAK,EAOT,GAAIb,EAAKE,EAAS,GACdF,EAAKtB,KAAKwB,OAAS,GACnBH,EAAKE,EAAQ,GACbF,EAAKrB,KAAKuB,MAAQ,EAClB,OAGAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,GAChEO,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,IAKzDH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAYP,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,GAC5DS,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWP,EAAQa,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,IAGzD,MAAMe,EAAa,EAAI,IAAMZ,EAC7B,IAAIa,EAAS,EAAW,EAAWvC,KAAKuB,MACxC,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAE/B,MAAMC,EAAeN,KAAKsN,IAAS,EAALxN,EAAQT,EAAQF,MAAQ,GAAKa,KAAKsN,IAAS,EAALvN,EAAQV,EAAQD,OAAS,GAAKC,EAAQF,MAEpGoB,GAASlB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQJ,EACvDM,EAAe,EAAID,EACnBE,EAAmB7C,KAAKkB,YAAYqB,GACpCO,EAAerB,EAAQA,QAAQiB,GAE/BK,GAAKF,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EACjF7C,GAAK+C,GAAoB,EAAI,KAAQD,GAAgBE,GAAgB,EAAI,KAAQH,EACjFK,GAAKH,GAAoB,GAAK,KAAQD,GAAgBE,GAAgB,GAAK,KAAQH,EAEzF3C,KAAKkB,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAE9Dd,GAAMP,EACNY,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKuB,K,CAEnC,CAEO8b,iBAAiBhc,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBoC,EAAWnC,GACxG,MAAMC,EAAQF,EAAQF,MAAQA,EACxBK,EAAQH,EAAQD,OAASA,EAC/B,IAGIK,EACAC,EACAC,EACAC,EAkBAC,EAxBAC,EAAK,EACLC,EAAK,EAOT,GAAIb,EAAKE,EAAS,GACdF,EAAMtB,KAAKwB,OAAS,GACpBH,EAAKE,EAAQ,GACbF,EAAMrB,KAAKuB,MAAQ,EACnB,OAGAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,GAChEO,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,IAKzDH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAYP,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,GAC5DS,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWP,EAAQa,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,IAGzD,MAAMe,EAAa,EAAI,IAAMZ,EAC7B,IAAIa,EAAS,EAAW,EAAWvC,KAAKuB,MACxC,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAC/B,GAAIzC,KAAK6N,QAAQtL,GAAUsB,EAAG,CAG1B,MAAMyZ,EAAQlb,KAAKsN,IAAItN,KAAKC,IAAM,EAAIwB,EAAI,EAAI7D,KAAK6N,QAAQtL,GAAW,GAAM,GAEtEG,EAAeN,KAAKsN,IAAS,EAALxN,EAAQT,EAAQF,MAAQ,GAAKa,KAAKsN,IAAS,EAALvN,EAAQV,EAAQD,OAAS,GAAKC,EAAQF,MAEpGoB,GAASlB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQJ,EAAagb,EACpE1a,EAAe,EAAID,EAEnBI,GAAK/C,KAAKkB,YAAYqB,IAAW,EAAI,KAAQK,GAAgBnB,EAAQA,QAAQiB,IAAiB,EAAI,KAAQC,EAC1G7C,GAAKE,KAAKkB,YAAYqB,IAAW,EAAI,KAAQK,GAAgBnB,EAAQA,QAAQiB,IAAiB,EAAI,KAAQC,EAC1GK,GAAKhD,KAAKkB,YAAYqB,IAAW,GAAK,KAAQK,GAAgBnB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQC,EAElH3C,KAAKkB,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAElEd,GAAMP,EACNY,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKuB,K,CAEnC,CAEOgc,QAAQja,EAAcka,EAAkBC,GAC3C,MAAMC,EAA0B1d,KAAKuB,MAAQvB,KAAKwB,OAC5Cmc,GAAwBH,EAE9B,IAAK,IAAItY,EAAgB,EAAGA,EAAQwY,EAAiBxY,IAAS,CAC1D,MAAMvC,EAAQP,KAAKC,IAAID,KAAKsN,IAAIiO,GAAgB,EAAI3d,KAAK6N,QAAQ3I,GAASuY,GAAY,GAAM,GACtF7a,EAAe,EAAMD,EAErBI,GAAK/C,KAAKkB,YAAYgE,IAAU,EAAI,KAAQtC,EAAeU,EAAMP,EAAIJ,EACrE7C,GAAKE,KAAKkB,YAAYgE,IAAU,EAAI,KAAQtC,EAAeU,EAAMxD,EAAI6C,EACrEK,GAAKhD,KAAKkB,YAAYgE,IAAU,GAAK,KAAQtC,EAAeU,EAAMN,EAAIL,EAE5E3C,KAAKkB,YAAYgE,GAASnC,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,E,CAErE,CAEO4a,wBAAwBvc,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBC,GACpG,MAAMC,EAAQF,EAAQF,MAAQA,EACxBK,EAAQH,EAAQD,OAASA,EAC/B,IAGIK,EACAC,EACAC,EACAC,EAkBAC,EAxBAC,EAAK,EACLC,EAAK,EAOT,GAAIb,EAAKE,EAAS,GACdF,EAAMtB,KAAKwB,OAAS,GACpBH,EAAKE,EAAQ,GACbF,EAAMrB,KAAKuB,MAAQ,EACnB,OAGAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,GAChEO,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,IAKzDH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAYP,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,GAC5DS,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWP,EAAQa,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,IAGzD,MAAMe,EAAa,EAAI,IAAMZ,EAC7B,IAAIa,EAAS,EAAW,EAAWvC,KAAKuB,MAExC,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAG/B,MAAMa,EAAQ7B,EAAQ2U,0BAA0BlU,EAAIC,GAE9CQ,EAAQ,IAAML,EACdM,EAAe,EAAID,EAEnBE,EAAmB7C,KAAKkB,YAAYqB,GAGpCQ,GAAKF,GAAoB,EAAI,KAAQD,GAFtBU,GAEsD,EAAI,KAAQX,EACjF7C,GAAK+C,GAAoB,EAAI,KAAQD,GAHtBU,GAGsD,EAAI,KAAQX,EACjFK,GAAKH,GAAoB,GAAK,KAAQD,GAJvBU,GAIuD,GAAK,KAAQX,EAEzF3C,KAAKkB,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAC9Dd,GAAMP,EACNY,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKuB,K,CAEnC,CAEOsc,2BAA2Bxc,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBC,GACvG,MAAMC,EAAQF,EAAQF,MAAQA,EACxBK,EAAQH,EAAQD,OAASA,EAC/B,IAGIK,EACAC,EACAC,EACAC,EAkBAC,EAxBAC,EAAK,EACLC,EAAK,EAOT,GAAIb,EAAKE,EAAS,GACdF,EAAMtB,KAAKwB,OAAS,GACpBH,EAAKE,EAAQ,GACbF,EAAMrB,KAAKuB,MAAQ,EACnB,OAGAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,GAChEO,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,IAKzDH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAYP,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,GAC5DS,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWP,EAAQa,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,IAGzD,IAAIgB,EAAS,EAAW,EAAWvC,KAAKuB,MACxC,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAE/B,MAAMa,EAAQ7B,EAAQ2U,0BAA0BlU,EAAIC,GAE9CU,EAAmB7C,KAAKkB,YAAYqB,GACpCO,EAAeQ,EAEfP,EAAIX,KAAKsN,KAAK7M,GAAoB,EAAI,MAASC,GAAgB,EAAI,KAAQpB,EAAY,KACvF5B,EAAIsC,KAAKsN,KAAK7M,GAAoB,EAAI,MAASC,GAAgB,EAAI,KAAQpB,EAAY,KACvFsB,EAAIZ,KAAKsN,KAAK7M,GAAoB,GAAK,MAASC,GAAgB,GAAK,KAAQpB,EAAY,KAE/F1B,KAAKkB,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAC9Dd,GAAMP,EACNY,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKuB,K,CAEnC,CAEOuc,yBAAyBzc,EAAYC,EAAYC,EAAeC,EAAgBC,EAAkBkB,EAAgB,GACrH,MAAMhB,EAAQF,EAAQF,MAAQA,EACxBK,EAAQH,EAAQD,OAASA,EAC/B,IAGIK,EACAC,EACAC,EACAC,EAkBAC,EAxBAC,EAAK,EACLC,EAAK,EAOT,GAAIb,EAAKE,EAAS,GACdF,EAAMtB,KAAKwB,OAAS,GACpBH,EAAKE,EAAQ,GACbF,EAAMrB,KAAKuB,MAAQ,EACnB,OAGAD,EAAK,GACLa,EAAKP,GAASN,EACdO,EAAaL,EAASF,EAAMc,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,GAChEO,EAAS,IAETA,EAAST,EACTO,EAAYL,EAASY,KAAKC,IAAIf,EAAKE,EAASxB,KAAKwB,OAAQ,IAKzDH,EAAK,GACLY,EAAgBC,EAAKP,GAASN,EAC9BS,EAAYP,EAAQF,EAAMe,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,GAC5DS,EAAS,IAETC,EAAgB,EAChBD,EAASX,EACTS,EAAWP,EAAQa,KAAKC,IAAIhB,EAAKE,EAAQvB,KAAKuB,MAAO,IAGzD,IAAIgB,EAAS,EAAW,EAAWvC,KAAKuB,MACxC,IAAK,IAAIiB,EAAI,EAAGA,EAAIX,EAAWW,IAAK,CAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAUW,IAAK,CAC/B,MAAMC,EAAeN,KAAKsN,IAAS,EAALxN,EAAQT,EAAQF,MAAQ,GAAKa,KAAKsN,IAAS,EAALvN,EAAQV,EAAQD,OAAS,GAAKC,EAAQF,MAEpGsB,EAAmB7C,KAAKkB,YAAYqB,GACpCO,EAAerB,EAAQA,QAAQiB,GAE/BK,EAAIX,KAAKsN,KAAK7M,GAAoB,EAAI,MAASC,GAAgB,EAAI,KAAQH,EAAO,KAClF7C,EAAIsC,KAAKsN,KAAK7M,GAAoB,EAAI,MAASC,GAAgB,EAAI,KAAQH,EAAO,KAClFK,EAAIZ,KAAKsN,KAAK7M,GAAoB,GAAK,MAASC,GAAgB,GAAK,KAAQH,EAAO,KAE1F3C,KAAKkB,YAAYqB,GAAUQ,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAC9Dd,GAAMP,EACNY,G,CAEJJ,GAAMP,EACNM,EAAKD,EACLM,IAAWT,EAAW9B,KAAKuB,K,CAEnC,CAEOwc,YAAYtb,EAAWD,EAAWf,EAAkBuX,GACvD,MAAMgF,EAAehe,KAAKuB,MACpB0c,EAAgBje,KAAKwB,OAE3B,IAAIoM,EAA2BxL,KAAKC,IAAII,EAAG,GAAKL,KAAKC,IAAIG,EAAG,GAAKxC,KAAKuB,MAClEmB,EAAuBN,KAAKC,IAAI,EAAG,EAAII,GAAKL,KAAKC,IAAI,EAAG,EAAIG,GAAKf,EAAQF,MAE7E,MAAMA,EAAgBa,KAAKsN,IAAIjO,EAAQF,MAAOyc,EAAevb,GAAKL,KAAKC,IAAI,EAAG,EAAII,GAC5EjB,EAAiBY,KAAKsN,IAAIjO,EAAQD,OAAQyc,EAAgBzb,GAAKJ,KAAKC,IAAI,EAAG,EAAIG,GAE/E0b,EAAmBzc,EAAQF,MAAQA,EACnC4c,EAAuBne,KAAKuB,MAAQA,EAEpCiC,EAAM,EAAI,IAAMwV,EAEtB,IAAK,IAAIoF,EAAkB,EAAGA,EAAU5c,EAAQ4c,IAAW,CACvD,IAAK,IAAIC,EAAiB,EAAGA,EAAS9c,EAAO8c,IAAU,CACnD,MAAM1b,GAASlB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQc,EACvDZ,EAAe,EAAID,EAEnBI,GAAK/C,KAAKkB,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBnB,EAAQA,QAAQiB,IAAiB,EAAI,KAAQC,EACpH7C,GAAKE,KAAKkB,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBnB,EAAQA,QAAQiB,IAAiB,EAAI,KAAQC,EACpHK,GAAKhD,KAAKkB,YAAY0M,IAAqB,GAAK,KAAQhL,GAAgBnB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQC,EAE5H3C,KAAKkB,YAAY0M,GAAoB7K,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAExE4K,IACAlL,G,CAGJA,GAAgBwb,EAChBtQ,GAAoBuQ,C,CAE5B,CAEOG,sBAAsB7c,EAAkBuX,GAE3C,IAAIpL,EAA2B,EAC/B,MAAMhL,EAAe,EAAIoW,EACzB,IAAK,IAAIxW,EAAY,EAAGA,EAAIxC,KAAKuB,MAAQvB,KAAKwB,OAAQgB,IAAK,CAEvD,MAAMO,GAAK/C,KAAKkB,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBnB,EAAQA,QAAQmM,IAAqB,EAAI,KAAQoL,EACxHlZ,GAAKE,KAAKkB,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBnB,EAAQA,QAAQmM,IAAqB,EAAI,KAAQoL,EACxHhW,GAAKhD,KAAKkB,YAAY0M,IAAqB,GAAK,KAAQhL,GAAgBnB,EAAQA,QAAQmM,IAAqB,GAAK,KAAQoL,EAEhIhZ,KAAKkB,YAAY0M,GAAoB7K,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GACxE4K,G,CAER,CAEO2Q,aAAa9b,EAAWD,EAAWf,EAAkBuX,EAAgBwF,GACxE,MAAMR,EAAehe,KAAKuB,MACpB0c,EAAgBje,KAAKwB,OAE3B,IAAIoM,EAA2BxL,KAAKC,IAAII,EAAG,GAAKL,KAAKC,IAAIG,EAAG,GAAKxC,KAAKuB,MAClEmB,EAAuBN,KAAKC,IAAI,EAAG,EAAII,GAAKL,KAAKC,IAAI,EAAG,EAAIG,GAAKf,EAAQF,MAE7E,MAAMA,EAAgBa,KAAKsN,IAAIjO,EAAQF,MAAOyc,EAAevb,GAAKL,KAAKC,IAAI,EAAG,EAAII,GAC5EjB,EAAiBY,KAAKsN,IAAIjO,EAAQD,OAAQyc,EAAgBzb,GAAKJ,KAAKC,IAAI,EAAG,EAAIG,GAE/E0b,EAAmBzc,EAAQF,MAAQA,EACnC4c,EAAuBne,KAAKuB,MAAQA,EAEpCiC,EAAM,EAAI,IAAMwV,EAEhByF,EAAUrc,KAAK8T,MAAM1U,EAASY,KAAKC,IAAID,KAAKsN,IAAI,EAAG8O,GAAO,IAEhE,IAAK,IAAIJ,EAAkB,EAAGA,EAAUK,EAASL,IAAW,CACxD,IAAK,IAAIC,EAAiB,EAAGA,EAAS9c,EAAO8c,IAAU,CACnD,MAAM1b,GAASlB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQc,EACvDZ,EAAe,EAAID,EAEnBI,GAAK/C,KAAKkB,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBnB,EAAQA,QAAQiB,IAAiB,EAAI,KAAQC,EACpH7C,GAAKE,KAAKkB,YAAY0M,IAAqB,EAAI,KAAQhL,GAAgBnB,EAAQA,QAAQiB,IAAiB,EAAI,KAAQC,EACpHK,GAAKhD,KAAKkB,YAAY0M,IAAqB,GAAK,KAAQhL,GAAgBnB,EAAQA,QAAQiB,IAAiB,GAAK,KAAQC,EAE5H3C,KAAKkB,YAAY0M,GAAoB7K,EAAKjD,GAAK,EAAMkD,GAAK,GAAO,KAAO,GAExE4K,IACAlL,G,CAGJA,GAAgBwb,EAChBtQ,GAAoBuQ,C,CAE5B,CAEOO,uBAAuBjc,EAAWD,EAAWf,GAChD,IAAImM,EAA2BnL,EAAID,EAAIxC,KAAKuB,MACxCmB,EAAuB,EAE3B,MAAMyb,EAAuBne,KAAKuB,MAAQE,EAAQF,MAElD,IAAK,IAAI6c,EAAU,EAAGA,EAAU3c,EAAQD,OAAQ4c,IAAW,CACvD,IAAK,IAAIC,EAAS,EAAGA,EAAS5c,EAAQF,MAAO8c,IAAU,CACnD,MAAM/a,EAAQ7B,EAAQA,QAAQiB,GAElB,WAARY,IACAtD,KAAKkB,YAAY0M,GAAoBtK,GAGzCsK,IACAlL,G,CAGJkL,GAAoBuQ,C,CAE5B,CAGQQ,kBAAkBlM,EAAcmM,EAActb,GAClD,MAAM+M,GAAgB,IAEtB,GAAIoC,EAAG5O,EAAIwM,GAAgBuO,EAAG/a,EAAIwM,EAC9BrQ,KAAK6X,aAAa/D,2BAA2B9T,KAAK6e,QAAQpM,GAAKzS,KAAK6e,QAAQD,GAAKtb,OAC9E,IAAImP,EAAG5O,EAAIwM,GAAgBuO,EAAG/a,EAAIwM,EACrC,OACG,GAAIoC,EAAG5O,EAAIwM,EAAc,CAC5B,MAAMsC,GAAStC,EAAeoC,EAAG5O,IAAM+a,EAAG/a,EAAI4O,EAAG5O,GAC3Cib,EAAK,IAAI5Y,EAASyM,GAASiM,EAAGnc,EAAIgQ,EAAGhQ,GAAKgQ,EAAGhQ,EAAGkQ,GAASiM,EAAGpc,EAAIiQ,EAAGjQ,GAAKiQ,EAAGjQ,EAAG6N,GACpFrQ,KAAK6X,aAAa/D,2BAA2B9T,KAAK6e,QAAQpM,GAAKzS,KAAK6e,QAAQC,GAAKxb,E,MAC9E,GAAIsb,EAAG/a,EAAIwM,EAAc,CAC5B,MAAMsC,GAAStC,EAAeuO,EAAG/a,IAAM4O,EAAG5O,EAAI+a,EAAG/a,GAC3Cib,EAAK,IAAI5Y,EAASyM,GAASF,EAAGhQ,EAAImc,EAAGnc,GAAKmc,EAAGnc,EAAGkQ,GAASF,EAAGjQ,EAAIoc,EAAGpc,GAAKoc,EAAGpc,EAAG6N,GACpFrQ,KAAK6X,aAAa/D,2BAA2B9T,KAAK6e,QAAQD,GAAK5e,KAAK6e,QAAQC,GAAKxb,E,EAEzF,CAEOub,QAAQpM,GACX,OAAO,IAAIvM,EAAS9D,KAAKsL,MAAO1N,KAAKuB,MAAQ,EAAM,IAAMkR,EAAGhQ,GAAMgQ,EAAG5O,GACjEzB,KAAKsL,MAAO1N,KAAKwB,OAAS,EAAa,IAAPiR,EAAGjQ,GAAYiQ,EAAG5O,GAClD4O,EAAG5O,EACX,CAEOkb,mBACH/e,KAAK6N,QAAQgL,MAAM,EAAI,IAC3B,CAEOmG,UACH,MAAMxd,EAASxB,KAAK2U,UAAUnS,EAAIxC,KAAKyT,UAAUjR,EAAI,EAC/CjB,EAAQvB,KAAK2U,UAAUlS,EAAIzC,KAAKyT,UAAUhR,EAAI,EACpD,IAAIyC,EAAQlF,KAAKyT,UAAUjR,EAAIxC,KAAKuB,MAAQvB,KAAKyT,UAAUhR,EAC3D,IAAK,IAAI5B,EAAI,EAAGA,EAAIW,EAAQX,IACxBb,KAAKkB,YAAY2X,MAAK,SAAqC3T,EAAOA,EAAQ3D,GAC1E2D,GAASlF,KAAKuB,KAEtB,CAEO0a,SAAStG,EAAYlK,EAAYlK,EAAeC,EAAgB8B,GAEnE,IAAI4B,EAAQuG,EAAKzL,KAAKuB,MAAQoU,EAC9B,IAAK,IAAI9U,EAAI,EAAGA,EAAIW,EAAQX,IACxBb,KAAKkB,YAAY2X,KAAKvV,EAAO4B,EAAOA,EAAQ3D,GAC5C2D,GAASlF,KAAKuB,KAEtB,CAIO0d,wBAAwBxC,GAE3Bzc,KAAK6N,QAAQgL,KAAK,KAElB,MAAM5T,EAA0B,GAG1BuB,EAAS,GAGf,IAAK,IAAI3F,EAAI,EAAGA,GAJF,GAIcA,IACxB,IAAK,IAAIkC,EAAI,EAAGA,EAAIyD,EAAQzD,IACxBkC,EAAOK,KAAKtF,KAAKkf,iBAAiBre,EAAIuB,KAAKuE,GANrC,GAMkDvE,KAAKuE,GAAK,EAAQ,GAAJ5D,EAAQX,KAAKuE,GAAKH,IAIhG,MAAMtB,EAAuB,GAE7B,IAAK,IAAIgC,EAAI,EAAGA,EAZF,GAYaA,IACvB,IAAK,IAAIrG,EAAI,EAAGA,EAAI2F,EAAQ3F,IACxBqE,EAAMI,KAAOkB,EAASU,GAAM,EAAIrG,GAAK2F,GACrCtB,EAAMI,KAAOkB,EAASU,GAAM,EAAIrG,GAAK2F,GACrCtB,EAAMI,KAAOkB,EAASU,EAAKV,GAAU,EAAI3F,GAAK2F,GAE9CtB,EAAMI,KAAOkB,EAASU,EAAKV,GAAU,EAAI3F,GAAK2F,GAC9CtB,EAAMI,KAAOkB,EAASU,EAAKV,GAAU,EAAI3F,GAAK2F,GAC9CtB,EAAMI,KAAOkB,EAASU,GAAM,EAAIrG,GAAK2F,GAK7C,MAAMJ,EAAQ,KAAO,GAAKhE,KAAK4E,IAAkB,IAAdyV,GAAsB,GAAK,EAC9D,IAAI0C,EAAmB9X,EAAS+X,qBAAqBhZ,EAAOA,EAAOA,GAAO4C,eAAe3B,EAASgY,yBAAuC,IAAd5C,IAC3H0C,EAAmBA,EAAiBnW,eAAe3B,EAASiY,yBAAuC,IAAd7C,IACrF0C,EAAmB9X,EAASkY,2BAA2B,EAAI,GAAKnd,KAAK4E,IAAkB,IAAdyV,GAAqB,EAAIra,KAAK4E,IAAkB,IAAdyV,IAAsB,IAAIzT,eAAemW,GAEpJ,MAAMjN,EAA2B,IAAI9M,MAErC,IAAK,IAAIpE,EAAI,EAAGA,EAAIiE,EAAOrE,OAAQI,IAAK,CACpC,MAAMwe,EAAcL,EAAiBvU,YAAY3F,EAAOjE,IAElDyB,EAAI+c,EAAY/c,EAChBD,EAAIgd,EAAYhd,EAChBqB,EAAI2b,EAAY3b,EAEhB3B,EAAmB,GAAblC,KAAKuB,MAAgBkB,GAAU,OAAJoB,GACjC1B,EAAoB,GAAdnC,KAAKwB,OAAiBgB,GAAU,OAAJqB,GAExCqO,EAAQ5M,KAAK,IAAIY,EAAShE,EAAIC,EAAI0B,G,CAItC,MAAM4b,GAAS,QAAwBzf,KAAKwB,QAAU,GAAKxB,KAAKwB,OAChExB,KAAK+N,YAAY,IAAI7H,EAASlG,KAAKyT,UAAUhR,EAAI,EAAGzC,KAAKyT,UAAUjR,EAAI,EAAG,GAAI,IAAI0D,EAASlG,KAAKyT,UAAUhR,EAAI,EAAGzC,KAAK2U,UAAUnS,EAAI,EAAG,GAAIid,GAC3Izf,KAAK+N,YAAY,IAAI7H,EAASlG,KAAK2U,UAAUlS,EAAI,EAAGzC,KAAKyT,UAAUjR,EAAI,EAAG,GAAI,IAAI0D,EAASlG,KAAK2U,UAAUlS,EAAI,EAAGzC,KAAK2U,UAAUnS,EAAI,EAAG,GAAIid,GAC3Izf,KAAK+N,YAAY,IAAI7H,EAASlG,KAAKyT,UAAUhR,EAAI,EAAGzC,KAAKyT,UAAUjR,EAAI,EAAG,GAAI,IAAI0D,EAASlG,KAAK2U,UAAUlS,EAAI,EAAGzC,KAAKyT,UAAUjR,EAAI,EAAG,GAAIid,GAC3Izf,KAAK+N,YAAY,IAAI7H,EAASlG,KAAKyT,UAAUhR,EAAI,EAAGzC,KAAK2U,UAAUnS,EAAI,EAAG,GAAI,IAAI0D,EAASlG,KAAK2U,UAAUlS,EAAI,EAAGzC,KAAK2U,UAAUnS,EAAI,EAAG,GAAIid,GAE3Izf,KAAKgf,UAEL,IAAK,IAAIne,EAAI,EAAGA,EAAIqE,EAAMtE,OAAQC,GAAK,EAAG,CACtC,MAAM8E,EAAKuM,EAAQhN,EAAMrE,IACnB+E,EAAKsM,EAAQhN,EAAMrE,EAAI,IACvBgF,EAAKqM,EAAQhN,EAAMrE,EAAI,IAEvB6e,GAAU,EACZ1f,KAAK4Q,cAAcjL,EAAIC,EAAIC,KAC3B7F,KAAK6X,aAAa/D,2BAA2BnO,EAAIC,EAAI8Z,GACrD1f,KAAK6X,aAAa/D,2BAA2BnO,EAAIE,EAAI6Z,GACrD1f,KAAK6X,aAAa/D,2BAA2BjO,EAAID,EAAI8Z,G,CAGjE,CAEO9O,cAAcjL,EACjBC,EACAC,GACA,MAAMiL,EACFnL,EAAGlD,EAAImD,EAAGpD,EAAIoD,EAAGnD,EAAIkD,EAAGnD,EACxBoD,EAAGnD,EAAIoD,EAAGrD,EAAIqD,EAAGpD,EAAImD,EAAGpD,EACxBqD,EAAGpD,EAAIkD,EAAGnD,EAAImD,EAAGlD,EAAIoD,EAAGrD,EAC5B,OAAIxC,KAAKsQ,WAAa3M,EAAS4M,KACpBO,EAAM,EAENA,EAAM,CAErB,CAEW6O,iBAAiBlD,EAAqBmD,GAEzC5f,KAAK+e,mBAEL,MAAM7Z,EAAuB,GAGvBD,EAA0B,GAChC,IAAK,IAAIzC,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IACrBwC,EAAOK,KAAK,IAAIY,EAAqB,IAAXzD,EAAI,KAA6D,KAAd,IAAjCmd,EAAUne,QAAQgB,EAAQ,IAAJD,IAA+B,IAAM,GAAgB,IAAXA,EAAI,OAIxH,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,GAAK,EAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAASA,GAAK,EAC9ByC,EAAMI,KAAK,EAAI7C,EAAS,IAAJD,GACpB0C,EAAMI,KAAK,EAAI7C,EAAS,IAAJD,GAI5B,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,GAAK,EAC1B,IAAK,IAAID,EAAI,EAAGA,EAAI,IAASA,GAAK,EAE9B0C,EAAMI,KAAK7C,EAAe,KAATD,EAAI,IACrB0C,EAAMI,KAAK7C,EAAe,KAATD,EAAI,IAI7B,MAAM2c,EAAmBnU,EAASqU,yBAAuC,KAAd5C,GAErDvK,EAA2B,IAAI9M,MAE/Bya,EAA4C,KAAnCzd,KAAK6E,IAAkB,KAAdwV,GAAgC,GAClDqD,EAA0C,IAAnC1d,KAAK4E,IAAkB,KAAdyV,GAAgC,GACtDxX,EAAO8a,SAAQC,IACX,MAAMR,EAAcL,EAAiBxU,SAASqV,GAExCvd,EAAI+c,EAAY/c,EAAIod,EACpBrd,EAAIgd,EAAYhd,EAChBqB,EAAI2b,EAAY3b,EAAIic,EAE1B5N,EAAQ5M,KAAK,IAAIY,EAASzD,EAAGD,EAAGqB,GAAG,IAGvC,IAAK,IAAIhD,EAAI,EAAGA,EAAIqE,EAAMtE,OAAQC,GAAK,EAAG,CACtC,MAAMuF,EAAS,EAAIhE,KAAKsN,IAAI,IAA4B,IAAtBwC,EAAQhN,EAAMrE,IAAIgD,GAAW,IACzDP,EAAS,IAAM8C,GAAU,EAAI,IAAMA,EAASpG,KAAKwB,OAAS4E,GAAU,GAAK,KAAO,GACtFpG,KAAK2e,kBAAkBzM,EAAQhN,EAAMrE,IAAKqR,EAAQhN,EAAMrE,EAAI,IAAKyC,E,CAEzE,CAEG2c,mBAAmBC,EAAgB5X,EAAkBhF,GACxD,MAAM2B,EAA0B,GAMhC,IAAK,IAAIpE,EAAI,EAAGA,GAJF,EAIcA,IACxB,IAAK,IAAIkC,EAAI,EAAGA,EAJL,EAIiBA,IAAK,CAE7B,MAAMgE,EAAM/G,KAAKkf,iBAAiBre,EAAIuB,KAAKuE,GAPrC,EAOkDvE,KAAKuE,GAAK,EAAQ,GAAJ5D,EAAQX,KAAKuE,GAN5E,GAMyFjD,IAAIwc,EAAOC,YAAc,KAAM5c,IAAI2c,EAAOE,aAC1IrZ,EAAIjD,EAAI,EAERmB,EAAOK,KAAKyB,E,CAIpB,MAAM7B,EAAuB,GAE7B,IAAK,IAAIgC,EAAI,EAAGA,EAhBF,EAgBaA,IACvB,IAAK,IAAIrG,EAAI,EAAGA,EAhBL,EAgBiBA,IACxBqE,EAAMI,KAjBC,EAiBe4B,GAAM,EAAIrG,GAjBzB,GAkBPqE,EAAMI,KAlBC,EAkBe4B,GAAM,EAAIrG,GAlBzB,GAmBPqE,EAAMI,KAnBC,EAmBe4B,EAnBf,GAmB8B,EAAIrG,GAnBlC,GAqBPqE,EAAMI,KArBC,EAqBe4B,EArBf,GAqB8B,EAAIrG,GArBlC,GAsBPqE,EAAMI,KAtBC,EAsBe4B,EAtBf,GAsB8B,EAAIrG,GAtBlC,GAuBPqE,EAAMI,KAvBC,EAuBe4B,GAAM,EAAIrG,GAvBzB,GA2Bf,MAAMse,EAAmB7W,EAEnB4J,EAA2B,IAAI9M,MAErC,IAAK,IAAIpE,EAAI,EAAGA,EAAIiE,EAAOrE,OAAQI,IAAK,CACpC,MAAMwe,EAAcL,EAAiBvU,YAAY3F,EAAOjE,IACxDkR,EAAQ5M,KAAK,IAAIY,EAASsZ,EAAY/c,EAAG+c,EAAYhd,EAAGgd,EAAY3b,G,CAGxE,IAAK,IAAIhD,EAAI,EAAGA,EAAIqE,EAAMtE,OAAQC,GAAK,EAAG,CAEtC,MAAM8E,EAAKuM,EAAQhN,EAAMrE,IACnB+E,EAAKsM,EAAQhN,EAAMrE,EAAI,IACvBgF,EAAKqM,EAAQhN,EAAMrE,EAAI,IAE7Bb,KAAK2e,kBAAkBhZ,EAAIC,EAAItC,GAC/BtD,KAAK2e,kBAAkBhZ,EAAIE,EAAIvC,GAC/BtD,KAAK2e,kBAAkB9Y,EAAID,EAAItC,E,CAGvC,CACO+c,+BAA+B5D,EAAqBhb,GAEvD,IAAIZ,EAAI,EACR,IAAK,IAAI2B,EAAI,EAAGA,EAAIxC,KAAKwB,OAAQgB,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAIzC,KAAKuB,MAAOkB,IAAK,CACjC,MAAM6d,EAAS7d,EAAIzC,KAAKuB,MAAQ,EAC1Bgf,EAAS/d,EAAIxC,KAAKwB,OAAS,EAC3Bgf,EAAO,KAAYpe,KAAKC,IAAI,EAAKD,KAAK+B,KAAKmc,EAAQA,EAAQC,EAAQA,IACnEE,EAAQD,EAAqB,KAAd/D,EACfxR,EAAqD,IAA5C7I,KAAKse,MAAMJ,EAAOC,GAASne,KAAKuE,GAAK,GAA0B,MAAd8V,EAE1DkE,EAASlf,EAAQA,SAAiB,GAARgf,GAAiC,IAAR,GAARxV,IAE3C7E,EAAQ,EAAIiF,EAAauV,kBAAkB,EAAK,EAAKJ,GAIrDK,GAHMF,GAAU,EAAK,KAAQva,GACvBua,GAAU,EAAK,KAAQva,GAEZ,GADXua,GAAU,GAAM,KAAQva,GACJ,GAEhCpG,KAAKkB,YAAYL,KAAOggB,C,CAGpC,CAGOC,iBAAiB5f,GACpB,MAAMoC,EAAgBL,EAAM8d,MAAM3d,iBAC5B7B,EAAgBvB,KAAKuB,MAAQ,EAC7BC,EAAiBxB,KAAKwB,OAAS,EAErCN,EAAYuN,eACR,IAAIvI,EAAS3E,EAAQ,EAAGC,EAAS,EAAG,GACpC,IAAI0E,EAAS3E,EAAQ,EAAIA,EAAOC,EAAS,GAAI,KAC7C8B,GAGJpC,EAAYuN,eACR,IAAIvI,EAAS3E,EAAQ,EAAGC,EAAS,EAAG,GACpC,IAAI0E,EAAS3E,EAAQ,EAAGC,EAAS,EAAIA,GAAS,KAC9C8B,GAGJpC,EAAYuN,eACR,IAAIvI,EAAS3E,EAAQ,EAAIA,EAAOC,EAAS,EAAG,GAC5C,IAAI0E,EAAS3E,EAAQ,EAAIA,EAAOC,EAAS,EAAIA,GAAS,KACtD8B,GAGJpC,EAAYuN,eACR,IAAIvI,EAAS3E,EAAQ,EAAGC,EAAS,EAAIA,EAAQ,GAC7C,IAAI0E,EAAS3E,EAAQ,EAAIA,EAAOC,EAAS,EAAIA,GAAS,KACtD8B,EAER,CAEO0d,oBAAoB9f,EAA0Bub,EAAqBhb,EAAkBwf,GAExF,MAAMhc,EAA0B,IAAIG,MAC9B8M,EAA2B,IAAI9M,MAAgBH,EAAOrE,QACtD4e,EAActe,EAAY2d,QAAQoC,GAExC/O,EAAQ5M,KAAKka,GACbtN,EAAQgP,MAAK,CAAChe,EAAGF,IACNE,EAAEW,EAAIb,EAAEa,IAGnBqO,EAAQ6N,SAAQC,IAEZ,MAAMmB,EAAgB,KAAP,KAAcnB,EAAS,EAEtC9e,EAAY2b,cACRza,KAAKsL,MAAMsS,EAAQvd,EAAI0e,EAAO,GAC9B/e,KAAKsL,MAAMsS,EAAQxd,EAAI2e,EAAO,GAC9B/e,KAAKsL,MAAMyT,GAAO/e,KAAKsL,MAAMyT,GAAO1f,EAAS,EAAIue,EAAQnc,EAAG,EAAK,EAAG,IAAI,GAGpF,CAEOud,qBAAqB3E,EAAqBhb,GAK7C,MAAM4f,EAAY5f,EAAQF,MACpB+f,EAAa7f,EAAQD,OAE3B,IAAIoM,EAAmB,EAEvB,IAAK,IAAIpL,EAAI,EAAGA,EAAIxC,KAAKwB,OAAQgB,IAAK,CAClC,MAAML,EAAc,EAAOK,EAAIxC,KAAKwB,OAAvB,EAEb,IAAK,IAAIiB,EAAI,EAAGA,EAAIzC,KAAKuB,MAAOkB,IAAK,CAEjC,MAGMoM,GAHc,EAAOpM,EAAIzC,KAAKuB,MAAvB,GAGIa,KAAKgM,IAAIjM,GAAOkf,EAAY,IAAQ,EAC/CtS,EAAK,EAAM3M,KAAKgM,IAAIjM,GAAMmf,EAAa,IAAqB,KAAd7E,EAAuB,EAErErW,EAAQ,EAAIhE,KAAKC,IAAID,KAAKsN,IAAI,EAAItN,KAAKgM,IAAIjM,GAAM,GAAK,GAAI,GAChE,IAAImB,EAAQ7B,EAAQA,SAAa,IAAJoN,IAAiB,IAAJE,GAAYsS,GAItD/d,EAAS,KAAO,IADJA,GAAS,GAAM,KAAQ8C,GACP,IAFhB9C,GAAS,EAAK,KAAQ8C,GAEM,GAH5B9C,GAAS,EAAK,KAAQ8C,GAGiB,EAEnDpG,KAAKkB,YAAY0M,KAAsBtK,C,EAGnD,CAEOoD,cAAc/D,GACjB,OAAO,IAAIuD,EAA2B,GAAlB9D,KAAK4E,IAAIrE,GAAa,EAAqB,GAAlBP,KAAK6E,IAAItE,GAC1D,CAEO0P,WAAWhN,EAAkBuN,GAIhCA,EAAOhE,kBAAkBC,EAAI,GAAMzM,KAAKmf,KAAKlc,EAAO5C,GAAKL,KAAKuE,GAC9DiM,EAAOhE,kBAAkBG,EAAI,GAAM3M,KAAKmf,KAAKlc,EAAO7C,GAAKJ,KAAKuE,EAClE,CAEO6a,YAAYnc,EAAkBoc,GACjCA,EAAI5S,EAAI,GAAMzM,KAAKmf,KAAKlc,EAAO5C,GAAKL,KAAKuE,GACzC8a,EAAI1S,EAAI,GAAM3M,KAAKmf,KAAKlc,EAAO7C,GAAKJ,KAAKuE,EAC7C,CAEOoH,YAAYzC,EAAiBC,EAAejI,GAC/CtD,KAAKkX,eAAenJ,YAAYzC,EAAOC,EAAKjI,EAChD,CAEOmL,eAAenD,EAAiBC,EAAejI,GAClDtD,KAAKmX,iBAAiB1I,eAAenD,EAAOC,EAAKjI,EACrD,CAEQ4b,gBAAgBwC,EAAeC,GAKnC,OAJY,IAAI/d,EAASxB,KAAK6E,IAAIya,GAAStf,KAAK6E,IAAI0a,GAChDvf,KAAK6E,IAAIya,GAAStf,KAAK4E,IAAI2a,GAC3Bvf,KAAK4E,IAAI0a,GAAQ,EAGzB,ECvkDG,MAAME,EAEFze,wBAAwB6c,GACtBhgB,KAAK6hB,YAKND,EAAgBE,iBAChB9hB,KAAK6hB,YAAa,EAClB7hB,KAAK+hB,SAAS/B,EAAS,qBANvB4B,EAAgBI,gBAAgBhC,GAChChgB,KAAK6hB,YAAa,EAClB7hB,KAAK+hB,SAAS/B,EAAS,gBAM/B,CAEQ7c,gBAAgB8e,EAAIC,GACxBD,EAAGE,aAAa,QAASF,EAAGG,aAAa,SAAW,IAAMF,EAC9D,CAEO/e,uBAAuB6c,GACtBA,EAAQqC,kBACRrC,EAAQqC,oBACDrC,EAAQsC,qBACftC,EAAQsC,uBACDtC,EAAQuC,oBACfvC,EAAQuC,sBACDvC,EAAQwC,yBACfxC,EAAQwC,yBAEhB,CAEOrf,wBACC5C,SAASuhB,eACTvhB,SAASuhB,iBACFvhB,SAASkiB,oBAChBliB,SAASkiB,sBACFliB,SAASmiB,sBAChBniB,SAASmiB,sBAEjB,CAEQvf,mBAA6B,ECpClC,MAAMwf,EAQ0CC,MAN5C1hB,YACC2hB,OACAC,QACAC,UACAC,gBAER7hB,YAAYI,EAAeC,EAAwBohB,GAAA,KAAAA,MAAAA,EAC/C5iB,KAAK6iB,OAAStiB,SAAS0iB,cAAc,UAErCjjB,KAAK6iB,OAAOthB,MAAQA,EACpBvB,KAAK6iB,OAAOrhB,OAASA,EACrBxB,KAAK6iB,OAAOK,GAAK,cAEjBljB,KAAK6iB,OAAOM,MAAMC,QAAU,sRAS5BpjB,KAAK6iB,OAAOM,MAAM5hB,MAAmB,EAARA,EAAH,KAC1BvB,KAAK6iB,OAAOM,MAAM3hB,OAAqB,EAATA,EAAH,KAE3BxB,KAAK8iB,QAAU9iB,KAAK6iB,OAAOQ,WAAW,MAGrCrjB,KAAK8iB,QAAgBQ,wBAAyB,EAC/CtjB,KAAK8iB,QAAQS,uBAAwB,EACpCvjB,KAAK8iB,QAAgBU,6BAA8B,EAEpDxjB,KAAKkB,YAAc,IAAI2V,EAAYtV,EAAOC,GAC1CxB,KAAKgjB,gBAAkBhjB,KAAKyjB,WAAWC,KAAK1jB,KAChD,CAEO2jB,OAEH3jB,KAAK4jB,SAASrjB,SAASsjB,eAAe,SAGtC7jB,KAAK6iB,OAAOiB,iBAAiB,SAAUC,IACnCA,EAAMC,iBACNpC,EAAgBqC,iBAAiBjkB,KAAK6iB,OAAO,IAIjD7iB,KAAK4iB,MAAMe,KAAK3jB,KAAKkB,aAAagjB,MAC9B,KACIlkB,KAAK4iB,MAAMuB,SACXnkB,KAAK+iB,UAAY5I,KAAKC,MACtBpa,KAAKyjB,YAAY,GAG7B,CAEOA,aACHzjB,KAAK4iB,MAAMwB,OAAOpkB,KAAKkB,YAAaiZ,KAAKC,MAAQpa,KAAK+iB,WACtD/iB,KAAKqkB,iBACLC,sBAAsBtkB,KAAKgjB,gBAC/B,CAEOqB,iBACHrkB,KAAK8iB,QAAQyB,aAAavkB,KAAKkB,YAAYoX,eAAgB,EAAG,EAClE,CAEOsL,SAAS5D,GACZA,EAAQwE,YAAYxkB,KAAK6iB,OAC7B,ECxEG,MAAe4B,EAGXd,KAAKziB,GACR,OAAOwjB,QAAQC,IAAI,GACvB,CAEOR,SAEP,ECRG,MAAMS,EAEFzhB,iCACH,OAAO,IAAIuhB,SAAkBG,IACzB,MAAMpjB,EAAmB,IAAI0T,EAC7B1T,EAAQA,QAAU,IAAI2W,YAAY,OAElC,MAAMsE,EAA6B,IAAI7Q,EACvC6Q,EAAI1Q,QAAQ,KAEZ,IAAK,IAAInL,EAAY,EAAGA,EAAI,MAAWA,IAAK,CACxC,MAAMuF,EAAgBsW,EAAI3Q,WAC1BtK,EAAQA,QAAQZ,GAAK,IAAMuF,EAAQ,IAAMA,GAAS,EAAI,IAAMA,GAAS,GAAK,KAAO,E,CAGrF3E,EAAQF,MAAQ,IAChBE,EAAQD,OAAS,IACjBqjB,EAAQpjB,EAAQ,GAExB,CAEO0B,2CACH,OAAO,IAAIuhB,SAASG,IAChB,MAAMpjB,EAAmB,IAAI0T,EAC7B1T,EAAQA,QAAU,IAAI2W,YAAY,QAEC,IAAIvM,GACnCG,QAAQ,KAEZ,IAAK,IAAIxJ,EAAY,EAAGA,EAAI,IAAKA,IAC7B,IAAK,IAAIC,EAAY,EAAGA,EAAI,IAAKA,IAAK,CAClC,MAAMyL,EAAa,IAAMzL,EACnB0L,EAAa,IAAM3L,EACnBO,EAAYX,KAAK+B,KAAK+J,EAAKA,EAAKC,EAAKA,GAAM,IACjD,IAAI9D,EAAY,EAAItH,EACpBsH,GAAIA,EAAIA,EACJtH,EAAI,IACJsH,EAAI,GAERA,EAAIjI,KAAKsN,IAAI,EAAO,IAAJrF,GAEhB5I,EAAQA,QAAQgB,EAAQ,IAAJD,GAAW,SAAkC,IAAJ6H,GAAY,E,CAIjF5I,EAAQF,MAAQ,IAChBE,EAAQD,OAAS,IACjBqjB,EAAQpjB,EAAQ,GAExB,CAEO0B,4CACH,OAAO,IAAIuhB,SAASG,IAChB,MAAMpjB,EAAU,IAAI0T,EACpB1T,EAAQA,QAAU,IAAI2W,YAAY,QAEtB,IAAIvM,GACZG,QAAQ,KAEZ,IAAK,IAAIxJ,EAAI,EAAGA,EAAI,IAAKA,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC1B,MAAMyL,EAAK,IAAMzL,EACX0L,EAAK,IAAM3L,EACXO,EAAIX,KAAK+B,KAAK+J,EAAKA,EAAKC,EAAKA,GAAM,IACzC,IAAI9D,EAAI,EAAItH,EACZsH,GAAQA,EACJtH,EAAI,IAAKsH,EAAI,GACjBA,EAAIjI,KAAKsN,IAAI,EAAO,GAAJrF,GAChB5I,EAAQA,QAAQgB,EAAQ,IAAJD,GAAW,SAAkC,IAAJ6H,GAAY,E,CAIjF5I,EAAQF,MAAQ,IAChBE,EAAQD,OAAS,IACjBqjB,EAAQpjB,EAAQ,GAExB,CAEO0B,YAAY2hB,EAAkBC,GACjC,OAAO,IAAIL,SAAkBG,IACzB,MAAMG,EAA0B,IAAIC,MACpCD,EAAME,OAAS,KACX,MAAMzjB,EAAmB,IAAI0T,EAC7B1T,EAAQA,QAAUzB,KAAKsY,aAAa0M,EAAOD,GAC3CtjB,EAAQF,MAAQyjB,EAAMzjB,MACtBE,EAAQD,OAASwjB,EAAMxjB,OACvBqjB,EAAQpjB,EAAQ,EAEpBujB,EAAMG,QAAU,IAAYN,IAC5BG,EAAMvkB,IAAMqkB,CAAQ,GAE5B,CAEQ3hB,oBAAoB6hB,EAAyBI,GAAqB,GACtE,MAAMvC,EAA4BtiB,SAAS0iB,cAAc,UACzDJ,EAAOthB,MAAQyjB,EAAMzjB,MACrBshB,EAAOrhB,OAASwjB,EAAMxjB,OACtB,MAAMshB,EAAoCD,EAAOQ,WAAW,MAC5DP,EAAQuC,UAAUL,EAAO,EAAG,GAC5B,MAAMzM,EAA0BuK,EAAQxK,aAAa,EAAG,EAAG0M,EAAMzjB,MAAOyjB,EAAMxjB,QAAQ+W,KAChF+M,EAAoB,IAAIlN,YAAYG,EAAK3X,OAAS,GACxD,IAAIyJ,EAAY,EAChB,IAAK,IAAIxJ,EAAY,EAAGA,EAAI0X,EAAK3X,OAAQC,GAAK,EAEtCykB,EAAKjb,GADL+a,EACW7M,EAAK1X,EAAI,IAAM,GAAO0X,EAAK1X,EAAI,IAAM,GAAO0X,EAAK1X,EAAI,IAAM,EAAK0X,EAAK1X,EAAI,GAEzE,KAAO,GAAO0X,EAAK1X,EAAI,IAAM,GAAO0X,EAAK1X,EAAI,IAAM,EAAK0X,EAAK1X,EAAI,GAGhFwJ,IAEJ,OAAOib,CACX,ECzGG,MAAMC,UAAqBd,EAEtBe,kBACAC,YACAC,OACA7N,aACA3W,YAEDyiB,KAAKziB,GAGR,OAFAlB,KAAKkB,YAAcA,EACnBlB,KAAK6X,aAAe,IAAIhE,EAA2B3S,GAC5CwjB,QAAQC,IAAI,CACfC,EAAae,KAAK,EAAQ,OAA8B,GAAOzB,MAC1DziB,GAAqBzB,KAAKwlB,kBAAoB/jB,IAEnDmjB,EAAae,KAAK,EAAQ,OAA0B,GAAOzB,MACtDziB,GAAqBzB,KAAKylB,YAAchkB,IAE7CmjB,EAAae,KAAK,EAAQ,OAA8B,GAAOzB,MAC1DziB,GAAqBzB,KAAKwlB,kBAAoB/jB,IAEnDmjB,EAAae,KAAK,EAAQ,OAA0B,GAAOzB,MACtDziB,GAAqBzB,KAAKylB,YAAchkB,IAE7CmjB,EAAae,KAAK,EAAQ,MAAqC,GAAMzB,MAChEziB,GAAqBzB,KAAK0lB,OAASjkB,KAGhD,CAEO2iB,OAAOljB,EAA0Bsd,GACpCtd,EAAY0X,iBAAiB,GAC7B1X,EAAY6c,YAAY,EAAE,EAAI/d,KAAK0lB,OAAO,GAC1CxkB,EAAY6d,mBAGR/e,KAAK4lB,OAAY,IAALpH,GADE,QAGtB,CAKOoH,OAAOnJ,EAAqBnZ,GAE/B,MAAM4B,EAAuB,CACzB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EACjC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAG/BD,EAA0B,CAC5B,IAAIiB,EAAS,EAAK,GAAM,GAAM,IAAIA,GAAU,EAAK,GAAM,GACvD,IAAIA,GAAU,EAAK,EAAK,GAAM,IAAIA,EAAS,EAAK,EAAK,GACrD,IAAIA,EAAS,GAAM,EAAK,GAAM,IAAIA,GAAU,GAAM,EAAK,GACvD,IAAIA,GAAU,GAAM,GAAM,GAAM,IAAIA,EAAS,GAAM,GAAM,IAK7D,IAAIiZ,EAAmBnU,EAASoU,qBAFlB,UAE4DpW,eAAegC,EAASqU,yBAAuC,IAAd5C,IAC3H0C,EAAmBA,EAAiBnW,eAAegC,EAASsU,yBAAuC,IAAd7C,IAErF,MAAMvK,EAA2B,IAAI9M,MACrCH,EAAO8a,SAASC,IACZ,MAAMR,EAAcL,EAAiBxU,SAASqV,GAExCvd,EAAI+c,EAAY/c,EAAE,GAClBD,EAAIgd,EAAYhd,EAChBqB,EAAI2b,EAAY3b,EAAI,EAAmC,EAA/BzB,KAAK4E,IAAkB,IAAdyV,GAEvCvK,EAAQ5M,KAAK,IAAIY,EAASzD,EAAGD,EAAGqB,GAAG,IAGvC,IAAK,IAAIhD,EAAI,EAAGA,EAAIqE,EAAMtE,OAAQC,GAAK,EAEnCb,KAAK2e,kBAAkBzM,EAAQhN,EAAMrE,IAAKqR,EAAQhN,EAAMrE,EAAI,IAAKyC,EAEzE,CAGQqb,kBAAkBlM,EAAcmM,EAActb,GAClD,MAAM+M,GAAgB,IAEtB,GAAIoC,EAAG5O,EAAIwM,GAAgBuO,EAAG/a,EAAIwM,EAC9BrQ,KAAK6X,aAAa/D,2BAA2B9T,KAAK6e,QAAQpM,GAAKzS,KAAK6e,QAAQD,GAAKtb,OAC9E,IAAImP,EAAG5O,EAAIwM,GAAgBuO,EAAG/a,EAAIwM,EACrC,OACG,GAAIoC,EAAG5O,EAAIwM,EAAc,CAC5B,MAAMsC,GAAStC,EAAeoC,EAAG5O,IAAM+a,EAAG/a,EAAI4O,EAAG5O,GAC3Cib,EAAK,IAAI5Y,EAASyM,GAASiM,EAAGnc,EAAIgQ,EAAGhQ,GAAKgQ,EAAGhQ,EAAGkQ,GAASiM,EAAGpc,EAAIiQ,EAAGjQ,GAAKiQ,EAAGjQ,EAAG6N,GACpFrQ,KAAK6X,aAAa/D,2BAA2B9T,KAAK6e,QAAQpM,GAAKzS,KAAK6e,QAAQC,GAAKxb,E,MAC9E,GAAIsb,EAAG/a,EAAIwM,EAAc,CAC5B,MAAMsC,GAAStC,EAAeuO,EAAG/a,IAAM4O,EAAG5O,EAAI+a,EAAG/a,GAC3Cib,EAAK,IAAI5Y,EAASyM,GAASF,EAAGhQ,EAAImc,EAAGnc,GAAKmc,EAAGnc,EAAGkQ,GAASF,EAAGjQ,EAAIoc,EAAGpc,GAAKoc,EAAGpc,EAAG6N,GACpFrQ,KAAK6X,aAAa/D,2BAA2B9T,KAAK6e,QAAQD,GAAK5e,KAAK6e,QAAQC,GAAKxb,E,EAEzF,CAEOub,QAAQpM,GACX,OAAO,IAAIvM,EAAS9D,KAAKsL,MAAO1N,KAAKkB,YAAYK,MAAQ,EAAM,IAAMkR,EAAGhQ,GAAMgQ,EAAG5O,GAC7EzB,KAAKsL,MAAO1N,KAAKkB,YAAYM,OAAS,EAAa,IAAPiR,EAAGjQ,GAAYiQ,EAAG5O,GAC9D4O,EAAG5O,EACX,GC7GJ,MAEWV,cACoB,IAAIwf,EAAO,IAAK,IAAK,IAAI4C,GACzC5B,MACX,IAIQkC,M","sources":["webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/examples/wireframe-cube/TwisterScene.ts","webpack://aisa/./src/examples/wireframe-cube/Application.ts"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1,\n    DISABLED\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n\n    public setRotationMatrix(x: number,y: number,z: number, alpha: number): void {\n        const c = Math.cos(Math.PI * 2 *alpha / 360 );\n        const s = Math.sin(Math.PI * 2 *alpha / 360 );\n        const vector = new Vector3f(x,y,z);\n        vector.normalize2();\n\n        this.m11 = (1.0 - c) * vector.x * vector.x + c;\n        this.m12 = (1.0 - c) * vector.x * vector.y - s * vector.z;\n        this.m13 = (1.0 - c) * vector.x * vector.z + s * vector.y;\n        this.m14 = 0.0;\n\n        this.m21 = (1.0 - c) * vector.x * vector.y + s * vector.z;\n        this.m22 = (1.0 - c) * vector.y * vector.y + c;\n        this.m23 = (1.0 - c) * vector.y * vector.z - s * vector.x;\n        this.m24 = 0.0;\n\n        this.m31 = (1.0 - c) * vector.x * vector.z - s * vector.y;\n        this.m32 = (1.0 - c) * vector.y * vector.z + s * vector.x;\n        this.m33 = (1.0 - c) * vector.z * vector.z + c;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) {\n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        if (this.cullMode == CullFace.DISABLED) {\n            return true;\n        }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n            if (this.cullMode == CullFace.DISABLED) {\n                return true;\n            }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","export class Texture {\n\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0;\n        let  x1 ;\n        let  y0;\n        let y1 ;\n\n        if (this.clamp) {\n            x = Math.max(Math.min(x, this.width - 1), 0);\n            y = Math.max(Math.min(y, this.height - 1), 0);\n\n            //x= ((x%this.width)+ this.width) % this.width;\n            //y= ((y%this.height)+ this.height) % this.height;\n\n\n            x0 = Math.floor(x);\n            x1 =  Math.max(Math.min(x0+1, this.width - 1), 0);\n              y0 = Math.floor(y);\n             y1 =Math.max(Math.min(y0+1, this.height - 1), 0);\n        } else {\n            x= ((x%this.width)+ this.width) % this.width;\n            y= ((y%this.height)+ this.height) % this.height;\n\n\n        x0 = x | 0;\n        x1 = (x+ 1 | 0)%this.width ;\n          y0 = y | 0;\n         y1 = (y+ 1 | 0)%this.height ;\n        }\n\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0, x1y0 , x0y1, x1y1 );\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        let x0y0: number;\n        let x1y0: number;\n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n\n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n\n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n\n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        const x0y0_a = x0y0 >> 24 & 0xff;\n        const x1y0_a = x1y0 >> 24 & 0xff;\n        const x0y1_a = x0y1 >> 24 & 0xff;\n        const x1y1_a = x1y1 >> 24 & 0xff;\n\n        const col1_a = x0y0_a * oneMinusXfrac + x1y0_a * xFrac;\n        const col2_a = x0y1_a * oneMinusXfrac + x1y1_a * xFrac;\n        const col_a = col1_a * oneMinusYfrac + (col2_a * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | col_a << 24;\n    }\n\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n               // console.log(xx, yy);\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: string, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix3f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { CohenSutherlandLineClipper } from '../../screen-space-clipping/CohenSutherlandLineClipper';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract twister into effect class\n */\nexport class TwisterScene extends AbstractScene {\n\n    private backgroundTexture: Texture;\n    private logoTexture: Texture;\n    private greets: Texture;\n    private linerClipper ;\n    private framebuffer: Framebuffer;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.framebuffer = framebuffer;\n        this.linerClipper = new CohenSutherlandLineClipper(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.backgroundTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.backgroundTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/haujobb-overlay.png'), true).then(\n                (texture: Texture) => this.greets = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(0);\n        framebuffer.drawTexture(0,0,  this.greets,1.0);\n        framebuffer.clearDepthBuffer();\n     \n            const color = 105 | 255 << 8 |  105<< 16| 255 <<24;\n            this.scene8(time*0.03, color);\n      \n    }\n\n        // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number, color: number): void {\n\n        const index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        const points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        const scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach((element) => {\n            const transformed = modelViewMartrix.multiply(element);\n\n            const x = transformed.x+0.6;\n            const y = transformed.y;\n            const z = transformed.z - 5 + Math.sin(elapsedTime * 0.09) * 1; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n           \n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n}\n","import { Canvas } from '../../Canvas';\nimport { TwisterScene } from './TwisterScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new TwisterScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","i","Error","replace","p","ScaleClipBlitter","framebuffer","constructor","drawScaledTextureClip","xp","yp","width","height","texture","alphaBlend","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","Math","max","alphaScale","index2","y","x","textureIndex","alpha","inverseAlpha","framebufferPixel","texturePixel","r","b","Color","a","static","toPackedFormat","sub","color","add","div","num","mul","CullFace","Vector4f","z","w","vec","cross","normalize","reci","sqrt","sub2","vec1","vec2","add2","scal","componentWiseMul","dot","cross2","normalize2","AbstractGeometricObject","mesh","inverse","buildMesh","points","index","normals","Array","normal","push","faces","n1","n2","n3","v1","v2","v3","transformedPoints","map","transformedNormals","getMesh","Vector3f","mult","scale","Torus","invert","super","STEPS2","frame","torusFunction","PI","frame2","up","right","pos","sin","cos","j","Vector2f","perp","Matrix4f","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","matrix","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","multiplyMatrix","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","NdotL","shadowMatrix","tx","ty","tz","setTranslationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","setRotationMatrix","c","s","vector","result","multiply2","matrix2","multiply","multiplyHom","multiplyHomArr","multiplyHomArr2","multiplyArr","Matrix3f","angle","xScale","yScale","zScale","Interpolator","start","end","current","y1","y2","mu","mu2","RandomNumberGenerator","seed","getFloat","setSeed","AbstractTriangleRasterizer","AbstractScannlineTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","projection","fillLongRightTriangle","fillLongLeftTriangle","FlatShadingTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","distance","spanzStep","round","wStart","framebufferIndex","wBuffer","LineRasterizerDda","drawLineDDA","xDistance","yDistance","dx","dy","abs","sign","wDelta","drawPixel","LineRasterizerNoZ","drawLineDDANoZ","TexturedTriangleRasterizer","tslope1u","textureCoordinate","u","tslope1v","v","curu1","curv1","tslope2u","tslope2v","curu2","curv2","spanuStep","spanvStep","uStart","vStart","min","bob","color2","getBilinearFilteredPixelRasterizer","TexturedAlphaBlendingTriangleRasterizer","pipeline","currentColor","TextureCoordinate","Vertex","position","AbstractRenderingPipeline","NEAR_PLANE_Z","cullMode","BACK","setCullFace","face","setAlpha","isInFrontOfNearPlane","isTriangleCCW","DISABLED","det","isTriangleCCW2","v4","TexturingRenderingPipeline","sphereMapping","triangleRasterizer","vertexArray","setSphereMapping","modelViewMatrix","projectedVertices","setFramebuffer","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","draw","normalMatrix","normals2","points2","vertices","project2","fakeSphere","uv","clipConvexPolygon","zClipTriangle","t1","computeNearPlaneIntersection","ratio","vertex","subject","input","output","S","point","clipRegion","edge","isInside2","computeIntersection2","AbstractClipEdge","BottomClipEdge","isInside","minWindow","computeIntersection","factor","textCoord","CohenSutherlandLineClipper","cohenSutherlandLineClipper","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","maxWindow","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","LeftClipEdge","RightClipEdge","TopClipEdge","Texture","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","x1","y0","x0y0","x1y0","x0y1","x1y1","col1","floor","col2","getBilinearFilteredPixel2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","Framebuffer","camera","texturedTriangleRasterizer","scaleClipBlitter","texturedRenderingPipeline","lineRasterizer","lineRasterizerNo","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","plane","cylinder2","linerClipper","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","setTexture","getImageData","data","set","clear","BLACK","count","clearColorBuffer","fill","drawPixel4","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","roundedY","percent","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","drawRect2","drawText","text","xpos","firstIndex","charCodeAt","drawTextureRectFastAlpha","addReflections","interpolate","Date","now","drawTextureRect2","xs","ys","xt","yt","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","fastFramebufferCopyOffset","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","rng","drawTexturedBillboard","drawParticle","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","textureRowOffset","framebufferRowOffset","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t2","project","t3","clearDepthBuffer","drawBox","wireFrameSphereClipping","sphereFunction2","modelViewMartrix","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","transformed","colred","colLine","wireFrameTerrain","heightmap","xOff","zOff","forEach","element","drawBoundingSphere","sphere","getRadius","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","dist2","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawParticleStreams","light","sort","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","asin","fakeSphere2","tex","theta","phi","FullscreenUtils","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","Canvas","scene","canvas","context","startTime","boundRenderLoop","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","toggleFullscreen","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","appendChild","AbstractScene","Promise","all","TextureUtils","resolve","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","TwisterScene","backgroundTexture","logoTexture","greets","load","scene8","main"],"sourceRoot":""}