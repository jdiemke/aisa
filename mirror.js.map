{"version":3,"file":"mirror.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/mirror/MirrorScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/mirror/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n        \n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n        \n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n        \n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class CubeScene extends AbstractScene {\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private fairlight: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/logo-fairlight-10.png'), false).then(texture => this.fairlight = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.fairlight.texture);\n        framebuffer.clearDepthBuffer();\n\n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 6.2  +Math.sin(elapsedTime * 0.05)*3;\n\n        return Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.08)*8, Math.sin(elapsedTime * 0.05)*6, -20).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.09)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { CubeScene } from '../cube/CubeScene';\n\nexport class MirrorScene extends AbstractScene {\n\n    private hoodlumLogo: Texture;\n    private blurred: Texture;\n    private cross: Texture;\n    private micro: Texture;\n    private noise: Texture;\n    private atlantisBackground: Texture;\n    private startTime: number;\n    private scene: CubeScene;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.startTime = Date.now();\n        this.scene = new CubeScene();\n        return Promise.all([\n            this.scene.init(framebuffer),\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.atlantisBackground = texture\n            ),\n            TextureUtils.load(require('../../assets/hoodlumLogo.png'), true).then(\n                (texture: Texture) => this.hoodlumLogo = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(texture => this.blurred = texture),\n            TextureUtils.load(require('../../assets/cross.png'), true).then(texture => this.cross = texture),\n            TextureUtils.load(require('../../assets/microstrange.png'), false).then(texture => this.micro = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.atlantisBackground.texture);\n\n        \n            framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n            framebuffer.setCullFace(CullFace.BACK);\n\n            \n            this.scene.render(framebuffer, time);\n    \n    \n            let source: number = 0;\n            let dest: number = 319;\n            for (let y: number = 0; y < 100; y++) {\n                for (let x: number = 0; x < 160; x++) {\n                   framebuffer.framebuffer[dest--] = framebuffer.framebuffer[source++];\n                }\n                source += 160;\n                dest += 320 + 160;\n            }\n    \n            const type = ((time / 1000)| 0) % 2;\n            if (type == 0) {\n\n            source = 0;\n            dest = 199 * 320;\n            for (let y: number = 0; y < 100; y++) {\n                for (let x: number = 0; x < 320; x++) {\n                    framebuffer.framebuffer[dest++] = framebuffer.framebuffer[source++];\n                }\n                dest -= 320 * 2;\n            }\n        } else {\n            let source: number = 0;\n            let dest: number = 319;\n            for (let y: number = 0; y < 200; y++) {\n                for (let x: number = 0; x < 160; x++) {\n                    framebuffer.framebuffer[dest--] = framebuffer.framebuffer[source++];\n                }\n                source += 160;\n                dest += 320 + 160;\n            }\n        }\n    \n            /*\n            let tmpGlitch = new Uint32Array(320 * 200);\n            framebuffer.fastFramebufferCopy(tmpGlitch, framebuffer.framebuffer);\n    \n            let texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n    \n            const ukBasslineBpm = 140;\n            const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n            const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash = (framebuffer.cosineInterpolate(0, 20, smashTime) -\n                framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            let width = Math.round(320 + smash * 320 / 50);\n            let height = Math.round(200 + smash * 200 / 50);\n    \n            framebuffer.drawScaledTextureClipBi(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n    \n                */\n            for (let y = 0; y < 3; y++) {\n                for (let x = 0; x < 4; x++) {\n                    const xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                    const yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n    \n                    framebuffer.drawTexture(xx, yy, this.cross, 0.45);\n                }\n            }\n    \n\n            framebuffer.drawScaledTextureClipBiAdd(\n                320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                200 / 2 - 20,\n                this.micro.width * 2, this.micro.height * 2, this.micro,1);\n    \n            framebuffer.drawScaledTextureClipBiAdd(\n                320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n                200 / 2 - 60,\n                this.micro.width, this.micro.height, this.micro,1);\n    \n\n            framebuffer.noise(time, this.noise);\n\n    }\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { MirrorScene } from './MirrorScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new MirrorScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","CubeScene","AbstractScene","renderingPipeline","cubeMesh","Cube","fairlight","GouraudShadingRenderingPipeline","Promise","all","TextureUtils","load","renderCube","draw","getMesh","getModelViewMatrix","renderBackground","MirrorScene","hoodlumLogo","blurred","cross","micro","atlantisBackground","accumulationBuffer","generateProceduralNoise","source","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","normalize","faces","n1","n2","n3","transformedPoints","map","transformedNormals","AbstractGeometricObject","super","invert","frame","frame2","up","right","current","y2","mu","mu2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","distance","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","mat","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setFog","setLights","enableLighting","enable","setMaterial","setColor","drawMeshArray","meshes","model","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","point","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","normals2","vertices","uv","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","filename","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","window","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}