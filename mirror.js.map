{"version":3,"file":"mirror.js","mappings":"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","sources":["webpack://aisa/./src/assets/atlantis.png","webpack://aisa/./src/assets/blurredBackground.png","webpack://aisa/./src/assets/cross.png","webpack://aisa/./src/assets/hoodlumLogo.png","webpack://aisa/./src/assets/microstrange.png","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/mirror/TitanEffectScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/mirror/Application.ts"],"sourcesContent":["export default __webpack_public_path__ + \"1940711ae250abc4871bf563f44ab585.png\";","export default __webpack_public_path__ + \"7ac69aefeb77efddca4311160ba48eb9.png\";","export default __webpack_public_path__ + \"21f3f7c928904fdcdd8eecbc4618d6cb.png\";","export default __webpack_public_path__ + \"5211260c15f95de001ff416d5a098ceb.png\";","export default __webpack_public_path__ + \"ca65f62320a1c5496be703455da5e09a.png\";","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n     \n         //this.cylinder = this.createCylinder();\n       \n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array) {\n        src.set(dest);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        const index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        const points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        const scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach((element) => {\n            const transformed = modelViewMartrix.multiply(element);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            const color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    \n    /*\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n*/\n   /*\n\n*/\n    \n   \n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n     /*\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\nexport class CubeScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.BLACK.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(CubeScene.BACKGROUND_COLOR);\n        framebuffer.clearDepthBuffer();\n        \n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 3.2;\n\n        return Matrix4f.constructTranslationMatrix(0, 0, -9).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { CubeScene } from '../cube/CubeScene';\n\nexport class TitanEffectScene extends AbstractScene {\n\n    private hoodlumLogo: Texture;\n    private blurred: Texture;\n    private cross: Texture;\n    private micro: Texture;\n    private noise: Texture;\n    private atlantisBackground: Texture;\n    private startTime: number;\n    private scene: CubeScene;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.startTime = Date.now();\n        this.scene = new CubeScene();\n        return Promise.all([\n            this.scene.init(framebuffer),\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.atlantisBackground = texture\n            ),\n            TextureUtils.load(require('../../assets/hoodlumLogo.png'), true).then(\n                (texture: Texture) => this.hoodlumLogo = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(texture => this.blurred = texture),\n            TextureUtils.load(require('../../assets/cross.png'), true).then(texture => this.cross = texture),\n            TextureUtils.load(require('../../assets/microstrange.png'), false).then(texture => this.micro = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // const time: number = Date.now() - this.startTime;\n        const elapsedTime: number = 0.004 * time;\n\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.atlantisBackground.texture);\n\n        \n            framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n            framebuffer.setCullFace(CullFace.BACK);\n\n            \n            this.scene.render(framebuffer, time);\n    \n    \n            let source: number = 0;\n            let dest: number = 319;\n            for (let y: number = 0; y < 100; y++) {\n                for (let x: number = 0; x < 160; x++) {\n                   framebuffer.framebuffer[dest--] = framebuffer.framebuffer[source++];\n                }\n                source += 160;\n                dest += 320 + 160;\n            }\n    \n            let type = ((time / 1000)| 0) % 2;\n            if (type == 0) {\n\n            source = 0;\n            dest = 199 * 320;\n            for (let y: number = 0; y < 100; y++) {\n                for (let x: number = 0; x < 320; x++) {\n                    framebuffer.framebuffer[dest++] = framebuffer.framebuffer[source++];\n                }\n                dest -= 320 * 2;\n            }\n        } else {\n            let source: number = 0;\n            let dest: number = 319;\n            for (let y: number = 0; y < 200; y++) {\n                for (let x: number = 0; x < 160; x++) {\n                    framebuffer.framebuffer[dest--] = framebuffer.framebuffer[source++];\n                }\n                source += 160;\n                dest += 320 + 160;\n            }\n        }\n    \n            /*\n            let tmpGlitch = new Uint32Array(320 * 200);\n            framebuffer.fastFramebufferCopy(tmpGlitch, framebuffer.framebuffer);\n    \n            let texture = new Texture();\n            texture.texture = tmpGlitch;\n            texture.width = 320;\n            texture.height = 200;\n    \n            const ukBasslineBpm = 140;\n            const ukBasslineClapMs = 60000 / ukBasslineBpm * 2;\n            const smashTime = (Date.now() - this.start) % ukBasslineClapMs;\n            const smash = (framebuffer.cosineInterpolate(0, 20, smashTime) -\n                framebuffer.cosineInterpolate(20, 300, smashTime)) * 35;\n            let width = Math.round(320 + smash * 320 / 50);\n            let height = Math.round(200 + smash * 200 / 50);\n    \n            framebuffer.drawScaledTextureClipBi(\n                Math.round(320 / 2 - width / 2),\n                Math.round(200 / 2 - height / 2),\n                width, height, texture, 1.0);\n    \n                */\n            for (let y = 0; y < 3; y++) {\n                for (let x = 0; x < 4; x++) {\n                    let xx = Math.round(320 / 4 * x + 320 / 4 * 0.5 - this.cross.width / 2);\n                    let yy = Math.round(200 / 3 * y + 200 / 3 * 0.5 - this.cross.height / 2);\n    \n                    framebuffer.drawTexture(xx, yy, this.cross, 0.45);\n                }\n            }\n    \n\n            framebuffer.drawScaledTextureClipBiAdd(\n                320 - (((time * 0.09) | 0) % (this.micro.width * 2 + 320)),\n                200 / 2 - 20,\n                this.micro.width * 2, this.micro.height * 2, this.micro,1);\n    \n            framebuffer.drawScaledTextureClipBiAdd(\n                320 - (((time * 0.05) | 0) % (this.micro.width + 320)),\n                200 / 2 - 60,\n                this.micro.width, this.micro.height, this.micro,1);\n    \n\n            framebuffer.noise(time, this.noise);\n\n    }\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else if (p2.projection.y === p3.projection.y) {\n            if (p2.projection.x > p3.projection.x) {\n                this.temp = p2;\n                p2 = p3;\n                p3 = this.temp;\n            }\n            this.fillBottomFlatTriangle(framebuffer, p1, p2, p3);\n        } else if (p1.projection.y === p2.projection.y) {\n            if (p1.projection.x > p2.projection.x) {\n                this.temp = p1;\n                p1 = p2;\n                p2 = this.temp;\n            }\n            this.fillTopFlatTriangle(framebuffer, p1, p2, p3);\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) *\n                (p2.projection.y - p1.projection.y) / (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer, p1, p2, p3);\n            }\n        }\n    }\n\n    private fillBottomFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        const yDistance: number = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistance;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, color);\n    }\n\n    fillTopFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n        const yDistance = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistance;\n\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v2.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, color);\n    }\n\n\n    fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else if (p2.projection.y === p3.projection.y) {\n            if (p2.projection.x > p3.projection.x) {\n                this.temp = p2;\n                p2 = p3;\n                p3 = this.temp;\n            }\n            this.fillBottomFlatTriangle(framebuffer, p1, p2, p3);\n        } else if (p1.projection.y === p2.projection.y) {\n            if (p1.projection.x > p2.projection.x) {\n                this.temp = p1;\n                p1 = p2;\n                p2 = this.temp;\n            }\n            this.fillTopFlatTriangle(framebuffer, p1, p2, p3);\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) *\n                (p2.projection.y - p1.projection.y) / (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer, p1, p2, p3);\n            }\n        }\n    }\n\n    private fillBottomFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const yDistance: number = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistance;\n\n        this.colorInterpolator1.setup(v1.color, v2.color, yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, yDistance);\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, this.colorInterpolator1, this.colorInterpolator2);\n    }\n\n    private fillTopFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const yDistance = v3.projection.y - v1.projection.y;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistance;\n\n\n        this.colorInterpolator1.setup(v1.color, v3.color, yDistance);\n        this.colorInterpolator2.setup(v2.color, v3.color, yDistance);\n\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v2.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, this.colorInterpolator1, this.colorInterpolator2);\n    }\n\n    private fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.colorInterpolator1.setup(v1.color, v2.color, yDistanceLeft);\n        this.colorInterpolator2.setup(v1.color, v3.color, yDistanceRight);\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, this.colorInterpolator1, this.colorInterpolator2);\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.colorInterpolator3.setup(v2.color, v3.color, yDistanceLeft);\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, this.colorInterpolator3, this.colorInterpolator2);\n\n    }\n\n\n    fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.colorInterpolator2.setup(v1.color, v2.color, yDistanceRight);\n        this.colorInterpolator1.setup(v1.color, v3.color, yDistanceLeft);\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, this.colorInterpolator1, this.colorInterpolator2);\n\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.colorInterpolator3.setup(v2.color, v3.color, yDistanceRight);\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, this.colorInterpolator1, this.colorInterpolator3);\n\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator) {\n        for (let i = 0; i < distance; i++) {\n            const length = Math.round(this.xPosition2) - Math.round(this.xPosition);\n            this.rowColorInterpolator.setup(\n                colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition);\n            const spanzStep = (this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] =\n                        this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.startColor.r += this.rowColorInterpolator.colorSlope.r;\n                this.rowColorInterpolator.startColor.g += this.rowColorInterpolator.colorSlope.g;\n                this.rowColorInterpolator.startColor.b += this.rowColorInterpolator.colorSlope.b;\n            }\n\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n\n            colorInterpolator1.startColor.r += colorInterpolator1.colorSlope.r;\n            colorInterpolator1.startColor.g += colorInterpolator1.colorSlope.g;\n            colorInterpolator1.startColor.b += colorInterpolator1.colorSlope.b;\n\n            colorInterpolator2.startColor.r += colorInterpolator2.colorSlope.r;\n            colorInterpolator2.startColor.g += colorInterpolator2.colorSlope.g;\n            colorInterpolator2.startColor.b += colorInterpolator2.colorSlope.b;\n\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\n\nexport class TexturedAlphaBlendingTriangleRasterizer {\n\n    private temp: Vertex = null;\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { }\n\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.position.y > p3.position.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } else {\n            const x: number = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) /\n                (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(framebuffer, p1, p2, p3);\n            } else {\n                const tex = p1.textureCoordinate;\n                const tex2 = p2.textureCoordinate;\n                const tex3 = p3.textureCoordinate;\n\n                this.fillLongLeftTriangle2(\n                    framebuffer,\n                    p1.position,\n                    p2.position,\n                    p3.position,\n                    new Vector3f(tex.u, tex.v, 0),\n                    new Vector3f(tex2.u, tex2.v, 0),\n                    new Vector3f(tex3.u, tex3.v, 0)\n                );\n            }\n        }\n    }\n\n    private fillLongRightTriangle2(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n\n\n\n\n        const yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        const slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    fillLongLeftTriangle2(framebuffer: Framebuffer, v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        const yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        const slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        const tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        const tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        const zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\n\nexport class TexturedTriangleRasterizer {\n\n    private temp: Vertex = null;\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.position.y > p3.position.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } else {\n            const x: number = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) /\n                (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(framebuffer, p1, p2, p3);\n            } else {\n                const tex = p1.textureCoordinate;\n                const tex2 = p2.textureCoordinate;\n                const tex3 = p3.textureCoordinate;\n\n                this.fillLongLeftTriangle2(\n                    framebuffer,\n                    p1.position,\n                    p2.position,\n                    p3.position,\n                    new Vector3f(tex.u, tex.v, 0),\n                    new Vector3f(tex2.u, tex2.v, 0),\n                    new Vector3f(tex3.u, tex3.v, 0)\n                );\n            }\n        }\n    }\n\n    private fillLongRightTriangle2(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n\n\n\n\n        const yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        const slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                    \n                \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixel2(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixel2(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    fillLongLeftTriangle2(framebuffer: Framebuffer, v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        const yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        const slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        const tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        const tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        const zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                   \n                   \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixel2(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixel2(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n                /*\n                                const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n                                    v.projection = this.project(v.position);\n                                    return v;\n                                });*/\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].position = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                    this.vertexArray[1].position = this.projectedVertices[1];\n                    this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                    this.vertexArray[2].position = this.projectedVertices[2];\n                    this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                    this.clipConvexPolygon2(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // TODO: remove temp object here\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.position = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].position, projected[1].position, projected[2].position)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].position,\n                projected[1].position,\n                projected[2].position,\n                projected[3].position\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon2(framebuffer, projected);\n    }\n\n\n    public clipConvexPolygon2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel3(this, x0, y0);\n        const x1y0 = this.getPixel3(this, x1, y0);\n        const x0y1 = this.getPixel3(this, x0, y1);\n        const x1y1 = this.getPixel3(this, x1, y1);\n        \n        //return x0y1;\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename.default;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { TitanEffectScene } from './TitanEffectScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new TitanEffectScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","end","current","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","scene8","points","modelViewMartrix","Matrix3f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","points2","forEach","transformed","multiply","push","nearPlaneClipping","project","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","STEPS2","sphereFunction2","PI","Matrix4f","constructTranslationMatrix","p","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawParticleWaves","noClear","num","cos","sort","a","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","y2","mu","mu2","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","sub","temp","theta","phi","Vector4f","seed","position","projection","drawScaledTextureClip","CubeScene","AbstractScene","renderingPipeline","cubeMesh","Cube","GouraudShadingRenderingPipeline","Promise","all","BACKGROUND_COLOR","renderCube","draw","getMesh","getModelViewMatrix","renderBackground","TitanEffectScene","hoodlumLogo","blurred","cross","micro","atlantisBackground","accumulationBuffer","TextureUtils","load","generateProceduralNoise","source","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","normalize","faces","n1","n2","n3","transformedPoints","map","transformedNormals","AbstractGeometricObject","super","invert","frame","frame2","up","right","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","startColor","colorSlope","setup","distance","advance","AbstractTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","drawTriangleDDA","p1","p2","p3","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","drawSpan","yDistanceLeft","yDistanceRight","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","pipeline","fillLongRightTriangle2","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","mat","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setFog","setLights","enableLighting","enable","setMaterial","setColor","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","point","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","modelViewMatrix","enableAlphaBlending","TexturedAlphaBlendingTriangleRasterizer","disableAlphaBlending","setModelViewMatrix","drawMeshArray","meshes","model","vertices","uv","clipConvexPolygon2","zClipTriangle2","computeNearPlaneIntersection2","TextureCoordinate","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel3","interpolateComp","getPixel2","resolve","c","filename","transparency","image","Image","onload","onerror","default","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","definition","key","o","Object","defineProperty","enumerable","get","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}