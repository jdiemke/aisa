{"version":3,"file":"radial-blur.js","mappings":"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","sources":["webpack://aisa/./src/assets/microstrange.png","webpack://aisa/./src/assets/rave.png","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/radial-blur/RadialBlur.ts","webpack://aisa/./src/examples/torus-knot/TorusKnotScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/geometrical-objects/TorusKnot.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/fog/Fog.ts","webpack://aisa/./src/shading/fog/LinearFog.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/radial-blur/Application.ts"],"sourcesContent":["export default __webpack_public_path__ + \"ca65f62320a1c5496be703455da5e09a.png\";","export default __webpack_public_path__ + \"f2b01e8ebcd0467bc5ee98bd9745c36b.png\";","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n    // public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n        // this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n        // this.plane = this.createPlane();\n        // this.cylinder = this.createCylinder();\n        // this.cylinder2 = this.createCylinder2(texture);\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array) {\n        src.set(dest);\n    }\n\n    public drawPolarDistotion2(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        const distScale = 1.355 * (0.4 + 0.6 * 0.5 * (1 + Math.sin(elapsedTime * 0.00017)));\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = Math.sqrt(xdist * xdist + ydist * ydist) * distScale;\n                const angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256;\n\n                const color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public drawPolarDistotion3(elapsedTime: number, texture: Texture): void {\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = Math.sqrt(xdist * xdist + ydist * ydist) * 0.8 - (elapsedTime * 0.017);\n                const angle = Math.atan2(xdist, ydist) / (Math.PI * 2) * 256 + (elapsedTime * 0.017);\n\n                const color1 = texture.texture[(dist & 0xff) + (angle & 0xff) * 256];\n\n                this.framebuffer[i++] = color1;\n            }\n        }\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    // TODO:\n    // - implement scale and translate using homogenous 4x4 matrices\n    //   instead of fucking around with the projection formular\n    public scene8(elapsedTime: number): void {\n\n        const index: Array<number> = [\n            0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6,\n            6, 7, 7, 4, 0, 7, 1, 6, 2, 5, 3, 4,\n        ];\n\n        const points: Array<Vector3f> = [\n            new Vector3f(1.0, 1.0, -1.0), new Vector3f(-1.0, 1.0, -1.0),\n            new Vector3f(-1.0, 1.0, 1.0), new Vector3f(1.0, 1.0, 1.0),\n            new Vector3f(1.0, -1.0, 1.0), new Vector3f(-1.0, -1.0, 1.0),\n            new Vector3f(-1.0, -1.0, -1.0), new Vector3f(1.0, -1.0, -1.0)\n        ];\n\n        const scale = 0.8;\n\n        let modelViewMartrix = Matrix3f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix3f.constructYRotationMatrix(elapsedTime * 0.05));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix3f.constructXRotationMatrix(elapsedTime * 0.05));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n        points.forEach((element) => {\n            const transformed = modelViewMartrix.multiply(element);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z - 4 + Math.sin(elapsedTime * 0.09) * 2; // TODO: use translation matrix!\n\n            points2.push(new Vector3f(x, y, z));\n        });\n\n        for (let i = 0; i < index.length; i += 2) {\n            const color = 255 | 0 << 16 | 255 << 24;\n            this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n    public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n    public drawLedTunnel(elapsedTime: number, texture: Texture) {\n        for (let y = 0; y < 25; y++) {\n            for (let x = 0; x < 40; x++) {\n                const distance = 160 / (Math.sqrt((x - 40 / 2.0) * (x - 40 / 2.0) + (y - 25 / 2.0) * (y - 25 / 2.0)) * 1.4);\n                /*let power = 2.0;\n                let distance = Math.pow(Math.pow((x - 40 / 2.0) * (x - 40 / 2.0),power) + Math.pow((y - 25 / 2.0) * (y - 25 / 2.0),power),1/(2*power));\n                let waveSum: number =  (Math.sin(distance+elapsedTime*0.005)+1)*0.5*(1-Math.min(distance*0.03, 1.0));\n                */\n                const waveSum: number = (Math.sin(distance + elapsedTime * 0.005) + 1) * 0.5 * (1 - Math.min(distance * 0.003, 1.0));\n                // FIXME: put this into a reusable method to remove\n                // code duplications? ie. LedBuffer class wit arrayy and draw method :)\n                const intensity = ((waveSum * 15) | 0) % 16;\n                this.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    /*\n\n    public shadingTorusENvironment(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n        let points: Array<Vector4f> = [];\n        let textCoords: Array<TextureCoordinate> = [];\n\n        // compute normals\n        let normals: Array<Vector4f> = new Array<Vector4f>();\n        const STEPS = 15 * 2;\n        const STEPS2 = 8 * 2;\n        for (let i = 0; i < STEPS + 1; i++) {\n            let frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            let frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            let up = new Vector3f(0.0, 4.0, 0);\n            let right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2 + 1; r++) {\n                let pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z));\n                let normal = frame.sub(pos).normalize();\n                normals.push(new Vector4f(normal.x, normal.y, normal.z, 0));\n                let t = new TextureCoordinate();\n                t.u = 1 / (STEPS2) * r;\n                t.v = 1 / (STEPS) * i;\n                textCoords.push(t);\n            }\n        }\n\n        let index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push((((STEPS2 + 1) * j) + (1 + i))); // 2\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 1\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (0 + i))); //4\n                index.push((((STEPS2 + 1) * j) + (STEPS2 + 1) + (1 + i))); //3\n                index.push((((STEPS2 + 1) * j) + (0 + i))); // 5\n            }\n        }\n\n        let scale = 2.1;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.25));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3));\n\n        let points2: Array<Vector4f> = new Array<Vector4f>();\n\n        let normals2: Array<Vector4f> = new Array<Vector4f>();\n        for (let n = 0; n < normals.length; n++) {\n            normals2.push(modelViewMartrix.multiplyHom(normals[n]));\n        }\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.3) * 26, Math.sin(elapsedTime * 0.2) * 10\n            , -45)\n            .multiplyMatrix(modelViewMartrix);\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            let x = transformed.x;\n            let y = transformed.y;\n            let z = transformed.z; // TODO: use translation matrix!\n\n            let xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            let yy = (this.height * 0.5) + (y / (-z * 0.0078));\n            // commented out because it breaks the winding. inversion\n            // of y has to be done after back-face culling in the\n            // viewport transform\n            // yy =(this.height * 0.5) - (y / (-z * 0.0078));\n\n            points2.push(new Vector4f(Math.round(xx), Math.round(yy), z));\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]].normalize();\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]].normalize();\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]].normalize();\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let normal = n3;\n                let scalar = Math.min((Math.max(0.0, normal.normalize().dot(new Vector4f(0.1, 0.1, -1).normalize())) * 205 + 50), 255);\n                let color = 255 << 24 | scalar << 16 | scalar << 8 | scalar;\n\n                //let color = 255 << 24 | 255 << 16 | 150 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n*/\n\n    public createPlane() {\n\n        const k = {\n            points: []\n        };\n        for (let y = 0; y < 60; y++) {\n            for (let x = 0; x < 100; x++) {\n                k.points.push(new Vector3f(0 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n\n                k.points.push(new Vector3f(1 + x, 0 + y, 0));\n                k.points.push(new Vector3f(0 + x, 1 + y, 0));\n                k.points.push(new Vector3f(1 + x, 1 + y, 0));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        };\n    }\n\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n\n    public createCylinder2(texture: Texture) {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xpos = (x / LOOPX * 256) & 0xff;\n                const xpos2 = ((x + 1) / LOOPX * 256) & 0xff;\n                const ypos = (y * 0.9 / LOOPY * 256) & 0xff;\n                const ypos2 = ((y + 1) * 0.9 / LOOPY * 256) & 0xff;\n\n                const x0y0 = 1 + 0.9 * ((texture.texture[xpos + ypos * 256] & 0xff) / 255);\n                const x1y0 = 1 + 0.9 * ((texture.texture[xpos2 + ypos * 256] & 0xff) / 255);\n                const x0y1 = 1 + 0.9 * ((texture.texture[xpos + ypos2 * 256] & 0xff) / 255);\n                const x1y1 = 1 + 0.9 * ((texture.texture[xpos2 + ypos2 * 256] & 0xff) / 255);\n\n                const x0 = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const z0 = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n\n                const x1 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const z1 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(x0 * x0y0, 0 + y, z0 * x0y0));\n                k.points.push(new Vector3f(x0 * x0y1, 1 + y, z0 * x0y1));\n                k.points.push(new Vector3f(x1 * x1y0, 0 + y, z1 * x1y0));\n\n                k.points.push(new Vector3f(x1 * x1y0, 0 + y, z1 * x1y0));\n                k.points.push(new Vector3f(x0 * x0y1, 1 + y, z0 * x0y1));\n                k.points.push(new Vector3f(x1 * x1y1, 1 + y, z1 * x1y1));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        };\n    }\n\n\n\n    /*\n    public shadingPlaneEnv(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.plane;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x;\n            result.points2[i].z = result.points[i].z + (\n                Math.sin(result.points[i].y * 0.2 + elapsedTime * 2.83) * 5.3\n                + Math.sin(result.points[i].x * 0.5 + elapsedTime * 2.83) * 4.3) * scale2\n                + Math.sin(length * 0.4 - elapsedTime * 3.83) * 4.3;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        // FIXME: speed up\n        // - remove normalie from lighting\n        // - remove normalize after normal transformation!\n        // - precreate array for transformed vertices and normals\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI + Math.sin(elapsedTime * 2.75) * 0.25)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI / 5 + Math.sin(elapsedTime * 2.25) * 0.35).multiplyMatrix(Matrix4f.constructTranslationMatrix(-50, -25\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0,\n            -205 + Math.sin(elapsedTime * 1.9) * 50)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingCylinderEnvDisp(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        let result = this.cylinder2;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.039 + (10 - length) * 0.02 + elapsedTime * 0.6) * 4;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0.2 * Math.sin(elapsedTime * 1.2)).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture';\nimport { TorusKnotScene } from '../torus-knot/TorusKnotScene';\n\nexport class RadialBlur extends AbstractScene {\n\n    private tunnelScene: TorusKnotScene = new TorusKnotScene();\n    public tmpGlitch: Uint32Array;\n    private texture = new Texture();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.tmpGlitch = new Uint32Array(framebuffer.width * framebuffer.height);\n\n        return Promise.all([\n            this.tunnelScene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.tunnelScene.render(framebuffer, time);\n        this.applyRadialBlur(framebuffer, time);\n    }\n\n    private applyRadialBlur(framebuffer: Framebuffer, time: number): void {\n\n        framebuffer.fastFramebufferCopy(this.tmpGlitch, framebuffer.framebuffer);\n        const intensity: number = (Math.sin(time * 0.0002) * 0.5 + 0.5)* 4;\n        this.texture.texture = this.tmpGlitch;\n        this.texture.width = framebuffer.width;\n        this.texture.height = framebuffer.height;\n        let width = framebuffer.width;\n        let height = framebuffer.height;\n        for (let i = 0; i < 15; i++) {\n            width += framebuffer.width * 0.03+i*0.4;\n            height += framebuffer.height * 0.03+i*0.4;\n            framebuffer.scaleClipBlitter.drawScaledTextureClip(\n                framebuffer.width / 2 - width / 2,\n                framebuffer.height / 2 - height / 2,\n                width, height, this.texture, 0.0+ intensity * 0.19* (14- i) / 14);\n                framebuffer.fastFramebufferCopy(this.tmpGlitch, framebuffer.framebuffer);\n        }\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\nimport { Vector4f } from '../../math/index';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { LinearFog } from '../../shading/fog/LinearFog';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusKnotScene extends AbstractScene {\n\n    private rave: Texture;\n    private torus: TorusKnot = new TorusKnot();\n    private noise: Texture;\n    private micro: Texture;\n    private startTime: number;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n        this.renderingPipeline.setFog(new LinearFog(-160, -380, new Vector4f(0, 0, 0, 1)));\n        this.startTime = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/rave.png'), false).then(\n                (texture: Texture) => this.rave = texture\n            ),\n            TextureUtils.load(require('../../assets/microstrange.png'), false).then(\n                (texture: Texture) => this.micro = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.raveMoview(framebuffer, time * 5, this.rave);\n\n        this.glitchScreen(framebuffer, time, this.noise);\n        // framebuffer.drawTexture(0, 75, this.hoodlumLogo, (Math.sin(time * 0.0003) + 1) * 0.5);\n\n        framebuffer.drawScaledTextureClipAdd(\n            framebuffer.width - (((time * 0.13) | 0) % (this.micro.width * 2 + framebuffer.width)),\n            framebuffer.height / 2 - 20,\n            this.micro.width * 2, this.micro.height * 2, this.micro, 0.5);\n\n        framebuffer.drawScaledTextureClipAdd(\n            (((time * 0.1) | 0) % (this.micro.width + framebuffer.width)) - framebuffer.width,\n            framebuffer.height / 2 - 60,\n            this.micro.width, this.micro.height, this.micro, 0.5);\n\n        framebuffer.setCullFace(CullFace.BACK);\n        this.shadingTorus5(framebuffer, time * 0.03);\n        /*\n                framebuffer.drawScaledTextureClipAdd(\n                    framebuffer.width - (((time * 0.05) | 0) % (this.micro.width + framebuffer.width)),\n                    framebuffer.height / 2 - 60,\n                    this.micro.width, this.micro.height, this.micro);*/\n    }\n\n    public raveMoview(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        framebuffer.fastFramebufferCopyOffset(framebuffer.framebuffer, texture.texture, -(Math.round(elapsedTime / 200) % 11) * 200);\n    }\n\n    public glitchScreen(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.0003) * 0.5 + 0.5);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        const texture2 = new Texture();\n        texture2.height = framebuffer.height;\n        texture2.width = framebuffer.width;\n        texture2.texture = framebuffer.framebuffer;\n        for (let x = 0; x < 16; x++) {\n            for (let y = 0; y < 10; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                framebuffer.drawTextureRect(20 * (16 - x), 20 * ((16 * rng.getFloat()) | 0), 20 * x, 20 * y, 20, 20, texture2.texture, texture2.width, 0.1 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < 16; x++) {\n                for (let y = 0; y < 10; y++) {\n                    framebuffer.drawTextureRect(x * 20, y * 20, 20 * (Math.round(elapsedTime / 100 + x + y) % 12), 0, 20, 20, texture.texture, texture.width, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.tmpGlitch, framebuffer.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n        const rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            const scale = rng2.getFloat() * glitchFactor;\n            const off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * framebuffer.width;\n                let glIndex = yStart * framebuffer.width + framebuffer.width - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n\n                glIndex = yStart * framebuffer.width;\n                const count = framebuffer.width - offset;\n\n                for (let i = 0; i < count; i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n\n    private shadingTorus5(framebuffer: Framebuffer, time: number) {\n        framebuffer.clearDepthBuffer();\n\n        const scale = 1.0;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(time * 0.035));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(time * 0.04));\n\n        const ukBasslineBpm = 130 / 2;\n        const ukBasslineClapMs = 60000 / ukBasslineBpm;\n        const smashTime = (time * 10) % ukBasslineClapMs;\n        const smash = (framebuffer.cosineInterpolate(0, 15, smashTime) - framebuffer.cosineInterpolate(15, 200, smashTime) +\n            0.4 * framebuffer.cosineInterpolate(200, 300, smashTime) - 0.4 * framebuffer.cosineInterpolate(300, 400, smashTime)\n        )\n            * 12;\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(Math.sin(time * 0.04) * 20,\n            Math.sin(time * 0.05) * 8 - smash * 5, -28 - 250).multiplyMatrix(modelViewMartrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torus.getMesh(), modelViewMartrix);\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor(inverse: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            const tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize();\n            const right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        this.buildMesh(points, index, inverse);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else if (p2.projection.y === p3.projection.y) {\n            if (p2.projection.x > p3.projection.x) {\n                this.temp = p2;\n                p2 = p3;\n                p3 = this.temp;\n            }\n            this.fillBottomFlatTriangle(framebuffer, p1, p2, p3);\n        } else if (p1.projection.y === p2.projection.y) {\n            if (p1.projection.x > p2.projection.x) {\n                this.temp = p1;\n                p1 = p2;\n                p2 = this.temp;\n            }\n            this.fillTopFlatTriangle(framebuffer, p1, p2, p3);\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) *\n                (p2.projection.y - p1.projection.y) / (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer, p1, p2, p3);\n            }\n        }\n    }\n\n    private fillBottomFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        const yDistance: number = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistance;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, color);\n    }\n\n    fillTopFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n        const yDistance = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistance;\n\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v2.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, color);\n    }\n\n\n    fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else if (p2.projection.y === p3.projection.y) {\n            if (p2.projection.x > p3.projection.x) {\n                this.temp = p2;\n                p2 = p3;\n                p3 = this.temp;\n            }\n            this.fillBottomFlatTriangle(framebuffer, p1, p2, p3);\n        } else if (p1.projection.y === p2.projection.y) {\n            if (p1.projection.x > p2.projection.x) {\n                this.temp = p1;\n                p1 = p2;\n                p2 = this.temp;\n            }\n            this.fillTopFlatTriangle(framebuffer, p1, p2, p3);\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) *\n                (p2.projection.y - p1.projection.y) / (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer, p1, p2, p3);\n            }\n        }\n    }\n\n    private fillBottomFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const yDistance: number = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistance;\n\n        this.colorInterpolator1.setup(v1.color, v2.color, yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, yDistance);\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, this.colorInterpolator1, this.colorInterpolator2);\n    }\n\n    private fillTopFlatTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const yDistance = v3.projection.y - v1.projection.y;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistance;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistance;\n\n\n        this.colorInterpolator1.setup(v1.color, v3.color, yDistance);\n        this.colorInterpolator2.setup(v2.color, v3.color, yDistance);\n\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistance;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistance;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v2.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistance, this.colorInterpolator1, this.colorInterpolator2);\n    }\n\n    private fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.colorInterpolator1.setup(v1.color, v2.color, yDistanceLeft);\n        this.colorInterpolator2.setup(v1.color, v3.color, yDistanceRight);\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, this.colorInterpolator1, this.colorInterpolator2);\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.colorInterpolator3.setup(v2.color, v3.color, yDistanceLeft);\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, this.colorInterpolator3, this.colorInterpolator2);\n\n    }\n\n\n    fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.colorInterpolator2.setup(v1.color, v2.color, yDistanceRight);\n        this.colorInterpolator1.setup(v1.color, v3.color, yDistanceLeft);\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, this.colorInterpolator1, this.colorInterpolator2);\n\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.colorInterpolator3.setup(v2.color, v3.color, yDistanceRight);\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, this.colorInterpolator1, this.colorInterpolator3);\n\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator) {\n        for (let i = 0; i < distance; i++) {\n            const length = Math.round(this.xPosition2) - Math.round(this.xPosition);\n            this.rowColorInterpolator.setup(\n                colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition);\n            const spanzStep = (this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] =\n                        this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.startColor.r += this.rowColorInterpolator.colorSlope.r;\n                this.rowColorInterpolator.startColor.g += this.rowColorInterpolator.colorSlope.g;\n                this.rowColorInterpolator.startColor.b += this.rowColorInterpolator.colorSlope.b;\n            }\n\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n\n            colorInterpolator1.startColor.r += colorInterpolator1.colorSlope.r;\n            colorInterpolator1.startColor.g += colorInterpolator1.colorSlope.g;\n            colorInterpolator1.startColor.b += colorInterpolator1.colorSlope.b;\n\n            colorInterpolator2.startColor.r += colorInterpolator2.colorSlope.r;\n            colorInterpolator2.startColor.g += colorInterpolator2.colorSlope.g;\n            colorInterpolator2.startColor.b += colorInterpolator2.colorSlope.b;\n\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\n\nexport class TexturedTriangleRasterizer {\n\n    private temp: Vertex = null;\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.position.y > p3.position.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y > p2.position.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.position.y > p3.position.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.position.y === p3.position.y) {\n            return;\n        } else {\n            const x: number = (p3.position.x - p1.position.x) * (p2.position.y - p1.position.y) /\n                (p3.position.y - p1.position.y) + p1.position.x;\n            if (x > p2.position.x) {\n                this.fillLongRightTriangle2(framebuffer, p1, p2, p3);\n            } else {\n                const tex = p1.textureCoordinate;\n                const tex2 = p2.textureCoordinate;\n                const tex3 = p3.textureCoordinate;\n\n                this.fillLongLeftTriangle2(\n                    framebuffer,\n                    p1.position,\n                    p2.position,\n                    p3.position,\n                    new Vector3f(tex.u, tex.v, 0),\n                    new Vector3f(tex2.u, tex2.v, 0),\n                    new Vector3f(tex3.u, tex3.v, 0)\n                );\n            }\n        }\n    }\n\n    private fillLongRightTriangle2(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.position.y - v1.position.y;\n\n\n\n\n        const yDistanceRight = v3.position.y - v1.position.y;\n\n        let slope1 = (v2.position.x - v1.position.x) / yDistanceLeft;\n        const slope2 = (v3.position.x - v1.position.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.position.z - v1.textureCoordinate.u / v1.position.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.position.z - v1.textureCoordinate.v / v1.position.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.position.z - 1 / v1.position.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.position.z - 1 / v1.position.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.position.z;\n        let curz2 = 1.0 / v1.position.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.position.z;\n        let curv1 = v1.textureCoordinate.v / v1.position.z;\n        let curu2 = v1.textureCoordinate.u / v1.position.z;\n        let curv2 = v1.textureCoordinate.v / v1.position.z;\n\n        let xPosition = v1.position.x;\n        let xPosition2 = v1.position.x;\n        let yPosition = v1.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.position.y - v2.position.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.position.x - v2.position.x) / yDistanceLeft;\n        zslope1 = (1 / v3.position.z - 1 / v2.position.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.position.z - v2.textureCoordinate.u / v2.position.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.position.z - v2.textureCoordinate.v / v2.position.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.position.z;\n        curu1 = v2.textureCoordinate.u / v2.position.z;\n        curv1 = v2.textureCoordinate.v / v2.position.z;\n        xPosition = v2.position.x;\n        yPosition = v2.position.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    fillLongLeftTriangle2(framebuffer: Framebuffer, v1: Vector4f, v2: Vector4f, v3: Vector4f, t1: Vector3f, t2: Vector3f, t3: Vector3f): void {\n\n        let yDistanceRight = v2.y - v1.y;\n        const yDistanceLeft = v3.y - v1.y;\n\n        let slope2 = (v2.x - v1.x) / yDistanceRight;\n        const slope1 = (v3.x - v1.x) / yDistanceLeft;\n\n        const tslope1u = (t3.x / v3.z - t1.x / v1.z) / yDistanceLeft;\n        let tslope2u = (t2.x / v2.z - t1.x / v1.z) / yDistanceRight;\n\n        const tslope1v = (t3.y / v3.z - t1.y / v1.z) / yDistanceLeft;\n        let tslope2v = (t2.y / v2.z - t1.y / v1.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.z - 1 / v1.z) / yDistanceRight;\n        const zslope1 = (1 / v3.z - 1 / v1.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.z;\n        let curz2 = 1.0 / v1.z;\n\n        let curu1 = t1.x / v1.z;\n        let curv1 = t1.y / v1.z;\n        let curu2 = t1.x / v1.z;\n        let curv2 = t1.y / v1.z;\n\n        let xPosition = v1.x;\n        let xPosition2 = v1.x;\n        let yPosition = v1.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.y - v2.y;\n        slope2 = (v3.x - v2.x) / yDistanceRight;\n        zslope2 = (1 / v3.z - 1 / v2.z) / yDistanceRight;\n\n        tslope2u = (t3.x / v3.z - t2.x / v2.z) / yDistanceRight;\n        tslope2v = (t3.y / v3.z - t2.y / v2.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.z;\n\n        curu2 = t2.x / v2.z;\n        curv2 = t2.y / v2.z;\n\n        xPosition2 = v2.x;\n        yPosition = v2.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n                /*\n                                const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n                                    v.projection = this.project(v.position);\n                                    return v;\n                                });*/\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.minWindow.y - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.minWindow.x - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.position.y + (p2.position.y - p1.position.y) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)),\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.maxWindow.x + 1 - p1.position.x) / (p2.position.x - p1.position.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.position.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.position =\n            new Vector4f(\n                Math.round(p1.position.x + (p2.position.x - p1.position.x) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.position.z + (1 / p2.position.z - 1 / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.position.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.position.z + (p2.textureCoordinate.u / p2.position.z - p1.textureCoordinate.u / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.position.z + (p2.textureCoordinate.v / p2.position.z - p1.textureCoordinate.v / p1.position.z) * (this.framebuffer.maxWindow.y + 1 - p1.position.y) / (p2.position.y - p1.position.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Fog {\n\n    public abstract computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Fog } from './Fog';\n\nexport class LinearFog extends Fog {\n\n    private zStart: number;\n    private zEnd: number;\n    private fogColor: Vector4f;\n\n    public constructor(zStart: number, zEnd: number, fogColor: Vector4f) {\n        super();\n        this.zStart = zStart;\n        this.zEnd = zEnd;\n        this.fogColor = fogColor;\n    }\n\n    public computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f {\n        if (vertex.z >= this.zStart) {\n            return color;\n        } else if (vertex.z <= this.zEnd) {\n            return this.fogColor;\n        } else {\n            const f: number = (this.zEnd - vertex.z) / (this.zEnd - this.zStart);\n            return new Vector4f(\n                color.x * f + this.fogColor.x * (1 - f),\n                color.y * f + this.fogColor.y * (1 - f),\n                color.z * f + this.fogColor.z * (1 - f)\n            );\n        }\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        const x0 = Math.min(x | 0, this.width - 1);\n        const x1 = Math.min((x | 0) + 1, this.width - 1);\n        const y0 = Math.min(y | 0, this.height - 1);\n        const y1 = Math.min((y | 0) + 1, this.height - 1);\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff) |\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n            this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename.default;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { RadialBlur } from './RadialBlur';\n\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new RadialBlur());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","end","current","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","drawPolarDistotion2","elapsedTime","distScale","xdist","ydist","dist","sqrt","angle","atan2","PI","color1","drawPolarDistotion3","noise","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","scene8","points","modelViewMartrix","Matrix3f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","points2","forEach","transformed","multiply","push","nearPlaneClipping","project","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","STEPS2","sphereFunction2","Matrix4f","constructTranslationMatrix","p","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","dist2","cosineInterpolate","final","drawLedTunnel","distance","intensity","drawParticleWaves","noClear","num","cos","sort","a","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","y2","mu","mu2","createPlane","normals","normals2","point","find","pointVar","sub","idx","indexOf","createCylinder","xx2","yy2","TextureCoordinate","createCylinder2","LOOPX","xpos2","ypos","ypos2","x0y0","x1y0","x0y1","x1y1","x0","z0","z1","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","temp","theta","phi","Vector4f","seed","position","projection","drawScaledTextureClip","RadialBlur","AbstractScene","tunnelScene","TorusKnotScene","Promise","all","applyRadialBlur","rave","TorusKnot","micro","renderingPipeline","GouraudShadingRenderingPipeline","setFog","LinearFog","TextureUtils","load","generateProceduralNoise","raveMoview","glitchScreen","shadingTorus5","glitchFactor","texture2","rng2","off","glIndex","smashTime","smash","draw","getMesh","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","cross","normalize","faces","n1","n2","n3","transformedPoints","map","transformedNormals","AbstractGeometricObject","invert","super","frame","frame2","up","right","torusFunction3","tangent","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","startColor","colorSlope","setup","advance","AbstractTriangleRasterizer","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","drawTriangleDDA","p1","p2","p3","fillBottomFlatTriangle","fillTopFlatTriangle","fillLongRightTriangle","fillLongLeftTriangle","yDistance","drawSpan","yDistanceLeft","yDistanceRight","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","fillLongRightTriangle2","tex2","tex3","fillLongLeftTriangle2","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","color2","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","mat","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setLights","enableLighting","enable","setMaterial","setColor","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","AbstractClipEdge","isInside","isInside2","computeIntersection","factor","computeIntersection2","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","edge","Fog","zStart","zEnd","fogColor","f","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","getPixel","getBilinearFilteredPixel","y0","col1","col2","getPixel2","interpolateComp","getPixel3","resolve","c","filename","transparency","image","Image","onload","onerror","default","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","definition","key","o","Object","defineProperty","enumerable","get","globalThis","Function","e","window","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","Error","replace","Canvas","main"],"sourceRoot":""}