{"version":3,"file":"demo.js","mappings":"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","sources":["webpack://aisa/./node_modules/stats.js/build/stats.min.js","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/SkyBox.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/animation/BlenderCameraAnimator.ts","webpack://aisa/./src/animation/CameraKeyFrame.ts","webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/blender/face.ts","webpack://aisa/./src/blender/mesh.ts","webpack://aisa/./src/blender/parseUtils.ts","webpack://aisa/./src/blender/tex-coord.ts","webpack://aisa/./src/blender/vector.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/CameraFrame.ts","webpack://aisa/./src/camera/CameraLoader.ts","webpack://aisa/./src/camera/CameraPath.ts","webpack://aisa/./src/camera/EulerAngleCamera.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/core/LinkedList.ts","webpack://aisa/./src/core/Node.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/examples/abstract-cube/AbstractCube.ts","webpack://aisa/./src/examples/baked-lighting/BakedLighting.ts","webpack://aisa/./src/examples/blender-camera-animation/BlenderCameraScene.ts","webpack://aisa/./src/examples/block-fade/BlockFade.ts","webpack://aisa/./src/examples/block-fade/Particle.ts","webpack://aisa/./src/examples/block-fade/TransitionMethods.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/demo/DemoScene.ts","webpack://aisa/./src/examples/demo/canvas-record.ts","webpack://aisa/./src/examples/demo/parts/Scene1.ts","webpack://aisa/./src/examples/demo/parts/Scene10.ts","webpack://aisa/./src/examples/demo/parts/Scene11.ts","webpack://aisa/./src/examples/demo/parts/Scene12.ts","webpack://aisa/./src/examples/demo/parts/Scene13.ts","webpack://aisa/./src/examples/demo/parts/Scene14.ts","webpack://aisa/./src/examples/demo/parts/Scene15.ts","webpack://aisa/./src/examples/demo/parts/Scene16.ts","webpack://aisa/./src/examples/demo/parts/Scene17.ts","webpack://aisa/./src/examples/demo/parts/Scene18.ts","webpack://aisa/./src/examples/demo/parts/Scene19.ts","webpack://aisa/./src/examples/demo/parts/Scene2.ts","webpack://aisa/./src/examples/demo/parts/Scene20.ts","webpack://aisa/./src/examples/demo/parts/Scene3.ts","webpack://aisa/./src/examples/demo/parts/Scene4.ts","webpack://aisa/./src/examples/demo/parts/Scene5.ts","webpack://aisa/./src/examples/demo/parts/Scene6.ts","webpack://aisa/./src/examples/demo/parts/Scene7.ts","webpack://aisa/./src/examples/demo/parts/Scene8.ts","webpack://aisa/./src/examples/demo/parts/Scene9.ts","webpack://aisa/./src/examples/distorted-sphere/DistortedSphereScene.ts","webpack://aisa/./src/examples/dof-balls/DofBallsScene.ts","webpack://aisa/./src/examples/gears/GearsScene.ts","webpack://aisa/./src/examples/hoodlum/HoodlumScene.ts","webpack://aisa/./src/examples/led-plasma/LedPlasmaScene.ts","webpack://aisa/./src/examples/metalheadz/MetalHeadzScene.ts","webpack://aisa/./src/examples/particle-streams/ParticleStreamsScene.ts","webpack://aisa/./src/examples/plane-deformation/PlaneDeformationScene.ts","webpack://aisa/./src/examples/plasma/PlasmaScene.ts","webpack://aisa/./src/examples/razor/RazorScene.ts","webpack://aisa/./src/examples/roto-zoomer/RotoZoomerScene.ts","webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/examples/sine-scroller/SineScrollerScene.ts","webpack://aisa/./src/examples/torus-knot-tunnel/TorusKnotTunnelScene.ts","webpack://aisa/./src/examples/torus/TorusScene.ts","webpack://aisa/./src/examples/twister/TwisterScene.ts","webpack://aisa/./src/examples/voxel-balls/VoxelBallsScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Dodecahedron.ts","webpack://aisa/./src/geometrical-objects/Pyramid.ts","webpack://aisa/./src/geometrical-objects/Sphere.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/geometrical-objects/TorusKnot.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/blender/BlenderLoader.ts","webpack://aisa/./src/model/wavefront-obj/WavefrontLoader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/fog/Fog.ts","webpack://aisa/./src/shading/fog/LinearFog.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/sound/MusicProperties.ts","webpack://aisa/./src/sound/SoundManager.ts","webpack://aisa/./src/special-effects/LensFlare.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/./src/sound/JSRocket.js","webpack://aisa/./src/sound/cowbell/audio_player.js","webpack://aisa/./src/sound/cowbell/cowbell.js","webpack://aisa/./src/sound/cowbell/openmpt/openmpt_player.js","webpack://aisa/./src/sound/cowbell/web_audio_player.js","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/demo/Application.ts"],"sourcesContent":["// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n        \n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n        \n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n        \n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { Matrix4f, Vector4f } from './math';\nimport { Texture, TextureUtils } from './texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { TexturedMesh } from './rendering-pipelines/TexturedMesh';\n\nexport class SkyBox {\n\n    private back: Texture;\n    private down: Texture;\n    private front: Texture;\n    private left: Texture;\n    private right: Texture;\n    private up: Texture;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline = new TexturingRenderingPipeline(null);\n    public init(): Promise<any> {\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/skybox/skybox_back.png'), false).then(\n                (texture: Texture) => this.back = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_down.png'), false).then(\n                (texture: Texture) => this.down = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_front.png'), false).then(\n                (texture: Texture) => this.front = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_left.png'), false).then(\n                (texture: Texture) => this.left = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_right.png'), false).then(\n                (texture: Texture) => this.right = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_up.png'), false).then(\n                (texture: Texture) => this.up = texture\n            )]).then(() => {\n                this.back.setClamp(true);\n                this.down.setClamp(true);\n                this.front.setClamp(true);\n                this.left.setClamp(true);\n                this.right.setClamp(true);\n                this.up.setClamp(true);\n            });\n    }\n\n    // move code from framebuffer into draw method!\n    public draw(framebuffer: Framebuffer, mv: Matrix4f): void {\n    \n        this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n        this.drawSkyBox(framebuffer, mv.getRotation());\n    }\n\n    public drawSkyBox(framebuffer: Framebuffer, rotation: Matrix4f): void {\n        const sclae = 20;\n        const textures = [\n            this.back,\n            this.left,\n            this.front,\n            this.right\n        ];\n\n        let camera: Matrix4f;\n        let mv: Matrix4f;\n        let skyBoxSideModel: TexturedMesh;\n\n        const skyPoints = [\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, -1, -1, 1)\n        ];\n\n        for (let i = 0; i < 4; i++) {\n            camera =\n                rotation.multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI).multiplyMatrix(\n                        Matrix4f.constructYRotationMatrix(+ Math.PI * 2 / 4 * i)));\n\n\n            mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n\n            // skybox: starz\n            skyBoxSideModel = {\n                points: skyPoints,\n                points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n                uv: [\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                ],\n                faces: [\n                    {\n                        vertices: [0, 1, 2],\n                        uv: [0, 1, 2]\n                    },\n                    {\n                        vertices: [3, 4, 5],\n                        uv: [3, 4, 5]\n                    }\n                ]\n            };\n\n            framebuffer.setTexture(textures[i]);\n            this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n            this.texturedRenderingPipeline.setModelViewMatrix(mv);\n            this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n        }\n\n        camera = rotation.multiplyMatrix(\n            Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(0)\n                    .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 4 * 1).multiplyMatrix(Matrix4f.constructXRotationMatrix(-Math.PI * 2 / 4)))\n            );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.up);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n\n        camera =\n            rotation.multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(0)\n                        .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 2).multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI * 2 / 4)))\n\n                );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.down);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { EulerAngleCamera } from '../camera/EulerAngleCamera';\nimport { Utils } from '../core/Utils';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector3f } from '../math/Vector3f';\nimport { CameraKeyFrame } from './CameraKeyFrame';\n\nexport class BlenderCameraAnimator {\n\n    public pos: Vector3f;\n    private keyFrames: Array<CameraKeyFrame>;\n\n    // TODO:\n    // - should we really loop or better restart??\n    // - dont use linear interpolation see bourke\n    // - maybe quaternions and slerp for rotation\n    // temp solution: no linear for\n\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getViewMatrix(elapsedTime: number): Matrix4f {\n        const keyFrameDuration = 2600;\n\n        elapsedTime *= 1.0;\n\n        const first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        const zero = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        const second = (first + 1) % this.keyFrames.length;\n        const third = (first + 2) % this.keyFrames.length;\n        const fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        const position = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].position.x, this.keyFrames[first].position.x, this.keyFrames[second].position.x, this.keyFrames[third].position.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.y, this.keyFrames[first].position.y, this.keyFrames[second].position.y, this.keyFrames[third].position.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.z, this.keyFrames[first].position.z, this.keyFrames[second].position.z, this.keyFrames[third].position.z, fraction)\n        );\n        //let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\n\n        const look = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.x, this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x, this.keyFrames[third].rotation.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.y, this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y, this.keyFrames[third].rotation.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.z, this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z, this.keyFrames[third].rotation.z, fraction)\n        );\n        this.pos = position;\n\n        return new EulerAngleCamera(position, look.x, look.y, look.z).getViewMatrix();\n    }\n\n}\n\n","import { Vector3f } from '../math';\n\nexport class CameraKeyFrame {\n\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(position: Vector3f, rotation: Vector3f) {\n        this.position = position;\n        this.rotation = rotation;\n    }\n\n}","import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Face {\n    public vertices: Array<number>;\n    public normals: Array<number>;\n    public uv: Array<number>;\n}\n","import { Face } from './face';\nimport { TexCoord } from './tex-coord';\nimport { Vector } from './vector';\n\nexport class Mesh {\n\n    public name: string;\n    public vertices: Array<Vector>;\n    public normals: Array<Vector>;\n    public uv: Array<TexCoord>;\n    public faces: Array<Face>;\n\n}\n","import { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexCoord } from './tex-coord';\nimport { Face } from './face';\n\nexport function convertToMeshArray(data: string): Array<Mesh> {\n    const json: Array<Mesh> = new Array<Mesh>();\n\n    let currentObject: Mesh = null;\n\n    let normalCount: number = 0;\n    let vertexCount: number = 0;\n    let uvCount: number = 0;\n    let normalOffset: number = 0;\n    let vertexOffset: number = 0;\n    let uvOffset: number = 0;\n\n    data.toString().split('\\n').forEach((line: string) => {\n\n        if (line.startsWith('o ')) {\n            const coords: Array<string> = line.split(' ');\n\n            currentObject = new Mesh();\n            currentObject.name = coords[1];\n            currentObject.normals = [];\n            currentObject.vertices = [];\n            currentObject.faces = [];\n            currentObject.uv = []; // OPTIONAL\n\n            json.push(currentObject);\n            normalOffset = normalCount;\n            vertexOffset = vertexCount;\n            uvOffset = uvCount;\n        }\n\n        if (currentObject === null &&\n            (line.startsWith('v ') ||\n                line.startsWith('vn ') ||\n                line.startsWith('vt '))) {\n            console.error('Error: OBJ file does not contain Objects.');\n            throw Error();\n        }\n\n        if (line.startsWith('v ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const vertex: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.vertices.push(vertex);\n            vertexCount++;\n        }\n\n        if (line.startsWith('vn ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const normal: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.normals.push(normal);\n            normalCount++;\n        }\n\n        if (line.startsWith('vt ')) { // OPTIONAL\n            const coords: Array<string> = line.split(' ');\n\n            const uv: TexCoord = new TexCoord(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2])\n            );\n\n            currentObject.uv.push(uv);\n            uvCount++;\n        }\n\n        if (line.startsWith('f ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const face: Face = new Face();\n            face.vertices = [];\n            face.normals = [];\n            face.uv = [];\n\n            // vertex indices\n            face.vertices.push(Number(coords[1].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[2].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[3].split('/')[0]) - 1 - vertexOffset);\n\n            // uv indices OPTIONAL!\n            face.uv.push(Number(coords[1].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[2].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[3].split('/')[1]) - 1 - uvOffset);\n\n            // normal indices\n            face.normals.push(Number(coords[1].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[2].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[3].split('/')[2]) - 1 - normalOffset);\n\n            currentObject.faces.push(face);\n        }\n    });\n\n    return json;\n}\n","\nexport class TexCoord {\n\n    public u: number;\n    public v: number;\n\n    public constructor(u: number, v: number) {\n        this.u = u;\n        this.v = v;\n    }\n\n}\n","export class Vector {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\n\nexport class CameraFrame {\n    public frame: number;\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(frame: number, position: Vector3f, rotation: Vector3f) {\n        this.frame = frame;\n        this.position = position;\n        this.rotation = rotation;\n    }\n}\n","import { CameraKeyFrame } from '../animation/CameraKeyFrame';\nimport { Vector3f } from '../math';\nimport { CameraPath } from './CameraPath';\nimport { CameraFrame } from './CameraFrame';\n\nexport class CameraLoader {\n\n    public static load(filename: string): Promise<Array<CameraKeyFrame>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<CameraKeyFrame> => {\n\n            const json: any = JSON.parse(text);\n            const cameraPath: CameraPath = new CameraPath();\n            const keys = new Array<CameraKeyFrame>();\n\n            for (let i = 0; i < json.length; i++) {\n                const frame = json[i];\n\n                const myFrame = new CameraFrame(\n                    frame.frame,\n                    new Vector3f(\n                        frame.location[0],\n                        frame.location[1],\n                        frame.location[2]\n                    ),\n                    new Vector3f(\n                        frame.rotation[0],\n                        frame.rotation[1],\n                        frame.rotation[2]\n                    ));\n\n                cameraPath.frames.push(myFrame);\n                keys.push(new CameraKeyFrame(new Vector3f(\n                    frame.location[0],\n                    frame.location[2],\n                    -frame.location[1]\n                ),\n                    new Vector3f(\n                        frame.rotation[0] - 90 * 0.0174533,\n                        frame.rotation[2],\n                        frame.rotation[1]\n                    )));\n\n            }\n\n            return keys;\n        });\n    }\n\n}\n","import { CameraFrame } from './CameraFrame';\n\nexport class CameraPath {\n    public frames: Array<CameraFrame>;\n    constructor() {\n        this.frames = new Array<CameraFrame>();\n    }\n}\n\n","import { Matrix4f, Vector3f } from '../math';\n\nexport class EulerAngleCamera {\n\n    protected position: Vector3f;\n    protected rx: number;\n    protected ry: number;\n    protected rz: number;\n\n    constructor(position: Vector3f, rx: number, ry: number, rz: number) {\n        this.position = position;\n        this.rx = rx;\n        this.ry = ry;\n        this.rz = rz;\n    }\n\n    public getViewMatrix(): Matrix4f {\n        const rz = Matrix4f.constructZRotationMatrix(-this.rz);\n        const rx = Matrix4f.constructXRotationMatrix(-this.rx);\n        const ry = Matrix4f.constructYRotationMatrix(-this.ry);\n\n        const translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\n\n        return rx.multiplyMatrix(ry).multiplyMatrix(rz).multiplyMatrix(translation);\n    }\n\n    public getPosition(): Vector3f {\n        return this.position;\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { DLNode } from './Node';\n\n/**\n * Doubly Linked-List implementation class.\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n * https://github.com/DameLyngdoh/dl-doubly-linked-list-ts\n *\n */\nexport class DoublyLinkedList<T> {\n    /**\n     * The start node of the list.\n     */\n    private _start: DLNode<T> | null;\n\n    /**\n     * The last  node of the list.\n     */\n    private _end: DLNode<T> | null;\n\n    /**\n     * The number of nodes in the list.\n     */\n    private _length: number;\n\n    constructor() {\n        this._start = null;\n        this._end = null;\n        this._length = 0;\n    }\n\n    get start(): DLNode<T> | null {\n        return this._start;\n    }\n\n    set start(start: DLNode<T> | null) {\n        this._start = start;\n    }\n\n    get end(): DLNode<T> | null {\n        return this._end;\n    }\n\n    set end(end: DLNode<T> | null) {\n        this._end = end;\n    }\n\n    get length(): number {\n        return this._length + 1;\n    }\n\n    /**\n     * Returns true if the list is empty.\n     * @returns Returns true if list is empty or false otherwise.\n     */\n    public isEmpty(): boolean {\n        return this.length === 0;\n    }\n\n    /**\n     * Inserts a node to the start of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertStart(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.next = this.start;\n            if (this.start != null) {\n                this.start.previous = node;\n            }\n            this.start = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node to the end of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertEnd(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.previous = this.end;\n            if (this.end != null) {\n                this.end.next = node;\n            }\n            this.end = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node at the specified index in the list.\n     * @param node The node to be inserted to the list.\n     * @param index The index to insert the node at. A value of -1 will insert the node to the end of the list.\n     */\n    public insert(node: DLNode<T>, index: number): void {\n        if (index === 0) {\n            this.insertStart(node);\n            return;\n        }\n        else if (index === -1) {\n            this.insertEnd(node);\n            return;\n        }\n\n        let currentNode = this.start;\n        let i: number = 0;\n        for (i = 0; i < index - 1 && currentNode !== null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        // Insertion not possible\n        if (i !== index - 1 && currentNode === null) {\n            return;\n        }\n\n        if (currentNode != null) {\n            node.previous = currentNode;\n            node.next = currentNode.next;\n            if (currentNode.next != null) {\n                currentNode.next.previous = node;\n            }\n            else {\n                this.end = node;\n            }\n            currentNode.next = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Deletes the first node from the list.\n     */\n    public deleteStart(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.start != null && this.start.next == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.start != null) {\n            this.start = this.start.next;\n            if (this.start != null) {\n                this.start.previous = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes the last node from the list.\n     */\n    public deleteEnd(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.end != null && this.end.previous == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.end != null) {\n            this.end = this.end.previous;\n            if (this.end != null) {\n                this.end.next = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes a node from a specific index in the list. If the index is out of bounds, then no deletion will occur.\n     * @param index The index of the node to be deleted.\n     */\n    public delete(index: number): void {\n        if (this.isEmpty()) {\n            return;\n        }\n        if (index === 0) {\n            this.deleteStart();\n            return;\n        }\n        else if (index === -1) {\n            this.deleteEnd();\n            return;\n        }\n\n        const node = this.getNode(index);\n        if (node != null) {\n            if (node.next === null && node.previous !== null) {\n                this.deleteEnd();\n            }\n            else if (node.previous === null && node.next !== null) {\n                this.deleteStart();\n            }\n            else if (node.next !== null && node.previous !== null) {\n                node.previous.next = node.next;\n                node.next.previous = node.previous;\n                this._length--;\n            }\n        }\n    }\n\n    /**\n     * Retrieves a node from the specific index.\n     * @param index The index from which to retrieve the node.\n     * @returns Returns the node at the specific index or null if the index is out of bounds.\n     */\n    public getNode(index: number): DLNode<T> | null {\n        if (this.isEmpty() || index < 0) {\n            return null;\n        }\n\n        let currentNode = this.start;\n        for (let i = 1; i <= index && currentNode != null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        return currentNode;\n    }\n\n    /**\n     * Returns an array of the nodes in the order of the list.\n     * @returns Array of nodes.\n     */\n    public toArray(): Array<DLNode<T>> {\n        const array: Array<DLNode<T>> = new Array<DLNode<T>>();\n\n        if (this.length === 0) {\n            return array;\n        }\n\n        let i = 0;\n\n        let currentNode: DLNode<T> | null = this.start;\n        while (currentNode != null && i < 12) {\n            array.push(currentNode);\n            currentNode = currentNode.next;\n            i++;\n        }\n        return array;\n    }\n\n    /**\n     * Clears the list and deletes all nodes.\n     */\n    public clear(): void {\n        this.end = null;\n        this.start = null;\n        this._length = 0;\n    }\n}","/**\n * Node implementation class. A node is a vertex in the list which contains data and pointers to the next node and previous node.\n */\nexport class DLNode<T> {\n    /**\n     * The data contained in the node.\n     */\n    private _data: T | null = null;\n\n    /**\n     * The edge or pointer to the next node.\n     */\n    private _next: DLNode<T> | null = null;\n\n    /**\n     * The edge or pointer to the previous node.\n     */\n    private _previous: DLNode<T> | null = null;\n\n    constructor() { }\n\n    get data(): T | null {\n        return this._data;\n    }\n\n    set data(data: T | null) {\n        this._data = data;\n    }\n\n    get next(): DLNode<T> | null {\n        return this._next;\n    }\n\n    set next(next: DLNode<T> | null) {\n        this._next = next;\n    }\n\n    get previous(): DLNode<T> | null {\n        return this._previous;\n    }\n\n    set previous(previous: DLNode<T> | null) {\n        this._previous = previous;\n    }\n}","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Interpolator } from '../../math/Interpolator';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class AbstractCube extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    private scene: Array<FlatshadedMesh>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/stravaganza.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.scene = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene2(framebuffer, time);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene2(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(5, 16, 5));\n        let model: FlatshadedMesh = this.scene[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        mv = camera.multiplyMatrix(Matrix4f.constructZRotationMatrix(\n            Math.PI * 0.5 * Interpolator.cosineInterpolate(0, 600, Math.floor(elapsedTime * 0.7) % 4000))\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(\n                Math.PI * 0.5 * Interpolator.cosineInterpolate(2000, 2600, Math.floor(elapsedTime * 0.7) % 4000)))\n        );\n        model = this.scene[1];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\n/**\n * TODO:\n * - Move procedural texture generation into dedicated class\n * - create Mesh / Textured Mesh class\n * - Create Lens Flare class\n * - Create Pipeline class\n */\nexport class BakedLighting extends AbstractScene {\n\n    private skyBox: SkyBox;\n    private baked: Texture;\n    private noise: Texture;\n    private blenderObj8: Array<TexturedMesh>;\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/abstract.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObj8 = mesh\n            ),\n            TextureUtils.load(require('../../assets/Backed.png'), false).then(\n                (texture: Texture) => this.baked = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n\n        this.drawBlenderScene7(framebuffer, time - 1100000);\n        /*\n            [\n                //   { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n            ], this.dirt, this.skybox);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene7(framebuffer: Framebuffer, elapsedTime: number): void {\n        elapsedTime *= 0.2;\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0005).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, -25, 0)\n                    )));\n\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.baked);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.blenderObj8);\n    }\n\n}\n","import { CameraKeyFrame } from '../../animation/CameraKeyFrame';\nimport { CameraLoader } from '../../camera/CameraLoader';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { WavefrontLoader } from '../../model/wavefront-obj/WavefrontLoader';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { PointLight } from '../../shading/light/PointLight';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nimport { BlenderCameraAnimator } from '../../animation/BlenderCameraAnimator';\nimport { SkyBox } from '../../SkyBox';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class BlenderCameraScene extends AbstractScene {\n\n    private texture4: Texture;\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private meshes: Array<FlatshadedMesh>;\n    private path: Array<CameraKeyFrame>;\n    private skyBox: SkyBox;\n\n    private light1: PointLight;\n    private light2: PointLight;\n\n    private cameraAnimator: BlenderCameraAnimator;\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.light1 = new PointLight();\n        this.light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        this.light1.diffuseIntensity = new Vector4f(1, 0.0, 1, 1);\n        this.light1.specularIntensity = new Vector4f(0.5, 0.5, 0.7, 1);\n        this.light1.position = new Vector4f(0, -10, -1, 1);\n\n        this.light2 = new PointLight();\n        this.light2.ambientIntensity = new Vector4f(0.5, 0.5, 1, 1);\n        this.light2.diffuseIntensity = new Vector4f(0.3, 0.3, 1, 1);\n        this.light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        this.light2.position = new Vector4f(3, 0, -2, 1);\n\n        this.renderingPipeline.setLights([this.light1, this.light2]);\n\n        this.skyBox = new SkyBox();\n        return Promise.all([\n            this.skyBox.init(),\n            WavefrontLoader.load(require('../../assets/monkey.obj')).then(\n                (value: Array<FlatshadedMesh>) => this.meshes = value\n            ),\n            CameraLoader.load(require('../../assets/camera-path.jsx')).then(\n                (value: Array<CameraKeyFrame>) => this.path = value\n            ),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n        ]).then(() => {\n            this.cameraAnimator = new BlenderCameraAnimator();\n            this.cameraAnimator.setKeyFrames(this.path);\n        });\n    }\n\n    private computeFps(currentTime: number): void {\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n    }\n\n    public render(framebuffer: Framebuffer, timeInput: number): void {\n        const currentTime: number = Date.now();\n        this.computeFps(currentTime);\n\n        const modelViewMartrix: Matrix4f = this.cameraAnimator.getViewMatrix(timeInput);\n\n        this.skyBox.draw(framebuffer, modelViewMartrix);\n\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.drawMeshArray(framebuffer, this.meshes, modelViewMartrix);\n\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Interpolator } from '../../math/Interpolator';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture/index';\nimport { TransitionMethods } from './TransitionMethods';\nimport { Particle } from './Particle';\n\nexport class BlockFade extends AbstractScene {\n    private ledTexture: Texture;\n    private startTime: number = Date.now();\n    private transitionFramebufferTo: Framebuffer;\n\n    public transitionCircle: Uint32Array;\n    public transitionWipe: Uint32Array;\n\n    // dissolve \n    private croud: Float32Array;        // Stores data for mask control\n    private prevMask: Array<boolean>;    // mask picture\n    private curMask: Array<boolean>;\n    private diff: Array<boolean>;       // difference mask\n    private noiseMask: Array<boolean>;  // particle mask\n    private croudMask: Uint32Array;     // cloud mask\n    private particleArray: Array<Particle>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.transitionFramebufferTo = new Framebuffer(framebuffer.width, framebuffer.height);\n\n        // draw side wipe\n        this.transitionWipe = new Uint32Array(framebuffer.width * framebuffer.height);\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const c2 = Utils.map(x, 0, framebuffer.width, 0, 255);\n                const color = new Color(c2, c2, c2, 255).toPackedFormat();\n                this.transitionWipe[x + y * framebuffer.width] = color;\n            }\n        }\n\n        // draw circle gradient\n        this.transitionCircle = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.transitionCircle.fill(Color.WHITE.toPackedFormat(), 0, this.transitionCircle.length);\n        for (let d = 0; d < framebuffer.width / 2; d += 1) {\n            const c3 = Utils.map(d, 0, framebuffer.width / 2, 0, 255);\n            this.drawCircle(framebuffer.width / 2, framebuffer.height / 2, d, c3);\n        }\n\n        //dissolve effect\n        this.initDissolve(framebuffer.width, framebuffer.height);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (textureBackground: Texture) => this.ledTexture = textureBackground\n            ),\n        ]);\n    }\n\n    private initDissolve(width: number, height: number) {\n        this.croud = new Float32Array(width * height);\n        this.prevMask = new Array<boolean>(width * height);\n        this.curMask = new Array<boolean>(width * height);\n        this.diff = new Array<boolean>(width * height);\n        this.noiseMask = new Array<boolean>(width * height);\n        this.particleArray = new Array<Particle>();\n\n        this.croudMask = new Uint32Array(width * height);\n        this.particleArray.splice(0, this.particleArray.length);\n\n        this.createCroud(width, height);\n        const threshold = 0;\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const index = y * width + x;\n                const isBackground = (this.croudMask[y * width + x] & 0xFF) < 0x80;\n                if (isBackground) {\n                    this.croud[index] = 0xFF000000;\n                }\n                this.prevMask[index] = this.curMask[index] = this.croud[index] < threshold;\n                if (Math.random() > 0.90) {\n                    this.noiseMask[index] = !isBackground;\n                }\n            }\n        }\n    }\n\n    private createCroud(width: number, height: number) {\n        if (this.croud == null) {\n            this.croud = new Float32Array(width * height);\n        }\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                this.croudMask[y * width + x] = 0xFFFFFFFF;\n            }\n        }\n\n        const bias: number = Math.min(150.0, 0xFF);\n        const xbase = Math.random() * 100;\n        const ybase = Math.random() * 100;\n\n        let xnoise = 0.0;\n        let ynoise = 0.0;\n        const inc = 0.02;\n\n        const pn = Utils.PerlinNoise;\n\n        for (let y = 0; y < height; y++) {\n            const curBias = y * bias / height;\n            for (let x = 0; x < width; x++) {\n                const _gray = (pn.noise((xnoise + xbase), (ynoise + ybase), 0) * (0xFF - bias) + curBias);\n                this.croud[y * width + x] = _gray;\n                xnoise += inc;\n            }\n            xnoise = 0.0;\n            ynoise += inc;\n        }\n    }\n\n    // dissolve\n    public dissolve(renderBuffer: Framebuffer, renderBuffer2: Uint32Array, time: number) {\n\n        if (time <= 5) {\n\n            // update mask for current scene\n            for (let y = 0; y < renderBuffer.height; y++) {\n                for (let x = 0; x < renderBuffer.width; x++) {\n                    const index = y * renderBuffer.width + x;\n                    const isBackground = (this.croudMask[y * renderBuffer.width + x] & 0xFF) < 0x80;\n                    if (isBackground) {\n                        this.croud[index] = renderBuffer2[index];\n                    }\n                    this.prevMask[index] = this.curMask[index] = this.croud[index] < 0;\n                    if (Math.random() > 0.90) {\n                        this.noiseMask[index] = !isBackground;\n                    }\n                }\n            }\n\n            // delete loose particles\n            this.particleArray.splice(0, this.particleArray.length);\n        }\n\n        for (let y = 0; y < renderBuffer.height; y++) {\n            for (let x = 0; x < renderBuffer.width; x++) {\n                const index = y * renderBuffer.width + x;\n                this.curMask[index] = this.croud[index] < time;\n                this.diff[index] = this.prevMask[index] != this.curMask[index];\n                this.prevMask[index] = this.curMask[index];\n\n                if (this.curMask[index]) {\n                    renderBuffer.framebuffer[index] = renderBuffer2[index];\n                }\n\n                if (this.diff[index]) {\n                    if (this.noiseMask[index]) {\n                        const particle = new Particle(x, y, renderBuffer[index], renderBuffer.width, renderBuffer.height);\n                        particle._color = renderBuffer.framebuffer[index];\n                        this.particleArray.push(particle);\n                    }\n                    renderBuffer.framebuffer[index] = 0xFFFFFFFF;\n                }\n            }\n        }\n\n        for (let it = 0; it < this.particleArray.length; it++) {\n            const p = this.particleArray[it];\n\n            if (!p.update()) {\n                this.particleArray.splice(it, 1); continue;\n            }\n            renderBuffer.framebuffer[p.y * renderBuffer.width + p.x] = Framebuffer.addColor(renderBuffer.framebuffer[p.y * renderBuffer.width + p.x], p._color);\n        }\n    }\n\n    private putpixel(x: number, y: number, color: number) {\n        this.transitionCircle[x + y * this.transitionFramebufferTo.width] = new Color(color, color, color, 255).toPackedFormat();\n    }\n\n    private drawCircle(x0: number, y0: number, radius: number, color: number) {\n        let x = 0;\n        let y = radius;\n        let d = -(radius >>> 1);\n\n        while (x <= y) {\n            this.putpixel(x + x0, y + y0, color);\n            this.putpixel(y + x0, x + y0, color);\n            this.putpixel(-x + x0, y + y0, color);\n            this.putpixel(-y + x0, x + y0, color);\n            this.putpixel(-x + x0, -y + y0, color);\n            this.putpixel(-y + x0, -x + y0, color);\n            this.putpixel(x + x0, -y + y0, color);\n            this.putpixel(y + x0, -x + y0, color);\n\n            if (d <= 0) {\n                x++;\n                d += x;\n            } else {\n                y--;\n                d -= y;\n            }\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now() - this.startTime;\n        framebuffer.clear();\n        this.blockFade(framebuffer, this.ledTexture.texture, this.ledTexture.width, time, 0);\n    }\n\n    /**\n     * Transitions from one effect to another using using \"transition\" value from JSRocket\n     *\n     * @param  {Framebuffer} framebuffer             pixels\n     * @param  {AbstractScene} transitionSceneFrom   previous effect\n     * @param  {AbstractScene} transitionSceneTo     effect we are transitioning to\n     * @param  {number} transitionMethod             transition effect to use (blend, wipe, crossfade, etc)\n     */\n    public transition(\n        framebuffer: Framebuffer,\n        transitionSceneFrom: AbstractScene,\n        transitionSceneTo: AbstractScene,\n        transitionMethod: TransitionMethods,\n        transitionValue: number,\n        time: number) {\n\n        // render the 'To' effect into the framebuffer\n        transitionSceneTo.render(this.transitionFramebufferTo, time);\n\n        // render 'From' effect into framebuffer\n        transitionSceneFrom.render(framebuffer, time);\n        // apply transition to framebuffer (fromEffect) using texture (toEffect) 0-255\n        switch (Math.trunc(transitionMethod)) {\n            case TransitionMethods.BLOCKFADE: // 0 - 12000\n                this.blockFade(framebuffer, this.transitionFramebufferTo.framebuffer, this.transitionFramebufferTo.width, Utils.map(transitionValue, 0, 255, 0, 12000), 0);\n                break;\n            case TransitionMethods.CROSSFADE: // 0 - 255\n                this.crossFade(framebuffer.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.DISSOLVE: // 0 - 255\n                this.dissolve(framebuffer, this.transitionFramebufferTo.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.FADEIN: // 0-255\n                this.fadeIn(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.FADEOUT: // 0-255\n                this.fadeOut(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.WIPE_LEFT: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionWipe);\n                break;\n            case TransitionMethods.CIRCLE: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionCircle);\n                break;\n            default: // 0 - 512\n                this.crossFade(framebuffer.framebuffer, Utils.map(transitionValue, 0, 255, 0, 12000));\n        }\n    }\n\n    public blockFade(framebuffer: Framebuffer, pixelArray: Uint32Array, pixelArrayWidth: number, time: number, startTime: number) {\n        const blockWidth = 20;\n        const horizontalUnits = Math.ceil(framebuffer.width / blockWidth);\n        const verticalUnits = Math.ceil(framebuffer.height / blockWidth);\n\n        const fadeArray = new Array<number>(horizontalUnits * verticalUnits);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                fadeArray[x + y * horizontalUnits] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, x * blockWidth, y * blockWidth, blockWidth, blockWidth, pixelArray, pixelArrayWidth,\n                    Interpolator.interpolate(startTime + fadeArray[x + y * horizontalUnits], startTime + fadeArray[x + y * horizontalUnits] + 700, time)\n                );\n            }\n        }\n    }\n\n    // blend entire image to another image\n    public crossFade(framebuffer: Uint32Array, alpha: number) {\n        for (let i = 0; i < framebuffer.length; i++) {\n            framebuffer[i] = Framebuffer.blend(\n                framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                alpha)\n        }\n    }\n\n    // transition using image\n    // https://github.com/Slynchy/SDL-AlphaMaskWipes/blob/master/Transition.h\n    public crossFadeImage(framebuffer: Framebuffer, alpha: number, transitionImage: Uint32Array) {\n        for (let i = 0; i < framebuffer.framebuffer.length; i++) {\n            framebuffer.framebuffer[i] = Framebuffer.blend(\n                framebuffer.framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                Utils.clamp(\n                    (alpha * 2) - (transitionImage[i] & 0xff),\n                    0, 255))\n        }\n    }\n\n    // fade in from solid color\n    public fadeIn(framebuffer: Framebuffer, alpha: number, startColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        startColor,\n                        this.transitionFramebufferTo.framebuffer[x + y * framebuffer.width],\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // fade out to solid color\n    public fadeOut(framebuffer: Framebuffer, alpha: number, endColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        framebuffer.framebuffer[x + y * framebuffer.width],\n                        endColor,\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // Alternating scanlines + RGB Distort /w external input\n    public renderScanlines(framebuffer: Framebuffer, shiftAmount: number) {\n        let i = 0;\n\n        const offRed = (2 * shiftAmount) << 0;\n        const offGreen = (5 * shiftAmount) << 0;\n        const offBlue = (2 * shiftAmount) << 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n\n            // horizontal scanlines * intensity\n            const strips = (y & 1) * 16;\n            const verticalPosition = y * framebuffer.width;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                const imagePixelR = framebuffer.framebuffer[Utils.clamp(x + offRed, 0, framebuffer.width - 1) + verticalPosition] & 0xFF;\n                const imagePixelG = framebuffer.framebuffer[Utils.clamp(x + offGreen, 0, framebuffer.width - 1) + verticalPosition] >> 8 & 0xFF;\n                const imagePixelB = framebuffer.framebuffer[Utils.clamp(x + offBlue, 0, framebuffer.width - 1) + verticalPosition] >> 16 & 0xFF;\n\n                framebuffer.framebuffer[i++] = new Color(\n                    Utils.clamp(imagePixelR - strips, 0, 255),\n                    Utils.clamp(imagePixelG - strips, 0, 255),\n                    Utils.clamp(imagePixelB - strips, 0, 255)).toPackedFormat();\n            }\n        }\n    }\n\n}\n","export class Particle {\n    public x: number;\n    public y: number;\n    public _color: number;\n\n    private _x: number;\n    private _y: number;\n    private dx: number;\n    private dy: number;\n\n    private TTL: number = Math.round(Math.random() * 50);\n    private time: number;\n    private isLiving: boolean;\n    private width: number;\n    private height: number;\n\n    constructor(x: number, y: number, _color: number, width: number, height: number) {\n        this._x = this.x = x;\n        this._y = this.y = y;\n\n        this.dx = 0;\n        this.dy = - (Math.random() * (3 - 0.1) + 0.1);\n        this.time = 0;\n        this._color = 0xFF000000 | _color;\n\n        this.isLiving = true;\n\n        this.width = width;\n        this.height = height;\n    }\n\n    update(): boolean {\n        if (!this.isLiving) return false;\n\n        this.x = Math.round((this._x += this.dx) + 0.5);\n        this.y = Math.round((this._y += this.dy) + 0.5);\n\n        const a = ((this.TTL - this.time) / this.TTL);\n        const r = Math.round((this._color >> 16 & 0xFF) * a + 0.5);\n        const g = Math.round((this._color >> 8 & 0xFF) * a + 0.5);\n        const b = Math.round((this._color & 0xFF) * a + 0.5);\n\n        this._color = 0xFF << 24 | r << 16 | g << 8 | b;\n\n        if (this.x < 0 || this.x >= this.width) this.isLiving = false;\n        if (this.y < 0 || this.y >= this.height) this.isLiving = false;\n        if (this.time++ >= this.TTL) this.isLiving = false;\n        return this.isLiving;\n    }\n}","export enum TransitionMethods {\n        FADEIN = 1,\n        FADEOUT = 2,\n        BLOCKFADE = 3,\n        CROSSFADE = 4,\n        CIRCLE = 5,\n        WIPE_LEFT = 6,\n        DISSOLVE = 7\n}","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class CubeScene extends AbstractScene {\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private fairlight: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/logo-fairlight-10.png'), false).then(texture => this.fairlight = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.fairlight.texture);\n        framebuffer.clearDepthBuffer();\n\n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 6.2  +Math.sin(elapsedTime * 0.05)*3;\n\n        return Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.08)*8, Math.sin(elapsedTime * 0.05)*6, -20).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.09)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","/*\nName          : Aisa Demo\nRelease Date  : TBD\nPlatform      : JavaScript\nCategory      : Demo\nNotes         : Software rendered effects written in Typescript\n*/\n\n// Core\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SoundManager } from '../../sound/SoundManager';\nimport { Color } from '../../core/Color';\nimport { BlockFade } from '../block-fade/BlockFade';\nimport { DoublyLinkedList } from '../../core/LinkedList';\nimport { DLNode } from '../../core/Node';\n\n// Stats\nimport Stats = require('stats.js');\n\n// Video Recording Tool\nimport { CanvasRecorder } from './canvas-record';\n\nexport class DemoScene {\n\n    // Sound Manager\n    private soundManager: SoundManager;\n\n    // Video Recorder\n    private canvasRecorder: CanvasRecorder;\n\n    // list of scenes\n    private sceneList: DoublyLinkedList<AbstractScene>;\n    private nodeInstance: DLNode<AbstractScene>;\n\n    // transitions\n    private BlockFade: BlockFade;\n\n    // stats\n    private stats: Array<Stats>;\n\n    // our main canvas\n    private canvasRef: HTMLCanvasElement;\n\n    // moving line marking current place in the timeline\n    private timelineRef: HTMLInputElement;\n\n    // displays which scene we're on\n    private sceneRef: HTMLSpanElement;\n\n    // displays time in seconds\n    private timeRef: HTMLSpanElement;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.soundManager = new SoundManager();\n\n        this.sceneList = new DoublyLinkedList();\n\n        this.initControls(framebuffer.width);\n\n        this.BlockFade = new BlockFade();\n\n        this.canvasRef = document.getElementById('aisa-canvas') as HTMLCanvasElement;\n\n        // initialize effects with progress\n        return this.allProgress([\n\n            // load music\n            // this.soundManager.loadMusic(require(`../../assets/sound/dubmood_-_cromenu1_haschkaka.xm`)),\n            this.soundManager.loadMusic(require(`../../assets/sound/showeroflove.mod`)),\n            // this.soundManager.loadMusic(require('../../assets/sound/NotMixedorMastered.ogg')),\n\n            // load *.rocket file for scene/music synchronization\n            this.soundManager.prepareSync(require('../../assets/sound/demo.rocket'), true),\n\n            // we use this for transitions\n            this.BlockFade.init(framebuffer),\n\n            // load and initialze effects\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene2').then(plug => this.initScene(framebuffer, plug)), // telephone\n            import('./parts/Scene3').then(plug => this.initScene(framebuffer, plug)), // title screen here\n            import('./parts/Scene4').then(plug => this.initScene(framebuffer, plug)), // pizza delivery guy\n            import('./parts/Scene5').then(plug => this.initScene(framebuffer, plug)), // replace with something else\n            import('./parts/Scene6').then(plug => this.initScene(framebuffer, plug)), // spikeball + plane deformation\n            import('./parts/Scene7').then(plug => this.initScene(framebuffer, plug)), // cube + rotozoomer\n            import('./parts/Scene8').then(plug => this.initScene(framebuffer, plug)), // ledplasma + voxelcubes\n            import('./parts/Scene9').then(plug => this.initScene(framebuffer, plug)), // blender camera\n            import('./parts/Scene10').then(plug => this.initScene(framebuffer, plug)), // MetalHeadzScene\n            import('./parts/Scene11').then(plug => this.initScene(framebuffer, plug)), // AbstractCube\n            import('./parts/Scene12').then(plug => this.initScene(framebuffer, plug)), // DofBallsScene\n            import('./parts/Scene13').then(plug => this.initScene(framebuffer, plug)), // TorusKnotTunnelScene\n            import('./parts/Scene14').then(plug => this.initScene(framebuffer, plug)), // GearsScene\n            import('./parts/Scene15').then(plug => this.initScene(framebuffer, plug)), // BakedLighting\n            import('./parts/Scene16').then(plug => this.initScene(framebuffer, plug)), // ParticleStreamsScene\n            import('./parts/Scene17').then(plug => this.initScene(framebuffer, plug)), // HoodlumScene\n            import('./parts/Scene18').then(plug => this.initScene(framebuffer, plug)), // TwisterScene\n            import('./parts/Scene19').then(plug => this.initScene(framebuffer, plug)), // RazorScene\n            import('./parts/Scene20').then(plug => this.initScene(framebuffer, plug)), // sinescroller\n\n        ], (percent: number) => {\n            // update the progress bar via canvas\n            const outputX = Math.ceil(framebuffer.width * percent);\n            framebuffer.drawRect2(0, (framebuffer.height / 2) - 5, outputX, 10, Color.WHITE.toPackedFormat());\n\n            // update the canvas\n            this.canvasRef.getContext('2d').putImageData(framebuffer.getImageData(), 0, 0);\n\n            // update memory usage\n            for (const p of this.stats) {\n                p.update();\n            }\n        });\n    }\n\n    /**\n     * Adds AbstractScenes to sceneList array and initializes it\n     *\n     * @param   {Framebuffer} framebuffer            scene initializes with information in framebuffer such as width and height\n     * @param   {Object} plug                        imported class\n     * @returns {Promise<any>}                       resolves promise after completion\n     */\n    private initScene(framebuffer: Framebuffer, plug: unknown, ...args: Array<any>): Promise<any> {\n        const constructorName = Object.keys(plug)[0];\n        const newNode: DLNode<AbstractScene> = new DLNode();\n        newNode.data = new plug[constructorName](...args);\n        this.sceneList.insert(newNode, this.sceneList.length - 1);\n        return newNode.data.init(framebuffer);\n    }\n\n    // this runs after init() has finished\n    public onInit(): void {\n\n        this.canvasRecorder = new CanvasRecorder();\n\n        // jump to last effect in timeline and set mute vs unmuted\n        this.soundManager.initTimeline();\n\n        // show debug / timeline navigator\n        document.getElementById('debug').style.display = 'block';\n    }\n\n    /**\n     * Setup debug tools for local development\n     */\n    private initControls(width: number) {\n        this.stats = new Array<Stats>();\n\n        // Stats - Memory in Megabytes\n        this.initStats(2, 0, width * 2);\n\n        // Stats - Frames per second\n        this.initStats(0, 50, width * 2);\n\n        // Stats - Milliseconds per frame\n        this.initStats(1, 100, width * 2);\n\n        document.getElementById('debug').style.width = `${width * 2}px`;\n\n        // Scene Playback Controls\n        const tickerPlayRef = document.getElementById('ticker_play');\n        const tickerStopRef = document.getElementById('ticker_stop');\n        const tickerNextRef = document.getElementById('ticker_next');\n        const tickerBackRef = document.getElementById('ticker_back');\n        const tickerRecordRef = document.getElementById('ticker_record');\n        const tickerScreenshotRef = document.getElementById('ticker_screenshot');\n        const tickerVolumeRef = document.getElementById('ticker_volume');\n\n        // timeline slider, scene and time display\n        this.timelineRef = document.getElementById('timeline') as HTMLInputElement;\n        this.sceneRef = document.getElementById('scene') as HTMLSpanElement;\n        this.timeRef = document.getElementById('time') as HTMLSpanElement;\n\n        // stop\n        tickerStopRef.addEventListener('click', () => {\n            this.soundManager.onPause();\n            this.soundManager.seek(0);\n\n            tickerPlayRef.classList.add('fa-play');\n            tickerPlayRef.classList.remove('fa-pause');\n\n            // save video if recoding\n            if (this.canvasRecorder.recording) {\n                tickerRecordRef.style.color = 'white';\n                this.canvasRecorder.saveVideo();\n            }\n        })\n\n        // record video\n        tickerRecordRef.addEventListener('click', () => {\n            if (!this.canvasRecorder.recording) {\n                // start audio and video recording\n                tickerRecordRef.style.color = 'red';\n                this.soundManager.onPlay();\n                this.canvasRecorder.recordVideo();\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                // pause audio and save video file\n                tickerRecordRef.style.color = 'white';\n                this.soundManager.onPause();\n                this.canvasRecorder.saveVideo();\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // play / pause\n        tickerPlayRef.addEventListener('click', () => {\n            if (!this.soundManager.isPlaying) {\n                this.soundManager.onPlay();\n                tickerPlayRef.setAttribute('title', 'pause');\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                this.soundManager.onPause();\n                tickerPlayRef.setAttribute('title', 'play');\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // toggle audio and save preference for subsequent reloads\n        tickerVolumeRef.addEventListener('click', () => {\n            this.soundManager.toggleSound(tickerVolumeRef, !this.soundManager.audioElement.muted);\n            localStorage.setItem('soundToggle', String(this.soundManager.audioElement.muted));\n        });\n\n        // save screenshot in PNG format\n        tickerScreenshotRef.addEventListener('click', () => {\n            const date = new Date();\n            const fileName = `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.png`;\n            const image = this.canvasRef.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            const anchor = document.createElement('a');\n            anchor.setAttribute('download', fileName);\n            anchor.setAttribute('href', image);\n            anchor.click();\n        })\n\n        // next\n        tickerNextRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.musicProperties.timeSeconds, 1, this.sceneList.length);\n        })\n\n        // back\n        tickerBackRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.musicProperties.timeSeconds, -1, this.sceneList.length);\n        })\n\n        // seek\n        this.timelineRef.addEventListener('input', (e) => {\n            const time = Number((e.target as HTMLInputElement).value);\n            this.soundManager.seek(time / 1000);\n        });\n\n        // seek with scrollwheel\n        document.addEventListener(\"wheel\", (e) => {\n            const directionToScroll = (e.deltaY < 0) ? -0.06 : 0.06;\n            this.soundManager.seek(this.soundManager.audioElement.currentTime + directionToScroll);\n            // prevent page scroll\n            e.preventDefault();\n            e.stopPropagation();\n        }, { passive: false })\n\n        // keyboard navigation controls\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            switch (e.key) {\n                case 'MediaStop':\n                    tickerStopRef.click();\n                    break;\n                // play or pause\n                case 'MediaPlayPause':\n                case ' ':\n                    tickerPlayRef.click();\n                    break;\n                // navigate timeline backward\n                case 'ArrowLeft':\n                    this.soundManager.seek(this.soundManager.audioElement.currentTime - 0.06);\n                    break;\n                // navigate timeline forward\n                case 'ArrowRight':\n                    this.soundManager.seek(this.soundManager.audioElement.currentTime + 0.06);\n                    break;\n                // jump to next effect\n                case 'MediaTrackNext':\n                case 'ArrowUp':\n                    this.soundManager.jump(this.soundManager.audioElement.currentTime, 1, this.sceneList.length);\n                    break;\n                // jump to previous effect\n                case 'MediaTrackPrevious':\n                case 'ArrowDown':\n                    this.soundManager.jump(this.soundManager.audioElement.currentTime, -1, this.sceneList.length);\n                    break;\n                // toggle full screen\n                case 'f':\n                    this.canvasRef.click();\n                    break;\n                // save a screenshot\n                case 's':\n                    tickerScreenshotRef.click();\n                    break;\n                // record video in webm format\n                case 'r':\n                    tickerRecordRef.click();\n                    break;\n                case 'd':\n                    break;\n            }\n        })\n    }\n\n    /**\n     * Runs all promises in an array and runs callback with percentage of completion\n     *\n     * @param   {Array<Promise<any>>} promises       array of promises to run\n     * @param   {Function} progressCallback          function sending percentage after individual promise is complete\n     * @returns {Promise<any>}                       promise resolve after all promises are complete\n     */\n    private allProgress(promises: Array<Promise<any>>, progressCallback: (percentage: number) => void): Promise<any> {\n        let d = 0;\n        for (const p of promises) {\n            p.then(() => {\n                d++;\n                progressCallback(d / promises.length);\n            });\n        }\n        return Promise.all(promises);\n    }\n\n    /**\n     * Adds JavaScript Performance Monitor and initializes it\n     *\n     * @param   {Object} args                        stat type[0-3], top in pixels, left in pixels\n     */\n    private initStats(...args: Array<number>) {\n        this.stats.push(new Stats());\n        const statsObj = this.stats[this.stats.length - 1];\n        statsObj.showPanel(args[0]);\n        statsObj.dom.style.cssText = `position:absolute;top:${args[1]}px;left:${args[2]}px;`;\n        document.body.appendChild(statsObj.dom);\n    }\n\n    public render(framebuffer: Framebuffer) {\n        // get time and values from music\n        this.soundManager.updateMusic();\n\n        // get which effect to run\n        this.nodeInstance = this.sceneList.getNode(this.soundManager.musicProperties.sceneData.effect);\n\n        // if \"transitionType\" in JSRocket is zero then run the effect by itself\n        if (this.soundManager.musicProperties.sceneData.transitionType === 0) {\n            this.nodeInstance.data.render(framebuffer, this.soundManager.musicProperties.timeMilliseconds)\n        } else {\n            // otherwise blend two effects together\n            this.BlockFade.transition(\n                framebuffer,\n                this.nodeInstance.data,\n                this.nodeInstance.next.data,\n                this.soundManager.musicProperties.sceneData.transitionType,\n                this.soundManager.musicProperties.sceneData.transitionValue,\n                this.soundManager.musicProperties.timeMilliseconds);\n        }\n\n        // comment out for release\n        this.drawStats();\n    }\n\n    /**\n     * Show FPS, Memory Usage and js rocket time and effect number\n     */\n    private drawStats() {\n        // update timeline marker\n        this.timelineRef.value = String(this.soundManager.musicProperties.timeMilliseconds);\n\n        // keep current time in local storage to stay in place during reloads\n        localStorage.setItem('lastTime', String(this.soundManager.musicProperties.timeSeconds));\n\n        if (!this.soundManager.syncDevice.connected && !this.soundManager.demoMode) {\n            console.error('Rocket not connected.');\n            return;\n        } else {\n            // get values from JS rocket\n            this.sceneRef.innerText = this.soundManager.musicProperties.sceneData.effect.toString();\n            this.timeRef.innerText = this.soundManager.musicProperties.timeSeconds.toFixed(2);\n        }\n        // update FPS and Memory usage\n        for (const p of this.stats) {\n            p.update();\n        }\n    }\n\n}\n","export class CanvasRecorder {\n\n    public recording: boolean;\n    private canvasRecordingOptions;\n    private canvasRecorder;\n    private audioTrack: MediaStreamTrack;\n\n    public constructor() {\n        this.recording = false;\n    }\n\n    public getType(filename: string) {\n        const ext = this.fileExtension(filename);\n        return ['mkv'].includes(ext) ? 'video/x-matroska;codecs=avc1' : 'video/webm';\n    }\n\n    private fileExtension(filename: string): string {\n        return filename.split('.').pop();\n    }\n\n    public createCanvasRecorder(canvas: HTMLCanvasElement, options = {}) {\n        const date = new Date();\n        let link = null;\n\n        const {\n            filename = `Recording ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate = 25,\n            download = true,\n            recorderOptions = {\n                mimeType: 'video/x-matroska;codecs=avc1',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 2500000 // 2.5 Mbit/sec\n            }\n        } = {\n            ...options\n        };\n\n        const mimeType = recorderOptions.mimeType || this.getType(filename);\n\n        if (download) {\n            link = link || document.createElement('a');\n            link.download = filename;\n        }\n\n        let chunks = [];\n\n        let stream = canvas.captureStream(frameRate);\n\n        /*\n        if (!this.canvasRecorder) {\n            // get the audio track:\n            const ctx = new AudioContext();\n            const dest = ctx.createMediaStreamDestination();\n            const sourceNode = ctx.createMediaElementSource(audio);\n            sourceNode.connect(dest);\n            sourceNode.connect(ctx.destination);\n            this.audioTrack = dest.stream.getAudioTracks()[0];\n        }\n\n        stream.addTrack(this.audioTrack);\n        */\n\n        let recorder = new MediaRecorder(stream, { mimeType, ...recorderOptions });\n\n        recorder.ondataavailable = event => {\n            event.data.size && chunks.push(event.data);\n        };\n        recorder.onstop = () => {\n            if (download && chunks.length) {\n                const blob = new Blob(chunks, { type: mimeType });\n                const url = URL.createObjectURL(blob);\n                link.href = url;\n\n                const event = new MouseEvent('click');\n                link.dispatchEvent(event);\n                setTimeout(() => {\n                    URL.revokeObjectURL(url);\n                }, 1);\n            }\n        };\n\n        return {\n            start(timeslice) {\n                chunks = [];\n                recorder.start(timeslice);\n            },\n            set filename(name) {\n                link.download = name;\n            },\n            stop() {\n                recorder.stop();\n                return chunks;\n            },\n            dispose() {\n                recorder = null;\n                stream = null;\n            },\n            stream,\n            recorder\n        };\n    }\n\n    /**\n     * Records a video and sound using CanvasRecorder\n     */\n    public recordVideo() {\n        console.info('recording video...');\n        this.recording = true;\n        const date = new Date();\n\n        // options\n        this.canvasRecordingOptions = {\n            filename: `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate: 60,\n            download: true,\n            recorderOptions: {\n                mimeType: 'video/webm',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 5000000 // 2.5 Mbit/sec\n            }\n        }\n\n        // Create canvas video recorder\n        const canvasObj = document.getElementById('aisa-canvas');\n        this.canvasRecorder = this.createCanvasRecorder(canvasObj as HTMLCanvasElement, this.canvasRecordingOptions);\n        this.canvasRecorder.start();\n    }\n\n    public saveVideo() {\n        // Stop and dispose\n        this.canvasRecorder.stop();\n        this.canvasRecorder.dispose();\n        this.recording = false;\n        console.info(`saved video as ${this.canvasRecordingOptions.filename}`);\n    }\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\n\n// sideways 3D office scene\nexport class Scene1 {\n    private PlaneDeformationFloorScene = new PlaneDeformationScene(8, require('../../../assets/ground.png'));\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        return Promise.all([\n            this.PlaneDeformationFloorScene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlaneDeformationFloorScene.drawPlaneDeformation(framebuffer, 0, time >> 3);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { MetalHeadzScene } from '../../metalheadz/MetalHeadzScene';\n\nexport class Scene10 {\n    private MetalHeadzScene: MetalHeadzScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.MetalHeadzScene = new MetalHeadzScene();\n\n        return Promise.all([\n            this.MetalHeadzScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.MetalHeadzScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { AbstractCube } from '../../abstract-cube/AbstractCube';\n\nexport class Scene11 {\n    private AbstractCube: AbstractCube;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.AbstractCube = new AbstractCube();\n\n        return Promise.all([\n            this.AbstractCube.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.AbstractCube.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { DofBallsScene } from '../../dof-balls/DofBallsScene';\n\nexport class Scene12 {\n    private DofBallsScene: DofBallsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.DofBallsScene = new DofBallsScene();\n\n        return Promise.all([\n            this.DofBallsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.DofBallsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusKnotTunnelScene } from '../../torus-knot-tunnel/TorusKnotTunnelScene';\n\nexport class Scene13 {\n    private TorusKnotTunnelScene: TorusKnotTunnelScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusKnotTunnelScene = new TorusKnotTunnelScene();\n\n        return Promise.all([\n            this.TorusKnotTunnelScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusKnotTunnelScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { GearsScene } from '../../gears/GearsScene';\n\nexport class Scene14 {\n    private GearsScene: GearsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.GearsScene = new GearsScene();\n\n        return Promise.all([\n            this.GearsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.GearsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BakedLighting } from '../../baked-lighting/BakedLighting';\n\nexport class Scene15 {\n    private BakedLighting: BakedLighting;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BakedLighting = new BakedLighting();\n\n        return Promise.all([\n            this.BakedLighting.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.BakedLighting.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { ParticleStreamsScene } from '../../particle-streams/ParticleStreamsScene';\n\nexport class Scene16 {\n    private ParticleStreamsScene: ParticleStreamsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.ParticleStreamsScene = new ParticleStreamsScene();\n\n        return Promise.all([\n            this.ParticleStreamsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.ParticleStreamsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { HoodlumScene } from '../../hoodlum/HoodlumScene';\n\nexport class Scene17 {\n    private HoodlumScene: HoodlumScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.HoodlumScene = new HoodlumScene();\n\n        return Promise.all([\n            this.HoodlumScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.HoodlumScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TwisterScene } from '../../twister/TwisterScene';\n\nexport class Scene18 {\n    private TwisterScene: TwisterScene;\n    public init(): Promise<any> {\n\n        this.TwisterScene = new TwisterScene();\n\n        return Promise.all([\n            this.TwisterScene.init(),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TwisterScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RazorScene } from '../../razor/RazorScene';\n\nexport class Scene19 {\n    private RazorScene: RazorScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RazorScene = new RazorScene();\n\n        return Promise.all([\n            this.RazorScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RazorScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene2 {\n    private logo: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { SineScrollerScene } from '../../sine-scroller/SineScrollerScene';\n\nexport class Scene20 {\n    private SineScrollerScene: SineScrollerScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.SineScrollerScene = new SineScrollerScene();\n\n        return Promise.all([\n            this.SineScrollerScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.SineScrollerScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene3 {\n    private logo: Texture;\n    private background: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.background = texture\n            ),\n            TextureUtils.load(require('../../../assets/logos/pizza_express.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.background.height / 2)) | 0, this.background, 1.0);\n\n        framebuffer.drawTexture(\n            ((framebuffer.width / 2) - (this.logo.width / 2)) | 0,\n            ((framebuffer.height / 2) - (this.logo.height / 2)) | 0,\n            this.logo,\n            1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\nimport { PlasmaScene } from '../../plasma/PlasmaScene';\n\n// pizza being delivered\nexport class Scene4 {\n\n    private pizza: Texture;\n    private image: Texture;\n    private PlasmaScene: PlasmaScene;\n\n    public init(): Promise<any> {\n        this.PlasmaScene = new PlasmaScene();\n\n        return Promise.all([\n            // https://www.pngkey.com/detail/u2r5r5o0o0e6a9i1_sign-up-for-deals-pizza-delivery-guy-png/\n            TextureUtils.load(require('../../../assets/logos/pizza-delivery.png'), true).then(\n                (texture: Texture) => this.pizza = texture\n            ),\n            TextureUtils.load(require('../../../assets/lsd.png'), true).then(\n                (texture: Texture) => this.image = texture\n            ),\n            this.PlasmaScene.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlasmaScene.render(framebuffer, time);\n        framebuffer.drawTexture(50,  ((framebuffer.height / 2) - (this.image.height / 2)) | 0, this.image, 1.0);\n        framebuffer.drawTexture(framebuffer.width - this.pizza.width, (framebuffer.height ) - (this.pizza.height ) | 0, this.pizza, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusScene } from '../../torus/TorusScene';\n\nexport class Scene5 {\n    private TorusScene: TorusScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusScene = new TorusScene();\n\n        return Promise.all([\n            this.TorusScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\nimport { DistortedSphereScene } from '../../distorted-sphere/DistortedSphereScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class Scene6 {\n    private PlaneDeformationScene: PlaneDeformationScene;\n    private DistortedSphereScene: DistortedSphereScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.PlaneDeformationScene = new PlaneDeformationScene(3, require('../../../assets/textures/checker.png'));\n        this.DistortedSphereScene = new DistortedSphereScene();\n\n        return Promise.all([\n            this.DistortedSphereScene.init(framebuffer),\n            this.PlaneDeformationScene.init(framebuffer),\n            // https://www.pngitem.com/middle/iwTwxh_face-facial-hair-sitting-tongue-fear-woman-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick-2.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.PlaneDeformationScene.render(framebuffer, time);\n        this.DistortedSphereScene.renderTransparent(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RotoZoomerScene } from '../../roto-zoomer/RotoZoomerScene';\nimport { CubeScene } from '../../cube/CubeScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene7 {\n    private RotoZoomerScene: RotoZoomerScene;\n    private CubeScene: CubeScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RotoZoomerScene = new RotoZoomerScene();\n        this.CubeScene = new CubeScene();\n\n        return Promise.all([\n            this.CubeScene.init(framebuffer),\n            this.RotoZoomerScene.init(),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RotoZoomerScene.render(framebuffer, time);\n        this.CubeScene.renderBackground(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { VoxelBallsScene } from '../../voxel-balls/VoxelBallsScene';\nimport { LedPlasmaScene } from '../../led-plasma/LedPlasmaScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene8 {\n    private VoxelBallsScene: VoxelBallsScene;\n    private LedPlasmaScene: LedPlasmaScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.VoxelBallsScene = new VoxelBallsScene();\n        this.LedPlasmaScene = new LedPlasmaScene();\n\n        return Promise.all([\n            this.LedPlasmaScene.init(),\n            this.VoxelBallsScene.init(framebuffer),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.LedPlasmaScene.render(framebuffer, time);\n        this.VoxelBallsScene.renderTransparent(framebuffer, time);\n        // framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BlenderCameraScene } from '../../blender-camera-animation/BlenderCameraScene';\nexport class Scene9 {\n    private BlenderCameraScene: BlenderCameraScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BlenderCameraScene = new BlenderCameraScene();\n\n        return Promise.all([\n            this.BlenderCameraScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(0);\n        framebuffer.clearDepthBuffer();\n        this.BlenderCameraScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { Vertex } from '../../Vertex';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\ninterface IndexMesh {\n    points: Array<Vector4f>,\n    points2: Array<Vector4f>,\n    normals: Array<Vector4f>,\n    normals2: Array<Vector4f>,\n    index: Array<number>\n}\n\nexport class DistortedSphereScene extends AbstractScene {\n\n    private heightmapSphere: Texture;\n\n    private env: Texture;\n    private obj: IndexMesh;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/heightmapSphere.png'), false).then(\n                texture => this.heightmapSphere = texture\n            ),\n            TextureUtils.load(require('../../assets/envmap.png'), false).then(\n                texture => this.env = texture\n            ),\n        ]).then(\n            () => {\n                this.obj = this.createSphereDistplaced(this.heightmapSphere);\n            });\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(Color.BLACK.toPackedFormat());\n        this.renderTransparent(framebuffer, time);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.env);\n        const scale: number = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(time * 0.0001)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(time * 0.0001)));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10 - (Math.sin(time * 0.0006) * 0.5 + 0.5) * 6)\n            .multiplyMatrix(modelViewMartrix);\n        framebuffer.clearDepthBuffer();\n        this.shadingSphereEnvDisp2(framebuffer, time * 0.0004, modelViewMartrix);\n    }\n\n    public createSphere() {\n\n        const pointsA: Array<Vector4f> = [\n            new Vector4f(0.0, -1.0, 0.0),\n            new Vector4f(1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, 1.0),\n            new Vector4f(-1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, -1.0),\n            new Vector4f(0.0, 1.0, 0.0)\n        ];\n\n        const indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        const k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        const points: Array<Vector4f> = [];\n        const points2: Array<Vector4f> = [];\n        const normals: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n\n        const index: Array<number> = [];\n\n        k.index.forEach(i => {\n            const p = k.points[i];\n\n            const point = points.find(findPoint => findPoint.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector4f(0, 0, 0));\n            normals2.push(new Vector4f(0, 0, 0));\n            points2.push(new Vector4f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public divideSphere(points: Array<Vector4f>, index: Array<number>, steps: number) {\n\n        const points2: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n        const index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points[index[i]];\n            const v2 = points[index[i + 1]];\n            const v3 = points[index[i + 2]];\n\n            const vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            const vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            const vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n\n    public createSphereDistplaced(texture: Texture) {\n        const sphere: {\n            points: Array<Vector4f>,\n            points2: Array<Vector4f>,\n            normals: Array<Vector4f>,\n            normals2: Array<Vector4f>,\n            index: Array<number>\n        } = this.createSphere();\n        const newPoints: Array<Vector4f> = new Array<Vector4f>();\n        sphere.points.forEach((point) => {\n            const x = point.x;\n            const y = point.y;\n            const z = point.z;\n            const u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            const v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            const disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public shadingSphereEnvDisp2(framebuffer: Framebuffer, elapsedTime: number, modelViewMartrix: Matrix4f): void {\n        const result = this.obj;\n\n\n        for (let i = 0; i < result.points.length; i++) {\n            const y = result.points[i].z;\n            const x = result.points[i].x;\n            const length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + Math.max(20 - length * 2, 0) * 0.06 + elapsedTime * 0.9) * 4.5;\n            rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        const points = result.points2;\n        const index = result.index;\n        const normals = result.normals;\n\n        const norm: Vector4f = new Vector4f(0, 0, 0);\n        const norm2: Vector4f = new Vector4f(0, 0, 0);\n        const cross: Vector4f = new Vector4f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            const v1: Vector4f = points[index[i]];\n            const v2: Vector4f = points[index[i + 1]];\n            const v3: Vector4f = points[index[i + 2]];\n\n\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            const normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        const points2: Array<Vector4f> = result.points2;\n        const normals2: Array<Vector4f> = result.normals2;\n\n        const normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyHomArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            points2[p].x = Math.round((framebuffer.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((framebuffer.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        const vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        const vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        const vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        const vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const n1 = normals2[index[i]];\n\n            const v2 = points2[index[i + 1]];\n            const n2 = normals2[index[i + 1]];\n\n            const v3 = points2[index[i + 2]];\n            const n3 = normals2[index[i + 2]];\n\n            if (framebuffer.isTriangleCCW(v1, v2, v3)) {\n\n                vertexArray[0].projection = v1;\n                framebuffer.fakeSphere(n1, vertex1);\n\n                vertexArray[1].projection = v2;\n                framebuffer.fakeSphere(n2, vertex2);\n\n                vertexArray[2].projection = v3;\n                framebuffer.fakeSphere(n3, vertex3);\n\n                if (v1.x < framebuffer.minWindow.x ||\n                    v2.x < framebuffer.minWindow.x ||\n                    v3.x < framebuffer.minWindow.x ||\n                    v1.x > framebuffer.maxWindow.x ||\n                    v2.x > framebuffer.maxWindow.x ||\n                    v3.x > framebuffer.maxWindow.x ||\n                    v1.y < framebuffer.minWindow.y ||\n                    v2.y < framebuffer.minWindow.y ||\n                    v3.y < framebuffer.minWindow.y ||\n                    v1.y > framebuffer.maxWindow.y ||\n                    v2.y > framebuffer.maxWindow.y ||\n                    v3.y > framebuffer.maxWindow.y) {\n\n\n                    this.texturedRenderingPipeline.clipConvexPolygon(framebuffer, vertexArray);\n                } else {\n                    this.texturedRenderingPipeline.triangleRasterizer.drawTriangleDDA(framebuffer, vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nexport class DofBallsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n    private start: number;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.start = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.load(require('../../assets/spriteBlur.png'), true).then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleTorus(framebuffer, time, this.particleTexture2, true);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.60);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public computeDepthBlur(\n        nearPlane: number,\n        focalPlane: number,\n        farPlane: number, depth: number): number {\n\n        let f: number;\n\n        if (depth > focalPlane) {\n            f = (depth - focalPlane) / (nearPlane - focalPlane);\n        } else {\n            f = (depth - focalPlane) / (farPlane - focalPlane);\n        }\n        return Math.min(f, 1.0);\n    }\n\n    public drawParticleTorus(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        framebuffer.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const radi = 5.2;\n\n        for (let i = 0; i < num; i++) {\n            const x = radi * Math.cos(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n            const y = (i - num * 0.5) * 0.4;\n            const z = radi * Math.sin(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n\n            points.push(new Vector3f(x, y, z));\n        }\n\n        const modelViewMartrix: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.0004)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.0004)));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach((element: Vector3f) => {\n            points2.push(framebuffer.project(modelViewMartrix.multiply(element)));\n        });\n\n        points2.sort((a: Vector3f, b: Vector3f) => a.z - b.z);\n\n        points2.forEach((element: Vector3f) => {\n            const size: number = -(2.9 * 292 / (element.z));\n            const spriteNum: number = Math.round(this.computeDepthBlur(0, -15, -70, element.z) * 13);\n\n            framebuffer.drawParticle2Sub(\n                element.x - size / 2,\n                element.y - size / 2,\n                size, size, texture, 1 / element.z, 1.0, spriteNum, 128\n            );\n        });\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\n\nexport class GearsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n    private gearsMesh: Array<FlatshadedMesh>;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/gear.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.gearsMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene4(framebuffer, time);\n        /*  [\n              { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n              { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n              { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n              { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n              { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n          ], this.dirt);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene4(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -21).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let scale: number = 0.1 * 2.1 * 2.1;\n        let factor: number = 2.1 - 0.09 - 0.09;\n        const fade: number = 0.09;\n        const dampFactor: number = Math.sin(elapsedTime * 0.00001) * 0.5 + 0.5;\n        for (let i: number = 1; i < 6; i++) {\n            scale *= factor;\n            factor -= fade;\n\n            const mv: Matrix4f = this.getModelViewMatrix(camera, dampFactor, scale, i, elapsedTime);\n\n            this.renderingPipeline.draw(framebuffer, this.gearsMesh[0], mv);\n        }\n        // let lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n        // framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n    private getModelViewMatrix(camera: Matrix4f, dampFactor: number, scale: number, i: number,\n        elapsedTime: number): Matrix4f {\n        const modelViewMartrix: Matrix4f =\n            Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.0005 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                    Matrix4f.constructScaleMatrix(scale, scale, scale)));\n\n        return camera.multiplyMatrix(modelViewMartrix);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { Interpolator } from '../../math/Interpolator';\n\nexport class HoodlumScene extends AbstractScene {\n\n    private blurred: Texture;\n    private lab2: Texture;\n    private noise: Texture;\n    private particleTexture2: Texture;\n    private spaceLabMesh: Array<TexturedMesh>;\n    private hoodlumLogoMesh: Array<FlatshadedMesh>;\n    private accumulationBuffer: Uint32Array;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/lab2.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.spaceLabMesh = mesh\n            ),\n            BlenderLoader.load(require('../../assets/jsx/hoodlum2018.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.hoodlumLogoMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/lab2.png'), false).then(texture => this.lab2 = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n            this.createProceduralTexture3().then(texture => this.particleTexture2 = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        framebuffer.setCullFace(CullFace.BACK);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.lab2);\n\n        this.drawBlenderScene9(framebuffer, time, this.particleTexture2);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene9(framebuffer: Framebuffer, elapsedTime: number, texture3: Texture): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.spaceLabMesh);\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        const model = this.hoodlumLogoMesh[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                const y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                const scale2 = (1 + 4 * Interpolator.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                const x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                const z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach(element => {\n            const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            const size = -(4.3 * 192 / (element.z));\n            framebuffer.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public createProceduralTexture3(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class LedPlasmaScene extends AbstractScene {\n\n    private ledTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/led.png'), false).then(\n                (texture: Texture) => this.ledTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.led(framebuffer, time, this.ledTexture);\n    }\n\n    // TODO: create interesting pattern!\n    public led(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        const time = elapsedTime * 0.0007 * 1.0;\n        const lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        const radialWaveCenter = new Vector3f(40.0 / 2.0, 35.0 / 2.0, 0).add(new Vector3f(40.0 / 2.0 *\n            Math.sin(-time * 1.2), 35.0 / 2.0 * Math.cos(-time * 1.2), 0));\n        const difference: Vector3f = new Vector3f(0, 0, 0);\n\n        const horizontalUnits = Math.ceil(framebuffer.width / 8);\n        const verticalUnits = Math.ceil(framebuffer.height / 8);\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                const directionalWave = (Math.sin((x * lineDirection.x + y * lineDirection.y) * 0.8 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                const radialWave = (Math.cos(difference.length() * 0.7) + 1.0) * 0.5;\n                const waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                const intensity = ((waveSum * 15) | 0) % 16;\n                framebuffer.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture, TextureUtils } from '../../texture';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { LensFlare } from '../../special-effects/LensFlare';\n\nexport class MetalHeadzScene extends AbstractScene {\n\n    private metalheadz: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private noise: Texture;\n    private dirt: Texture;\n    private skyBox: SkyBox;\n\n    private blenderObjMetal: any;\n\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n        // TODO:\n        // make classes for assets\n        // lens flare, 3d modell\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/metalheadz.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObjMetal = mesh\n            ),\n            TextureUtils.load(require('../../assets/metalheadz.png'), false).then(\n                (texture: Texture) => this.metalheadz = texture\n            ),\n            TextureUtils.load(require('../../assets/ring.png'), true).then(\n                (texture: Texture) => this.texture11 = texture\n            ),\n            TextureUtils.load(require('../../assets/bokeh.png'), true).then(\n                (texture: Texture) => this.texture13 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n            TextureUtils.load(require('../../assets/dirt.png'), true).then(\n                (texture: Texture) => this.dirt = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        const elapsedTime: number = 0.2 * time;\n\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = this.computeCameraMovement(elapsedTime);\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 7));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.metalheadz);\n\n        const renderingPipeline: TexturingRenderingPipeline = this.texturedRenderingPipeline;\n\n        renderingPipeline.setModelViewMatrix(mv);\n        renderingPipeline.drawMeshArray(framebuffer, this.blenderObjMetal);\n\n        const scale: number = 20;\n        const lensflareScreenSpace: Vector3f =\n            framebuffer.project(camera.getRotation().multiply(new Vector3f(1.1 * scale, 2 * scale, -0.9 * scale)));\n\n        LensFlare.drawLensFlare(framebuffer, lensflareScreenSpace, elapsedTime * 1.2, [\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    private computeCameraMovement(elapsedTime: number): Matrix4f {\n        return Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17)\n            .multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0008).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0009).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 0, 0)\n                    )\n                )\n            );\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f, Matrix4f, Matrix3f } from '../../math';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture';\nimport { Interpolator } from '../../math/Interpolator';\n\nexport class ParticleStreamsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture().then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleStreams(framebuffer, time, this.particleTexture2);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.55);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            const radius = 2.8;\n            const radius2 = 2.9 + 3 * Math.sin(Math.PI * 2 * i / num - elapsedTime * 0.002);\n\n            for (let j = 0; j < num2; j++) {\n\n                const x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                const y = Math.cos(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius + 8 + radius2;\n                const z = Math.sin(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius;\n\n                points.push(Matrix3f.constructXRotationMatrix(Math.PI * 2 * i / num - Math.sin(elapsedTime * 0.0003 + Math.PI * 2 * i / num)).multiply(new Vector3f(x, y, z)));\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n                Matrix4f.constructZRotationMatrix(Math.PI * 0.17).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(elapsedTime * 0.00015).multiplyMatrix(\n                        Matrix4f.constructXRotationMatrix(Math.PI * 2 / 3 * i + elapsedTime * 0.0006)))\n            );\n\n            const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort((a, b) => {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                // let size = -(2.0 * 192 / (element.z));\n                const size = -(1.3 * 192 / (element.z));\n                if (element.z < -4)\n                    framebuffer.drawParticleNoDepth(\n                        Math.round(element.x - size / 2),\n                        Math.round(element.y - size / 2),\n                        Math.round(size), Math.round(size), texture, Interpolator.interpolate(-90, -55, element.z));\n            });\n        }\n    }\n\n\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\n\n/**\n * Plane deformation\n *\n * 2D plane deformations using lookup tables was a great\n * way to get smooth animations of complex calculations\n * running on slower processors. These effects were very\n * common in the 90s demoscene.\n *\n * The idea was to take a texture and deform it using a\n * pre-calculated math reference table. Different formulas\n * gave different effects such as fake 3d tunnels, wormholes\n * and landscapes.\n *\n * https://www.iquilezles.org/www/articles/deform/deform.htm\n *\n */\n\nexport class PlaneDeformationScene {\n\n    private mLUT: Int32Array;\n    public texture: Texture;\n\n    constructor(\n        private effectStyle: number,\n        private texturePath: string\n    ) {\n    }\n\n    onInit() { }\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.texturePath, false).then(\n                (texture: Texture) => {\n                    this.texture = texture;\n                    this.createLUT(this.effectStyle, framebuffer.width, framebuffer.height, this.texture.width, this.texture.height);\n                }\n            ),\n        ]);\n\n    }\n\n    // fill math lookup table values with crazy values\n    public createLUT(effectStyle: number, effectWidth: number, effectHeight: number, textureWidth: number, textureHeight: number): Promise<any> {\n\n        // initializae lookup array\n        this.mLUT = new Int32Array(3 * effectWidth * effectHeight);\n\n        // increment placeholder\n        let k = 0;\n\n        // u and v are euclidean coordinates\n        let u = 0;\n        let v = 0\n        let bright = 0;\n\n        for (let j = 0; j < effectHeight; j++) {\n            const y = -1.00 + 2.00 * j / effectHeight;\n            for (let i = 0; i < effectWidth; i++) {\n                const x = -1.00 + 2.00 * i / effectWidth;\n                const d = Math.sqrt(x * x + y * y);\n                const a = Math.atan2(y, x);\n\n                const r = d;\n                switch (effectStyle) {\n                    case 1:   // stereographic projection / anamorphosis\n                        u = Math.cos(a) / d;\n                        v = Math.sin(a) / d;\n                        bright = -50 * (2 / (6 * r + 3 * x));\n                        break;\n                    case 2:  // hypnotic rainbow spiral\n                        v = Math.sin(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        u = Math.cos(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        bright = 1;\n                        break;\n                    case 3:  // rotating tunnel\n                        v = 2 / (6 * r + 3 * x);\n                        u = a * 3 / Math.PI;\n                        bright = 25 * -v;\n                        break;\n                    case 4:  // wavy star-burst\n                        v = (-0.4 / r) + .1 * Math.sin(8 * a);\n                        u = .5 + .5 * a / Math.PI;\n                        bright = 0;\n                        break;\n                    case 5:  // hyper-space travel\n                        u = (0.02 * y + 0.03) * Math.cos(a * 3) / r;\n                        v = (0.02 * y + 0.03) * Math.sin(a * 3) / r;\n                        bright = 0;\n                        break;\n                    case 6:  // five point magnetic flare\n                        u = 1 / (r + 0.5 + 0.5 * Math.sin(5 * a));\n                        v = a * 3 / Math.PI;\n                        bright = 0;\n                        break;\n                    case 7:  // cloud like dream scroll\n                        u = 0.1 * x / (0.11 + r * 0.5);\n                        v = 0.1 * y / (0.11 + r * 0.5);\n                        bright = 0;\n                        break;\n                    case 8:  // floor and ceiling with fade to dark horizon\n                        u = x / Math.abs(y);\n                        v = 1 / Math.abs(y);\n                        bright = 40 * -v;\n                        break;\n                    case 9:  // hot magma liquid swirl\n                        u = 0.5 * (a) / Math.PI;\n                        v = Math.sin(2 * r);\n                        bright = 0;\n                        break;\n                    case 10:  // clockwise flush down the toilet\n                        v = Math.pow(r, 0.1);\n                        u = (1 * a / Math.PI) + r;\n                        bright = 0;\n                        break;\n                    case 11:  // 3D ball\n                        v = x * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        u = y * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        bright = 7 * -18.7 * (x + y + r * r - (x + y - 1) * Math.sqrt(4 - 5 * r * r) / 3) / (r * r + 1);\n                        break;\n                    default:  // show texture with no deformation or lighting\n                        u = x;\n                        v = y;\n                        bright = 0;\n                        break;\n                }\n                this.mLUT[k++] = (textureWidth * u) & textureWidth - 1;\n                this.mLUT[k++] = (textureHeight * v) & textureHeight - 1;\n                this.mLUT[k++] = Utils.clamp(bright, -255, 255);\n            }\n        }\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // this.drawOldPlaneDeformationStar(framebuffer, time >> 3);\n        // this.drawOldPlaneDeformationFloor(framebuffer, time >> 3);\n        this.drawPlaneDeformation(framebuffer, time >> 3, time >> 3);\n    }\n\n    /**\n     * For every frame, go through every pixel and use the reference table (mLUT)\n     * to get which pixel of the texture it should draw at the current pixel.\n     *\n     * TODO:\n     * - Rotate effect via rotozoomer class\n     *   use drawOldPlaneDeformationStar to add another lookup layer [mLUT * 4]\n     *   use drawOldPlaneDeformationFloor to update createLUT(8) floor algorithm\n     *\n     */\n    drawPlaneDeformation(framebuffer: Framebuffer, elapsedTimeY: number, elapsedTimeX: number) {\n\n        for (let pixelCount = 0; pixelCount < framebuffer.framebuffer.length; pixelCount++) {\n            const o = (pixelCount << 1) + pixelCount; // equivalent to 3 * pixelCount\n            const u = this.mLUT[o + 0] + elapsedTimeX; // to look like its animating, add timeDisplacement\n            const v = this.mLUT[o + 1] + elapsedTimeY;\n            const adjustBrightness = this.mLUT[o + 2]; // fade out\n\n            // get the R,G,B values from texture\n            let currentPixel = this.texture.texture[this.texture.width * (v & this.texture.height - 1) + (u & this.texture.width - 1)];\n\n            // only apply brightness if it was calculated\n            if (adjustBrightness !== 0) {\n\n                // disassemble pixel using bit mask to remove color components for greater speed\n                let r = currentPixel & 0xFF;        // get red\n                let g = currentPixel >> 8 & 0xFF;   // get green\n                let b = currentPixel >> 16 & 0xFF;  // get blue\n\n                // make darker or brighter\n                r += adjustBrightness;\n                g += adjustBrightness;\n                b += adjustBrightness;\n\n                // constrain RGB to make sure they are within 0-255 color range\n                r = Utils.clamp(r, 0, 255);\n                g = Utils.clamp(g, 0, 255);\n                b = Utils.clamp(b, 0, 255);\n\n                // reassemble colors back into pixel\n                currentPixel = new Color(r, g, b, 255).toPackedFormat();\n            }\n\n            // put texture pixel on buffer screen\n            framebuffer.framebuffer[pixelCount] = currentPixel;\n        }\n    }\n\n    /**\n     *\n     * Previous Plane deformation without lookup tables for reference\n     *\n     * http://sol.gfxile.net/gp/ch17.html\n     * TODO:\n     * - better textures\n     * - precalc lookup tables\n     * - fadeout\n     * - substraction to create black holes\n     */\n    drawOldPlaneDeformationFloor(framebuffer: Framebuffer, elapsedTime: number) {\n        /*\n        mLUT(8)\n            u = x / Math.abs(y);\n            v = 1 / Math.abs(y);\n            bright = 10 * -v;\n        */\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            const ydist = (y - framebuffer.height / 2);\n            const v = (((1 / Math.abs(ydist / 100 * 0.02) + elapsedTime * 0.069) % 256) + 256) % 256;\n            const alpha = 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2));\n                const u = (((((xdist / framebuffer.width) / Math.abs(ydist / 100 * 0.02))) % 256) + 256) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawOldPlaneDeformationStar(framebuffer: Framebuffer, elapsedTime: number) {\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2)) / (framebuffer.width / 2);\n                const ydist = (y - framebuffer.height / 2) / (framebuffer.height / 2);\n                const alpha = 1;// 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n                const a = Math.atan2(ydist, xdist) + elapsedTime * 0.0004;\n                const v = (a * 3 / Math.PI + elapsedTime * 0.0004) * 128 % 256;\n                const d = Math.sqrt(xdist * xdist + ydist * ydist);\n                const u = (1 / (d + 0.5 + 0.5 * Math.sin(5 * a)) * 32 + elapsedTime * 0.03) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Color } from '../../core/Color';\n\nexport class PlasmaScene extends AbstractScene {\n\n    private GRADIENTLEN = 1500;\n\n    // swing/wave function parameters\n    private SWINGLEN = this.GRADIENTLEN * 3;\n    private SWINGMAX = this.GRADIENTLEN / 2 - 1;\n\n    // gradient & swing curve arrays\n    private colorGrad: Array<number>;\n    private swingCurve: Array<number>;\n\n    public init(): Promise<any> {\n        this.makeGradient(this.GRADIENTLEN);\n        this.makeSwingCurve(this.SWINGLEN, this.SWINGMAX);\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawPlasma(framebuffer, time);\n        // this.drawOldSchoolPlasma(framebuffer, Date.now());\n    }\n\n    // fill the given array with a nice swingin' curve\n    // three cos waves are layered together for that\n    // the wave \"wraps\" smoothly around\n    makeSwingCurve(arrlen: number, maxval: number) {\n        const factor1 = 2;\n        const factor2 = 3;\n        const factor3 = 6;\n\n        this.swingCurve = new Array<number>(this.SWINGLEN);\n\n        const halfmax = maxval / factor1;\n\n        for (let i = 0; i < arrlen; i++) {\n            const ni = i * (Math.PI * 2) / arrlen; // ni goes [0..TWO_PI] -> one complete cos wave\n            this.swingCurve[i] = Math.round(\n                Math.cos(ni * factor1) *\n                Math.cos(ni * factor2) *\n                Math.cos(ni * factor3) *\n                halfmax + halfmax);\n        }\n    }\n\n    // create a smooth, colorful gradient by cosinus curves in the RGB channels\n    makeGradient(arrlen: number) {\n        // random between 1 and 5\n        const rf = 2;\n        const gf = 4;\n        const bf = 4;\n\n        // random between 0 and gradient length\n        const rd = 818; // 0;\n        const gd = 1095; // arrlen / gf;\n        const bd = 1351; // arrlen / bf / 2;\n\n        this.colorGrad = new Array<number>(this.GRADIENTLEN);\n\n        // fill gradient array\n        for (let i = 0; i < arrlen; i++) {\n            const r = this.cos256(arrlen / rf, i + rd);\n            const g = this.cos256(arrlen / gf, i + gd);\n            const b = this.cos256(arrlen / bf, i + bd);\n            this.colorGrad[i] = new Color(r, g, b, 255).toPackedFormat();\n        }\n    }\n\n    // helper: get cosinus sample normalized to 0..255\n    private cos256(amplitude: number, x: number) {\n        return Math.trunc(Math.cos(x * (Math.PI * 2) / amplitude) * 127 + 127);\n    }\n\n    // helper: get a swing curve sample\n    private swing(i: number) {\n        return this.swingCurve[i % this.SWINGLEN];\n    }\n\n    // helper: get a gradient sample\n    private gradient(i: number) {\n        return this.colorGrad[i % this.GRADIENTLEN];\n    }\n\n    drawPlasma(framebuffer: Framebuffer, time: number) {\n        let i = 0;\n        const t = Math.trunc(time >> 3);\n        const swingT = this.swing(t);\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            const swingY = this.swing(y);\n            const swingYT = this.swing(y + t);\n            for (let x = 0; x < framebuffer.width; x++) {\n                // this is where the magic happens: map x, y, t around\n                // the swing curves and lookup a color from the gradient\n                // the \"formula\" was found by a lot of experimentation\n                framebuffer.framebuffer[i++] = this.gradient(this.swing(\n                    this.swing(x + swingT) + swingYT) +\n                    this.swing(this.swing(x + t) + swingY));\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Dodecahedron } from '../../geometrical-objects/Dodecahedron';\nimport { Pyramid } from '../../geometrical-objects/Pyramid';\nimport { Sphere } from '../../geometrical-objects/Sphere';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { LensFlare } from '../../special-effects/LensFlare';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class RazorScene extends AbstractScene {\n\n    private texture10: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private dirt: Texture;\n    private noise: Texture;\n\n    private cube: Cube;\n    private dodecahedron: Dodecahedron;\n    private pyramid: Pyramid;\n    private icosahedron: Sphere; // Icosahedron;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.cube = new Cube();\n        this.dodecahedron = new Dodecahedron();\n        this.pyramid = new Pyramid();\n        this.icosahedron = new Sphere(6, 10);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/spark.png'), true).then(texture => this.texture10 = texture),\n            TextureUtils.load(require('./assets/ring.png'), true).then(texture => this.texture11 = texture),\n            TextureUtils.load(require('./assets/bokeh.png'), true).then(texture => this.texture13 = texture),\n            TextureUtils.load(require('./assets/dirt.png'), true).then(texture => this.dirt = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.reproduceRazorScene(framebuffer, time * 0.0025, [\n            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        // framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.drawScaledTextureClipBi(0, 0, framebuffer.width, framebuffer.height, texture3, .75);\n\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise, 0.04);\n    }\n\n    public reproduceRazorScene(framebuffer: Framebuffer, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f;\n\n        const camera = Matrix4f.constructTranslationMatrix(0, 0, -6.4 - 5 * (Math.sin(elapsedTime * 0.06) * 0.5 + 0.5)).multiplyMatrix(\n            Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.08) * 0.5 + 0.5) * 0.5).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.1)));\n\n        let scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            modelViewMartrix);\n\n\n        let model = this.dodecahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        const yDisplacement = -1.5;\n        const distance = 2.8;\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.icosahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        // TODO:  store Mesh inside cube instance and use cube.draw(framebuffer);\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.pyramid.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        /**\n         * SHADOWS\n         */\n        this.renderingPipeline.enableLighting(false);\n        this.renderingPipeline.setColor(Color.DARK_GRAY);\n\n        scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.dodecahedron.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.pyramid.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.icosahedron.getMesh(), modelViewMartrix);\n\n        this.renderingPipeline.enableLighting(true);\n\n        const lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(12.0, 4.0, 0)));\n\n        LensFlare.drawLensFlare(framebuffer, lensflareScreenSpace, elapsedTime * 100, texture, dirt);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class RotoZoomerScene extends AbstractScene {\n\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            /*TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),*/\n            TextureUtils.load(require('../../assets/xray.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawRotoZoomer(framebuffer, time);\n    }\n\n    drawRotoZoomer(framebuffer: Framebuffer, time: number) {\n        const scale = Math.sin(time * 0.0005) + 1.1;\n\n        const yStepX = Math.sin(time * 0.0003) * scale;\n        const yStepY = Math.cos(time * 0.0003) * scale;\n\n        const xStepX = yStepY;\n        const xStepY = -yStepX;\n\n        let texYCoord = Math.sin(time * 0.0002) * 512;\n        let texXCoord = Math.cos(time * 0.0002) * 512;\n\n        let texYCoordInner = 0;\n        let texXCoordInner = 0;\n        let framebufferPos = 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            texXCoordInner = texXCoord;\n            texYCoordInner = texYCoord;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.framebuffer[framebufferPos++] = this.logoTexture.texture[(texXCoordInner & 127) + (texYCoordInner & 127) * 128];\n\n                texXCoordInner += xStepX;\n                texYCoordInner += xStepY;\n            }\n\n            texXCoord += yStepX;\n            texYCoord += yStepY;\n        }\n    }\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","import { Color } from '../../core/Color';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Vector2f } from '../../math/Vector2f';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { FontRenderer } from './FontRenderer';\n\nexport class SineScrollerScene extends AbstractScene {\n\n    private texture2: Texture;\n    private startTime: number;\n    private fontRenderer: FontRenderer;\n    private fontRenderer2: FontRenderer;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.startTime = Date.now();\n\n        const fonts: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ@+# ' +\n            '0123456789' +\n            '!\\'()?-/.,';\n        this.fontRenderer = new FontRenderer(\n            framebuffer,\n            32, 34, fonts,\n            require('./assets/fraxionFont.png')\n        );\n\n        const fonts2: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ 012' +\n            '3456789*:?' +\n            '!-(),\\'.+~<' +\n            '>>#// ';\n        this.fontRenderer2 = new FontRenderer(\n            framebuffer,\n            16, 18, fonts2,\n            require('./assets/anarchyFont.png')\n        );\n        /*\n                const fonts: string =\n                'ABCDEFGHIJ' +\n                'KLMNOPQRST' +\n                'UVWXYZ!?:;' +\n                '0123456789' +\n                '\"(),-.\\'@# ';\n                this.fontRenderer = new FontRenderer(\n                    framebuffer,\n                    32, 25, fonts,\n                    require('./assets/dragonsFont.png')\n                );*/\n        return Promise.all([\n            TextureUtils.load(require('../../assets/hoodlumLogo.png'), true).then(\n                (texture: Texture) => this.texture2 = texture\n            ),\n            this.fontRenderer.init(),\n            this.fontRenderer2.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawStarField(framebuffer, time);\n\n        framebuffer.drawTexture(framebuffer.width/2 - this.texture2.width/2, 0, this.texture2, 1.0);\n\n        this.fontRenderer.drawText(framebuffer, 0, 102, ' # TEAM GENESIS # IS BACK IN 2018 WITH A NEW PC FIRST! \\'STAR WARS - EMPIRE AT WAR\\' DO YOU LIKE THIS?    ', time);\n        this.fontRenderer2.drawText(framebuffer, 0, framebuffer.height - 20,\n            '   * WE REALLY LOVE SCROLLERS * HOW ABOUT YOU? THIS PRODUCTION IS FROM HOODLUM' +\n            '~< LETS GO ON WITH THE GENERAL BLAH BLAH      ', time * 1.6, false);\n\n        // animated rainbow horizontal lines\n        const horizontalUnits = framebuffer.width / 16;\n        for (let i: number = 0; i < horizontalUnits; i++) {\n            const myTime = time * 0.003;\n            const waveSum = i / horizontalUnits * 0.6;\n            const red = (Math.cos(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const green = (Math.sin(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const blue = (Math.sin(myTime) + 1.0) * 0.5 * 255;\n\n            const color: number = 255 << 24 | blue << 16 | green << 8 | red;\n            framebuffer.drawRect(i * 16, 68, 16, color);\n            framebuffer.drawRect(((horizontalUnits-1) - i) * 16, 168, 16, color);\n        }\n    }\n\n    public drawStarField(frambuffer: Framebuffer, elapsedTime: number): void {\n        const darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        const lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        const backgroundColor = 255 << 24 | 0 << 16 | 0 << 8 | 0;\n\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        const stars = new Array<Vector2f>();\n        const stars2 = new Array<Vector2f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        frambuffer.clearColorBuffer(backgroundColor);\n        frambuffer.drawRect2(0, 68, frambuffer.width, 100, Color.DARK_BLUE.toPackedFormat());\n\n        for (let i = 0; i < 100; i++) {\n            frambuffer.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % frambuffer.width, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            frambuffer.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % frambuffer.width, stars2[i].y, lightStarColor);\n        }\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector4f } from '../../math/Vector4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Fog } from '../../shading/fog/Fog';\nimport { LinearFog } from '../../shading/fog/LinearFog';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusKnotTunnelScene extends AbstractScene {\n\n    private noise: Texture;\n    private particleTexture: Texture;\n    private cocoon: Texture;\n    private torusKnot: TorusKnot = new TorusKnot(true);\n    private fog: Fog = new LinearFog(-50, -240, new Vector4f(0.67, 0.4, 0.5, 1.0));\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.renderingPipeline.setFog(this.fog);\n\n        return Promise.all([\n            TextureUtils.generateProceduralNoise().then((texture: Texture) => this.noise = texture),\n            TextureUtils.load(require('../../assets/cocoon.png'), false).then(\n                (texture: Texture) => this.cocoon = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture2().then(\n                (texture: Texture) => this.particleTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.torusTunnel(framebuffer, time * 0.019);\n        framebuffer.drawScaledTextureClipAdd(\n            framebuffer.width / 2 - this.cocoon.width / 2,\n            framebuffer.height / 2 - this.cocoon.height / 2,\n            this.cocoon.width, this.cocoon.height, this.cocoon, 0.67);\n\n        // framebuffer.noise(time, this.noise);\n        this.glitchScreen(framebuffer, time * 5, this.noise);\n    }\n\n    public glitchScreen(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.00002) * 0.9 + 0.1);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        const texture2 = new Texture();\n        texture2.height = framebuffer.height;\n        texture2.width = framebuffer.width;\n        texture2.texture = framebuffer.framebuffer;\n\n\n        const blockWidth = 20;\n        const horizontalUnits = Math.floor(framebuffer.width / blockWidth);\n        const verticalUnits = Math.floor(framebuffer.height / blockWidth);\n\n        for (let x = 0; x < horizontalUnits; x++) {\n            for (let y = 0; y < verticalUnits; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                framebuffer.drawTextureRect(blockWidth * (horizontalUnits - x), blockWidth * ((horizontalUnits * rng.getFloat()) | 0), blockWidth * x, blockWidth * y, blockWidth, blockWidth, texture2.texture, texture2.width, 0.03 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                for (let y = 0; y < verticalUnits; y++) {\n                    framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, blockWidth * (Math.round(elapsedTime / 100 + x + y) % 12), 0, blockWidth, blockWidth, texture.texture, texture.width, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.tmpGlitch, framebuffer.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n        const rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            const scale = rng2.getFloat() * glitchFactor;\n            const off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * framebuffer.width;\n                let glIndex = yStart * framebuffer.width + framebuffer.width - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n\n                glIndex = yStart * framebuffer.width;\n                const count = framebuffer.width - offset;\n\n                for (let i = 0; i < count; i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n    public torusTunnel(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const scale = 1.0;\n        const lookAhead: number = 0.4;\n\n        const frame = this.torusFunction3(elapsedTime * 0.02);\n        const frame2 = this.torusFunction3(elapsedTime * 0.02 + lookAhead);\n\n        const tangent = frame2.sub(frame).normalize();\n        let up = frame.add(frame2).normalize();\n        const right = tangent.cross(up).normalize();\n        up = right.cross(tangent).normalize();\n\n        const translation = Matrix4f.constructIdentityMatrix();\n        // translation vector\n        translation.m14 = -frame.x;\n        translation.m24 = -frame.y;\n        translation.m34 = -frame.z;\n\n        const rotation = Matrix4f.constructIdentityMatrix();\n        // x vector\n        rotation.m11 = right.x;\n        rotation.m21 = right.y;\n        rotation.m31 = right.z;\n\n        // y vector\n        rotation.m12 = up.x;\n        rotation.m22 = up.y;\n        rotation.m32 = up.z;\n\n        // z vector\n        rotation.m13 = -tangent.x;\n        rotation.m23 = -tangent.y;\n        rotation.m33 = -tangent.z;\n\n        const finalMatrix = rotation.transpose().multiplyMatrix(translation);\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -10).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04)));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(elapsedTime * 0.01).multiplyMatrix(finalMatrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torusKnot.getMesh(), modelViewMartrix);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2;\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Torus } from '../../geometrical-objects/Torus';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusScene extends AbstractScene {\n\n    private razorLogo: Texture;\n    private torus: Torus = new Torus();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/razor1911.png'), true).then(\n                (texture: Texture) => this.razorLogo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.drawTitanEffect(framebuffer, time);\n        this.shadingTorus(framebuffer, time * 0.02);\n        framebuffer.drawTexture(framebuffer.width / 2 - this.razorLogo.width / 2, 0, this.razorLogo, 1.0);\n    }\n\n    public shadingTorus(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.05);\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -24).multiplyMatrix(modelViewMartrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torus.getMesh(), modelViewMartrix);\n    }\n\n\n    private drawTitanEffect(framebuffer: Framebuffer, time: number) {\n        framebuffer.clear();\n        const horizontalNum = framebuffer.width / 20;\n        const verticalNum = framebuffer.height / 20;\n\n        for (let x = 0; x < horizontalNum; x++) {\n            for (let y = 0; y < verticalNum; y++) {\n\n                const scale = ((Math.sin(time * 0.004 + x * 0.7 + y * 0.4) + 1) / 2);\n                const size = Math.round(scale * 8 + 1) * 2;\n                const offset = (20 / 2 - size / 2) | 0;\n                const color = 255 << 24 | (85 * scale) << 16 | (55 * scale) << 8 | (55 * scale);\n                framebuffer.drawBox2(x * 20 + offset, y * 20 + offset, size, size, color);\n            }\n        }\n\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract twister into effect class\n */\nexport class TwisterScene extends AbstractScene {\n\n    private backgroundTexture: Texture;\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.backgroundTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.drawScaledTextureClipBi(\n            0,\n            0,\n            framebuffer.width, framebuffer.height, this.backgroundTexture, 1.0);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.backgroundTexture.texture);\n        this.draw(framebuffer, this.logoTexture, time);\n    }\n\n    private draw(framebuffer: Framebuffer, texture: Texture, time: number): void {\n        const a: number = time * 0.001;\n        for (let i: number = 10; i < framebuffer.height - 10; i++) {\n            const xoff = (Math.sin(a + i * 0.01) * 50) | 0;\n            const rot = Math.sin(a * 0.4 + i * 0.0021) * Math.PI * 2;\n            let scale = 42;\n            const x1 = (Math.sin(rot) * scale) | 0;\n            const x2 = (Math.sin(Math.PI * 2 / 4 + rot) * scale) | 0;\n            const x3 = (Math.sin(Math.PI * 2 / 4 * 2 + rot) * scale) | 0;\n            const x4 = (Math.sin(Math.PI * 2 / 4 * 3 + rot) * scale) | 0;\n\n            if (x2 > x1) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 1.5 + rot));\n                const dist = x2 - x1;\n                const xPos = x1 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x3 > x2) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 2.5 + rot));\n                const dist = x3 - x2;\n                const xPos = x2 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x4 > x3) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 3.5 + rot));\n                const dist = x4 - x3;\n                const xPos = x3 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x1 > x4) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 4.5 + rot));\n                const dist = x1 - x4;\n                const xPos = x4 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n        }\n    }\n\n    private drawSpan(\n        framebuffer: Framebuffer,\n        dist: number,\n        xpos: number,\n        ypos: number,\n        scale: number,\n        texture: Texture,\n        time: number): void {\n        let framebufferIndex = xpos + ypos * framebuffer.width;\n        let textureIndex = (((ypos - time * 0.029) | 0) & 0xff) * texture.width;\n        const textureForwardDifference = texture.width / dist;\n        const hightlight = Math.pow(scale, 11) * 115;\n\n        for (let j = 0; j < dist; j++) {\n            const color = texture.texture[textureIndex | 0];\n\n            const r = Math.min(((color >> 0 & 0xff) * scale) + hightlight, 255);\n            const g = Math.min(((color >> 8 & 0xff) * scale) + hightlight, 255);\n            const b = Math.min(((color >> 16 & 0xff) * scale) + hightlight, 255);\n\n            framebuffer.framebuffer[framebufferIndex] = r | g << 8 | b << 16 | 255 << 24;\n\n            framebufferIndex++;\n            textureIndex += textureForwardDifference;\n        }\n    }\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { TextureUtils, Texture } from '../../texture/index';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class VoxelBallsScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.YELLOW.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private blurred: Texture;\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        this.renderTransparent(framebuffer, time);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTextureFullscreen(texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n\n        framebuffer.clearDepthBuffer();\n\n        const xSteps = 5;\n        const xsteps = 5;\n        const zsteps = 5;\n        for (let x = 0; x < xSteps; x++) {\n            for (let y = 0; y < xsteps; y++) {\n                for (let z = 0; z < zsteps; z++) {\n                    let scale = (Math.sin(x * 0.3 + time * 0.0009) + 1.0) * 0.5 *\n                        (Math.sin(y * 0.4 + time * 0.002) + 1.0) * 0.5 *\n                        (Math.sin(z * 0.3 + time * 0.001) + 1.0) * 0.5;\n                    if (scale < 0.3) {\n                        // continue;\n                    }\n                    scale = 0.8;\n                    const mat =\n                        Matrix4f.constructTranslationMatrix(0, 0, -11).multiplyMatrix(\n                            Matrix4f.constructYRotationMatrix(time * 0.0003).multiplyMatrix(\n                                Matrix4f.constructXRotationMatrix(time * 0.0005).multiplyMatrix(\n                                    Matrix4f.constructZRotationMatrix(time * 0.0004).multiplyMatrix(\n                                        Matrix4f.constructTranslationMatrix(x - xSteps / 2 + 0.5, y - xsteps / 2 + 0.5, z - zsteps / 2 + 0.5)\n                                            .multiplyMatrix(\n                                                Matrix4f.constructScaleMatrix(scale, scale, scale)))))); // .multiplyMatrix(\n                    //       Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    //           Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n\n                    this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), mat);\n                }\n            }\n        }\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class Dodecahedron extends AbstractGeometricObject {\n\n    constructor() {\n\n        super();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        const phi = (1 + Math.sqrt(5)) * 0.5;\n        const a = 1;\n        const b = 1 / phi;\n        const c = 2 - phi;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(c, 0, a), new Vector4f(-c, 0, a), new Vector4f(-b, b, b), new Vector4f(0, a, c),\n            new Vector4f(b, b, b), new Vector4f(b, -b, b), new Vector4f(0, -a, c), new Vector4f(-b, -b, b),\n            new Vector4f(c, 0, -a), new Vector4f(-c, 0, -a), new Vector4f(-b, -b, -b), new Vector4f(0, -a, -c),\n            new Vector4f(b, -b, -b), new Vector4f(b, b, -b), new Vector4f(0, a, -c), new Vector4f(-b, b, -b),\n            new Vector4f(1, c, 0), new Vector4f(-a, c, 0), new Vector4f(-1, -c, 0), new Vector4f(a, -c, 0)\n        ];\n\n        const index: Array<number> = [\n            0, 4, 1, 1, 3, 2, 1, 4, 3, 1, 7, 0,\n            0, 6, 5, 0, 7, 6, 8, 12, 9, 9, 11, 10,\n            9, 12, 11, 9, 15, 8, 8, 14, 13, 8, 15, 14,\n            14, 3, 13, 13, 4, 16, 13, 3, 4, 3, 14, 2,\n            2, 15, 17, 2, 14, 15, 11, 6, 10, 10, 7, 18,\n            10, 6, 7, 6, 11, 5, 5, 12, 19, 5, 11, 12,\n            16, 4, 19, 19, 0, 5, 19, 4, 0, 19, 12, 16,\n            16, 8, 13, 16, 12, 8, 17, 15, 18, 18, 9, 10,\n            18, 15, 9, 18, 7, 17, 17, 1, 2, 17, 7, 1\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Pyramid extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(0, a, 0),\n            new Vector4f(a, -a, -a),\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, a),\n            new Vector4f(-a, -a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 1, 2,\n            0, 3, 1,\n            0, 4, 3,\n            0, 2, 4\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Sphere extends AbstractGeometricObject {\n\n    public constructor(xSteps: number = 16, ySteps: number = 16) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = xSteps;\n        const STEPS2 = ySteps;\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    private sphereFunction(theta: number, phi: number): Vector4f {\n        return new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor(inverse: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            const tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize();\n            const right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        this.buildMesh(points, index, inverse);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { BlenderScene } from '../../blender/BlenderScene';\n\n/**\n * Load Wavefront OBJ file that was converted via obj2json utility.\n * to save the convertToMeshArray step\n * renamed to JSX file to load file at runtime\n */\nexport class BlenderLoader {\n\n    public static load(filename: string): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: string): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.getBlenderScene(meshes, false);\n        });\n    }\n\n    private constructor() {\n\n    }\n}\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Mesh } from '../../blender/mesh';\nimport { convertToMeshArray } from '../../blender/parseUtils';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class WavefrontLoader {\n\n    public static load(filename: any): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: any): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.getBlenderScene(meshes);\n        });\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Fog {\n\n    public abstract computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Fog } from './Fog';\n\nexport class LinearFog extends Fog {\n\n    private zStart: number;\n    private zEnd: number;\n    private fogColor: Vector4f;\n\n    public constructor(zStart: number, zEnd: number, fogColor: Vector4f) {\n        super();\n        this.zStart = zStart;\n        this.zEnd = zEnd;\n        this.fogColor = fogColor;\n    }\n\n    public computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f {\n        if (vertex.z >= this.zStart) {\n            return color;\n        } else if (vertex.z <= this.zEnd) {\n            return this.fogColor;\n        } else {\n            const f: number = (this.zEnd - vertex.z) / (this.zEnd - this.zStart);\n            return new Vector4f(\n                color.x * f + this.fogColor.x * (1 - f),\n                color.y * f + this.fogColor.y * (1 - f),\n                color.z * f + this.fogColor.z * (1 - f)\n            );\n        }\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export interface musicProperties {\n    timeSeconds: number;\n    timeMilliseconds: number;\n    sceneData: sceneData;\n}\n\n// scene variables | things you set through jsRocket\nexport interface sceneData {\n    effect: any;\n    transitionType: any;\n    transitionValue: any;\n    snare: any;\n    bass: any;\n}\n\n// Beats per minute of your demo tune\nexport const BPM = 125;\n\n// The resolution between two beats, four is usually fine,- eight adds a bit more finer control\nexport const ROWS_PER_BEAT = 6;\n\n// we calculate this now, so we can translate between rows and seconds later on\nexport const ROW_RATE = BPM / 60 * ROWS_PER_BEAT;\n","import './JSRocket';\nimport './cowbell/cowbell'\nimport './cowbell/audio_player'\nimport './cowbell/web_audio_player'\nimport './cowbell/openmpt/openmpt_player'\nimport {\n    musicProperties,\n    ROW_RATE,\n    sceneData\n} from './MusicProperties';\nexport class SoundManager {\n\n    public syncDevice;\n    public isPlaying = false;\n    public demoMode: boolean;\n    public row = 0;    // the current row we're on\n\n    //  container for audio values to be used by effects (time, bass, effect, transitions)\n    public musicProperties: musicProperties;\n    public sceneData: sceneData;\n    public audioElement: HTMLAudioElement;\n\n    public constructor() {\n\n        // Initialize JS Rocket\n        this.syncDevice = new JSRocket.SyncDevice();\n        this.syncDevice.connected = false;\n\n    }\n\n    /**\n     * Load audio files supported by cowbell\n     *\n     * @param {string} filename     audio file to load\n     * @returns {Promise<void>}     promise\n     */\n    public loadMusic(filename: string): Promise<void> {\n        return new Promise((resolve) => {\n\n            const fileExtension = filename.split('.').pop().toLowerCase();\n            let audioPlayer;\n\n            switch (fileExtension) {\n                case 'it':\n                case 'xm':\n                case 's3m':\n                case 'mod':\n                    audioPlayer = new Cowbell.Player.OpenMPT({\n                        'pathToLibOpenMPT': './openmpt/libopenmpt.js'\n                    });\n                    break;\n                case 'ogg':\n                case 'mp3':\n                default:\n                    audioPlayer = new Cowbell.Player.Audio();\n                    break;\n            }\n            const track = new audioPlayer.Track(filename);\n            this.audioElement = track.open();\n            resolve();\n        });\n    }\n\n    /**\n     * Load XML file for music syncronization for use with JS Rocket\n     *\n     * @param {string} filename      XML file to load\n     * @param {string} demoMode      use true for release mode (uses file) | false when using rocket editor\n     * @returns {Promise<void>}      promise\n     */\n    prepareSync(filename: string, demoMode: boolean): Promise<void> {\n        this.demoMode = demoMode;\n        return new Promise((resolve) => {\n            if (this.demoMode) {\n                this.syncDevice.setConfig({\n                    'rocketXML': filename\n                });\n                this.syncDevice.init('demo');\n\n            } else {\n                this.syncDevice.init();\n            }\n\n            // XML file from JS Rocket library was loaded and parsed, make sure your ogg is ready\n            this.syncDevice.on('ready', () => this.onSyncReady());\n\n            // [JS Rocket - Arrow keys] whenever you change the row, a value or interpolation mode this will get called\n            this.syncDevice.on('update', (newRow: number) => this.onSyncUpdate(newRow));\n\n            // [JS Rocket - Spacebar] in Rocket calls one of those\n            this.syncDevice.on('play', () => this.onPlay());\n            this.syncDevice.on('pause', () => this.onPause());\n            resolve()\n        });\n    }\n\n    onSyncReady() {\n        this.syncDevice.connected = true;\n\n        this.sceneData = {\n            effect: this.syncDevice.getTrack('effect'),\n            snare: this.syncDevice.getTrack('snare'),\n            bass: this.syncDevice.getTrack('bass'),\n            transitionType: this.syncDevice.getTrack('transitionType'),\n            transitionValue: this.syncDevice.getTrack('transitionValue')\n        }\n    }\n\n    // row is only given if you navigate, or change a value on the row in Rocket\n    // on interpolation change (hit [i]) no row value is sent, as the current there is the upper row of your block\n    onSyncUpdate(newRow: number) {\n        if (!isNaN(newRow)) {\n            this.row = newRow;\n        }\n        this.audioElement.currentTime = newRow / ROW_RATE;\n    }\n\n    updateMusic() {\n        // show message if rocket app is not running in background\n        if (!this.syncDevice.connected && !this.demoMode) {\n            return;\n        }\n\n        // update music properties\n        this.musicProperties = {\n            timeSeconds: (this.audioElement?.currentTime) || 0,\n            timeMilliseconds: (this.audioElement?.currentTime) * 1000,\n            sceneData: {\n                effect: this.sceneData.effect.getValue(this.row),\n                transitionType: this.sceneData.transitionType.getValue(this.row),\n                transitionValue: this.sceneData.transitionValue.getValue(this.row),\n                snare: this.sceneData.snare.getValue(this.row),\n                bass: this.sceneData.bass.getValue(this.row),\n            }\n        }\n\n        this.row = this.musicProperties.timeSeconds * ROW_RATE;\n\n        // update JS rocket\n        if (this.audioElement && this.audioElement.paused === false) {\n            // otherwise we may jump into a point in the audio where there's\n            // no timeframe, resulting in Rocket setting row 2 and we report\n            // row 1 back - thus Rocket spasming out\n\n            // this informs Rocket where we are\n            this.syncDevice.update(this.row);\n        }\n\n        // stop once timeline reaches end\n        if (Math.floor(this.audioElement.duration) === Math.floor(this.musicProperties.timeSeconds)) {\n            document.getElementById('ticker_stop').click();\n        }\n    }\n\n    onPlay() {\n        if (!this.isPlaying && this.audioElement) {\n            if (this.audioElement.currentTime) {\n                this.audioElement.currentTime = this.row / ROW_RATE;\n            }\n            this.isPlaying = true;\n            this.audioElement.play();\n        }\n        console.log('[onPlay]');\n    }\n\n    onPause() {\n        this.row = this.audioElement.currentTime * ROW_RATE;\n        if (!this.audioElement.paused && this.isPlaying) {\n            this.audioElement.pause();\n            this.isPlaying = false;\n        }\n        console.info('[onPause]');\n    }\n\n    /**\n     * find the prev/next effect and jump to it\n     *\n     * @param   {number} time       where we are in the audio timeline\n     * @param   {number} direction  direction to skip -1 goes backwards.  1 goes forward\n     */\n    public jump(time: number, direction: number, sceneLength: number) {\n        this.row = time * ROW_RATE;\n        const effectJump = Number(this.sceneData.effect.getValue(this.row).toFixed(1));\n        if (Math.trunc(Number(this.musicProperties.sceneData.effect)) !== Math.trunc(effectJump) && effectJump >= 1) {\n            // if running into transition effect 2.5..then keep searching and only land on whole numbers\n            if (parseInt(effectJump.toString(), 10) !== effectJump) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                this.seek(time);\n            }\n        } else {\n            if (time >= 0 && effectJump < sceneLength - 3) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                // go back to the beginning\n                this.seek(0);\n            }\n        }\n    }\n\n    /**\n     * Jumps to a point in the audio timeline in milliseconds\n     *\n     * @param  {number} time            time in milliseconds\n     */\n    public seek(time: number) {\n        this.audioElement.currentTime = time;\n        // update rocket editor position to new timeline location\n        if (!this.demoMode) {\n            this.syncDevice.update(this.audioElement.currentTime * ROW_RATE);\n        }\n    }\n\n    /**\n     * Turns music volume on or off\n     *\n     * @param  {HTMLElement} ref         volume icon to toggle\n     * @param  {boolean} isMuted         on or off\n     */\n    public toggleSound(ref: HTMLElement, isMuted: boolean) {\n        if (isMuted) {\n            ref.setAttribute('title', 'enable sound');\n            ref.classList.remove('fa-volume-up');\n            ref.classList.add('fa-volume-off');\n        } else {\n            ref.setAttribute('title', 'mute sound');\n            ref.classList.remove('fa-volume-off');\n            ref.classList.add('fa-volume-up');\n        }\n        this.audioElement.muted = isMuted;\n    }\n\n    /**\n     * Restore position of timeline & mute preferences on reloads\n     */\n    public initTimeline() {\n        // jump to last position on timeline for local development reloading\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const newLocal = this;\n        const jumpTo = Number(localStorage.getItem('lastTime'));\n\n        // poll for mod player since library does not use promises\n        if ((window as any).libopenmpt) {\n            (function poll() {\n                // check if mod was loaded then seek\n                if ((window as any).modulePtr) {\n\n                    // openmpt does not support volume control or muting\n                    document.getElementById('ticker_volume').style.display = 'none';\n                    newLocal.updateRange(newLocal.audioElement.duration);\n                    newLocal.seek(jumpTo);\n                    return;\n                }\n                setTimeout(poll, 150);\n            })();\n        } else {\n            newLocal.audioElement.onloadedmetadata = function () {\n                newLocal.updateRange(newLocal.audioElement.duration);\n            };\n            newLocal.seek(jumpTo);\n        }\n\n        // remember last sound preferences\n        const isMuted = localStorage.getItem('soundToggle') === 'true';\n        this.toggleSound(document.getElementById('ticker_volume'), isMuted);\n    }\n\n    /**\n     * Set timeline slider max range\n     *\n     * @param  {number} value         length time in seconds\n     */\n    private updateRange(value: number) {\n        (document.getElementById(\"timeline\") as HTMLInputElement).max = String(Math.floor(value) * 1000);\n    }\n\n    /*\n    // todo: add effect # markers to timeline\n    fetch(rocketData.default).then(response => response.text())\n        .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\n        .then(data => {\n            const tracks: Element[] = Array.from(data.documentElement.getElementsByTagName(\"track\"));\n            tracks.forEach((element) => {\n                if (element.getAttribute(\"name\") === 'effect') {\n                    const keys: Element[] = Array.from(element.getElementsByTagName(\"key\"));\n                    keys.forEach((elementKey) => {\n                        const p = document.createElement(\"option\");\n                        const value = elementKey.getAttribute('row').valueOf();\n                        const label = elementKey.getAttribute('value').valueOf();\n\n                        // remap rows to a range between 0 and 1000\n                        const newValue = Utils.map(Number(label), 0, 1520, 0, 1000);\n\n                        p.value = value;\n                        p.label = label;\n                        // this.tickmarkRef.appendChild(p);\n                    })\n                }\n            });\n        });\n        */\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math\";\nimport { Interpolator } from \"../math/Interpolator\";\nimport { Texture } from \"../texture\";\n\nexport class LensFlare {\n\n    public static drawLensFlare(framebuffer: Framebuffer, screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < framebuffer.width &&\n            pos.y > 0 && pos.y < framebuffer.height &&\n            framebuffer.wBuffer[pos.x + (pos.y * framebuffer.width)] > (1 / pos.z)) {\n            if (!framebuffer.lensFlareVisible) {\n                framebuffer.lensFlareVisible = true;\n                framebuffer.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (framebuffer.lensFlareVisible) {\n                framebuffer.lensFlareVisible = false;\n                framebuffer.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = Interpolator.interpolate(framebuffer.lensFlareStart, framebuffer.lensFlareStart + 100, elapsedTime);\n        if (framebuffer.lensFlareVisible !== true) {\n            scale *= (1 - Interpolator.interpolate(framebuffer.lensFlareEnd, framebuffer.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(framebuffer.width / 2, framebuffer.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                framebuffer.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        framebuffer.drawScaledTextureClipBi(0, 0, framebuffer.width, framebuffer.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","(function (window) {\n\n    if (!window.JSRocket) {\n        window.JSRocket = {};\n    }\n    JSRocket.SyncData = function () {\n\n        \"use strict\";\n\n        var _track = [];\n\n        function getTrack(index) {\n            return _track[index];\n        }\n\n        function getIndexForName(name) {\n            for (var i = 0; i < _track.length; i++) {\n\n                if (_track[i].name === name) {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n\n        function getTrackLength() {\n            return _track.length;\n        }\n\n        function createIndex(varName) {\n            var track = new JSRocket.Track();\n            track.name = varName;\n\n            _track.push(track);\n        }\n\n        return {\n            getTrack: getTrack,\n            getIndexForName: getIndexForName,\n            getTrackLength: getTrackLength,\n            createIndex: createIndex\n        };\n    };\n    JSRocket.Track = function () {\n\n        \"use strict\";\n\n        var STEP = 0,\n            LINEAR = 1,\n            SMOOTH = 2,\n            RAMP = 3;\n\n        var data = [];\n\n        function findKeyIndex(keys, row) {\n            var lo = 0, hi = keys.length;\n            while (lo < hi) {\n                var mi = ((hi + lo) / 2) | 0;\n\n                if (keys[mi] < row) {\n                    lo = mi + 1;\n                } else if (keys[mi] > row) {\n                    hi = mi;\n                } else {\n                    return mi;\n                }\n            }\n            return lo - 1;\n        }\n\n        function getValue(row) {\n            var keys = Object.keys(data);\n\n            if (!keys.length) {\n                return 0.0;\n            }\n\n            var idx = findKeyIndex(keys, Math.floor(row));\n            if (idx < 0) {\n                return data[keys[0]].value;\n            }\n            if (idx > keys.length - 2) {\n                return data[keys[keys.length - 1]].value;\n            }\n\n            // lookup keys and values\n            var k0 = keys[idx], k1 = keys[idx + 1];\n            var a = data[k0].value;\n            var b = data[k1].value;\n\n            // interpolate\n            var t = (row - k0) / (k1 - k0);\n            switch (data[k0].interpolation) {\n                case 0:\n                    return a;\n                case 1:\n                    return a + (b - a) * t;\n                case 2:\n                    return a + (b - a) * t * t * (3 - 2 * t);\n                case 3:\n                    return a + (b - a) * Math.pow(t, 2.0);\n            }\n        }\n\n        function add(row, value, interpolation) {\n            data[row] = {\n                \"value\": value,\n                \"interpolation\": interpolation\n            };\n        }\n\n        function remove(row) {\n            delete data[row];\n        }\n\n        return {\n            getValue: getValue,\n            add: add,\n            remove: remove\n        };\n    };\n    JSRocket.SyncDevicePlayer = function (cfg) {\n\n        \"use strict\";\n\n        var _urlRequest,\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'error': function () {\n                }\n            };\n\n        function load(url) {\n\n            _urlRequest = new XMLHttpRequest();\n\n            if (_urlRequest === null) {\n                _eventHandler.error();\n                return;\n            }\n\n            _urlRequest.open('GET', url, true);\n            _urlRequest.onreadystatechange = urlRequestHandler;\n\n            _urlRequest.send();\n        }\n\n        function urlRequestHandler() {\n\n            if (_urlRequest.readyState === 4) {\n                if (_urlRequest.status < 300) {\n                    readXML(_urlRequest.responseText);\n                } else {\n                    _eventHandler.error();\n                }\n            }\n        }\n\n        function readXML(xmlString) {\n            var key,\n                t = 0, tLen, k = 0, kLen,\n                xml = (new DOMParser()).parseFromString(xmlString, 'text/xml'),\n                tracks = xml.getElementsByTagName('tracks');\n\n            //<tracks>\n            var trackList = tracks[0].getElementsByTagName('track');\n\n            for (t, tLen = trackList.length; t < tLen; t++) {\n\n                var track = getTrack(trackList[t].getAttribute('name')),\n                    keyList = trackList[t].getElementsByTagName('key');\n\n                for (k = 0, kLen = keyList.length; k < kLen; k++) {\n                    key = keyList[k];\n                    track.add(parseInt(key.getAttribute('row'), 10),\n                        parseFloat(key.getAttribute('value')),\n                        parseInt(key.getAttribute('interpolation'), 10));\n\n                }\n            }\n\n            _eventHandler.ready();\n        }\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        function nop() {\n\n        }\n\n        if (cfg.rocketXML === \"\" || cfg.rocketXML === undefined || cfg.rocketXML === undefined) {\n            throw (\"[jsRocket] rocketXML is not set, try _syncDevice.setConfig({'rocketXML':'url/To/RocketXML.rocket'})\");\n        } else {\n            load(cfg.rocketXML);\n        }\n\n        return {\n            load: load,\n            getTrack: getTrack,\n            update: nop,\n            on: setEvent\n        };\n    };\n    JSRocket.SyncDeviceClient = function (cfg) {\n\n        \"use strict\";\n\n        var CMD_SET_KEY = 0,\n            CMD_DELETE_KEY = 1,\n            CMD_GET_TRACK = 2,\n            CMD_SET_ROW = 3,\n            CMD_PAUSE = 4,\n            CMD_SAVE_TRACKS = 5;\n\n        var _ws = new WebSocket(cfg.socketURL),\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                },\n                'save': function () {\n                }\n            };\n\n        function onOpen() {\n\n            _ws.binaryType = \"arraybuffer\";\n            _ws.send('hello, synctracker!');\n        }\n\n        function onMessage(e) {\n\n            var queue = (new Uint8Array(e.data)),\n                cmd = queue[0],\n                track, row, value, interpolation;\n\n            //Handshake\n            if (cmd === 104) {\n\n                _eventHandler.ready();\n\n                //PAUSE\n            } else if (CMD_PAUSE === cmd) {\n\n                if (queue[1] === 1) {\n                    _eventHandler.pause();\n                } else {\n                    _eventHandler.play();\n                }\n\n                //SET_ROW\n            } else if (CMD_SET_ROW === cmd) {\n\n                row = toInt(queue.subarray(1, 5));\n\n                _eventHandler.update(row);\n\n                //SET_KEY\n            } else if (CMD_SET_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                //value = Math.round(toFloat(queue.subarray(9, 13)) * 100) / 100; //round to what's seen in Rocket tracks\n                value = toFloat(queue.subarray(9, 13)); //use the values you see in Rocket statusbar\n\n                interpolation = toInt(queue.subarray(13, 14));\n                _syncData.getTrack(track).add(row, value, interpolation);\n\n                //DELETE\n            } else if (CMD_DELETE_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                _syncData.getTrack(track).remove(row);\n\n                //SAVE\n            } else if (CMD_SAVE_TRACKS === cmd) {\n                _eventHandler.save();\n            }\n        }\n\n        function onClose(e) {\n            console.warn(\">> connection closed\", e);\n        }\n\n        function onError(e) {\n            console.error(\">> connection error'd\", e);\n        }\n\n        _ws.onopen = onOpen;\n        _ws.onmessage = onMessage;\n        _ws.onclose = onClose;\n        _ws.onerror = onError;\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            var utf8Name = encodeURIComponent(name).replace(/%([\\dA-F]{2})/g, function (m, c) {\n                return String.fromCharCode('0x' + c);\n            });\n            var message = [CMD_GET_TRACK,\n                (utf8Name.length >> 24) & 0xFF, (utf8Name.length >> 16) & 0xFF,\n                (utf8Name.length >> 8) & 0xFF, (utf8Name.length) & 0xFF];\n\n            for (var i = 0; i < utf8Name.length; i++) {\n                message.push(utf8Name.charCodeAt(i));\n            }\n\n            _ws.send(new Uint8Array(message).buffer);\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setRow(row) {\n\n            var streamInt = [(row >> 24) & 0xFF,\n            (row >> 16) & 0xFF,\n            (row >> 8) & 0xFF,\n            (row) & 0xFF];\n\n            _ws.send(new Uint8Array([CMD_SET_ROW, streamInt[0], streamInt[1], streamInt[2], streamInt[3]]).buffer);\n        }\n\n        function toInt(arr) {\n\n            var i = 0,\n                view = new DataView(new ArrayBuffer(arr.length));\n\n            for (; i < arr.length; i++) {\n                view.setUint8(i, arr[i]);\n            }\n\n            if (view.byteLength === 1) {\n                return view.getInt8(0);\n            } else {\n                return view.getInt32(0);\n            }\n        }\n\n        function toFloat(arr) {\n            var view = new DataView(new ArrayBuffer(4));\n            view.setUint8(0, arr[0]);\n            view.setUint8(1, arr[1]);\n            view.setUint8(2, arr[2]);\n            view.setUint8(3, arr[3]);\n\n            return view.getFloat32(0);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            getTrack: getTrack,\n            update: setRow,\n            on: setEvent\n        };\n    };\n\n    JSRocket.SyncDevice = function () {\n\n        \"use strict\";\n\n        var _connected = false,\n            _device,\n            _previousIntRow,\n            _config = {\n                \"socketURL\": \"ws://localhost:1339\",\n                \"rocketXML\": \"\"\n            },\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                }\n            };\n\n        function init(mode) {\n            if (mode === \"demo\") {\n                _device = new JSRocket.SyncDevicePlayer(_config);\n            } else {\n                _device = new JSRocket.SyncDeviceClient(_config);\n            }\n\n            _device.on('ready', deviceReady);\n            _device.on('update', deviceUpdate);\n            _device.on('play', devicePlay);\n            _device.on('pause', devicePause);\n        }\n\n        function getConfig() {\n            return _config;\n        }\n\n        function setConfig(cfg) {\n            for (var option in cfg) {\n                if (cfg.hasOwnProperty(option)) {\n                    _config[option] = cfg[option];\n                }\n            }\n\n            return _config;\n        }\n\n        function deviceReady() {\n            _connected = true;\n            _eventHandler.ready();\n        }\n\n        function deviceUpdate(row) {\n            _eventHandler.update(row);\n        }\n\n        function devicePlay() {\n            _eventHandler.play();\n        }\n\n        function devicePause() {\n            _eventHandler.pause();\n        }\n\n        function getTrack(name) {\n            if (_connected) {\n                return _device.getTrack(name);\n            } else {\n                return null;\n            }\n        }\n\n        function update(row) {\n            //no need to update rocket on float rows\n            if (Math.floor(row) !== _previousIntRow) {\n                _previousIntRow = Math.floor(row);\n                _device.update(_previousIntRow);\n            }\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            init: init,\n            setConfig: setConfig,\n            getConfig: getConfig,\n            getTrack: getTrack,\n            update: update,\n            on: setEvent\n        };\n    };\n\n})(window);\n\n","/* Trivial player for formats that the browser supports natively through the <audio> element,\nsuch as MP3 and OGG */\n\nCowbell.Player.Audio = function() {\n\tthis.Track = function(url) {\n\t\tthis.open = function() {\n\t\t\tvar audio = document.createElement('audio');\n\t\t\taudio.src = url;\n\t\t\tdocument.body.appendChild(audio);\n\n\t\t\treturn audio;\n\t\t};\n\t};\n};\n","window.Cowbell = {\n\t'UI': {},\n\t'Player': {},\n\t'Common': {}\n};\n\nwindow.Cowbell.createPlayer = function(containerElement, opts) {\n\tif (!opts) opts = {};\n\n\tif (typeof(containerElement) == 'string') {\n\t\tcontainerElement = document.getElementById(containerElement);\n\t}\n\n\tvar uiConstructor = opts.ui || Cowbell.UI.Basic;\n\tvar ui = new uiConstructor(containerElement);\n\n\tif (opts.player) {\n\t\tvar player = new opts.player(opts.playerOpts);\n\n\t\tif (opts.url) {\n\t\t\tvar track = new player.Track(opts.url, opts.trackOpts);\n\t\t\tui.open(track);\n\t\t}\n\t}\n\n\treturn ui;\n};\n\nif (window.jQuery) {\n\twindow.jQuery.fn.cowbell = function(opts) {\n\t\tthis.each(function() {\n\t\t\tCowbell.createPlayer(this, opts);\n\t\t});\n\t};\n}\n","/* Player for module formats supported by libopenmpt */\n\n(function() {\n\tfunction OpenMPTGenerator(url, audioCtx, playerOpts, trackOpts) {\n\t\tvar modulePtr, leftBufferPtr, rightBufferPtr;\n\t\tvar maxFramesPerChunk = 4096;\n\t\tvar self = this;\n\t\tif (!playerOpts) playerOpts = {};\n\t\tif (!trackOpts) trackOpts = {};\n\n\t\tfunction initModule(data) {\n\t\t\tvar byteArray = new Int8Array(data);\n\t\t\tvar ptrToFile = libopenmpt._malloc(byteArray.byteLength);\n\t\t\tlibopenmpt.HEAPU8.set(byteArray, ptrToFile);\n\n\t\t\tmodulePtr = libopenmpt._openmpt_module_create_from_memory(ptrToFile, byteArray.byteLength, 0, 0, 0);\n            global.window.modulePtr = modulePtr;\n\t\t\tleftBufferPtr  = libopenmpt._malloc(4 * maxFramesPerChunk);\n\t\t\trightBufferPtr = libopenmpt._malloc(4 * maxFramesPerChunk);\n\n\t\t\tfunction asciiToStack(str) {\n\t\t\t\tvar stackStr = stackAlloc(str.length + 1);\n\t\t\t\twriteAsciiToMemory(str, stackStr);\n\t\t\t\treturn stackStr;\n\t\t\t}\n\t\t\tvar stack = stackSave();\n\t\t\tlibopenmpt._openmpt_module_ctl_set(modulePtr, asciiToStack('render.resampler.emulate_amiga'), asciiToStack('1')); // enable Amiga resampler\n\t\t\tlibopenmpt._openmpt_module_ctl_set(modulePtr, asciiToStack('render.resampler.emulate_amiga_type'), asciiToStack('a1200')); // set emulated Amiga model to A1200\n\t\t\tstackRestore(stack);\n\n\t\t\tself.duration = libopenmpt._openmpt_module_get_duration_seconds(modulePtr);\n\t\t}\n\n\t\tfunction ensureLibOpenMPT(onReady) {\n\t\t\tif (!playerOpts.pathToLibOpenMPT) {\n\t\t\t\tthrow \"pathToLibOpenMPT not specified\";\n\t\t\t}\n\n\t\t\tif (window.libopenmpt && window.libopenmpt._openmpt_module_create_from_memory) {\n\t\t\t\t/* libopenmpt already loaded */\n\t\t\t\tonReady();\n\t\t\t} else {\n\t\t\t\t/* load libopenmpt via <script> tag injection */\n\t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n\t\t\t\tvar script = document.createElement(\"script\");\n\t\t\t\tscript.src = playerOpts.pathToLibOpenMPT;\n\n\t\t\t\twindow.libopenmpt = {\n\t\t\t\t\tonRuntimeInitialized: function() {\n\t\t\t\t\t\tonReady();\n\t\t\t\t\t\thead.removeChild(script);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\thead.appendChild(script);\n\t\t\t}\n\t\t}\n\n\t\tthis.cleanup = function() {\n\t\t\tif (modulePtr) {\n\t\t\t\tlibopenmpt._openmpt_module_destroy(modulePtr);\n\t\t\t}\n\t\t\tif (leftBufferPtr) {\n\t\t\t\tlibopenmpt._free(leftBufferPtr);\n\t\t\t}\n\t\t\tif (rightBufferPtr) {\n\t\t\t\tlibopenmpt._free(rightBufferPtr);\n\t\t\t}\n\t\t};\n\n\t\tthis.load = function(onReady) {\n\t\t\tvar self = this;\n\t\t\tensureLibOpenMPT(function() {\n\t\t\t\tself.channelCount = 2;\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.addEventListener('error', function(e) {\n\t\t\t\t\tconsole.log('XHR error', e);\n\t\t\t\t});\n\n\t\t\t\trequest.addEventListener('load', function(e) {\n\t\t\t\t\tdata = request.response;\n\t\t\t\t\tinitModule(data);\n\t\t\t\t\tonReady();\n\t\t\t\t});\n\n\t\t\t\t/* trigger XHR */\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.responseType = \"arraybuffer\";\n\t\t\t\trequest.send();\n\t\t\t});\n\t\t};\n\n\t\tthis.generateAudio = function(outputBuffer) {\n\t\t\tvar outputL = outputBuffer.getChannelData(0);\n\t\t\tvar outputR = outputBuffer.getChannelData(1);\n\t\t\tvar framesToRender = outputBuffer.length;\n\n\t\t\tvar framesRendered = 0;\n\t\t\tvar ended = false;\n\t\t\twhile (framesToRender > 0) {\n\t\t\t\tvar framesPerChunk = Math.min(framesToRender, maxFramesPerChunk);\n\t\t\t\tvar actualFramesPerChunk = libopenmpt._openmpt_module_read_float_stereo(modulePtr, audioCtx.sampleRate, framesPerChunk, leftBufferPtr, rightBufferPtr);\n\t\t\t\tvar rawAudioLeft = libopenmpt.HEAPF32.subarray(leftBufferPtr / 4, leftBufferPtr / 4 + actualFramesPerChunk);\n\t\t\t\tvar rawAudioRight = libopenmpt.HEAPF32.subarray(rightBufferPtr / 4, rightBufferPtr / 4 + actualFramesPerChunk);\n\t\t\t\tfor (var i = 0; i < actualFramesPerChunk; ++i) {\n\t\t\t\t\toutputL[framesRendered + i] = rawAudioLeft[i];\n\t\t\t\t\toutputR[framesRendered + i] = rawAudioRight[i];\n\t\t\t\t}\n\t\t\t\tframesToRender -= actualFramesPerChunk;\n\t\t\t\tframesRendered += actualFramesPerChunk;\n\t\t\t\tif (actualFramesPerChunk < framesPerChunk) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn framesRendered;\n\t\t};\n\n\t\tthis.seekable = true;\n\n\t\tthis.seek = function(position) {\n\t\t\tlibopenmpt._openmpt_module_set_position_seconds(modulePtr, position);\n\t\t};\n\n\t\tthis.reset = function() {\n\t\t\tthis.seek(0);\n\t\t}\n\t}\n\tCowbell.Player.OpenMPT = function(opts) {\n\t\treturn new Cowbell.Common.WebAudioPlayer(OpenMPTGenerator, opts);\n\t};\n})();\n","/*\nWrapper to allow Web Audio createScriptProcessor-based player routines to expose\na subset of the HTML5 Media Element API.\n\nThis wrapper handles the details of buffering, pausing, and keeping track of current play time.\nInner routines only need to implement a simple 'generator' API consisting of filling a buffer\nwith audio data, and seeking to a specified time.\n*/\n\n(function () {\n    var audioCtx;\n    Cowbell.Common.WebAudioPlayer = function (generatorConstructor, playerOpts) {\n        this.Track = function (url, trackOpts) {\n            var generator;\n\n            this.open = function () {\n                var self = {};\n\n                if (!audioCtx) {\n                    var AudioContext = window.AudioContext || window.webkitAudioContext;\n                    audioCtx = new AudioContext({\n                        latencyHint: \"playback\",\n                        sampleRate: 22050\n                      });\n                }\n\n                var BUFFER_SIZE = 4096;\n\n                self.HAVE_NOTHING = 0;\n                self.HAVE_METADATA = 1;\n                self.HAVE_CURRENT_DATA = 2;\n                self.HAVE_FUTURE_DATA = 3;\n                self.HAVE_ENOUGH_DATA = 4;\n                self.readyState = self.HAVE_NOTHING;\n\n                generator = new generatorConstructor(url, audioCtx, playerOpts, trackOpts);\n                var generatorIsReady = false;\n                var playWasRequestedBeforeReady = false;\n                var scriptNode;\n\n                var hasStartedProcessing = false;\n                var playFromTime = 0;\n                var playStartTimestamp;\n                self.paused = true;\n\n                generator.load(function () {\n                    generatorIsReady = true;\n                    self.readyState = self.HAVE_ENOUGH_DATA;\n                    self.duration = generator.duration;\n                    if (generator.seekable) {\n                        self.seekable = {\n                            'length': 1,\n                            'start': function (i) {\n                                if (i !== 0) throw \"Out of range\";\n                                return 0;\n                            },\n                            'end': function (i) {\n                                if (i !== 0) throw \"Out of range\";\n                                return generator.duration;\n                            }\n                        };\n                    } else {\n                        self.seekable = {\n                            'length': 0,\n                            'start': function (i) {\n                                throw \"Out of range\";\n                            },\n                            'end': function (i) {\n                                throw \"Out of range\";\n                            }\n                        };\n                    }\n                    seek(0);\n                    if (self.onloadedmetadata) self.onloadedmetadata();\n                    if (playWasRequestedBeforeReady) self.play();\n                });\n\n                function seek(newTime) {\n                    if (scriptNode) scriptNode.disconnect(0);\n                    if (newTime > 0) {\n                        generator.seek(newTime);\n                    } else {\n                        generator.reset();\n                    }\n                    playFromTime = newTime;\n                    hasStartedProcessing = false;\n                    scriptNode = audioCtx.createScriptProcessor(BUFFER_SIZE, 0, generator.channelCount);\n                    scriptNode.onaudioprocess = generateAudio;\n                    if (!self.paused) {\n                        self.paused = true;\n                        self.play();\n                    }\n                }\n\n                function generateAudio(event) {\n                    if (!hasStartedProcessing) {\n                        playStartTimestamp = event.playbackTime;\n                        hasStartedProcessing = true;\n                    }\n\n                    var generatedLength = generator.generateAudio(event.outputBuffer);\n\n                    if (generatedLength < event.outputBuffer.length) {\n                        /* generate silence for the remainder of the buffer */\n                        for (var chan = 0; chan < event.outputBuffer.numberOfChannels; chan++) {\n                            var channelData = event.outputBuffer.getChannelData(chan);\n                            for (var i = generatedLength; i < event.outputBuffer.length; i++) {\n                                channelData[i] = 0;\n                            }\n                        }\n\n                        if (self.currentTime > self.duration) {\n                            /* we've finished playing (not just generating) the audio */\n                            self.pause();\n                            if (self.onended) self.onended();\n                            seek(0);\n                        }\n                    }\n\n                    if (self.ontimeupdate) self.ontimeupdate();\n                }\n\n                self.play = function () {\n                    if (!generatorIsReady) {\n                        playWasRequestedBeforeReady = true;\n                        return;\n                    }\n                    if (self.paused) {\n                        scriptNode.connect(audioCtx.destination);\n                        self.paused = false;\n                        // If an AudioContext is created prior to the document receiving a user gesture, \n                        // it will be created in the \"suspended\" state, and you will need to call resume() \n                        // after a user gesture is received.\n                        if (audioCtx.state === 'suspended') { audioCtx.resume() };\n                        if (self.onplay) self.onplay();\n\n                        if (hasStartedProcessing) {\n                            playStartTimestamp = audioCtx.currentTime;\n                            playFromTime = pausedAtTrackTime;\n                        }\n                    }\n                };\n\n                self.pause = function () {\n                    if (!self.paused) {\n                        pausedAtTimestamp = audioCtx.currentTime;\n                        pausedAtTrackTime = self.currentTime;\n\n                        scriptNode.disconnect(0);\n                        self.paused = true;\n                        if (self.onpause) self.onpause();\n                    }\n                };\n\n\n                /*\n                hasStartedProcessing = false && self.paused = true  =>  initial state\n                hasStartedProcessing = false && self.paused = false  =>  the instant we just called play()\n                hasStartedProcessing = true && self.paused = false  =>\n                    ready to play if currentTime < playStartTimestamp; playing if currentTime >= playStartTimestamp\n                hasStartedProcessing = true && self.paused = true  => paused\n                */\n\n                self.__defineGetter__('currentTime', function () {\n                    if (!hasStartedProcessing) return playFromTime;\n                    if (self.paused) return pausedAtTrackTime;\n                    if (audioCtx.currentTime < playStartTimestamp) return playFromTime;\n                    return playFromTime + audioCtx.currentTime - playStartTimestamp;\n                });\n\n                self.__defineSetter__('currentTime', function (newTime) {\n                    if (generator.seekable || newTime === 0) {\n                        seek(newTime);\n                    }\n                });\n\n                return self;\n            };\n            this.close = function () {\n                if (generator && generator.cleanup) {\n                    generator.cleanup();\n                }\n            };\n        };\n    };\n})();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { DemoScene } from './DemoScene';\n\nclass Application {\n\n    // HD Resolution 1920 x 1080\n    public static readonly CANVAS_WIDTH = 1920 / 5;\n    public static readonly CANVAS_HEIGHT = 1080 / 5;\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(Application.CANVAS_WIDTH, Application.CANVAS_HEIGHT, new DemoScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["f","module","exports","e","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","this","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","v","m","n","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","id","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","event","FullscreenUtils","toggleFullscreen","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","floor","roundedY","percent","abs","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","theta","phi","Vector4f","seed","back","down","front","left","right","up","Promise","all","TextureUtils","load","setClamp","draw","mv","setFramebuffer","drawSkyBox","getRotation","rotation","sclae","textures","skyBoxSideModel","skyPoints","map","uv","TextureCoordinate","faces","vertices","setModelViewMatrix","position","projection","keyFrames","setKeyFrames","getViewMatrix","first","zero","second","third","fraction","Utils","CubicInterpolate","look","EulerAngleCamera","blenderScene","invert","object","normals","normalize","n1","n2","n3","obj","transformedNormals","transformedPoints","file","disp","coords","ComputationalGeometryUtils","computeBoundingSphere","normals2","boundingSphere","name","json","currentObject","normalCount","vertexCount","uvCount","normalOffset","vertexOffset","uvOffset","toString","split","line","startsWith","Mesh","console","error","Error","Vector","Number","parseFloat","TexCoord","Face","drawScaledTextureClip","frame","filename","fetch","response","JSON","parse","cameraPath","CameraPath","keys","myFrame","CameraFrame","location","frames","CameraKeyFrame","rx","ry","rz","constructZRotationMatrix","translation","getPosition","sub","num","_start","_end","_length","isEmpty","insertStart","node","next","previous","insertEnd","insert","currentNode","deleteStart","deleteEnd","delete","getNode","toArray","array","_data","_next","_previous","input","value","istart","istop","ostart","ostop","random","srcPosition","dst","dstPosition","slice","prototype","splice","apply","concat","fade","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","y0","y2","y3","mu","mu2","a0","AbstractCube","AbstractScene","blurred","accumulationBuffer","renderingPipeline","GouraudShadingRenderingPipeline","BlenderLoader","mesh","generateProceduralNoise","drawBlenderScene2","texture3","model","BakedLighting","skyBox","baked","blenderObj8","SkyBox","loadWithTexture","drawBlenderScene7","drawMeshArray","BlenderCameraScene","texture4","fpsStartTime","fpsCount","fps","meshes","path","light1","light2","cameraAnimator","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","setLights","WavefrontLoader","CameraLoader","BlenderCameraAnimator","computeFps","currentTime","timeInput","BlockFade","ledTexture","transitionFramebufferTo","transitionCircle","transitionWipe","croud","prevMask","curMask","diff","noiseMask","croudMask","particleArray","c3","drawCircle","initDissolve","textureBackground","createCroud","isBackground","bias","xbase","ybase","xnoise","ynoise","pn","PerlinNoise","curBias","_gray","dissolve","renderBuffer","renderBuffer2","particle","Particle","_color","it","addColor","putpixel","x0","radius","blockFade","transition","transitionSceneFrom","transitionSceneTo","transitionMethod","transitionValue","trunc","TransitionMethods","BLOCKFADE","CROSSFADE","crossFade","DISSOLVE","FADEIN","fadeIn","FADEOUT","fadeOut","WIPE_LEFT","crossFadeImage","CIRCLE","pixelArray","pixelArrayWidth","blockWidth","horizontalUnits","verticalUnits","fadeArray","blend","transitionImage","clamp","startColor","endColor","renderScanlines","shiftAmount","offRed","offGreen","offBlue","strips","verticalPosition","imagePixelR","imagePixelG","imagePixelB","_x","_y","dx","dy","TTL","isLiving","CubeScene","cubeMesh","Cube","fairlight","renderCube","getMesh","getModelViewMatrix","renderBackground","soundManager","canvasRecorder","sceneList","nodeInstance","stats","canvasRef","timelineRef","sceneRef","timeRef","SoundManager","DoublyLinkedList","initControls","allProgress","loadMusic","prepareSync","plug","initScene","outputX","args","constructorName","Object","newNode","DLNode","CanvasRecorder","initTimeline","initStats","tickerPlayRef","tickerStopRef","tickerNextRef","tickerBackRef","tickerRecordRef","tickerScreenshotRef","tickerVolumeRef","onPause","seek","classList","remove","recording","saveVideo","onPlay","recordVideo","isPlaying","setAttribute","toggleSound","audioElement","muted","localStorage","setItem","String","date","fileName","toISOString","toTimeString","replace","image","toDataURL","anchor","click","jump","musicProperties","timeSeconds","target","directionToScroll","deltaY","stopPropagation","passive","key","promises","progressCallback","Stats","statsObj","body","updateMusic","sceneData","effect","transitionType","timeMilliseconds","drawStats","syncDevice","connected","demoMode","innerText","toFixed","canvasRecordingOptions","audioTrack","getType","ext","fileExtension","includes","pop","createCanvasRecorder","options","link","frameRate","download","recorderOptions","mimeType","audioBitsPerSecond","videoBitsPerSecond","chunks","stream","captureStream","recorder","MediaRecorder","ondataavailable","onstop","blob","Blob","type","url","URL","createObjectURL","href","MouseEvent","dispatchEvent","setTimeout","revokeObjectURL","timeslice","stop","dispose","info","canvasObj","PlaneDeformationFloorScene","PlaneDeformationScene","MetalHeadzScene","DofBallsScene","TorusKnotTunnelScene","GearsScene","ParticleStreamsScene","HoodlumScene","TwisterScene","RazorScene","logo","SineScrollerScene","background","pizza","PlasmaScene","TorusScene","DistortedSphereScene","renderTransparent","RotoZoomerScene","VoxelBallsScene","LedPlasmaScene","heightmapSphere","env","createSphereDistplaced","shadingSphereEnvDisp2","createSphere","pointsA","divideSphere","point","find","findPoint","idx","indexOf","steps","vn1","vn2","vn3","newPoints","result","rot","norm","norm2","cross","sub2","cross2","add2","normalize2","normalMatrix","computeNormalMatrix","multiplyHomArr","vertex1","Vertex","vertex2","vertex3","vertexArray","clipConvexPolygon","drawTriangleDDA","particleTexture2","drawParticleTorus","computeDepthBlur","nearPlane","focalPlane","farPlane","depth","noClear","spriteNum","gearsMesh","FRONT","drawBlenderScene4","factor","dampFactor","lab2","spaceLabMesh","hoodlumLogoMesh","createProceduralTexture3","drawBlenderScene9","scale2","resolve","led","lineDirection","radialWaveCenter","difference","directionalWave","intensity","metalheadz","texture11","texture13","dirt","blenderObjMetal","computeCameraMovement","lensflareScreenSpace","LensFlare","drawLensFlare","generateProceduralParticleTexture","radius2","effectStyle","texturePath","mLUT","createLUT","effectWidth","effectHeight","textureWidth","textureHeight","Int32Array","bright","pow","elapsedTimeY","elapsedTimeX","pixelCount","o","adjustBrightness","currentPixel","drawOldPlaneDeformationFloor","drawOldPlaneDeformationStar","GRADIENTLEN","SWINGLEN","SWINGMAX","colorGrad","swingCurve","makeGradient","makeSwingCurve","drawPlasma","arrlen","maxval","halfmax","ni","cos256","amplitude","swing","gradient","swingT","swingY","swingYT","texture10","cube","dodecahedron","pyramid","icosahedron","Dodecahedron","Pyramid","Sphere","reproduceRazorScene","distance","yDisplacement","enableLighting","setColor","DARK_GRAY","constructShadowMatrix","logoTexture","drawRotoZoomer","yStepX","yStepY","xStepX","xStepY","texYCoord","texXCoord","texYCoordInner","texXCoordInner","framebufferPos","fontTexture","charToIndex","fonts","Map","addCharInex","drawText2","xFonts","asciiCode","has","get","sine","textOff","startW","endW","yDisp","char","texture2","fontRenderer","fontRenderer2","FontRenderer","drawStarField","myTime","waveSum","red","green","frambuffer","stars","stars2","DARK_BLUE","particleTexture","cocoon","torusKnot","TorusKnot","fog","LinearFog","setFog","generateProceduralParticleTexture2","torusTunnel","glitchScreen","glitchFactor","rng2","off","glIndex","torusFunction3","frame2","tangent","constructIdentityMatrix","m14","m24","m34","m11","m21","m31","m12","m22","m32","m13","m23","m33","finalMatrix","transpose","razorLogo","drawTitanEffect","shadingTorus","horizontalNum","verticalNum","backgroundTexture","x2","x3","x4","xPos","drawSpan","ypos","textureForwardDifference","hightlight","YELLOW","mat","xSteps","xsteps","zsteps","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","AbstractGeometricObject","super","ySteps","STEPS","sphereFunction","center","current","xScale","yScale","zScale","vector","m41","m42","m43","m44","setIdentityMatrix","inverseTranslation","scale1","scale3","inverseRotation","getInverseRotation","planePoint","planeNormal","lightPosition","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr2","multiplyArr","isInsidePositiveHalfSpace","getNormal","getDistance","getTran","perp","vec","scal","reci","mult","vec1","vec2","componentWiseMul","BlenderJsonParser","getBlenderScene","convertToMeshArray","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","colorSlope","setup","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","lights","material","lighting","clipper","projectedVertices","SutherlandHodgman2DClipper","Material","ambientColor","diffuseColor","specularColor","shininess","enable","setMaterial","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","S","projected","late","clippedPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","Fog","zStart","zEnd","fogColor","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","Light","emissiveColor","BPM","ROWS_PER_BEAT","ROW_RATE","row","JSRocket","SyncDevice","audioPlayer","toLowerCase","Cowbell","Player","OpenMPT","Audio","track","Track","open","setConfig","on","onSyncReady","newRow","onSyncUpdate","getTrack","snare","bass","isNaN","getValue","paused","duration","play","log","pause","direction","sceneLength","effectJump","parseInt","ref","isMuted","newLocal","jumpTo","getItem","libopenmpt","poll","modulePtr","updateRange","onloadedmetadata","screenPos","dir","maxWidth","maxHeight","getPixel","getBilinearFilteredPixel","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","transparency","Image","onload","onerror","withAlpha","conv","SyncData","_track","getIndexForName","getTrackLength","createIndex","varName","lo","hi","mi","findKeyIndex","k0","k1","interpolation","SyncDevicePlayer","cfg","_urlRequest","_syncData","_eventHandler","XMLHttpRequest","onreadystatechange","urlRequestHandler","send","readyState","status","xmlString","tLen","kLen","trackList","DOMParser","parseFromString","getElementsByTagName","keyList","ready","readXML","responseText","rocketXML","undefined","evt","handler","SyncDeviceClient","_ws","WebSocket","socketURL","toInt","arr","view","DataView","setUint8","byteLength","getInt8","getInt32","onopen","binaryType","onmessage","queue","Uint8Array","cmd","subarray","getFloat32","save","onclose","warn","utf8Name","encodeURIComponent","fromCharCode","message","buffer","streamInt","_device","_previousIntRow","_connected","_config","deviceReady","deviceUpdate","devicePlay","devicePause","mode","option","hasOwnProperty","getConfig","audio","createPlayer","containerElement","opts","ui","UI","Basic","player","playerOpts","trackOpts","jQuery","fn","cowbell","each","OpenMPTGenerator","audioCtx","leftBufferPtr","rightBufferPtr","initModule","byteArray","Int8Array","ptrToFile","_malloc","asciiToStack","str","stackStr","stackAlloc","writeAsciiToMemory","HEAPU8","_openmpt_module_create_from_memory","stack","stackSave","_openmpt_module_ctl_set","stackRestore","_openmpt_module_get_duration_seconds","cleanup","_openmpt_module_destroy","_free","onReady","pathToLibOpenMPT","head","script","onRuntimeInitialized","removeChild","ensureLibOpenMPT","channelCount","request","responseType","generateAudio","outputBuffer","outputL","getChannelData","outputR","framesToRender","framesRendered","framesPerChunk","actualFramesPerChunk","_openmpt_module_read_float_stereo","sampleRate","rawAudioLeft","HEAPF32","rawAudioRight","seekable","_openmpt_module_set_position_seconds","reset","Common","WebAudioPlayer","generatorConstructor","generator","AudioContext","webkitAudioContext","latencyHint","HAVE_NOTHING","HAVE_METADATA","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","scriptNode","playStartTimestamp","generatorIsReady","playWasRequestedBeforeReady","hasStartedProcessing","playFromTime","newTime","disconnect","createScriptProcessor","onaudioprocess","playbackTime","generatedLength","chan","numberOfChannels","channelData","onended","ontimeupdate","connect","destination","state","resume","onplay","pausedAtTrackTime","pausedAtTimestamp","onpause","__defineGetter__","__defineSetter__","close","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","globalThis","Function","scriptUrl","importScripts","currentScript","scripts","Application","Canvas","CANVAS_WIDTH","CANVAS_HEIGHT","DemoScene","main"],"sourceRoot":""}