{"version":3,"file":"demo.js","mappings":"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","sources":["webpack://aisa/./node_modules/stats.js/build/stats.min.js","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/SkyBox.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/animation/BlenderCameraAnimator.ts","webpack://aisa/./src/animation/CameraKeyFrame.ts","webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/blender/face.ts","webpack://aisa/./src/blender/mesh.ts","webpack://aisa/./src/blender/parseUtils.ts","webpack://aisa/./src/blender/tex-coord.ts","webpack://aisa/./src/blender/vector.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/CameraFrame.ts","webpack://aisa/./src/camera/CameraLoader.ts","webpack://aisa/./src/camera/CameraPath.ts","webpack://aisa/./src/camera/EulerAngleCamera.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/core/LinkedList.ts","webpack://aisa/./src/core/Node.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/examples/abstract-cube/AbstractCube.ts","webpack://aisa/./src/examples/baked-lighting/BakedLighting.ts","webpack://aisa/./src/examples/blender-camera-animation/BlenderCameraScene.ts","webpack://aisa/./src/examples/block-fade/BlockFade.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/demo/DemoScene.ts","webpack://aisa/./src/examples/demo/canvas-record.ts","webpack://aisa/./src/examples/demo/parts/Scene1.ts","webpack://aisa/./src/examples/demo/parts/Scene10.ts","webpack://aisa/./src/examples/demo/parts/Scene11.ts","webpack://aisa/./src/examples/demo/parts/Scene12.ts","webpack://aisa/./src/examples/demo/parts/Scene13.ts","webpack://aisa/./src/examples/demo/parts/Scene14.ts","webpack://aisa/./src/examples/demo/parts/Scene15.ts","webpack://aisa/./src/examples/demo/parts/Scene16.ts","webpack://aisa/./src/examples/demo/parts/Scene17.ts","webpack://aisa/./src/examples/demo/parts/Scene18.ts","webpack://aisa/./src/examples/demo/parts/Scene19.ts","webpack://aisa/./src/examples/demo/parts/Scene2.ts","webpack://aisa/./src/examples/demo/parts/Scene20.ts","webpack://aisa/./src/examples/demo/parts/Scene3.ts","webpack://aisa/./src/examples/demo/parts/Scene4.ts","webpack://aisa/./src/examples/demo/parts/Scene5.ts","webpack://aisa/./src/examples/demo/parts/Scene6.ts","webpack://aisa/./src/examples/demo/parts/Scene7.ts","webpack://aisa/./src/examples/demo/parts/Scene8.ts","webpack://aisa/./src/examples/demo/parts/Scene9.ts","webpack://aisa/./src/examples/distorted-sphere/DistortedSphereScene.ts","webpack://aisa/./src/examples/dof-balls/DofBallsScene.ts","webpack://aisa/./src/examples/gears/GearsScene.ts","webpack://aisa/./src/examples/hoodlum/HoodlumScene.ts","webpack://aisa/./src/examples/led-plasma/LedPlasmaScene.ts","webpack://aisa/./src/examples/metalheadz/MetalHeadzScene.ts","webpack://aisa/./src/examples/particle-streams/ParticleStreamsScene.ts","webpack://aisa/./src/examples/plane-deformation/PlaneDeformationScene.ts","webpack://aisa/./src/examples/plasma/PlasmaScene.ts","webpack://aisa/./src/examples/razor/RazorScene.ts","webpack://aisa/./src/examples/roto-zoomer/RotoZoomerScene.ts","webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/examples/sine-scroller/SineScrollerScene.ts","webpack://aisa/./src/examples/torus-knot-tunnel/TorusKnotTunnelScene.ts","webpack://aisa/./src/examples/torus/TorusScene.ts","webpack://aisa/./src/examples/twister/TwisterScene.ts","webpack://aisa/./src/examples/voxel-balls/VoxelBallsScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Dodecahedron.ts","webpack://aisa/./src/geometrical-objects/Pyramid.ts","webpack://aisa/./src/geometrical-objects/Sphere.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/geometrical-objects/TorusKnot.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/blender/BlenderLoader.ts","webpack://aisa/./src/model/wavefront-obj/WavefrontLoader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/fog/Fog.ts","webpack://aisa/./src/shading/fog/LinearFog.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/sound/MusicProperties.ts","webpack://aisa/./src/sound/SoundManager.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/./src/sound/JSRocket.js","webpack://aisa/./src/sound/cowbell/audio_player.js","webpack://aisa/./src/sound/cowbell/cowbell.js","webpack://aisa/./src/sound/cowbell/openmpt/openmpt_player.js","webpack://aisa/./src/sound/cowbell/web_audio_player.js","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/demo/Application.ts"],"sourcesContent":["// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n\n    /*\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n*/\n   /*\n\n*/\n\n\n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n     /*\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { Matrix4f, Vector4f } from './math';\nimport { Texture, TextureUtils } from './texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { TexturedMesh } from './rendering-pipelines/TexturedMesh';\n\nexport class SkyBox {\n\n    private back: Texture;\n    private down: Texture;\n    private front: Texture;\n    private left: Texture;\n    private right: Texture;\n    private up: Texture;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline = new TexturingRenderingPipeline(null);\n    public init(): Promise<any> {\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/skybox/skybox_back.png'), false).then(\n                (texture: Texture) => this.back = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_down.png'), false).then(\n                (texture: Texture) => this.down = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_front.png'), false).then(\n                (texture: Texture) => this.front = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_left.png'), false).then(\n                (texture: Texture) => this.left = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_right.png'), false).then(\n                (texture: Texture) => this.right = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_up.png'), false).then(\n                (texture: Texture) => this.up = texture\n            )]).then(() => {\n                this.back.setClamp(true);\n                this.down.setClamp(true);\n                this.front.setClamp(true);\n                this.left.setClamp(true);\n                this.right.setClamp(true);\n                this.up.setClamp(true);\n            });\n    }\n\n    // move code from framebuffer into draw method!\n    public draw(framebuffer: Framebuffer, mv: Matrix4f): void {\n    \n        this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n        this.drawSkyBox(framebuffer, mv.getRotation());\n    }\n\n    public drawSkyBox(framebuffer: Framebuffer, rotation: Matrix4f): void {\n        const sclae = 20;\n        const textures = [\n            this.back,\n            this.left,\n            this.front,\n            this.right\n        ];\n\n        let camera: Matrix4f;\n        let mv: Matrix4f;\n        let skyBoxSideModel: TexturedMesh;\n\n        const skyPoints = [\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, -1, -1, 1)\n        ];\n\n        for (let i = 0; i < 4; i++) {\n            camera =\n                rotation.multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI).multiplyMatrix(\n                        Matrix4f.constructYRotationMatrix(+ Math.PI * 2 / 4 * i)));\n\n\n            mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n\n            // skybox: starz\n            skyBoxSideModel = {\n                points: skyPoints,\n                points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n                uv: [\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                ],\n                faces: [\n                    {\n                        vertices: [0, 1, 2],\n                        uv: [0, 1, 2]\n                    },\n                    {\n                        vertices: [3, 4, 5],\n                        uv: [3, 4, 5]\n                    }\n                ]\n            };\n\n            framebuffer.setTexture(textures[i]);\n            this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n            this.texturedRenderingPipeline.setModelViewMatrix(mv);\n            this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n        }\n\n        camera = rotation.multiplyMatrix(\n            Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(0)\n                    .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 4 * 1).multiplyMatrix(Matrix4f.constructXRotationMatrix(-Math.PI * 2 / 4)))\n            );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.up);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n\n        camera =\n            rotation.multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(0)\n                        .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 2).multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI * 2 / 4)))\n\n                );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.down);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { EulerAngleCamera } from '../camera/EulerAngleCamera';\nimport { Utils } from '../core/Utils';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector3f } from '../math/Vector3f';\nimport { CameraKeyFrame } from './CameraKeyFrame';\n\nexport class BlenderCameraAnimator {\n\n    public pos: Vector3f;\n    private keyFrames: Array<CameraKeyFrame>;\n\n    // TODO:\n    // - should we really loop or better restart??\n    // - dont use linear interpolation see bourke\n    // - maybe quaternions and slerp for rotation\n    // temp solution: no linear for\n\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getViewMatrix(elapsedTime: number): Matrix4f {\n        const keyFrameDuration = 2600;\n\n        elapsedTime *= 1.0;\n\n        const first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        const zero = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        const second = (first + 1) % this.keyFrames.length;\n        const third = (first + 2) % this.keyFrames.length;\n        const fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        const mu2 = (1 - Math.cos(fraction * Math.PI)) / 2;\n        const position = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].position.x, this.keyFrames[first].position.x, this.keyFrames[second].position.x, this.keyFrames[third].position.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.y, this.keyFrames[first].position.y, this.keyFrames[second].position.y, this.keyFrames[third].position.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.z, this.keyFrames[first].position.z, this.keyFrames[second].position.z, this.keyFrames[third].position.z, fraction)\n        );\n        //let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\n\n        const look = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.x, this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x, this.keyFrames[third].rotation.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.y, this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y, this.keyFrames[third].rotation.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.z, this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z, this.keyFrames[third].rotation.z, fraction)\n        );\n        this.pos = position;\n\n        return new EulerAngleCamera(position, look.x, look.y, look.z).getViewMatrix();\n    }\n\n}\n\n","import { Vector3f } from '../math';\n\nexport class CameraKeyFrame {\n\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(position: Vector3f, rotation: Vector3f) {\n        this.position = position;\n        this.rotation = rotation;\n    }\n\n}","import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Face {\n    public vertices: Array<number>;\n    public normals: Array<number>;\n    public uv: Array<number>;\n}\n","import { Face } from './face';\nimport { TexCoord } from './tex-coord';\nimport { Vector } from './vector';\n\nexport class Mesh {\n\n    public name: string;\n    public vertices: Array<Vector>;\n    public normals: Array<Vector>;\n    public uv: Array<TexCoord>;\n    public faces: Array<Face>;\n\n}\n","import { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexCoord } from './tex-coord';\nimport { Face } from './face';\n\nexport function convertToMeshArray(data: string): Array<Mesh> {\n    const json: Array<Mesh> = new Array<Mesh>();\n\n    let currentObject: Mesh = null;\n\n    let normalCount: number = 0;\n    let vertexCount: number = 0;\n    let uvCount: number = 0;\n    let normalOffset: number = 0;\n    let vertexOffset: number = 0;\n    let uvOffset: number = 0;\n\n    data.toString().split('\\n').forEach((line: string) => {\n\n        if (line.startsWith('o ')) {\n            const coords: Array<string> = line.split(' ');\n\n            currentObject = new Mesh();\n            currentObject.name = coords[1];\n            currentObject.normals = [];\n            currentObject.vertices = [];\n            currentObject.faces = [];\n            currentObject.uv = []; // OPTIONAL\n\n            json.push(currentObject);\n            normalOffset = normalCount;\n            vertexOffset = vertexCount;\n            uvOffset = uvCount;\n        }\n\n        if (currentObject === null &&\n            (line.startsWith('v ') ||\n                line.startsWith('vn ') ||\n                line.startsWith('vt '))) {\n            console.error('Error: OBJ file does not contain Objects.');\n            throw Error();\n        }\n\n        if (line.startsWith('v ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const vertex: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.vertices.push(vertex);\n            vertexCount++;\n        }\n\n        if (line.startsWith('vn ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const normal: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.normals.push(normal);\n            normalCount++;\n        }\n\n        if (line.startsWith('vt ')) { // OPTIONAL\n            const coords: Array<string> = line.split(' ');\n\n            const uv: TexCoord = new TexCoord(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2])\n            );\n\n            currentObject.uv.push(uv);\n            uvCount++;\n        }\n\n        if (line.startsWith('f ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const face: Face = new Face();\n            face.vertices = [];\n            face.normals = [];\n            face.uv = [];\n\n            // vertex indices\n            face.vertices.push(Number(coords[1].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[2].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[3].split('/')[0]) - 1 - vertexOffset);\n\n            // uv indices OPTIONAL!\n            face.uv.push(Number(coords[1].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[2].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[3].split('/')[1]) - 1 - uvOffset);\n\n            // normal indices\n            face.normals.push(Number(coords[1].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[2].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[3].split('/')[2]) - 1 - normalOffset);\n\n            currentObject.faces.push(face);\n        }\n    });\n\n    return json;\n}\n","\nexport class TexCoord {\n\n    public u: number;\n    public v: number;\n\n    public constructor(u: number, v: number) {\n        this.u = u;\n        this.v = v;\n    }\n\n}\n","export class Vector {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\n\nexport class CameraFrame {\n    public frame: number;\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(frame: number, position: Vector3f, rotation: Vector3f) {\n        this.frame = frame;\n        this.position = position;\n        this.rotation = rotation;\n    }\n}\n","import { CameraKeyFrame } from '../animation/CameraKeyFrame';\nimport { Vector3f } from '../math';\nimport { CameraPath } from './CameraPath';\nimport { CameraFrame } from './CameraFrame';\n\nexport class CameraLoader {\n\n    public static load(filename: string): Promise<Array<CameraKeyFrame>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<CameraKeyFrame> => {\n\n            const json: any = JSON.parse(text);\n            const cameraPath: CameraPath = new CameraPath();\n            const keys = new Array<CameraKeyFrame>();\n\n            for (let i = 0; i < json.length; i++) {\n                const frame = json[i];\n\n                const myFrame = new CameraFrame(\n                    frame.frame,\n                    new Vector3f(\n                        frame.location[0],\n                        frame.location[1],\n                        frame.location[2]\n                    ),\n                    new Vector3f(\n                        frame.rotation[0],\n                        frame.rotation[1],\n                        frame.rotation[2]\n                    ));\n\n                cameraPath.frames.push(myFrame);\n                keys.push(new CameraKeyFrame(new Vector3f(\n                    frame.location[0],\n                    frame.location[2],\n                    -frame.location[1]\n                ),\n                    new Vector3f(\n                        frame.rotation[0] - 90 * 0.0174533,\n                        frame.rotation[2],\n                        frame.rotation[1]\n                    )));\n\n            }\n\n            return keys;\n        });\n    }\n\n}\n","import { CameraFrame } from './CameraFrame';\n\nexport class CameraPath {\n    public frames: Array<CameraFrame>;\n    constructor() {\n        this.frames = new Array<CameraFrame>();\n    }\n}\n\n","import { Matrix4f, Vector3f } from '../math';\n\nexport class EulerAngleCamera {\n\n    protected position: Vector3f;\n    protected rx: number;\n    protected ry: number;\n    protected rz: number;\n\n    constructor(position: Vector3f, rx: number, ry: number, rz: number) {\n        this.position = position;\n        this.rx = rx;\n        this.ry = ry;\n        this.rz = rz;\n    }\n\n    public getViewMatrix(): Matrix4f {\n        const rz = Matrix4f.constructZRotationMatrix(-this.rz);\n        const rx = Matrix4f.constructXRotationMatrix(-this.rx);\n        const ry = Matrix4f.constructYRotationMatrix(-this.ry);\n\n        const translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\n\n        return rx.multiplyMatrix(ry).multiplyMatrix(rz).multiplyMatrix(translation);\n    }\n\n    public getPosition(): Vector3f {\n        return this.position;\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { DLNode } from './Node';\n\n/**\n * Doubly Linked-List implementation class.\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n * https://github.com/DameLyngdoh/dl-doubly-linked-list-ts\n *\n */\nexport class DoublyLinkedList<T> {\n    /**\n     * The start node of the list.\n     */\n    private _start: DLNode<T> | null;\n\n    /**\n     * The last  node of the list.\n     */\n    private _end: DLNode<T> | null;\n\n    /**\n     * The number of nodes in the list.\n     */\n    private _length: number;\n\n    constructor() {\n        this._start = null;\n        this._end = null;\n        this._length = 0;\n    }\n\n    get start(): DLNode<T> | null {\n        return this._start;\n    }\n\n    set start(start: DLNode<T> | null) {\n        this._start = start;\n    }\n\n    get end(): DLNode<T> | null {\n        return this._end;\n    }\n\n    set end(end: DLNode<T> | null) {\n        this._end = end;\n    }\n\n    get length(): number {\n        return this._length + 1;\n    }\n\n    /**\n     * Returns true if the list is empty.\n     * @returns Returns true if list is empty or false otherwise.\n     */\n    public isEmpty(): boolean {\n        return this.length === 0;\n    }\n\n    /**\n     * Inserts a node to the start of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertStart(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.next = this.start;\n            if (this.start != null) {\n                this.start.previous = node;\n            }\n            this.start = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node to the end of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertEnd(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.previous = this.end;\n            if (this.end != null) {\n                this.end.next = node;\n            }\n            this.end = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node at the specified index in the list.\n     * @param node The node to be inserted to the list.\n     * @param index The index to insert the node at. A value of -1 will insert the node to the end of the list.\n     */\n    public insert(node: DLNode<T>, index: number): void {\n        if (index === 0) {\n            this.insertStart(node);\n            return;\n        }\n        else if (index === -1) {\n            this.insertEnd(node);\n            return;\n        }\n\n        let currentNode = this.start;\n        let i: number = 0;\n        for (i = 0; i < index - 1 && currentNode !== null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        // Insertion not possible\n        if (i !== index - 1 && currentNode === null) {\n            return;\n        }\n\n        if (currentNode != null) {\n            node.previous = currentNode;\n            node.next = currentNode.next;\n            if (currentNode.next != null) {\n                currentNode.next.previous = node;\n            }\n            else {\n                this.end = node;\n            }\n            currentNode.next = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Deletes the first node from the list.\n     */\n    public deleteStart(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.start != null && this.start.next == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.start != null) {\n            this.start = this.start.next;\n            if (this.start != null) {\n                this.start.previous = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes the last node from the list.\n     */\n    public deleteEnd(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.end != null && this.end.previous == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.end != null) {\n            this.end = this.end.previous;\n            if (this.end != null) {\n                this.end.next = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes a node from a specific index in the list. If the index is out of bounds, then no deletion will occur.\n     * @param index The index of the node to be deleted.\n     */\n    public delete(index: number): void {\n        if (this.isEmpty()) {\n            return;\n        }\n        if (index === 0) {\n            this.deleteStart();\n            return;\n        }\n        else if (index === -1) {\n            this.deleteEnd();\n            return;\n        }\n\n        const node = this.getNode(index);\n        if (node != null) {\n            if (node.next === null && node.previous !== null) {\n                this.deleteEnd();\n            }\n            else if (node.previous === null && node.next !== null) {\n                this.deleteStart();\n            }\n            else if (node.next !== null && node.previous !== null) {\n                node.previous.next = node.next;\n                node.next.previous = node.previous;\n                this._length--;\n            }\n        }\n    }\n\n    /**\n     * Retrieves a node from the specific index.\n     * @param index The index from which to retrieve the node.\n     * @returns Returns the node at the specific index or null if the index is out of bounds.\n     */\n    public getNode(index: number): DLNode<T> | null {\n        if (this.isEmpty() || index < 0) {\n            return null;\n        }\n\n        let currentNode = this.start;\n        for (let i = 1; i <= index && currentNode != null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        return currentNode;\n    }\n\n    /**\n     * Returns an array of the nodes in the order of the list.\n     * @returns Array of nodes.\n     */\n    public toArray(): Array<DLNode<T>> {\n        const array: Array<DLNode<T>> = new Array<DLNode<T>>();\n\n        if (this.length === 0) {\n            return array;\n        }\n\n        let i = 0;\n\n        let currentNode: DLNode<T> | null = this.start;\n        while (currentNode != null && i < 12) {\n            array.push(currentNode);\n            currentNode = currentNode.next;\n            i++;\n        }\n        return array;\n    }\n\n    /**\n     * Clears the list and deletes all nodes.\n     */\n    public clear(): void {\n        this.end = null;\n        this.start = null;\n        this._length = 0;\n    }\n}","/**\n * Node implementation class. A node is a vertex in the list which contains data and pointers to the next node and previous node.\n */\nexport class DLNode<T> {\n    /**\n     * The data contained in the node.\n     */\n    private _data: T | null = null;\n\n    /**\n     * The edge or pointer to the next node.\n     */\n    private _next: DLNode<T> | null = null;\n\n    /**\n     * The edge or pointer to the previous node.\n     */\n    private _previous: DLNode<T> | null = null;\n\n    constructor() { }\n\n    get data(): T | null {\n        return this._data;\n    }\n\n    set data(data: T | null) {\n        this._data = data;\n    }\n\n    get next(): DLNode<T> | null {\n        return this._next;\n    }\n\n    set next(next: DLNode<T> | null) {\n        this._next = next;\n    }\n\n    get previous(): DLNode<T> | null {\n        return this._previous;\n    }\n\n    set previous(previous: DLNode<T> | null) {\n        this._previous = previous;\n    }\n}","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class AbstractCube extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    private scene: Array<FlatshadedMesh>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/stravaganza.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.scene = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene2(framebuffer, time);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene2(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(5, 16, 5));\n        let model: FlatshadedMesh = this.scene[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        mv = camera.multiplyMatrix(Matrix4f.constructZRotationMatrix(\n            Math.PI * 0.5 * framebuffer.cosineInterpolate(0, 600, Math.floor(elapsedTime * 0.7) % 4000))\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(\n                Math.PI * 0.5 * framebuffer.cosineInterpolate(2000, 2600, Math.floor(elapsedTime * 0.7) % 4000)))\n        );\n        model = this.scene[1];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\n/**\n * TODO:\n * - Move procedural texture generation into dedicated class\n * - create Mesh / Textured Mesh class\n * - Create Lens Flare class\n * - Create Pipeline class\n */\nexport class BakedLighting extends AbstractScene {\n\n    private skyBox: SkyBox;\n    private baked: Texture;\n    private noise: Texture;\n    private blenderObj8: Array<TexturedMesh>;\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/abstract.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObj8 = mesh\n            ),\n            TextureUtils.load(require('../../assets/Backed.png'), false).then(\n                (texture: Texture) => this.baked = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n\n        this.drawBlenderScene7(framebuffer, time - 1100000);\n        /*\n            [\n                //   { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n            ], this.dirt, this.skybox);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene7(framebuffer: Framebuffer, elapsedTime: number): void {\n        elapsedTime *= 0.2;\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0005).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, -25, 0)\n                    )));\n\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.baked);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.blenderObj8);\n    }\n\n}\n","import { CameraKeyFrame } from '../../animation/CameraKeyFrame';\nimport { CameraLoader } from '../../camera/CameraLoader';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { WavefrontLoader } from '../../model/wavefront-obj/WavefrontLoader';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { PointLight } from '../../shading/light/PointLight';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nimport CameraPathFile from '../../assets/camera-path.jsx';\nimport { BlenderCameraAnimator } from '../../animation/BlenderCameraAnimator';\nimport { SkyBox } from '../../SkyBox';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class BlenderCameraScene extends AbstractScene {\n\n    private texture4: Texture;\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private meshes: Array<FlatshadedMesh>;\n    private path: Array<CameraKeyFrame>;\n    private skyBox: SkyBox;\n\n    private light1: PointLight;\n    private light2: PointLight;\n\n    private cameraAnimator: BlenderCameraAnimator;\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.light1 = new PointLight();\n        this.light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        this.light1.diffuseIntensity = new Vector4f(1, 0.0, 1, 1);\n        this.light1.specularIntensity = new Vector4f(0.5, 0.5, 0.7, 1);\n        this.light1.position = new Vector4f(0, -10, -1, 1);\n\n        this.light2 = new PointLight();\n        this.light2.ambientIntensity = new Vector4f(0.5, 0.5, 1, 1);\n        this.light2.diffuseIntensity = new Vector4f(0.3, 0.3, 1, 1);\n        this.light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        this.light2.position = new Vector4f(3, 0, -2, 1);\n\n        this.renderingPipeline.setLights([this.light1, this.light2]);\n\n        this.skyBox = new SkyBox();\n        return Promise.all([\n            this.skyBox.init(),\n            WavefrontLoader.load(require('../../assets/monkey.obj')).then(\n                (value: Array<FlatshadedMesh>) => this.meshes = value\n            ),\n            CameraLoader.load(require('../../assets/camera-path.jsx')).then(\n                (value: Array<CameraKeyFrame>) => this.path = value\n            ),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n        ]).then(() => {\n            this.cameraAnimator = new BlenderCameraAnimator();\n            this.cameraAnimator.setKeyFrames(this.path);\n        });\n    }\n\n    private computeFps(currentTime: number): void {\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n    }\n\n    public render(framebuffer: Framebuffer, timeInput: number): void {\n        const currentTime: number = Date.now();\n        this.computeFps(currentTime);\n\n        const modelViewMartrix: Matrix4f = this.cameraAnimator.getViewMatrix(timeInput);\n\n        this.skyBox.draw(framebuffer, modelViewMartrix);\n\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.drawMeshArray(framebuffer, this.meshes, modelViewMartrix);\n\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\nimport { Framebuffer } from '../../Framebuffer';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture/index';\n\n// Transitions\nexport enum TransitionMethods {\n    FADEIN = 1,\n    FADEOUT = 2,\n    BLOCKFADE = 3,\n    CROSSFADE = 4,\n    CIRCLE = 5,\n    WIPE_LEFT = 6\n}\n\nexport class BlockFade extends AbstractScene {\n    private ledTexture: Texture;\n    private startTime: number = Date.now();\n    private transitionFramebufferTo: Framebuffer;\n\n    public transitionCircle: Uint32Array;\n    public transitionWipe: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.transitionFramebufferTo = new Framebuffer(framebuffer.width, framebuffer.height);\n\n        // draw side wipe\n        this.transitionWipe = new Uint32Array(framebuffer.width * framebuffer.height);\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const c2 = Utils.map(x, 0, framebuffer.width, 0, 255);\n                const color = new Color(c2, c2, c2, 255).toPackedFormat();\n                this.transitionWipe[x + y * framebuffer.width] = color;\n            }\n        }\n\n        // draw circle gradient\n        this.transitionCircle = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.transitionCircle.fill(Color.WHITE.toPackedFormat(), 0, this.transitionCircle.length);\n        for (let d = 0; d < framebuffer.width / 2; d += 1) {\n            const c3 = Utils.map(d, 0, framebuffer.width / 2, 0, 255);\n            this.drawCircle(framebuffer.width / 2, framebuffer.height / 2, d, c3);\n        }\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (textureBackground: Texture) => this.ledTexture = textureBackground\n            ),\n        ]);\n    }\n\n    private putpixel(x: number, y: number, color: number) {\n        this.transitionCircle[x + y * this.transitionFramebufferTo.width] = new Color(color, color, color, 255).toPackedFormat();\n    }\n\n    private drawCircle(x0: number, y0: number, radius: number, color: number) {\n        let x = 0;\n        let y = radius;\n        let d = -(radius >>> 1);\n\n        while (x <= y) {\n            this.putpixel(x + x0, y + y0, color);\n            this.putpixel(y + x0, x + y0, color);\n            this.putpixel(-x + x0, y + y0, color);\n            this.putpixel(-y + x0, x + y0, color);\n            this.putpixel(-x + x0, -y + y0, color);\n            this.putpixel(-y + x0, -x + y0, color);\n            this.putpixel(x + x0, -y + y0, color);\n            this.putpixel(y + x0, -x + y0, color);\n\n            if (d <= 0) {\n                x++;\n                d += x;\n            } else {\n                y--;\n                d -= y;\n            }\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now() - this.startTime;\n        framebuffer.clear();\n        this.blockFade(framebuffer, this.ledTexture.texture, this.ledTexture.width, time, 0);\n    }\n\n    /**\n     * Transitions from one effect to another using using \"transition\" value from JSRocket\n     *\n     * @param  {Framebuffer} framebuffer             pixels\n     * @param  {AbstractScene} transitionSceneFrom   previous effect\n     * @param  {AbstractScene} transitionSceneTo     effect we are transitioning to\n     * @param  {number} transitionMethod             transition effect to use (blend, wipe, crossfade, etc)\n     */\n    public transition(\n        framebuffer: Framebuffer,\n        transitionSceneFrom: AbstractScene,\n        transitionSceneTo: AbstractScene,\n        transitionMethod: TransitionMethods,\n        transitionValue: number,\n        time: number) {\n\n        // render the 'To' effect into the framebuffer\n        transitionSceneTo.render(this.transitionFramebufferTo, time);\n\n        // render 'From' effect into framebuffer\n        transitionSceneFrom.render(framebuffer, time);\n        // apply transition to framebuffer (fromEffect) using texture (toEffect) 0-255\n        switch (Math.trunc(transitionMethod)) {\n            case TransitionMethods.BLOCKFADE: // 0 - 12000\n                this.blockFade(framebuffer, this.transitionFramebufferTo.framebuffer, this.transitionFramebufferTo.width, Utils.map(transitionValue, 0, 255, 0, 12000), 0);\n                break;\n            case TransitionMethods.CROSSFADE: // 0 - 255\n                this.crossFade(framebuffer.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.FADEIN: // 0-255\n                this.fadeIn(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.FADEOUT: // 0-255\n                this.fadeOut(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.WIPE_LEFT: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionWipe);\n                break;\n            case TransitionMethods.CIRCLE: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionCircle);\n                break;\n            default: // 0 - 512\n                this.crossFade(framebuffer.framebuffer, Utils.map(transitionValue, 0, 255, 0, 12000));\n        }\n    }\n\n    public blockFade(framebuffer: Framebuffer, pixelArray: Uint32Array, pixelArrayWidth: number, time: number, startTime: number) {\n        const blockWidth = 20;\n        const horizontalUnits = Math.ceil(framebuffer.width / blockWidth);\n        const verticalUnits = Math.ceil(framebuffer.height / blockWidth);\n\n        const fadeArray = new Array<number>(horizontalUnits * verticalUnits);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                fadeArray[x + y * horizontalUnits] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, x * blockWidth, y * blockWidth, blockWidth, blockWidth, pixelArray, pixelArrayWidth,\n                    framebuffer.interpolate(startTime + fadeArray[x + y * horizontalUnits], startTime + fadeArray[x + y * horizontalUnits] + 700, time)\n                );\n            }\n        }\n    }\n\n    // blend entire image to another image\n    public crossFade(framebuffer: Uint32Array, alpha: number) {\n        for (let i = 0; i < framebuffer.length; i++) {\n            framebuffer[i] = Framebuffer.blend(\n                framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                alpha)\n        }\n    }\n\n    // transition using image\n    // https://github.com/Slynchy/SDL-AlphaMaskWipes/blob/master/Transition.h\n    public crossFadeImage(framebuffer: Framebuffer, alpha: number, transitionImage: Uint32Array) {\n        for (let i = 0; i < framebuffer.framebuffer.length; i++) {\n            framebuffer.framebuffer[i] = Framebuffer.blend(\n                framebuffer.framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                Utils.clamp(\n                    (alpha * 2) - (transitionImage[i] & 0xff),\n                    0, 255))\n        }\n    }\n\n    // fade in from solid color\n    public fadeIn(framebuffer: Framebuffer, alpha: number, startColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        startColor,\n                        this.transitionFramebufferTo.framebuffer[x + y * framebuffer.width],\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // fade out to solid color\n    public fadeOut(framebuffer: Framebuffer, alpha: number, endColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        framebuffer.framebuffer[x + y * framebuffer.width],\n                        endColor,\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // Alternating scanlines + RGB Distort /w external input\n    public renderScanlines(framebuffer: Framebuffer, shiftAmount: number) {\n        let i = 0;\n\n        const offRed = (2 * shiftAmount) << 0;\n        const offGreen = (5 * shiftAmount) << 0;\n        const offBlue = (2 * shiftAmount) << 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n\n            // horizontal scanlines * intensity\n            const strips = (y & 1) * 16;\n            const verticalPosition = y * framebuffer.width;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                const imagePixelR = framebuffer.framebuffer[Utils.clamp(x + offRed, 0, framebuffer.width - 1) + verticalPosition] & 0xFF;\n                const imagePixelG = framebuffer.framebuffer[Utils.clamp(x + offGreen, 0, framebuffer.width - 1) + verticalPosition] >> 8 & 0xFF;\n                const imagePixelB = framebuffer.framebuffer[Utils.clamp(x + offBlue, 0, framebuffer.width - 1) + verticalPosition] >> 16 & 0xFF;\n\n                framebuffer.framebuffer[i++] = new Color(\n                    Utils.clamp(imagePixelR - strips, 0, 255),\n                    Utils.clamp(imagePixelG - strips, 0, 255),\n                    Utils.clamp(imagePixelB - strips, 0, 255)).toPackedFormat();\n            }\n        }\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\nexport class CubeScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.BLACK.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(CubeScene.BACKGROUND_COLOR);\n        framebuffer.clearDepthBuffer();\n        \n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 3.2;\n\n        return Matrix4f.constructTranslationMatrix(0, 0, -9).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","/*\nName          : Aisa Demo\nRelease Date  : TBD\nPlatform      : JavaScript\nCategory      : Demo\nNotes         : Software rendered effects written in Typescript\n*/\n\n// Core\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SoundManager } from '../../sound/SoundManager';\nimport { Color } from '../../core/Color';\nimport { BlockFade } from '../block-fade/BlockFade';\nimport { DoublyLinkedList } from '../../core/LinkedList';\nimport { DLNode } from '../../core/Node';\n\n// Stats\nimport Stats = require('stats.js');\n\n// Video Recording Tool\nimport { CanvasRecorder } from './canvas-record';\n\nexport class DemoScene {\n\n    // Sound Manager\n    private soundManager: SoundManager;\n\n    // Video Recorder\n    private canvasRecorder: CanvasRecorder;\n\n    // list of scenes\n    private sceneList: DoublyLinkedList<AbstractScene>;\n    private nodeInstance: DLNode<AbstractScene>;\n\n    // moving line marking current place in the timeline\n    private timelineRef: HTMLInputElement;\n\n    // transitions\n    private BlockFade: BlockFade;\n\n    // stats\n    private stats: Array<Stats>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.soundManager = new SoundManager();\n\n        this.sceneList = new DoublyLinkedList();\n\n        this.initControls(framebuffer.width);\n\n        this.BlockFade = new BlockFade();\n\n        // initialize effects with progress\n        return this.allProgress([\n\n            // load music\n            // this.soundManager.loadMusic(require(`../../assets/sound/dubmood_-_cromenu1_haschkaka.xm`)),\n            this.soundManager.loadMusic(require(`../../assets/sound/showeroflove.mod`)),\n            // this.soundManager.loadMusic(require('../../assets/sound/NotMixedorMastered.ogg')),\n\n            // load *.rocket file for scene/music synchronization\n            this.soundManager.prepareSync(require('../../assets/sound/demo.rocket'), true),\n\n            // we use this for transitions\n            this.BlockFade.init(framebuffer),\n\n            // load and initialze effects\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene2').then(plug => this.initScene(framebuffer, plug)), // telephone\n            import('./parts/Scene3').then(plug => this.initScene(framebuffer, plug)), // title screen here\n            import('./parts/Scene4').then(plug => this.initScene(framebuffer, plug)), // pizza delivery guy\n            import('./parts/Scene5').then(plug => this.initScene(framebuffer, plug)), // replace with something else\n            import('./parts/Scene6').then(plug => this.initScene(framebuffer, plug)), // spikeball + plane deformation\n            import('./parts/Scene7').then(plug => this.initScene(framebuffer, plug)), // cube + rotozoomer\n            import('./parts/Scene8').then(plug => this.initScene(framebuffer, plug)), // ledplasma + voxelcubes\n            import('./parts/Scene9').then(plug => this.initScene(framebuffer, plug)), // blender camera\n            import('./parts/Scene10').then(plug => this.initScene(framebuffer, plug)), // MetalHeadzScene\n            import('./parts/Scene11').then(plug => this.initScene(framebuffer, plug)), // AbstractCube\n            import('./parts/Scene12').then(plug => this.initScene(framebuffer, plug)), // DofBallsScene\n            import('./parts/Scene13').then(plug => this.initScene(framebuffer, plug)), // TorusKnotTunnelScene\n            import('./parts/Scene14').then(plug => this.initScene(framebuffer, plug)), // GearsScene\n            import('./parts/Scene15').then(plug => this.initScene(framebuffer, plug)), // BakedLighting\n            import('./parts/Scene16').then(plug => this.initScene(framebuffer, plug)), // ParticleStreamsScene\n            import('./parts/Scene17').then(plug => this.initScene(framebuffer, plug)), // HoodlumScene\n            import('./parts/Scene18').then(plug => this.initScene(framebuffer, plug)), // TwisterScene\n            import('./parts/Scene19').then(plug => this.initScene(framebuffer, plug)), // RazorScene\n            import('./parts/Scene20').then(plug => this.initScene(framebuffer, plug)), // sinescroller\n\n        ], (percent: number) => {\n            // update the progress bar via canvas\n            const outputX = Math.ceil(framebuffer.width * percent);\n            framebuffer.drawRect2(0, (framebuffer.height / 2) - 5, outputX, 10, Color.WHITE.toPackedFormat());\n\n            // update the canvas\n            const canvas = document.getElementById('aisa-canvas') as HTMLCanvasElement;\n            canvas.getContext('2d').putImageData(framebuffer.getImageData(), 0, 0);\n\n            // update memory usage\n            for (const p of this.stats) {\n                p.update();\n            }\n        });\n    }\n\n    /**\n     * Adds AbstractScenes to sceneList array and initializes it\n     *\n     * @param   {Framebuffer} framebuffer            scene initializes with information in framebuffer such as width and height\n     * @param   {Object} plug                        imported class\n     * @returns {Promise<any>}                       resolves promise after completion\n     */\n    private initScene(framebuffer: Framebuffer, plug: unknown, ...args: Array<any>): Promise<any> {\n        const constructorName = Object.keys(plug)[0];\n        const newNode: DLNode<AbstractScene> = new DLNode();\n        newNode.data = new plug[constructorName](...args);\n        this.sceneList.insert(newNode, this.sceneList.length - 1);\n        return newNode.data.init(framebuffer);\n    }\n\n    // this runs after init() has finished\n    public onInit(): void {\n\n        this.canvasRecorder = new CanvasRecorder();\n\n        // jump to last effect in timeline and set mute vs unmuted\n        this.soundManager.initTimeline();\n\n        // show debug / timeline navigator\n        document.getElementById('debug').style.display = 'block';\n    }\n\n    /**\n     * Setup debug tools for local development\n     */\n    private initControls(width: number) {\n        this.stats = new Array<Stats>();\n\n        // Stats - Memory in Megabytes\n        this.initStats(2, 0, width * 2);\n\n        // Stats - Frames per second\n        this.initStats(0, 50, width * 2);\n\n        // Stats - Milliseconds per frame\n        this.initStats(1, 100, width * 2);\n\n        document.getElementById('debug').style.width = `${width * 2}px`;\n\n        // Scene Playback Controls\n        const tickerPlayRef = document.getElementById('ticker_play');\n        const tickerStopRef = document.getElementById('ticker_stop');\n        const tickerNextRef = document.getElementById('ticker_next');\n        const tickerBackRef = document.getElementById('ticker_back');\n        const tickerRecordRef = document.getElementById('ticker_record');\n        const tickerScreenshotRef = document.getElementById('ticker_screenshot');\n        const tickerVolumeRef = document.getElementById('ticker_volume');\n\n        // timeline\n        this.timelineRef = document.getElementById('timeline') as HTMLInputElement;\n\n        // stop\n        tickerStopRef.addEventListener('click', () => {\n            this.soundManager.onPause();\n            this.nodeInstance = this.sceneList.start;\n            this.soundManager.seek(0);\n\n            tickerPlayRef.classList.add('fa-play');\n            tickerPlayRef.classList.remove('fa-pause');\n\n            // save video if recoding\n            if (this.canvasRecorder.recording) {\n                tickerRecordRef.style.color = 'white';\n                this.canvasRecorder.saveVideo();\n            }\n        })\n\n        // record video\n        tickerRecordRef.addEventListener('click', () => {\n            if (!this.canvasRecorder.recording) {\n                // start audio and video recording\n                tickerRecordRef.style.color = 'red';\n                this.soundManager.onPlay();\n                this.canvasRecorder.recordVideo(this.soundManager.audioElement);\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                // pause audio and save video file\n                tickerRecordRef.style.color = 'white';\n                this.soundManager.onPause();\n                this.canvasRecorder.saveVideo();\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // play / pause\n        tickerPlayRef.addEventListener('click', () => {\n            if (!this.soundManager.isPlaying) {\n                this.soundManager.onPlay();\n                tickerPlayRef.setAttribute('title', 'pause');\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                this.soundManager.onPause();\n                tickerPlayRef.setAttribute('title', 'play');\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // toggle audio and save preference for subsequent reloads\n        tickerVolumeRef.addEventListener('click', () => {\n            this.soundManager.toggleSound(tickerVolumeRef, !this.soundManager.audioElement.muted);\n            localStorage.setItem('soundToggle', String(this.soundManager.audioElement.muted));\n        });\n\n        // save screenshot in PNG format\n        tickerScreenshotRef.addEventListener('click', () => {\n            const date = new Date();\n            const fileName = `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.png`;\n            const canvas = document.getElementById('aisa-canvas');\n            const image = (canvas as HTMLCanvasElement).toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            const anchor = document.createElement('a');\n            anchor.setAttribute('download', fileName);\n            anchor.setAttribute('href', image);\n            anchor.click();\n        })\n\n        // next\n        tickerNextRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.musicProperties.timeSeconds, 1, this.sceneList.length);\n        })\n\n        // back\n        tickerBackRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.musicProperties.timeSeconds, -1, this.sceneList.length);\n        })\n\n        // seek\n        this.timelineRef.addEventListener('input', (e) => {\n            const time = Number((e.target as HTMLInputElement).value);\n            this.soundManager.seek(time / 1000);\n        });\n\n        // seek with scrollwheel\n        document.addEventListener(\"wheel\", (e) => {\n            const directionToScroll = (e.deltaY < 0) ? -0.06 : 0.06;\n            this.soundManager.seek(this.soundManager.audioElement.currentTime + directionToScroll);\n            // prevent page scroll\n            e.preventDefault();\n            e.stopPropagation();\n        }, { passive: false })\n\n        // keyboard navigation controls\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            switch (e.key) {\n                case 'MediaStop':\n                    tickerStopRef.click();\n                    break;\n                // play or pause\n                case 'MediaPlayPause':\n                case ' ':\n                    tickerPlayRef.click();\n                    break;\n                // navigate timeline backward\n                case 'ArrowLeft':\n                    this.soundManager.seek(this.soundManager.audioElement.currentTime - 0.06);\n                    break;\n                // navigate timeline forward\n                case 'ArrowRight':\n                    this.soundManager.seek(this.soundManager.audioElement.currentTime + 0.06);\n                    break;\n                // jump to next effect\n                case 'MediaTrackNext':\n                case 'ArrowUp':\n                    this.soundManager.jump(this.soundManager.audioElement.currentTime, 1, this.sceneList.length);\n                    break;\n                // jump to previous effect\n                case 'MediaTrackPrevious':\n                case 'ArrowDown':\n                    this.soundManager.jump(this.soundManager.audioElement.currentTime, -1, this.sceneList.length);\n                    break;\n                // toggle full screen\n                case 'f':\n                    document.getElementById('aisa-canvas').click();\n                    break;\n                // save a screenshot\n                case 's':\n                    tickerScreenshotRef.click();\n                    break;\n                // record video in webm format\n                case 'r':\n                    tickerRecordRef.click();\n                    break;\n                case 'd':\n                    break;\n            }\n        })\n    }\n\n    /**\n     * Runs all promises in an array and runs callback with percentage of completion\n     *\n     * @param   {Array<Promise<any>>} promises       array of promises to run\n     * @param   {Function} progressCallback          function sending percentage after individual promise is complete\n     * @returns {Promise<any>}                       promise resolve after all promises are complete\n     */\n    private allProgress(promises: Array<Promise<any>>, progressCallback: (percentage: number) => void): Promise<any> {\n        let d = 0;\n        for (const p of promises) {\n            p.then(() => {\n                d++;\n                progressCallback(d / promises.length);\n            });\n        }\n        return Promise.all(promises);\n    }\n\n    /**\n     * Adds JavaScript Performance Monitor and initializes it\n     *\n     * @param   {Object} args                        stat type[0-3], top in pixels, left in pixels\n     */\n    private initStats(...args: Array<number>) {\n        this.stats.push(new Stats());\n        const statsObj = this.stats[this.stats.length - 1];\n        statsObj.showPanel(args[0]);\n        statsObj.dom.style.cssText = `position:absolute;top:${args[1]}px;left:${args[2]}px;`;\n        document.body.appendChild(statsObj.dom);\n    }\n\n    public render(framebuffer: Framebuffer) {\n        // get time and values from music\n        this.soundManager.updateMusic();\n\n        // get which effect to run\n        this.nodeInstance = this.sceneList.getNode(this.soundManager.musicProperties.sceneData.effect);\n\n        // if \"transitionType\" in JSRocket is zero then run the effect by itself\n        if (this.soundManager.musicProperties.sceneData.transitionType === 0) {\n            this.nodeInstance.data.render(framebuffer, this.soundManager.musicProperties.timeMilliseconds)\n        } else {\n            // otherwise blend two effects together\n            this.BlockFade.transition(\n                framebuffer,\n                this.nodeInstance.data,\n                this.nodeInstance.next.data,\n                this.soundManager.musicProperties.sceneData.transitionType,\n                this.soundManager.musicProperties.sceneData.transitionValue,\n                this.soundManager.musicProperties.timeMilliseconds);\n        }\n\n        // comment out for release\n        this.drawStats();\n    }\n\n    /**\n     * Show FPS, Memory Usage and js rocket time and effect number\n     */\n    private drawStats() {\n        // update timeline marker\n        this.timelineRef.value = String(this.soundManager.musicProperties.timeMilliseconds);\n\n        // keep current time in local storage to stay in place during reloads\n        localStorage.setItem('lastTime', String(this.soundManager.musicProperties.timeSeconds));\n\n        if (!this.soundManager.syncDevice.connected && !this.soundManager.demoMode) {\n            console.error('Rocket not connected.');\n            return;\n        } else {\n            // get values from JS rocket\n            document.getElementById('scene').innerText = this.soundManager.musicProperties.sceneData.effect.toString();\n            document.getElementById('time').innerText = this.soundManager.musicProperties.timeSeconds.toFixed(2);\n        }\n        // update FPS and Memory usage\n        for (const p of this.stats) {\n            p.update();\n        }\n    }\n\n}\n","export class CanvasRecorder {\n\n    public recording: boolean;\n    private canvasRecordingOptions;\n    private canvasRecorder;\n    private audioTrack: MediaStreamTrack;\n\n    public constructor() {\n        this.recording = false;\n    }\n\n    public getType(filename: string) {\n        const ext = this.fileExtension(filename);\n        return ['mkv'].includes(ext) ? 'video/x-matroska;codecs=avc1' : 'video/webm';\n    }\n\n    private fileExtension(filename: string): string {\n        return filename.split('.').pop();\n    }\n\n    public createCanvasRecorder(canvas: HTMLCanvasElement, options = {}, audio: HTMLMediaElement) {\n        const date = new Date();\n        let link = null;\n\n        const {\n            filename = `Recording ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate = 25,\n            download = true,\n            recorderOptions = {\n                mimeType: 'video/x-matroska;codecs=avc1',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 2500000 // 2.5 Mbit/sec\n            }\n        } = {\n            ...options\n        };\n\n        const mimeType = recorderOptions.mimeType || this.getType(filename);\n\n        if (download) {\n            link = link || document.createElement('a');\n            link.download = filename;\n        }\n\n        let chunks = [];\n\n        let stream = canvas.captureStream(frameRate);\n\n        /*\n        if (!this.canvasRecorder) {\n            // get the audio track:\n            const ctx = new AudioContext();\n            const dest = ctx.createMediaStreamDestination();\n            const sourceNode = ctx.createMediaElementSource(audio);\n            sourceNode.connect(dest);\n            sourceNode.connect(ctx.destination);\n            this.audioTrack = dest.stream.getAudioTracks()[0];\n        }\n\n        stream.addTrack(this.audioTrack);\n        */\n\n        let recorder = new MediaRecorder(stream, { mimeType, ...recorderOptions });\n\n        recorder.ondataavailable = event => {\n            event.data.size && chunks.push(event.data);\n        };\n        recorder.onstop = () => {\n            if (download && chunks.length) {\n                const blob = new Blob(chunks, { type: mimeType });\n                const url = URL.createObjectURL(blob);\n                link.href = url;\n\n                const event = new MouseEvent('click');\n                link.dispatchEvent(event);\n                setTimeout(() => {\n                    URL.revokeObjectURL(url);\n                }, 1);\n            }\n        };\n\n        return {\n            start(timeslice) {\n                chunks = [];\n                recorder.start(timeslice);\n            },\n            set filename(name) {\n                link.download = name;\n            },\n            stop() {\n                recorder.stop();\n                return chunks;\n            },\n            dispose() {\n                recorder = null;\n                stream = null;\n            },\n            stream,\n            recorder\n        };\n    }\n\n    /**\n     * Records a video and sound using CanvasRecorder\n     */\n    public recordVideo(sound: HTMLMediaElement) {\n        console.info('recording video...');\n        this.recording = true;\n        const date = new Date();\n\n        // options\n        this.canvasRecordingOptions = {\n            filename: `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate: 60,\n            download: true,\n            recorderOptions: {\n                mimeType: 'video/webm',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 5000000 // 2.5 Mbit/sec\n            }\n        }\n\n        // Create canvas video recorder\n        const canvasObj = document.getElementById('aisa-canvas');\n        this.canvasRecorder = this.createCanvasRecorder(canvasObj as HTMLCanvasElement, this.canvasRecordingOptions, sound);\n        this.canvasRecorder.start();\n    }\n\n    public saveVideo() {\n        // Stop and dispose\n        this.canvasRecorder.stop();\n        this.canvasRecorder.dispose();\n        this.recording = false;\n        console.info(`saved video as ${this.canvasRecordingOptions.filename}`);\n    }\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\n\n// sideways 3D office scene\nexport class Scene1 {\n    private PlaneDeformationFloorScene = new PlaneDeformationScene(8, require('../../../assets/ground.png'));\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        return Promise.all([\n            this.PlaneDeformationFloorScene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlaneDeformationFloorScene.drawPlaneDeformation(framebuffer, 0, time >> 3);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { MetalHeadzScene } from '../../metalheadz/MetalHeadzScene';\n\nexport class Scene10 {\n    private MetalHeadzScene: MetalHeadzScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.MetalHeadzScene = new MetalHeadzScene();\n\n        return Promise.all([\n            this.MetalHeadzScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.MetalHeadzScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { AbstractCube } from '../../abstract-cube/AbstractCube';\n\nexport class Scene11 {\n    private AbstractCube: AbstractCube;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.AbstractCube = new AbstractCube();\n\n        return Promise.all([\n            this.AbstractCube.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.AbstractCube.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { DofBallsScene } from '../../dof-balls/DofBallsScene';\n\nexport class Scene12 {\n    private DofBallsScene: DofBallsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.DofBallsScene = new DofBallsScene();\n\n        return Promise.all([\n            this.DofBallsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.DofBallsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusKnotTunnelScene } from '../../torus-knot-tunnel/TorusKnotTunnelScene';\n\nexport class Scene13 {\n    private TorusKnotTunnelScene: TorusKnotTunnelScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusKnotTunnelScene = new TorusKnotTunnelScene();\n\n        return Promise.all([\n            this.TorusKnotTunnelScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusKnotTunnelScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { GearsScene } from '../../gears/GearsScene';\n\nexport class Scene14 {\n    private GearsScene: GearsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.GearsScene = new GearsScene();\n\n        return Promise.all([\n            this.GearsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.GearsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BakedLighting } from '../../baked-lighting/BakedLighting';\n\nexport class Scene15 {\n    private BakedLighting: BakedLighting;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BakedLighting = new BakedLighting();\n\n        return Promise.all([\n            this.BakedLighting.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.BakedLighting.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { ParticleStreamsScene } from '../../particle-streams/ParticleStreamsScene';\n\nexport class Scene16 {\n    private ParticleStreamsScene: ParticleStreamsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.ParticleStreamsScene = new ParticleStreamsScene();\n\n        return Promise.all([\n            this.ParticleStreamsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.ParticleStreamsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { HoodlumScene } from '../../hoodlum/HoodlumScene';\n\nexport class Scene17 {\n    private HoodlumScene: HoodlumScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.HoodlumScene = new HoodlumScene();\n\n        return Promise.all([\n            this.HoodlumScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.HoodlumScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TwisterScene } from '../../twister/TwisterScene';\n\nexport class Scene18 {\n    private TwisterScene: TwisterScene;\n    public init(): Promise<any> {\n\n        this.TwisterScene = new TwisterScene();\n\n        return Promise.all([\n            this.TwisterScene.init(),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TwisterScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RazorScene } from '../../razor/RazorScene';\n\nexport class Scene19 {\n    private RazorScene: RazorScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RazorScene = new RazorScene();\n\n        return Promise.all([\n            this.RazorScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RazorScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene2 {\n    private logo: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { SineScrollerScene } from '../../sine-scroller/SineScrollerScene';\n\nexport class Scene20 {\n    private SineScrollerScene: SineScrollerScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.SineScrollerScene = new SineScrollerScene();\n\n        return Promise.all([\n            this.SineScrollerScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.SineScrollerScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene3 {\n    private logo: Texture;\n    private background: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.background = texture\n            ),\n            TextureUtils.load(require('../../../assets/logos/pizza_express.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.background.height / 2)) | 0, this.background, 1.0);\n\n        framebuffer.drawTexture(\n            ((framebuffer.width / 2) - (this.logo.width / 2)) | 0,\n            ((framebuffer.height / 2) - (this.logo.height / 2)) | 0,\n            this.logo,\n            1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\nimport { PlasmaScene } from '../../plasma/PlasmaScene';\n\n// pizza being delivered\nexport class Scene4 {\n\n    private pizza: Texture;\n    private image: Texture;\n    private PlasmaScene: PlasmaScene;\n\n    public init(): Promise<any> {\n        this.PlasmaScene = new PlasmaScene();\n\n        return Promise.all([\n            // https://www.pngkey.com/detail/u2r5r5o0o0e6a9i1_sign-up-for-deals-pizza-delivery-guy-png/\n            TextureUtils.load(require('../../../assets/logos/pizza-delivery.png'), true).then(\n                (texture: Texture) => this.pizza = texture\n            ),\n            TextureUtils.load(require('../../../assets/lsd.png'), true).then(\n                (texture: Texture) => this.image = texture\n            ),\n            this.PlasmaScene.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlasmaScene.render(framebuffer, time);\n        framebuffer.drawTexture(50,  ((framebuffer.height / 2) - (this.image.height / 2)) | 0, this.image, 1.0);\n        framebuffer.drawTexture(framebuffer.width - this.pizza.width, (framebuffer.height ) - (this.pizza.height ) | 0, this.pizza, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusScene } from '../../torus/TorusScene';\n\nexport class Scene5 {\n    private TorusScene: TorusScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusScene = new TorusScene();\n\n        return Promise.all([\n            this.TorusScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\nimport { DistortedSphereScene } from '../../distorted-sphere/DistortedSphereScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class Scene6 {\n    private PlaneDeformationScene: PlaneDeformationScene;\n    private DistortedSphereScene: DistortedSphereScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.PlaneDeformationScene = new PlaneDeformationScene(3, require('../../../assets/textures/checker.png'));\n        this.DistortedSphereScene = new DistortedSphereScene();\n\n        return Promise.all([\n            this.DistortedSphereScene.init(framebuffer),\n            this.PlaneDeformationScene.init(framebuffer),\n            // https://www.pngitem.com/middle/iwTwxh_face-facial-hair-sitting-tongue-fear-woman-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick-2.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.PlaneDeformationScene.render(framebuffer, time);\n        this.DistortedSphereScene.renderTransparent(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RotoZoomerScene } from '../../roto-zoomer/RotoZoomerScene';\nimport { CubeScene } from '../../cube/CubeScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene7 {\n    private RotoZoomerScene: RotoZoomerScene;\n    private CubeScene: CubeScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RotoZoomerScene = new RotoZoomerScene();\n        this.CubeScene = new CubeScene();\n\n        return Promise.all([\n            this.CubeScene.init(framebuffer),\n            this.RotoZoomerScene.init(),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RotoZoomerScene.render(framebuffer, time);\n        this.CubeScene.renderBackground(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { VoxelBallsScene } from '../../voxel-balls/VoxelBallsScene';\nimport { LedPlasmaScene } from '../../led-plasma/LedPlasmaScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene8 {\n    private VoxelBallsScene: VoxelBallsScene;\n    private LedPlasmaScene: LedPlasmaScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.VoxelBallsScene = new VoxelBallsScene();\n        this.LedPlasmaScene = new LedPlasmaScene();\n\n        return Promise.all([\n            this.LedPlasmaScene.init(),\n            this.VoxelBallsScene.init(framebuffer),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.LedPlasmaScene.render(framebuffer, time);\n        this.VoxelBallsScene.renderTransparent(framebuffer, time);\n        // framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BlenderCameraScene } from '../../blender-camera-animation/BlenderCameraScene';\nexport class Scene9 {\n    private BlenderCameraScene: BlenderCameraScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BlenderCameraScene = new BlenderCameraScene();\n\n        return Promise.all([\n            this.BlenderCameraScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(0);\n        framebuffer.clearDepthBuffer();\n        this.BlenderCameraScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { Vertex } from '../../Vertex';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\ninterface IndexMesh {\n    points: Array<Vector4f>,\n    points2: Array<Vector4f>,\n    normals: Array<Vector4f>,\n    normals2: Array<Vector4f>,\n    index: Array<number>\n}\n\nexport class DistortedSphereScene extends AbstractScene {\n\n    private heightmapSphere: Texture;\n\n    private env: Texture;\n    private obj: IndexMesh;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/heightmapSphere.png'), false).then(\n                texture => this.heightmapSphere = texture\n            ),\n            TextureUtils.load(require('../../assets/envmap.png'), false).then(\n                texture => this.env = texture\n            ),\n        ]).then(\n            () => {\n                this.obj = this.createSphereDistplaced(this.heightmapSphere);\n            });\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(Color.BLACK.toPackedFormat());\n        this.renderTransparent(framebuffer, time);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.env);\n        const scale: number = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(time * 0.0001)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(time * 0.0001)));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10 - (Math.sin(time * 0.0006) * 0.5 + 0.5) * 6)\n            .multiplyMatrix(modelViewMartrix);\n        framebuffer.clearDepthBuffer();\n        this.shadingSphereEnvDisp2(framebuffer, time * 0.0004, modelViewMartrix);\n    }\n\n    public createSphere() {\n\n        const pointsA: Array<Vector4f> = [\n            new Vector4f(0.0, -1.0, 0.0),\n            new Vector4f(1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, 1.0),\n            new Vector4f(-1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, -1.0),\n            new Vector4f(0.0, 1.0, 0.0)\n        ];\n\n        const indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        const k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        const points: Array<Vector4f> = [];\n        const points2: Array<Vector4f> = [];\n        const normals: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n\n        const index: Array<number> = [];\n\n        k.index.forEach(i => {\n            const p = k.points[i];\n\n            const point = points.find(findPoint => findPoint.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector4f(0, 0, 0));\n            normals2.push(new Vector4f(0, 0, 0));\n            points2.push(new Vector4f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public divideSphere(points: Array<Vector4f>, index: Array<number>, steps: number) {\n\n        const points2: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n        const index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points[index[i]];\n            const v2 = points[index[i + 1]];\n            const v3 = points[index[i + 2]];\n\n            const vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            const vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            const vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n\n    public createSphereDistplaced(texture: Texture) {\n        const sphere: {\n            points: Array<Vector4f>,\n            points2: Array<Vector4f>,\n            normals: Array<Vector4f>,\n            normals2: Array<Vector4f>,\n            index: Array<number>\n        } = this.createSphere();\n        const newPoints: Array<Vector4f> = new Array<Vector4f>();\n        sphere.points.forEach((point) => {\n            const x = point.x;\n            const y = point.y;\n            const z = point.z;\n            const u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            const v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            const disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public shadingSphereEnvDisp2(framebuffer: Framebuffer, elapsedTime: number, modelViewMartrix: Matrix4f): void {\n        const result = this.obj;\n\n\n        for (let i = 0; i < result.points.length; i++) {\n            const y = result.points[i].z;\n            const x = result.points[i].x;\n            const length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + Math.max(20 - length * 2, 0) * 0.06 + elapsedTime * 0.9) * 4.5;\n            rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        const points = result.points2;\n        const index = result.index;\n        const normals = result.normals;\n\n        const norm: Vector4f = new Vector4f(0, 0, 0);\n        const norm2: Vector4f = new Vector4f(0, 0, 0);\n        const cross: Vector4f = new Vector4f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            const v1: Vector4f = points[index[i]];\n            const v2: Vector4f = points[index[i + 1]];\n            const v3: Vector4f = points[index[i + 2]];\n\n\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            const normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        const points2: Array<Vector4f> = result.points2;\n        const normals2: Array<Vector4f> = result.normals2;\n\n        const normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyHomArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            points2[p].x = Math.round((framebuffer.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((framebuffer.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        const vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        const vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        const vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        const vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const n1 = normals2[index[i]];\n\n            const v2 = points2[index[i + 1]];\n            const n2 = normals2[index[i + 1]];\n\n            const v3 = points2[index[i + 2]];\n            const n3 = normals2[index[i + 2]];\n\n            if (framebuffer.isTriangleCCW(v1, v2, v3)) {\n\n                vertexArray[0].projection = v1;\n                framebuffer.fakeSphere(n1, vertex1);\n\n                vertexArray[1].projection = v2;\n                framebuffer.fakeSphere(n2, vertex2);\n\n                vertexArray[2].projection = v3;\n                framebuffer.fakeSphere(n3, vertex3);\n\n                if (v1.x < framebuffer.minWindow.x ||\n                    v2.x < framebuffer.minWindow.x ||\n                    v3.x < framebuffer.minWindow.x ||\n                    v1.x > framebuffer.maxWindow.x ||\n                    v2.x > framebuffer.maxWindow.x ||\n                    v3.x > framebuffer.maxWindow.x ||\n                    v1.y < framebuffer.minWindow.y ||\n                    v2.y < framebuffer.minWindow.y ||\n                    v3.y < framebuffer.minWindow.y ||\n                    v1.y > framebuffer.maxWindow.y ||\n                    v2.y > framebuffer.maxWindow.y ||\n                    v3.y > framebuffer.maxWindow.y) {\n\n\n                    this.texturedRenderingPipeline.clipConvexPolygon(framebuffer, vertexArray);\n                } else {\n                    this.texturedRenderingPipeline.triangleRasterizer.drawTriangleDDA(framebuffer, vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nexport class DofBallsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n    private start: number;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.start = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.load(require('../../assets/spriteBlur.png'), true).then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleTorus(framebuffer, time, this.particleTexture2, true);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.60);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public computeDepthBlur(\n        nearPlane: number,\n        focalPlane: number,\n        farPlane: number, depth: number): number {\n\n        let f: number;\n\n        if (depth > focalPlane) {\n            f = (depth - focalPlane) / (nearPlane - focalPlane);\n        } else {\n            f = (depth - focalPlane) / (farPlane - focalPlane);\n        }\n        return Math.min(f, 1.0);\n    }\n\n    public drawParticleTorus(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        framebuffer.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const radi = 5.2;\n\n        for (let i = 0; i < num; i++) {\n            const x = radi * Math.cos(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n            const y = (i - num * 0.5) * 0.4;\n            const z = radi * Math.sin(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n\n            points.push(new Vector3f(x, y, z));\n        }\n\n        const modelViewMartrix: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.0004)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.0004)));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach((element: Vector3f) => {\n            points2.push(framebuffer.project(modelViewMartrix.multiply(element)));\n        });\n\n        points2.sort((a: Vector3f, b: Vector3f) => a.z - b.z);\n\n        points2.forEach((element: Vector3f) => {\n            const size: number = -(2.9 * 292 / (element.z));\n            const spriteNum: number = Math.round(this.computeDepthBlur(0, -15, -70, element.z) * 13);\n\n            framebuffer.drawParticle2Sub(\n                element.x - size / 2,\n                element.y - size / 2,\n                size, size, texture, 1 / element.z, 1.0, spriteNum, 128\n            );\n        });\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\n\nexport class GearsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n    private gearsMesh: Array<FlatshadedMesh>;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/gear.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.gearsMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene4(framebuffer, time);\n        /*  [\n              { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n              { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n              { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n              { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n              { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n          ], this.dirt);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene4(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -21).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let scale: number = 0.1 * 2.1 * 2.1;\n        let factor: number = 2.1 - 0.09 - 0.09;\n        const fade: number = 0.09;\n        const dampFactor: number = Math.sin(elapsedTime * 0.00001) * 0.5 + 0.5;\n        for (let i: number = 1; i < 6; i++) {\n            scale *= factor;\n            factor -= fade;\n\n            const mv: Matrix4f = this.getModelViewMatrix(camera, dampFactor, scale, i, elapsedTime);\n\n            this.renderingPipeline.draw(framebuffer, this.gearsMesh[0], mv);\n        }\n        // let lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n        // framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n    private getModelViewMatrix(camera: Matrix4f, dampFactor: number, scale: number, i: number,\n        elapsedTime: number): Matrix4f {\n        const modelViewMartrix: Matrix4f =\n            Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.0005 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                    Matrix4f.constructScaleMatrix(scale, scale, scale)));\n\n        return camera.multiplyMatrix(modelViewMartrix);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class HoodlumScene extends AbstractScene {\n\n    private blurred: Texture;\n    private lab2: Texture;\n    private noise: Texture;\n    private particleTexture2: Texture;\n    private spaceLabMesh: Array<TexturedMesh>;\n    private hoodlumLogoMesh: Array<FlatshadedMesh>;\n    private accumulationBuffer: Uint32Array;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/lab2.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.spaceLabMesh = mesh\n            ),\n            BlenderLoader.load(require('../../assets/jsx/hoodlum2018.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.hoodlumLogoMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/lab2.png'), false).then(texture => this.lab2 = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n            this.createProceduralTexture3().then(texture => this.particleTexture2 = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        framebuffer.setCullFace(CullFace.BACK);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.lab2);\n\n        this.drawBlenderScene9(framebuffer, time, this.particleTexture2);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene9(framebuffer: Framebuffer, elapsedTime: number, texture3: Texture): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.spaceLabMesh);\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        const model = this.hoodlumLogoMesh[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                const y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                const scale2 = (1 + 4 * framebuffer.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                const x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                const z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach(element => {\n            const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            const size = -(4.3 * 192 / (element.z));\n            framebuffer.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public createProceduralTexture3(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class LedPlasmaScene extends AbstractScene {\n\n    private ledTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/led.png'), false).then(\n                (texture: Texture) => this.ledTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.led(framebuffer, time, this.ledTexture);\n    }\n\n    // TODO: create interesting pattern!\n    public led(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        const time = elapsedTime * 0.0007 * 1.0;\n        const lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        const radialWaveCenter = new Vector3f(40.0 / 2.0, 35.0 / 2.0, 0).add(new Vector3f(40.0 / 2.0 *\n            Math.sin(-time * 1.2), 35.0 / 2.0 * Math.cos(-time * 1.2), 0));\n        const difference: Vector3f = new Vector3f(0, 0, 0);\n\n        const horizontalUnits = Math.ceil(framebuffer.width / 8);\n        const verticalUnits = Math.ceil(framebuffer.height / 8);\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                const directionalWave = (Math.sin((x * lineDirection.x + y * lineDirection.y) * 0.8 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                const radialWave = (Math.cos(difference.length() * 0.7) + 1.0) * 0.5;\n                const waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                const intensity = ((waveSum * 15) | 0) % 16;\n                framebuffer.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture, TextureUtils } from '../../texture';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class MetalHeadzScene extends AbstractScene {\n\n    private metalheadz: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private noise: Texture;\n    private dirt: Texture;\n    private skyBox: SkyBox;\n\n    private blenderObjMetal: any;\n\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n        // TODO:\n        // make classes for assets\n        // lens flare, 3d modell\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/metalheadz.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObjMetal = mesh\n            ),\n            TextureUtils.load(require('../../assets/metalheadz.png'), false).then(\n                (texture: Texture) => this.metalheadz = texture\n            ),\n            TextureUtils.load(require('../../assets/ring.png'), true).then(\n                (texture: Texture) => this.texture11 = texture\n            ),\n            TextureUtils.load(require('../../assets/bokeh.png'), true).then(\n                (texture: Texture) => this.texture13 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n            TextureUtils.load(require('../../assets/dirt.png'), true).then(\n                (texture: Texture) => this.dirt = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        const elapsedTime: number = 0.2 * time;\n\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = this.computeCameraMovement(elapsedTime);\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 7));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.metalheadz);\n\n        const renderingPipeline: TexturingRenderingPipeline = this.texturedRenderingPipeline;\n\n        renderingPipeline.setModelViewMatrix(mv);\n        renderingPipeline.drawMeshArray(framebuffer, this.blenderObjMetal);\n\n        const scale: number = 20;\n        const lensflareScreenSpace: Vector3f =\n            framebuffer.project(camera.getRotation().multiply(new Vector3f(1.1 * scale, 2 * scale, -0.9 * scale)));\n\n        framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 1.2, [\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    private computeCameraMovement(elapsedTime: number): Matrix4f {\n        return Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17)\n            .multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0008).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0009).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 0, 0)\n                    )\n                )\n            );\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f, Matrix4f, Matrix3f } from '../../math';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture';\n\nexport class ParticleStreamsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture().then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleStreams(framebuffer, time, this.particleTexture2);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.55);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            const radius = 2.8;\n            const radius2 = 2.9 + 3 * Math.sin(Math.PI * 2 * i / num - elapsedTime * 0.002);\n\n            for (let j = 0; j < num2; j++) {\n\n                const x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                const y = Math.cos(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius + 8 + radius2;\n                const z = Math.sin(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius;\n\n                points.push(Matrix3f.constructXRotationMatrix(Math.PI * 2 * i / num - Math.sin(elapsedTime * 0.0003 + Math.PI * 2 * i / num)).multiply(new Vector3f(x, y, z)));\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n                Matrix4f.constructZRotationMatrix(Math.PI * 0.17).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(elapsedTime * 0.00015).multiplyMatrix(\n                        Matrix4f.constructXRotationMatrix(Math.PI * 2 / 3 * i + elapsedTime * 0.0006)))\n            );\n\n            const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort((a, b) => {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                // let size = -(2.0 * 192 / (element.z));\n                const size = -(1.3 * 192 / (element.z));\n                if (element.z < -4)\n                    framebuffer.drawParticleNoDepth(\n                        Math.round(element.x - size / 2),\n                        Math.round(element.y - size / 2),\n                        Math.round(size), Math.round(size), texture, framebuffer.interpolate(-90, -55, element.z));\n            });\n        }\n    }\n\n\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\n\n/**\n * Plane deformation\n *\n * 2D plane deformations using lookup tables was a great\n * way to get smooth animations of complex calculations\n * running on slower processors. These effects were very\n * common in the 90s demoscene.\n *\n * The idea was to take a texture and deform it using a\n * pre-calculated math reference table. Different formulas\n * gave different effects such as fake 3d tunnels, wormholes\n * and landscapes.\n *\n * https://www.iquilezles.org/www/articles/deform/deform.htm\n *\n */\n\nexport class PlaneDeformationScene {\n\n    private mLUT: Int32Array;\n    public texture: Texture;\n\n    constructor(\n        private effectStyle: number,\n        private texturePath: string\n    ) {\n    }\n\n    onInit() { }\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.texturePath, false).then(\n                (texture: Texture) => {\n                    this.texture = texture;\n                    this.createLUT(this.effectStyle, framebuffer.width, framebuffer.height, this.texture.width, this.texture.height);\n                }\n            ),\n        ]);\n\n    }\n\n    // fill math lookup table values with crazy values\n    public createLUT(effectStyle: number, effectWidth: number, effectHeight: number, textureWidth: number, textureHeight: number): Promise<any> {\n\n        // initializae lookup array\n        this.mLUT = new Int32Array(3 * effectWidth * effectHeight);\n\n        // increment placeholder\n        let k = 0;\n\n        // u and v are euclidean coordinates\n        let u = 0;\n        let v = 0\n        let bright = 0;\n\n        for (let j = 0; j < effectHeight; j++) {\n            const y = -1.00 + 2.00 * j / effectHeight;\n            for (let i = 0; i < effectWidth; i++) {\n                const x = -1.00 + 2.00 * i / effectWidth;\n                const d = Math.sqrt(x * x + y * y);\n                const a = Math.atan2(y, x);\n\n                const r = d;\n                switch (effectStyle) {\n                    case 1:   // stereographic projection / anamorphosis\n                        u = Math.cos(a) / d;\n                        v = Math.sin(a) / d;\n                        bright = -50 * (2 / (6 * r + 3 * x));\n                        break;\n                    case 2:  // hypnotic rainbow spiral\n                        v = Math.sin(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        u = Math.cos(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        bright = 1;\n                        break;\n                    case 3:  // rotating tunnel\n                        v = 2 / (6 * r + 3 * x);\n                        u = a * 3 / Math.PI;\n                        bright = 25 * -v;\n                        break;\n                    case 4:  // wavy star-burst\n                        v = (-0.4 / r) + .1 * Math.sin(8 * a);\n                        u = .5 + .5 * a / Math.PI;\n                        bright = 0;\n                        break;\n                    case 5:  // hyper-space travel\n                        u = (0.02 * y + 0.03) * Math.cos(a * 3) / r;\n                        v = (0.02 * y + 0.03) * Math.sin(a * 3) / r;\n                        bright = 0;\n                        break;\n                    case 6:  // five point magnetic flare\n                        u = 1 / (r + 0.5 + 0.5 * Math.sin(5 * a));\n                        v = a * 3 / Math.PI;\n                        bright = 0;\n                        break;\n                    case 7:  // cloud like dream scroll\n                        u = 0.1 * x / (0.11 + r * 0.5);\n                        v = 0.1 * y / (0.11 + r * 0.5);\n                        bright = 0;\n                        break;\n                    case 8:  // floor and ceiling with fade to dark horizon\n                        u = x / Math.abs(y);\n                        v = 1 / Math.abs(y);\n                        bright = 40 * -v;\n                        break;\n                    case 9:  // hot magma liquid swirl\n                        u = 0.5 * (a) / Math.PI;\n                        v = Math.sin(2 * r);\n                        bright = 0;\n                        break;\n                    case 10:  // clockwise flush down the toilet\n                        v = Math.pow(r, 0.1);\n                        u = (1 * a / Math.PI) + r;\n                        bright = 0;\n                        break;\n                    case 11:  // 3D ball\n                        v = x * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        u = y * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        bright = 7 * -18.7 * (x + y + r * r - (x + y - 1) * Math.sqrt(4 - 5 * r * r) / 3) / (r * r + 1);\n                        break;\n                    default:  // show texture with no deformation or lighting\n                        u = x;\n                        v = y;\n                        bright = 0;\n                        break;\n                }\n                this.mLUT[k++] = (textureWidth * u) & textureWidth - 1;\n                this.mLUT[k++] = (textureHeight * v) & textureHeight - 1;\n                this.mLUT[k++] = Utils.clamp(bright, -255, 255);\n            }\n        }\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // this.drawOldPlaneDeformationStar(framebuffer, time >> 3);\n        // this.drawOldPlaneDeformationFloor(framebuffer, time >> 3);\n        this.drawPlaneDeformation(framebuffer, time >> 3, time >> 3);\n    }\n\n    /**\n     * For every frame, go through every pixel and use the reference table (mLUT)\n     * to get which pixel of the texture it should draw at the current pixel.\n     *\n     * TODO:\n     * - Rotate effect via rotozoomer class\n     *   use drawOldPlaneDeformationStar to add another lookup layer [mLUT * 4]\n     *   use drawOldPlaneDeformationFloor to update createLUT(8) floor algorithm\n     *\n     */\n    drawPlaneDeformation(framebuffer: Framebuffer, elapsedTimeY: number, elapsedTimeX: number) {\n\n        for (let pixelCount = 0; pixelCount < framebuffer.framebuffer.length; pixelCount++) {\n            const o = (pixelCount << 1) + pixelCount; // equivalent to 3 * pixelCount\n            const u = this.mLUT[o + 0] + elapsedTimeX; // to look like its animating, add timeDisplacement\n            const v = this.mLUT[o + 1] + elapsedTimeY;\n            const adjustBrightness = this.mLUT[o + 2]; // fade out\n\n            // get the R,G,B values from texture\n            let currentPixel = this.texture.texture[this.texture.width * (v & this.texture.height - 1) + (u & this.texture.width - 1)];\n\n            // only apply brightness if it was calculated\n            if (adjustBrightness !== 0) {\n\n                // disassemble pixel using bit mask to remove color components for greater speed\n                let r = currentPixel & 0xFF;        // get red\n                let g = currentPixel >> 8 & 0xFF;   // get green\n                let b = currentPixel >> 16 & 0xFF;  // get blue\n\n                // make darker or brighter\n                r += adjustBrightness;\n                g += adjustBrightness;\n                b += adjustBrightness;\n\n                // constrain RGB to make sure they are within 0-255 color range\n                r = Utils.clamp(r, 0, 255);\n                g = Utils.clamp(g, 0, 255);\n                b = Utils.clamp(b, 0, 255);\n\n                // reassemble colors back into pixel\n                currentPixel = new Color(r, g, b, 255).toPackedFormat();\n            }\n\n            // put texture pixel on buffer screen\n            framebuffer.framebuffer[pixelCount] = currentPixel;\n        }\n    }\n\n    /**\n     *\n     * Previous Plane deformation without lookup tables for reference\n     *\n     * http://sol.gfxile.net/gp/ch17.html\n     * TODO:\n     * - better textures\n     * - precalc lookup tables\n     * - fadeout\n     * - substraction to create black holes\n     */\n    drawOldPlaneDeformationFloor(framebuffer: Framebuffer, elapsedTime: number) {\n        /*\n        mLUT(8)\n            u = x / Math.abs(y);\n            v = 1 / Math.abs(y);\n            bright = 10 * -v;\n        */\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            const ydist = (y - framebuffer.height / 2);\n            const v = (((1 / Math.abs(ydist / 100 * 0.02) + elapsedTime * 0.069) % 256) + 256) % 256;\n            const alpha = 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2));\n                const u = (((((xdist / framebuffer.width) / Math.abs(ydist / 100 * 0.02))) % 256) + 256) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawOldPlaneDeformationStar(framebuffer: Framebuffer, elapsedTime: number) {\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2)) / (framebuffer.width / 2);\n                const ydist = (y - framebuffer.height / 2) / (framebuffer.height / 2);\n                const alpha = 1;// 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n                const a = Math.atan2(ydist, xdist) + elapsedTime * 0.0004;\n                const v = (a * 3 / Math.PI + elapsedTime * 0.0004) * 128 % 256;\n                const d = Math.sqrt(xdist * xdist + ydist * ydist);\n                const u = (1 / (d + 0.5 + 0.5 * Math.sin(5 * a)) * 32 + elapsedTime * 0.03) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f } from '../../math';\nimport { Color } from '../../core/Color';\n\nexport class PlasmaScene extends AbstractScene {\n\n    private GRADIENTLEN = 1500;\n\n    // swing/wave function parameters\n    private SWINGLEN = this.GRADIENTLEN * 3;\n    private SWINGMAX = this.GRADIENTLEN / 2 - 1;\n\n    // gradient & swing curve arrays\n    private colorGrad: Array<number>;\n    private swingCurve: Array<number>;\n\n    public init(): Promise<any> {\n        this.makeGradient(this.GRADIENTLEN);\n        this.makeSwingCurve(this.SWINGLEN, this.SWINGMAX);\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawPlasma(framebuffer, time);\n        // this.drawOldSchoolPlasma(framebuffer, Date.now());\n    }\n\n    // fill the given array with a nice swingin' curve\n    // three cos waves are layered together for that\n    // the wave \"wraps\" smoothly around\n    makeSwingCurve(arrlen: number, maxval: number) {\n        const factor1 = 2;\n        const factor2 = 3;\n        const factor3 = 6;\n\n        this.swingCurve = new Array<number>(this.SWINGLEN);\n\n        const halfmax = maxval / factor1;\n\n        for (let i = 0; i < arrlen; i++) {\n            const ni = i * (Math.PI * 2) / arrlen; // ni goes [0..TWO_PI] -> one complete cos wave\n            this.swingCurve[i] = Math.round(\n                Math.cos(ni * factor1) *\n                Math.cos(ni * factor2) *\n                Math.cos(ni * factor3) *\n                halfmax + halfmax);\n        }\n    }\n\n    // create a smooth, colorful gradient by cosinus curves in the RGB channels\n    makeGradient(arrlen: number) {\n        // random between 1 and 5\n        const rf = 2;\n        const gf = 4;\n        const bf = 4;\n\n        // random between 0 and gradient length\n        const rd = 818; // 0;\n        const gd = 1095; // arrlen / gf;\n        const bd = 1351; // arrlen / bf / 2;\n\n        this.colorGrad = new Array<number>(this.GRADIENTLEN);\n\n        // fill gradient array\n        for (let i = 0; i < arrlen; i++) {\n            const r = this.cos256(arrlen / rf, i + rd);\n            const g = this.cos256(arrlen / gf, i + gd);\n            const b = this.cos256(arrlen / bf, i + bd);\n            this.colorGrad[i] = new Color(r, g, b, 255).toPackedFormat();\n        }\n    }\n\n    // helper: get cosinus sample normalized to 0..255\n    private cos256(amplitude: number, x: number) {\n        return Math.trunc(Math.cos(x * (Math.PI * 2) / amplitude) * 127 + 127);\n    }\n\n    // helper: get a swing curve sample\n    private swing(i: number) {\n        return this.swingCurve[i % this.SWINGLEN];\n    }\n\n    // helper: get a gradient sample\n    private gradient(i: number) {\n        return this.colorGrad[i % this.GRADIENTLEN];\n    }\n\n    drawPlasma(framebuffer: Framebuffer, time: number) {\n        let i = 0;\n        const t = Math.trunc(time >> 3);\n        const swingT = this.swing(t);\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            const swingY = this.swing(y);\n            const swingYT = this.swing(y + t);\n            for (let x = 0; x < framebuffer.width; x++) {\n                // this is where the magic happens: map x, y, t around\n                // the swing curves and lookup a color from the gradient\n                // the \"formula\" was found by a lot of experimentation\n                framebuffer.framebuffer[i++] = this.gradient(this.swing(\n                    this.swing(x + swingT) + swingYT) +\n                    this.swing(this.swing(x + t) + swingY));\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Dodecahedron } from '../../geometrical-objects/Dodecahedron';\nimport { Pyramid } from '../../geometrical-objects/Pyramid';\nimport { Sphere } from '../../geometrical-objects/Sphere';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class RazorScene extends AbstractScene {\n\n    private texture10: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private dirt: Texture;\n    private noise: Texture;\n\n    private cube: Cube;\n    private dodecahedron: Dodecahedron;\n    private pyramid: Pyramid;\n    private icosahedron: Sphere; // Icosahedron;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.cube = new Cube();\n        this.dodecahedron = new Dodecahedron();\n        this.pyramid = new Pyramid();\n        this.icosahedron = new Sphere(6, 10);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/spark.png'), true).then(texture => this.texture10 = texture),\n            TextureUtils.load(require('./assets/ring.png'), true).then(texture => this.texture11 = texture),\n            TextureUtils.load(require('./assets/bokeh.png'), true).then(texture => this.texture13 = texture),\n            TextureUtils.load(require('./assets/dirt.png'), true).then(texture => this.dirt = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.reproduceRazorScene(framebuffer, time * 0.0025, [\n            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        // framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.drawScaledTextureClipBi(0, 0, framebuffer.width, framebuffer.height, texture3, .75);\n\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise, 0.04);\n    }\n\n    public reproduceRazorScene(framebuffer: Framebuffer, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f;\n\n        const camera = Matrix4f.constructTranslationMatrix(0, 0, -6.4 - 5 * (Math.sin(elapsedTime * 0.06) * 0.5 + 0.5)).multiplyMatrix(\n            Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.08) * 0.5 + 0.5) * 0.5).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.1)));\n\n        let scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            modelViewMartrix);\n\n\n        let model = this.dodecahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        const yDisplacement = -1.5;\n        const distance = 2.8;\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.icosahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        // TODO:  store Mesh inside cube instance and use cube.draw(framebuffer);\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.pyramid.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        /**\n         * SHADOWS\n         */\n        this.renderingPipeline.enableLighting(false);\n        this.renderingPipeline.setColor(Color.DARK_GRAY);\n\n        scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.dodecahedron.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.pyramid.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.icosahedron.getMesh(), modelViewMartrix);\n\n        this.renderingPipeline.enableLighting(true);\n\n        const lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(12.0, 4.0, 0)));\n\n        framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 100, texture, dirt);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class RotoZoomerScene extends AbstractScene {\n\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            /*TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),*/\n            TextureUtils.load(require('../../assets/xray.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawRotoZoomer(framebuffer, time);\n    }\n\n    drawRotoZoomer(framebuffer: Framebuffer, time: number) {\n        const scale = Math.sin(time * 0.0005) + 1.1;\n\n        const yStepX = Math.sin(time * 0.0003) * scale;\n        const yStepY = Math.cos(time * 0.0003) * scale;\n\n        const xStepX = yStepY;\n        const xStepY = -yStepX;\n\n        let texYCoord = Math.sin(time * 0.0002) * 512;\n        let texXCoord = Math.cos(time * 0.0002) * 512;\n\n        let texYCoordInner = 0;\n        let texXCoordInner = 0;\n        let framebufferPos = 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            texXCoordInner = texXCoord;\n            texYCoordInner = texYCoord;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.framebuffer[framebufferPos++] = this.logoTexture.texture[(texXCoordInner & 127) + (texYCoordInner & 127) * 128];\n\n                texXCoordInner += xStepX;\n                texYCoordInner += xStepY;\n            }\n\n            texXCoord += yStepX;\n            texYCoord += yStepY;\n        }\n    }\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","import { Color } from '../../core/Color';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Vector2f } from '../../math/Vector2f';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { FontRenderer } from './FontRenderer';\n\nexport class SineScrollerScene extends AbstractScene {\n\n    private texture2: Texture;\n    private startTime: number;\n    private fontRenderer: FontRenderer;\n    private fontRenderer2: FontRenderer;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.startTime = Date.now();\n\n        const fonts: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ@+# ' +\n            '0123456789' +\n            '!\\'()?-/.,';\n        this.fontRenderer = new FontRenderer(\n            framebuffer,\n            32, 34, fonts,\n            require('./assets/fraxionFont.png')\n        );\n\n        const fonts2: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ 012' +\n            '3456789*:?' +\n            '!-(),\\'.+~<' +\n            '>>#// ';\n        this.fontRenderer2 = new FontRenderer(\n            framebuffer,\n            16, 18, fonts2,\n            require('./assets/anarchyFont.png')\n        );\n        /*\n                const fonts: string =\n                'ABCDEFGHIJ' +\n                'KLMNOPQRST' +\n                'UVWXYZ!?:;' +\n                '0123456789' +\n                '\"(),-.\\'@# ';\n                this.fontRenderer = new FontRenderer(\n                    framebuffer,\n                    32, 25, fonts,\n                    require('./assets/dragonsFont.png')\n                );*/\n        return Promise.all([\n            TextureUtils.load(require('../../assets/hoodlumLogo.png'), true).then(\n                (texture: Texture) => this.texture2 = texture\n            ),\n            this.fontRenderer.init(),\n            this.fontRenderer2.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawStarField(framebuffer, time);\n\n        framebuffer.drawTexture(framebuffer.width/2 - this.texture2.width/2, 0, this.texture2, 1.0);\n\n        this.fontRenderer.drawText(framebuffer, 0, 102, ' # TEAM GENESIS # IS BACK IN 2018 WITH A NEW PC FIRST! \\'STAR WARS - EMPIRE AT WAR\\' DO YOU LIKE THIS?    ', time);\n        this.fontRenderer2.drawText(framebuffer, 0, framebuffer.height - 20,\n            '   * WE REALLY LOVE SCROLLERS * HOW ABOUT YOU? THIS PRODUCTION IS FROM HOODLUM' +\n            '~< LETS GO ON WITH THE GENERAL BLAH BLAH      ', time * 1.6, false);\n\n        // animated rainbow horizontal lines\n        const horizontalUnits = framebuffer.width / 16;\n        for (let i: number = 0; i < horizontalUnits; i++) {\n            const myTime = time * 0.003;\n            const waveSum = i / horizontalUnits * 0.6;\n            const red = (Math.cos(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const green = (Math.sin(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const blue = (Math.sin(myTime) + 1.0) * 0.5 * 255;\n\n            const color: number = 255 << 24 | blue << 16 | green << 8 | red;\n            framebuffer.drawRect(i * 16, 68, 16, color);\n            framebuffer.drawRect(((horizontalUnits-1) - i) * 16, 168, 16, color);\n        }\n    }\n\n    public drawStarField(frambuffer: Framebuffer, elapsedTime: number): void {\n        const darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        const lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        const backgroundColor = 255 << 24 | 0 << 16 | 0 << 8 | 0;\n\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        const stars = new Array<Vector2f>();\n        const stars2 = new Array<Vector2f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        frambuffer.clearColorBuffer(backgroundColor);\n        frambuffer.drawRect2(0, 68, frambuffer.width, 100, Color.DARK_BLUE.toPackedFormat());\n\n        for (let i = 0; i < 100; i++) {\n            frambuffer.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % frambuffer.width, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            frambuffer.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % frambuffer.width, stars2[i].y, lightStarColor);\n        }\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector4f } from '../../math/Vector4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Fog } from '../../shading/fog/Fog';\nimport { LinearFog } from '../../shading/fog/LinearFog';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusKnotTunnelScene extends AbstractScene {\n\n    private noise: Texture;\n    private particleTexture: Texture;\n    private cocoon: Texture;\n    private torusKnot: TorusKnot = new TorusKnot(true);\n    private fog: Fog = new LinearFog(-50, -240, new Vector4f(0.67, 0.4, 0.5, 1.0));\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.renderingPipeline.setFog(this.fog);\n\n        return Promise.all([\n            TextureUtils.generateProceduralNoise().then((texture: Texture) => this.noise = texture),\n            TextureUtils.load(require('../../assets/cocoon.png'), false).then(\n                (texture: Texture) => this.cocoon = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture2().then(\n                (texture: Texture) => this.particleTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.torusTunnel(framebuffer, time * 0.019);\n        framebuffer.drawScaledTextureClipAdd(\n            framebuffer.width / 2 - this.cocoon.width / 2,\n            framebuffer.height / 2 - this.cocoon.height / 2,\n            this.cocoon.width, this.cocoon.height, this.cocoon, 0.67);\n\n        // framebuffer.noise(time, this.noise);\n        this.glitchScreen(framebuffer, time * 5, this.noise);\n    }\n\n    public glitchScreen(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.00002) * 0.9 + 0.1);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        const texture2 = new Texture();\n        texture2.height = framebuffer.height;\n        texture2.width = framebuffer.width;\n        texture2.texture = framebuffer.framebuffer;\n\n\n        const blockWidth = 20;\n        const horizontalUnits = Math.floor(framebuffer.width / blockWidth);\n        const verticalUnits = Math.floor(framebuffer.height / blockWidth);\n\n        for (let x = 0; x < horizontalUnits; x++) {\n            for (let y = 0; y < verticalUnits; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                framebuffer.drawTextureRect(blockWidth * (horizontalUnits - x), blockWidth * ((horizontalUnits * rng.getFloat()) | 0), blockWidth * x, blockWidth * y, blockWidth, blockWidth, texture2.texture, texture2.width, 0.03 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                for (let y = 0; y < verticalUnits; y++) {\n                    framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, blockWidth * (Math.round(elapsedTime / 100 + x + y) % 12), 0, blockWidth, blockWidth, texture.texture, texture.width, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.tmpGlitch, framebuffer.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n        const rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            const scale = rng2.getFloat() * glitchFactor;\n            const off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * framebuffer.width;\n                let glIndex = yStart * framebuffer.width + framebuffer.width - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n\n                glIndex = yStart * framebuffer.width;\n                const count = framebuffer.width - offset;\n\n                for (let i = 0; i < count; i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n    public torusTunnel(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const scale = 1.0;\n        const lookAhead: number = 0.4;\n\n        const frame = this.torusFunction3(elapsedTime * 0.02);\n        const frame2 = this.torusFunction3(elapsedTime * 0.02 + lookAhead);\n\n        const tangent = frame2.sub(frame).normalize();\n        let up = frame.add(frame2).normalize();\n        const right = tangent.cross(up).normalize();\n        up = right.cross(tangent).normalize();\n\n        const translation = Matrix4f.constructIdentityMatrix();\n        // translation vector\n        translation.m14 = -frame.x;\n        translation.m24 = -frame.y;\n        translation.m34 = -frame.z;\n\n        const rotation = Matrix4f.constructIdentityMatrix();\n        // x vector\n        rotation.m11 = right.x;\n        rotation.m21 = right.y;\n        rotation.m31 = right.z;\n\n        // y vector\n        rotation.m12 = up.x;\n        rotation.m22 = up.y;\n        rotation.m32 = up.z;\n\n        // z vector\n        rotation.m13 = -tangent.x;\n        rotation.m23 = -tangent.y;\n        rotation.m33 = -tangent.z;\n\n        const finalMatrix = rotation.transpose().multiplyMatrix(translation);\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -10).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04)));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(elapsedTime * 0.01).multiplyMatrix(finalMatrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torusKnot.getMesh(), modelViewMartrix);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2;\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Torus } from '../../geometrical-objects/Torus';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusScene extends AbstractScene {\n\n    private razorLogo: Texture;\n    private torus: Torus = new Torus();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/razor1911.png'), true).then(\n                (texture: Texture) => this.razorLogo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.drawTitanEffect(framebuffer, time);\n        this.shadingTorus(framebuffer, time * 0.02);\n        framebuffer.drawTexture(framebuffer.width / 2 - this.razorLogo.width / 2, 0, this.razorLogo, 1.0);\n    }\n\n    public shadingTorus(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.05);\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -24).multiplyMatrix(modelViewMartrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torus.getMesh(), modelViewMartrix);\n    }\n\n\n    private drawTitanEffect(framebuffer: Framebuffer, time: number) {\n        framebuffer.clear();\n        const horizontalNum = framebuffer.width / 20;\n        const verticalNum = framebuffer.height / 20;\n\n        for (let x = 0; x < horizontalNum; x++) {\n            for (let y = 0; y < verticalNum; y++) {\n\n                const scale = ((Math.sin(time * 0.004 + x * 0.7 + y * 0.4) + 1) / 2);\n                const size = Math.round(scale * 8 + 1) * 2;\n                const offset = (20 / 2 - size / 2) | 0;\n                const color = 255 << 24 | (85 * scale) << 16 | (55 * scale) << 8 | (55 * scale);\n                framebuffer.drawBox2(x * 20 + offset, y * 20 + offset, size, size, color);\n            }\n        }\n\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract twister into effect class\n */\nexport class TwisterScene extends AbstractScene {\n\n    private backgroundTexture: Texture;\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.backgroundTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.drawScaledTextureClipBi(\n            0,\n            0,\n            framebuffer.width, framebuffer.height, this.backgroundTexture, 1.0);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.backgroundTexture.texture);\n        this.draw(framebuffer, this.logoTexture, time);\n    }\n\n    private draw(framebuffer: Framebuffer, texture: Texture, time: number): void {\n        const a: number = time * 0.001;\n        for (let i: number = 10; i < framebuffer.height - 10; i++) {\n            const xoff = (Math.sin(a + i * 0.01) * 50) | 0;\n            const rot = Math.sin(a * 0.4 + i * 0.0021) * Math.PI * 2;\n            let scale = 42;\n            const x1 = (Math.sin(rot) * scale) | 0;\n            const x2 = (Math.sin(Math.PI * 2 / 4 + rot) * scale) | 0;\n            const x3 = (Math.sin(Math.PI * 2 / 4 * 2 + rot) * scale) | 0;\n            const x4 = (Math.sin(Math.PI * 2 / 4 * 3 + rot) * scale) | 0;\n\n            if (x2 > x1) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 1.5 + rot));\n                const dist = x2 - x1;\n                const xPos = x1 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x3 > x2) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 2.5 + rot));\n                const dist = x3 - x2;\n                const xPos = x2 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x4 > x3) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 3.5 + rot));\n                const dist = x4 - x3;\n                const xPos = x3 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x1 > x4) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 4.5 + rot));\n                const dist = x1 - x4;\n                const xPos = x4 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n        }\n    }\n\n    private drawSpan(\n        framebuffer: Framebuffer,\n        dist: number,\n        xpos: number,\n        ypos: number,\n        scale: number,\n        texture: Texture,\n        time: number): void {\n        let framebufferIndex = xpos + ypos * framebuffer.width;\n        let textureIndex = (((ypos - time * 0.029) | 0) & 0xff) * texture.width;\n        const textureForwardDifference = texture.width / dist;\n        const hightlight = Math.pow(scale, 11) * 115;\n\n        for (let j = 0; j < dist; j++) {\n            const color = texture.texture[textureIndex | 0];\n\n            const r = Math.min(((color >> 0 & 0xff) * scale) + hightlight, 255);\n            const g = Math.min(((color >> 8 & 0xff) * scale) + hightlight, 255);\n            const b = Math.min(((color >> 16 & 0xff) * scale) + hightlight, 255);\n\n            framebuffer.framebuffer[framebufferIndex] = r | g << 8 | b << 16 | 255 << 24;\n\n            framebufferIndex++;\n            textureIndex += textureForwardDifference;\n        }\n    }\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { TextureUtils, Texture } from '../../texture/index';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class VoxelBallsScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.YELLOW.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private blurred: Texture;\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        this.renderTransparent(framebuffer, time);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTextureFullscreen(texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n\n        framebuffer.clearDepthBuffer();\n\n        const xSteps = 5;\n        const xsteps = 5;\n        const zsteps = 5;\n        for (let x = 0; x < xSteps; x++) {\n            for (let y = 0; y < xsteps; y++) {\n                for (let z = 0; z < zsteps; z++) {\n                    let scale = (Math.sin(x * 0.3 + time * 0.0009) + 1.0) * 0.5 *\n                        (Math.sin(y * 0.4 + time * 0.002) + 1.0) * 0.5 *\n                        (Math.sin(z * 0.3 + time * 0.001) + 1.0) * 0.5;\n                    if (scale < 0.3) {\n                        // continue;\n                    }\n                    scale = 0.8;\n                    const mat =\n                        Matrix4f.constructTranslationMatrix(0, 0, -11).multiplyMatrix(\n                            Matrix4f.constructYRotationMatrix(time * 0.0003).multiplyMatrix(\n                                Matrix4f.constructXRotationMatrix(time * 0.0005).multiplyMatrix(\n                                    Matrix4f.constructZRotationMatrix(time * 0.0004).multiplyMatrix(\n                                        Matrix4f.constructTranslationMatrix(x - xSteps / 2 + 0.5, y - xsteps / 2 + 0.5, z - zsteps / 2 + 0.5)\n                                            .multiplyMatrix(\n                                                Matrix4f.constructScaleMatrix(scale, scale, scale)))))); // .multiplyMatrix(\n                    //       Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    //           Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n\n                    this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), mat);\n                }\n            }\n        }\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class Dodecahedron extends AbstractGeometricObject {\n\n    constructor() {\n\n        super();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        const phi = (1 + Math.sqrt(5)) * 0.5;\n        const a = 1;\n        const b = 1 / phi;\n        const c = 2 - phi;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(c, 0, a), new Vector4f(-c, 0, a), new Vector4f(-b, b, b), new Vector4f(0, a, c),\n            new Vector4f(b, b, b), new Vector4f(b, -b, b), new Vector4f(0, -a, c), new Vector4f(-b, -b, b),\n            new Vector4f(c, 0, -a), new Vector4f(-c, 0, -a), new Vector4f(-b, -b, -b), new Vector4f(0, -a, -c),\n            new Vector4f(b, -b, -b), new Vector4f(b, b, -b), new Vector4f(0, a, -c), new Vector4f(-b, b, -b),\n            new Vector4f(1, c, 0), new Vector4f(-a, c, 0), new Vector4f(-1, -c, 0), new Vector4f(a, -c, 0)\n        ];\n\n        const index: Array<number> = [\n            0, 4, 1, 1, 3, 2, 1, 4, 3, 1, 7, 0,\n            0, 6, 5, 0, 7, 6, 8, 12, 9, 9, 11, 10,\n            9, 12, 11, 9, 15, 8, 8, 14, 13, 8, 15, 14,\n            14, 3, 13, 13, 4, 16, 13, 3, 4, 3, 14, 2,\n            2, 15, 17, 2, 14, 15, 11, 6, 10, 10, 7, 18,\n            10, 6, 7, 6, 11, 5, 5, 12, 19, 5, 11, 12,\n            16, 4, 19, 19, 0, 5, 19, 4, 0, 19, 12, 16,\n            16, 8, 13, 16, 12, 8, 17, 15, 18, 18, 9, 10,\n            18, 15, 9, 18, 7, 17, 17, 1, 2, 17, 7, 1\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Pyramid extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(0, a, 0),\n            new Vector4f(a, -a, -a),\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, a),\n            new Vector4f(-a, -a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 1, 2,\n            0, 3, 1,\n            0, 4, 3,\n            0, 2, 4\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Sphere extends AbstractGeometricObject {\n\n    public constructor(xSteps: number = 16, ySteps: number = 16) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = xSteps;\n        const STEPS2 = ySteps;\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    private sphereFunction(theta: number, phi: number): Vector4f {\n        return new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor(inverse: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            const tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize();\n            const right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        this.buildMesh(points, index, inverse);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { BlenderScene } from '../../blender/BlenderScene';\n\n/**\n * Load Wavefront OBJ file that was converted via obj2json utility.\n * to save the convertToMeshArray step\n * renamed to JSX file to load file at runtime\n */\nexport class BlenderLoader {\n\n    public static load(filename: string): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: string): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.getBlenderScene(meshes, false);\n        });\n    }\n\n    private constructor() {\n\n    }\n}\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Mesh } from '../../blender/mesh';\nimport { convertToMeshArray } from '../../blender/parseUtils';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class WavefrontLoader {\n\n    public static load(filename: any): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: any): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.getBlenderScene(meshes);\n        });\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Fog {\n\n    public abstract computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Fog } from './Fog';\n\nexport class LinearFog extends Fog {\n\n    private zStart: number;\n    private zEnd: number;\n    private fogColor: Vector4f;\n\n    public constructor(zStart: number, zEnd: number, fogColor: Vector4f) {\n        super();\n        this.zStart = zStart;\n        this.zEnd = zEnd;\n        this.fogColor = fogColor;\n    }\n\n    public computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f {\n        if (vertex.z >= this.zStart) {\n            return color;\n        } else if (vertex.z <= this.zEnd) {\n            return this.fogColor;\n        } else {\n            const f: number = (this.zEnd - vertex.z) / (this.zEnd - this.zStart);\n            return new Vector4f(\n                color.x * f + this.fogColor.x * (1 - f),\n                color.y * f + this.fogColor.y * (1 - f),\n                color.z * f + this.fogColor.z * (1 - f)\n            );\n        }\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export interface musicProperties {\n    timeSeconds: number;\n    timeMilliseconds: number;\n    sceneData: sceneData;\n}\n\n// scene variables | things you set through jsRocket\nexport interface sceneData {\n    effect: any;\n    transitionType: any;\n    transitionValue: any;\n    snare: any;\n    bass: any;\n}\n\n// Beats per minute of your demo tune\nexport const BPM = 125;\n\n// The resolution between two beats, four is usually fine,- eight adds a bit more finer control\nexport const ROWS_PER_BEAT = 6;\n\n// we calculate this now, so we can translate between rows and seconds later on\nexport const ROW_RATE = BPM / 60 * ROWS_PER_BEAT;\n","import './JSRocket';\nimport './cowbell/cowbell'\nimport './cowbell/audio_player'\nimport './cowbell/web_audio_player'\nimport './cowbell/openmpt/openmpt_player'\nimport {\n    musicProperties,\n    ROW_RATE,\n    sceneData\n} from './MusicProperties';\nexport class SoundManager {\n\n    public audioContext: AudioContext;\n    public syncDevice;\n    public isPlaying = false;\n    public demoMode: boolean;\n    public row = 0;    // the current row we're on\n\n    //  container for audio values to be used by effects (time, bass, effect, transitions)\n    public musicProperties: musicProperties;\n    public sceneData: sceneData;\n\n    public audioPlayer;\n    public player;\n    public audioElement: HTMLAudioElement;\n    public track;\n\n    public constructor() {\n\n        // Initialize JS Rocket\n        this.syncDevice = new JSRocket.SyncDevice();\n        this.syncDevice.connected = false;\n\n    }\n\n    /**\n     * Load audio files supported by cowbell\n     *\n     * @param {string} filename     audio file to load\n     * @returns {Promise<void>}     promise\n     */\n    public loadMusic(filename: string): Promise<void> {\n        return new Promise((resolve) => {\n\n            const fileExtension = filename.split('.').pop().toLowerCase();\n\n            switch (fileExtension) {\n                case 'it':\n                case 'xm':\n                case 's3m':\n                case 'mod':\n                    this.audioPlayer = new Cowbell.Player.OpenMPT({\n                        'pathToLibOpenMPT': './openmpt/libopenmpt.js'\n                    });\n                    break;\n                case 'ogg':\n                case 'mp3':\n                default:\n                    this.audioPlayer = new Cowbell.Player.Audio();\n                    break;\n            }\n            this.track = new this.audioPlayer.Track(filename);\n            this.audioElement = this.track.open();\n            resolve();\n        });\n    }\n\n    /**\n     * Load XML file for music syncronization for use with JS Rocket\n     *\n     * @param {string} filename      XML file to load\n     * @param {string} demoMode      use true for release mode (uses file) | false when using rocket editor\n     * @returns {Promise<void>}      promise\n     */\n    prepareSync(filename: string, demoMode: boolean): Promise<void> {\n        this.demoMode = demoMode;\n        return new Promise((resolve) => {\n            if (this.demoMode) {\n                this.syncDevice.setConfig({\n                    'rocketXML': filename\n                });\n                this.syncDevice.init('demo');\n\n            } else {\n                this.syncDevice.init();\n            }\n\n            // XML file from JS Rocket library was loaded and parsed, make sure your ogg is ready\n            this.syncDevice.on('ready', () => this.onSyncReady());\n\n            // [JS Rocket - Arrow keys] whenever you change the row, a value or interpolation mode this will get called\n            this.syncDevice.on('update', (newRow: number) => this.onSyncUpdate(newRow));\n\n            // [JS Rocket - Spacebar] in Rocket calls one of those\n            this.syncDevice.on('play', () => this.onPlay());\n            this.syncDevice.on('pause', () => this.onPause());\n            resolve()\n        });\n    }\n\n    onSyncReady() {\n        this.syncDevice.connected = true;\n\n        this.sceneData = {\n            effect: this.syncDevice.getTrack('effect'),\n            snare: this.syncDevice.getTrack('snare'),\n            bass: this.syncDevice.getTrack('bass'),\n            transitionType: this.syncDevice.getTrack('transitionType'),\n            transitionValue: this.syncDevice.getTrack('transitionValue')\n        }\n    }\n\n    // row is only given if you navigate, or change a value on the row in Rocket\n    // on interpolation change (hit [i]) no row value is sent, as the current there is the upper row of your block\n    onSyncUpdate(newRow: number) {\n        if (!isNaN(newRow)) {\n            this.row = newRow;\n        }\n        this.audioElement.currentTime = newRow / ROW_RATE;\n    }\n\n    updateMusic() {\n        // show message if rocket app is not running in background\n        if (!this.syncDevice.connected && !this.demoMode) {\n            return;\n        }\n\n        // update music properties\n        this.musicProperties = {\n            timeSeconds: (this.audioElement?.currentTime) || 0,\n            timeMilliseconds: (this.audioElement?.currentTime) * 1000,\n            sceneData: {\n                effect: this.sceneData.effect.getValue(this.row),\n                transitionType: this.sceneData.transitionType.getValue(this.row),\n                transitionValue: this.sceneData.transitionValue.getValue(this.row),\n                snare: this.sceneData.snare.getValue(this.row),\n                bass: this.sceneData.bass.getValue(this.row),\n            }\n        }\n\n        this.row = this.musicProperties.timeSeconds * ROW_RATE;\n\n        // update JS rocket\n        if (this.audioElement && this.audioElement.paused === false) {\n            // otherwise we may jump into a point in the audio where there's\n            // no timeframe, resulting in Rocket setting row 2 and we report\n            // row 1 back - thus Rocket spasming out\n\n            // this informs Rocket where we are\n            this.syncDevice.update(this.row);\n\n        }\n    }\n\n    onPlay() {\n        if (!this.isPlaying && this.audioElement) {\n            if (this.audioElement.currentTime) {\n                this.audioElement.currentTime = this.row / ROW_RATE;\n            }\n            this.isPlaying = true;\n            this.audioElement.play();\n        }\n        console.log('[onPlay]');\n    }\n\n    onPause() {\n        this.row = this.audioElement.currentTime * ROW_RATE;\n        if (!this.audioElement.paused && this.isPlaying) {\n            this.audioElement.pause();\n            this.isPlaying = false;\n        }\n        console.info('[onPause]');\n    }\n\n    /**\n     * find the prev/next effect and jump to it\n     *\n     * @param   {number} time       where we are in the audio timeline\n     * @param   {number} direction  direction to skip -1 goes backwards.  1 goes forward\n     */\n    public jump(time: number, direction: number, sceneLength: number) {\n        this.row = time * ROW_RATE;\n        const effectJump = Number(this.sceneData.effect.getValue(this.row).toFixed(1));\n        if (Math.trunc(Number(this.musicProperties.sceneData.effect)) !== Math.trunc(effectJump) && effectJump >= 1) {\n            // if running into transition effect 2.5..then keep searching and only land on whole numbers\n            if (parseInt(effectJump.toString(), 10) !== effectJump) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                this.seek(time);\n            }\n        } else {\n            if (time >= 0 && effectJump < sceneLength - 3) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                // go back to the beginning\n                this.seek(0);\n            }\n        }\n    }\n\n    /**\n     * Jumps to a point in the audio timeline in milliseconds\n     *\n     * @param  {number} time            time in milliseconds\n     */\n    public seek(time: number) {\n        this.audioElement.currentTime = time;\n        // update rocket editor position to new timeline location\n        if (!this.demoMode) {\n            this.syncDevice.update(this.audioElement.currentTime * ROW_RATE);\n        }\n    }\n\n    /**\n     * Turns music volume on or off\n     *\n     * @param  {HTMLElement} ref         volume icon to toggle\n     * @param  {boolean} isMuted         on or off\n     */\n    public toggleSound(ref: HTMLElement, isMuted: boolean) {\n        if (isMuted) {\n            ref.setAttribute('title', 'enable sound');\n            ref.classList.remove('fa-volume-up');\n            ref.classList.add('fa-volume-off');\n        } else {\n            ref.setAttribute('title', 'mute sound');\n            ref.classList.remove('fa-volume-off');\n            ref.classList.add('fa-volume-up');\n        }\n        this.audioElement.muted = isMuted;\n    }\n\n    /**\n     * Restore position of timeline & mute preferences on reloads\n     */\n    public initTimeline() {\n        // jump to last position on timeline for local development reloading\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const newLocal = this;\n        const jumpTo = localStorage.getItem('lastTime');\n\n        // poll for mod player since library does not use promises\n        if ((window as any).libopenmpt) {\n            (function poll() {\n                // check if mod was loaded then seek\n                if ((window as any).modulePtr) {\n\n                    // openmpt does not support volume control or muting\n                    document.getElementById('ticker_volume').style.display = 'none';\n                    newLocal.updateRange(newLocal.audioElement.duration);\n\n                    if (jumpTo) {\n                        newLocal.seek(Number(jumpTo));\n                    }\n                    return;\n                }\n                setTimeout(poll, 150);\n            })();\n        } else {\n            newLocal.audioElement.onloadedmetadata = function () {\n                newLocal.updateRange(newLocal.audioElement.duration);\n            };\n            newLocal.seek(Number(jumpTo));\n        }\n\n        // remember last sound preferences\n        const isMuted = localStorage.getItem('soundToggle') === 'true';\n        this.toggleSound(document.getElementById('ticker_volume'), isMuted);\n    }\n\n    /**\n     * Set timeline slider max range\n     *\n     * @param  {number} value         length time in seconds\n     */\n    private updateRange(value: number) {\n        (document.getElementById(\"timeline\") as HTMLInputElement).max = String(Math.floor(value) * 1000);\n    }\n\n    /*\n    // todo: add effect # markers to timeline\n    fetch(rocketData.default).then(response => response.text())\n        .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\n        .then(data => {\n            const tracks: Element[] = Array.from(data.documentElement.getElementsByTagName(\"track\"));\n            tracks.forEach((element) => {\n                if (element.getAttribute(\"name\") === 'effect') {\n                    const keys: Element[] = Array.from(element.getElementsByTagName(\"key\"));\n                    keys.forEach((elementKey) => {\n                        const p = document.createElement(\"option\");\n                        const value = elementKey.getAttribute('row').valueOf();\n                        const label = elementKey.getAttribute('value').valueOf();\n\n                        // remap rows to a range between 0 and 1000\n                        const newValue = Utils.map(Number(label), 0, 1520, 0, 1000);\n\n                        p.value = value;\n                        p.label = label;\n                        // this.tickmarkRef.appendChild(p);\n                    })\n                }\n            });\n        });\n        */\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","(function (window) {\n\n    if (!window.JSRocket) {\n        window.JSRocket = {};\n    }\n    JSRocket.SyncData = function () {\n\n        \"use strict\";\n\n        var _track = [];\n\n        function getTrack(index) {\n            return _track[index];\n        }\n\n        function getIndexForName(name) {\n            for (var i = 0; i < _track.length; i++) {\n\n                if (_track[i].name === name) {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n\n        function getTrackLength() {\n            return _track.length;\n        }\n\n        function createIndex(varName) {\n            var track = new JSRocket.Track();\n            track.name = varName;\n\n            _track.push(track);\n        }\n\n        return {\n            getTrack: getTrack,\n            getIndexForName: getIndexForName,\n            getTrackLength: getTrackLength,\n            createIndex: createIndex\n        };\n    };\n    JSRocket.Track = function () {\n\n        \"use strict\";\n\n        var STEP = 0,\n            LINEAR = 1,\n            SMOOTH = 2,\n            RAMP = 3;\n\n        var data = [];\n\n        function findKeyIndex(keys, row) {\n            var lo = 0, hi = keys.length;\n            while (lo < hi) {\n                var mi = ((hi + lo) / 2) | 0;\n\n                if (keys[mi] < row) {\n                    lo = mi + 1;\n                } else if (keys[mi] > row) {\n                    hi = mi;\n                } else {\n                    return mi;\n                }\n            }\n            return lo - 1;\n        }\n\n        function getValue(row) {\n            var keys = Object.keys(data);\n\n            if (!keys.length) {\n                return 0.0;\n            }\n\n            var idx = findKeyIndex(keys, Math.floor(row));\n            if (idx < 0) {\n                return data[keys[0]].value;\n            }\n            if (idx > keys.length - 2) {\n                return data[keys[keys.length - 1]].value;\n            }\n\n            // lookup keys and values\n            var k0 = keys[idx], k1 = keys[idx + 1];\n            var a = data[k0].value;\n            var b = data[k1].value;\n\n            // interpolate\n            var t = (row - k0) / (k1 - k0);\n            switch (data[k0].interpolation) {\n                case 0:\n                    return a;\n                case 1:\n                    return a + (b - a) * t;\n                case 2:\n                    return a + (b - a) * t * t * (3 - 2 * t);\n                case 3:\n                    return a + (b - a) * Math.pow(t, 2.0);\n            }\n        }\n\n        function add(row, value, interpolation) {\n            data[row] = {\n                \"value\": value,\n                \"interpolation\": interpolation\n            };\n        }\n\n        function remove(row) {\n            delete data[row];\n        }\n\n        return {\n            getValue: getValue,\n            add: add,\n            remove: remove\n        };\n    };\n    JSRocket.SyncDevicePlayer = function (cfg) {\n\n        \"use strict\";\n\n        var _urlRequest,\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'error': function () {\n                }\n            };\n\n        function load(url) {\n\n            _urlRequest = new XMLHttpRequest();\n\n            if (_urlRequest === null) {\n                _eventHandler.error();\n                return;\n            }\n\n            _urlRequest.open('GET', url, true);\n            _urlRequest.onreadystatechange = urlRequestHandler;\n\n            _urlRequest.send();\n        }\n\n        function urlRequestHandler() {\n\n            if (_urlRequest.readyState === 4) {\n                if (_urlRequest.status < 300) {\n                    readXML(_urlRequest.responseText);\n                } else {\n                    _eventHandler.error();\n                }\n            }\n        }\n\n        function readXML(xmlString) {\n            var key,\n                t = 0, tLen, k = 0, kLen,\n                xml = (new DOMParser()).parseFromString(xmlString, 'text/xml'),\n                tracks = xml.getElementsByTagName('tracks');\n\n            //<tracks>\n            var trackList = tracks[0].getElementsByTagName('track');\n\n            for (t, tLen = trackList.length; t < tLen; t++) {\n\n                var track = getTrack(trackList[t].getAttribute('name')),\n                    keyList = trackList[t].getElementsByTagName('key');\n\n                for (k = 0, kLen = keyList.length; k < kLen; k++) {\n                    key = keyList[k];\n                    track.add(parseInt(key.getAttribute('row'), 10),\n                        parseFloat(key.getAttribute('value')),\n                        parseInt(key.getAttribute('interpolation'), 10));\n\n                }\n            }\n\n            _eventHandler.ready();\n        }\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        function nop() {\n\n        }\n\n        if (cfg.rocketXML === \"\" || cfg.rocketXML === undefined || cfg.rocketXML === undefined) {\n            throw (\"[jsRocket] rocketXML is not set, try _syncDevice.setConfig({'rocketXML':'url/To/RocketXML.rocket'})\");\n        } else {\n            load(cfg.rocketXML);\n        }\n\n        return {\n            load: load,\n            getTrack: getTrack,\n            update: nop,\n            on: setEvent\n        };\n    };\n    JSRocket.SyncDeviceClient = function (cfg) {\n\n        \"use strict\";\n\n        var CMD_SET_KEY = 0,\n            CMD_DELETE_KEY = 1,\n            CMD_GET_TRACK = 2,\n            CMD_SET_ROW = 3,\n            CMD_PAUSE = 4,\n            CMD_SAVE_TRACKS = 5;\n\n        var _ws = new WebSocket(cfg.socketURL),\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                },\n                'save': function () {\n                }\n            };\n\n        function onOpen() {\n\n            _ws.binaryType = \"arraybuffer\";\n            _ws.send('hello, synctracker!');\n        }\n\n        function onMessage(e) {\n\n            var queue = (new Uint8Array(e.data)),\n                cmd = queue[0],\n                track, row, value, interpolation;\n\n            //Handshake\n            if (cmd === 104) {\n\n                _eventHandler.ready();\n\n                //PAUSE\n            } else if (CMD_PAUSE === cmd) {\n\n                if (queue[1] === 1) {\n                    _eventHandler.pause();\n                } else {\n                    _eventHandler.play();\n                }\n\n                //SET_ROW\n            } else if (CMD_SET_ROW === cmd) {\n\n                row = toInt(queue.subarray(1, 5));\n\n                _eventHandler.update(row);\n\n                //SET_KEY\n            } else if (CMD_SET_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                //value = Math.round(toFloat(queue.subarray(9, 13)) * 100) / 100; //round to what's seen in Rocket tracks\n                value = toFloat(queue.subarray(9, 13)); //use the values you see in Rocket statusbar\n\n                interpolation = toInt(queue.subarray(13, 14));\n                _syncData.getTrack(track).add(row, value, interpolation);\n\n                //DELETE\n            } else if (CMD_DELETE_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                _syncData.getTrack(track).remove(row);\n\n                //SAVE\n            } else if (CMD_SAVE_TRACKS === cmd) {\n                _eventHandler.save();\n            }\n        }\n\n        function onClose(e) {\n            console.warn(\">> connection closed\", e);\n        }\n\n        function onError(e) {\n            console.error(\">> connection error'd\", e);\n        }\n\n        _ws.onopen = onOpen;\n        _ws.onmessage = onMessage;\n        _ws.onclose = onClose;\n        _ws.onerror = onError;\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            var utf8Name = encodeURIComponent(name).replace(/%([\\dA-F]{2})/g, function (m, c) {\n                return String.fromCharCode('0x' + c);\n            });\n            var message = [CMD_GET_TRACK,\n                (utf8Name.length >> 24) & 0xFF, (utf8Name.length >> 16) & 0xFF,\n                (utf8Name.length >> 8) & 0xFF, (utf8Name.length) & 0xFF];\n\n            for (var i = 0; i < utf8Name.length; i++) {\n                message.push(utf8Name.charCodeAt(i));\n            }\n\n            _ws.send(new Uint8Array(message).buffer);\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setRow(row) {\n\n            var streamInt = [(row >> 24) & 0xFF,\n            (row >> 16) & 0xFF,\n            (row >> 8) & 0xFF,\n            (row) & 0xFF];\n\n            _ws.send(new Uint8Array([CMD_SET_ROW, streamInt[0], streamInt[1], streamInt[2], streamInt[3]]).buffer);\n        }\n\n        function toInt(arr) {\n\n            var i = 0,\n                view = new DataView(new ArrayBuffer(arr.length));\n\n            for (; i < arr.length; i++) {\n                view.setUint8(i, arr[i]);\n            }\n\n            if (view.byteLength === 1) {\n                return view.getInt8(0);\n            } else {\n                return view.getInt32(0);\n            }\n        }\n\n        function toFloat(arr) {\n            var view = new DataView(new ArrayBuffer(4));\n            view.setUint8(0, arr[0]);\n            view.setUint8(1, arr[1]);\n            view.setUint8(2, arr[2]);\n            view.setUint8(3, arr[3]);\n\n            return view.getFloat32(0);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            getTrack: getTrack,\n            update: setRow,\n            on: setEvent\n        };\n    };\n\n    JSRocket.SyncDevice = function () {\n\n        \"use strict\";\n\n        var _connected = false,\n            _device,\n            _previousIntRow,\n            _config = {\n                \"socketURL\": \"ws://localhost:1339\",\n                \"rocketXML\": \"\"\n            },\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                }\n            };\n\n        function init(mode) {\n            if (mode === \"demo\") {\n                _device = new JSRocket.SyncDevicePlayer(_config);\n            } else {\n                _device = new JSRocket.SyncDeviceClient(_config);\n            }\n\n            _device.on('ready', deviceReady);\n            _device.on('update', deviceUpdate);\n            _device.on('play', devicePlay);\n            _device.on('pause', devicePause);\n        }\n\n        function getConfig() {\n            return _config;\n        }\n\n        function setConfig(cfg) {\n            for (var option in cfg) {\n                if (cfg.hasOwnProperty(option)) {\n                    _config[option] = cfg[option];\n                }\n            }\n\n            return _config;\n        }\n\n        function deviceReady() {\n            _connected = true;\n            _eventHandler.ready();\n        }\n\n        function deviceUpdate(row) {\n            _eventHandler.update(row);\n        }\n\n        function devicePlay() {\n            _eventHandler.play();\n        }\n\n        function devicePause() {\n            _eventHandler.pause();\n        }\n\n        function getTrack(name) {\n            if (_connected) {\n                return _device.getTrack(name);\n            } else {\n                return null;\n            }\n        }\n\n        function update(row) {\n            //no need to update rocket on float rows\n            if (Math.floor(row) !== _previousIntRow) {\n                _previousIntRow = Math.floor(row);\n                _device.update(_previousIntRow);\n            }\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            init: init,\n            setConfig: setConfig,\n            getConfig: getConfig,\n            getTrack: getTrack,\n            update: update,\n            on: setEvent\n        };\n    };\n\n})(window);\n\n","/* Trivial player for formats that the browser supports natively through the <audio> element,\nsuch as MP3 and OGG */\n\nCowbell.Player.Audio = function() {\n\tthis.Track = function(url) {\n\t\tthis.open = function() {\n\t\t\tvar audio = document.createElement('audio');\n\t\t\taudio.src = url;\n\t\t\tdocument.body.appendChild(audio);\n\n\t\t\treturn audio;\n\t\t};\n\t};\n};\n","window.Cowbell = {\n\t'UI': {},\n\t'Player': {},\n\t'Common': {}\n};\n\nwindow.Cowbell.createPlayer = function(containerElement, opts) {\n\tif (!opts) opts = {};\n\n\tif (typeof(containerElement) == 'string') {\n\t\tcontainerElement = document.getElementById(containerElement);\n\t}\n\n\tvar uiConstructor = opts.ui || Cowbell.UI.Basic;\n\tvar ui = new uiConstructor(containerElement);\n\n\tif (opts.player) {\n\t\tvar player = new opts.player(opts.playerOpts);\n\n\t\tif (opts.url) {\n\t\t\tvar track = new player.Track(opts.url, opts.trackOpts);\n\t\t\tui.open(track);\n\t\t}\n\t}\n\n\treturn ui;\n};\n\nif (window.jQuery) {\n\twindow.jQuery.fn.cowbell = function(opts) {\n\t\tthis.each(function() {\n\t\t\tCowbell.createPlayer(this, opts);\n\t\t});\n\t};\n}\n","/* Player for module formats supported by libopenmpt */\n\n(function() {\n\tfunction OpenMPTGenerator(url, audioCtx, playerOpts, trackOpts) {\n\t\tvar modulePtr, leftBufferPtr, rightBufferPtr;\n\t\tvar maxFramesPerChunk = 4096;\n\t\tvar self = this;\n\t\tif (!playerOpts) playerOpts = {};\n\t\tif (!trackOpts) trackOpts = {};\n\n\t\tfunction initModule(data) {\n\t\t\tvar byteArray = new Int8Array(data);\n\t\t\tvar ptrToFile = libopenmpt._malloc(byteArray.byteLength);\n\t\t\tlibopenmpt.HEAPU8.set(byteArray, ptrToFile);\n\n\t\t\tmodulePtr = libopenmpt._openmpt_module_create_from_memory(ptrToFile, byteArray.byteLength, 0, 0, 0);\n            global.window.modulePtr = modulePtr;\n\t\t\tleftBufferPtr  = libopenmpt._malloc(4 * maxFramesPerChunk);\n\t\t\trightBufferPtr = libopenmpt._malloc(4 * maxFramesPerChunk);\n\n\t\t\tfunction asciiToStack(str) {\n\t\t\t\tvar stackStr = stackAlloc(str.length + 1);\n\t\t\t\twriteAsciiToMemory(str, stackStr);\n\t\t\t\treturn stackStr;\n\t\t\t}\n\t\t\tvar stack = stackSave();\n\t\t\tlibopenmpt._openmpt_module_ctl_set(modulePtr, asciiToStack('render.resampler.emulate_amiga'), asciiToStack('1')); // enable Amiga resampler\n\t\t\tlibopenmpt._openmpt_module_ctl_set(modulePtr, asciiToStack('render.resampler.emulate_amiga_type'), asciiToStack('a1200')); // set emulated Amiga model to A1200\n\t\t\tstackRestore(stack);\n\n\t\t\tself.duration = libopenmpt._openmpt_module_get_duration_seconds(modulePtr);\n\t\t}\n\n\t\tfunction ensureLibOpenMPT(onReady) {\n\t\t\tif (!playerOpts.pathToLibOpenMPT) {\n\t\t\t\tthrow \"pathToLibOpenMPT not specified\";\n\t\t\t}\n\n\t\t\tif (window.libopenmpt && window.libopenmpt._openmpt_module_create_from_memory) {\n\t\t\t\t/* libopenmpt already loaded */\n\t\t\t\tonReady();\n\t\t\t} else {\n\t\t\t\t/* load libopenmpt via <script> tag injection */\n\t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n\t\t\t\tvar script = document.createElement(\"script\");\n\t\t\t\tscript.src = playerOpts.pathToLibOpenMPT;\n\n\t\t\t\twindow.libopenmpt = {\n\t\t\t\t\tonRuntimeInitialized: function() {\n\t\t\t\t\t\tonReady();\n\t\t\t\t\t\thead.removeChild(script);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\thead.appendChild(script);\n\t\t\t}\n\t\t}\n\n\t\tthis.cleanup = function() {\n\t\t\tif (modulePtr) {\n\t\t\t\tlibopenmpt._openmpt_module_destroy(modulePtr);\n\t\t\t}\n\t\t\tif (leftBufferPtr) {\n\t\t\t\tlibopenmpt._free(leftBufferPtr);\n\t\t\t}\n\t\t\tif (rightBufferPtr) {\n\t\t\t\tlibopenmpt._free(rightBufferPtr);\n\t\t\t}\n\t\t};\n\n\t\tthis.load = function(onReady) {\n\t\t\tvar self = this;\n\t\t\tensureLibOpenMPT(function() {\n\t\t\t\tself.channelCount = 2;\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.addEventListener('error', function(e) {\n\t\t\t\t\tconsole.log('XHR error', e);\n\t\t\t\t});\n\n\t\t\t\trequest.addEventListener('load', function(e) {\n\t\t\t\t\tdata = request.response;\n\t\t\t\t\tinitModule(data);\n\t\t\t\t\tonReady();\n\t\t\t\t});\n\n\t\t\t\t/* trigger XHR */\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.responseType = \"arraybuffer\";\n\t\t\t\trequest.send();\n\t\t\t});\n\t\t};\n\n\t\tthis.generateAudio = function(outputBuffer) {\n\t\t\tvar outputL = outputBuffer.getChannelData(0);\n\t\t\tvar outputR = outputBuffer.getChannelData(1);\n\t\t\tvar framesToRender = outputBuffer.length;\n\n\t\t\tvar framesRendered = 0;\n\t\t\tvar ended = false;\n\t\t\twhile (framesToRender > 0) {\n\t\t\t\tvar framesPerChunk = Math.min(framesToRender, maxFramesPerChunk);\n\t\t\t\tvar actualFramesPerChunk = libopenmpt._openmpt_module_read_float_stereo(modulePtr, audioCtx.sampleRate, framesPerChunk, leftBufferPtr, rightBufferPtr);\n\t\t\t\tvar rawAudioLeft = libopenmpt.HEAPF32.subarray(leftBufferPtr / 4, leftBufferPtr / 4 + actualFramesPerChunk);\n\t\t\t\tvar rawAudioRight = libopenmpt.HEAPF32.subarray(rightBufferPtr / 4, rightBufferPtr / 4 + actualFramesPerChunk);\n\t\t\t\tfor (var i = 0; i < actualFramesPerChunk; ++i) {\n\t\t\t\t\toutputL[framesRendered + i] = rawAudioLeft[i];\n\t\t\t\t\toutputR[framesRendered + i] = rawAudioRight[i];\n\t\t\t\t}\n\t\t\t\tframesToRender -= actualFramesPerChunk;\n\t\t\t\tframesRendered += actualFramesPerChunk;\n\t\t\t\tif (actualFramesPerChunk < framesPerChunk) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn framesRendered;\n\t\t};\n\n\t\tthis.seekable = true;\n\n\t\tthis.seek = function(position) {\n\t\t\tlibopenmpt._openmpt_module_set_position_seconds(modulePtr, position);\n\t\t};\n\n\t\tthis.reset = function() {\n\t\t\tthis.seek(0);\n\t\t}\n\t}\n\tCowbell.Player.OpenMPT = function(opts) {\n\t\treturn new Cowbell.Common.WebAudioPlayer(OpenMPTGenerator, opts);\n\t};\n})();\n","/*\nWrapper to allow Web Audio createScriptProcessor-based player routines to expose\na subset of the HTML5 Media Element API.\n\nThis wrapper handles the details of buffering, pausing, and keeping track of current play time.\nInner routines only need to implement a simple 'generator' API consisting of filling a buffer\nwith audio data, and seeking to a specified time.\n*/\n\n(function () {\n    var audioCtx;\n    Cowbell.Common.WebAudioPlayer = function (generatorConstructor, playerOpts) {\n        this.Track = function (url, trackOpts) {\n            var generator;\n\n            this.open = function () {\n                var self = {};\n\n                if (!audioCtx) {\n                    var AudioContext = window.AudioContext || window.webkitAudioContext;\n                    audioCtx = new AudioContext({\n                        latencyHint: \"playback\",\n                        sampleRate: 44100\n                      });\n                }\n\n                var BUFFER_SIZE = 4096;\n\n                self.HAVE_NOTHING = 0;\n                self.HAVE_METADATA = 1;\n                self.HAVE_CURRENT_DATA = 2;\n                self.HAVE_FUTURE_DATA = 3;\n                self.HAVE_ENOUGH_DATA = 4;\n                self.readyState = self.HAVE_NOTHING;\n\n                generator = new generatorConstructor(url, audioCtx, playerOpts, trackOpts);\n                var generatorIsReady = false;\n                var playWasRequestedBeforeReady = false;\n                var scriptNode;\n\n                var hasStartedProcessing = false;\n                var playFromTime = 0;\n                var playStartTimestamp;\n                self.paused = true;\n\n                generator.load(function () {\n                    generatorIsReady = true;\n                    self.readyState = self.HAVE_ENOUGH_DATA;\n                    self.duration = generator.duration;\n                    if (generator.seekable) {\n                        self.seekable = {\n                            'length': 1,\n                            'start': function (i) {\n                                if (i !== 0) throw \"Out of range\";\n                                return 0;\n                            },\n                            'end': function (i) {\n                                if (i !== 0) throw \"Out of range\";\n                                return generator.duration;\n                            }\n                        };\n                    } else {\n                        self.seekable = {\n                            'length': 0,\n                            'start': function (i) {\n                                throw \"Out of range\";\n                            },\n                            'end': function (i) {\n                                throw \"Out of range\";\n                            }\n                        };\n                    }\n                    seek(0);\n                    if (self.onloadedmetadata) self.onloadedmetadata();\n                    if (playWasRequestedBeforeReady) self.play();\n                });\n\n                function seek(newTime) {\n                    if (scriptNode) scriptNode.disconnect(0);\n                    if (newTime > 0) {\n                        generator.seek(newTime);\n                    } else {\n                        generator.reset();\n                    }\n                    playFromTime = newTime;\n                    hasStartedProcessing = false;\n                    scriptNode = audioCtx.createScriptProcessor(BUFFER_SIZE, 0, generator.channelCount);\n                    scriptNode.onaudioprocess = generateAudio;\n                    if (!self.paused) {\n                        self.paused = true;\n                        self.play();\n                    }\n                }\n\n                function generateAudio(event) {\n                    if (!hasStartedProcessing) {\n                        playStartTimestamp = event.playbackTime;\n                        hasStartedProcessing = true;\n                    }\n\n                    var generatedLength = generator.generateAudio(event.outputBuffer);\n\n                    if (generatedLength < event.outputBuffer.length) {\n                        /* generate silence for the remainder of the buffer */\n                        for (var chan = 0; chan < event.outputBuffer.numberOfChannels; chan++) {\n                            var channelData = event.outputBuffer.getChannelData(chan);\n                            for (var i = generatedLength; i < event.outputBuffer.length; i++) {\n                                channelData[i] = 0;\n                            }\n                        }\n\n                        if (self.currentTime > self.duration) {\n                            /* we've finished playing (not just generating) the audio */\n                            self.pause();\n                            if (self.onended) self.onended();\n                            seek(0);\n                        }\n                    }\n\n                    if (self.ontimeupdate) self.ontimeupdate();\n                }\n\n                self.play = function () {\n                    if (!generatorIsReady) {\n                        playWasRequestedBeforeReady = true;\n                        return;\n                    }\n                    if (self.paused) {\n                        scriptNode.connect(audioCtx.destination);\n                        self.paused = false;\n                        // If an AudioContext is created prior to the document receiving a user gesture, \n                        // it will be created in the \"suspended\" state, and you will need to call resume() \n                        // after a user gesture is received.\n                        if (audioCtx.state === 'suspended') { audioCtx.resume() };\n                        if (self.onplay) self.onplay();\n\n                        if (hasStartedProcessing) {\n                            playStartTimestamp = audioCtx.currentTime;\n                            playFromTime = pausedAtTrackTime;\n                        }\n                    }\n                };\n\n                self.pause = function () {\n                    if (!self.paused) {\n                        pausedAtTimestamp = audioCtx.currentTime;\n                        pausedAtTrackTime = self.currentTime;\n\n                        scriptNode.disconnect(0);\n                        self.paused = true;\n                        if (self.onpause) self.onpause();\n                    }\n                };\n\n\n                /*\n                hasStartedProcessing = false && self.paused = true  =>  initial state\n                hasStartedProcessing = false && self.paused = false  =>  the instant we just called play()\n                hasStartedProcessing = true && self.paused = false  =>\n                    ready to play if currentTime < playStartTimestamp; playing if currentTime >= playStartTimestamp\n                hasStartedProcessing = true && self.paused = true  => paused\n                */\n\n                self.__defineGetter__('currentTime', function () {\n                    if (!hasStartedProcessing) return playFromTime;\n                    if (self.paused) return pausedAtTrackTime;\n                    if (audioCtx.currentTime < playStartTimestamp) return playFromTime;\n                    return playFromTime + audioCtx.currentTime - playStartTimestamp;\n                });\n\n                self.__defineSetter__('currentTime', function (newTime) {\n                    if (generator.seekable || newTime === 0) {\n                        seek(newTime);\n                    }\n                });\n\n                return self;\n            };\n            this.close = function () {\n                if (generator && generator.cleanup) {\n                    generator.cleanup();\n                }\n            };\n        };\n    };\n})();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { DemoScene } from './DemoScene';\n\nclass Application {\n\n    // HD Resolution 1920 x 1080\n    public static readonly CANVAS_WIDTH = 1920 / 5;\n    public static readonly CANVAS_HEIGHT = 1080 / 5;\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(Application.CANVAS_WIDTH, Application.CANVAS_HEIGHT, new DemoScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["f","module","exports","e","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","this","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","v","m","n","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","id","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","event","FullscreenUtils","toggleFullscreen","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","floor","roundedY","percent","abs","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","current","fastFramebufferCopyOffset","src","dest","offset","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawParticleWaves","noClear","num","cos","forEach","multiply","sort","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","torusFunction","y2","mu","mu2","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","sub","temp","theta","phi","Vector4f","seed","back","down","front","left","right","up","Promise","all","TextureUtils","load","setClamp","draw","mv","setFramebuffer","drawSkyBox","getRotation","rotation","sclae","textures","skyBoxSideModel","skyPoints","map","uv","TextureCoordinate","faces","vertices","setModelViewMatrix","position","projection","keyFrames","setKeyFrames","getViewMatrix","first","zero","second","third","fraction","Utils","CubicInterpolate","look","EulerAngleCamera","blenderScene","invert","object","normals","normalize","n1","n2","n3","obj","transformedNormals","transformedPoints","file","disp","coords","ComputationalGeometryUtils","computeBoundingSphere","normals2","boundingSphere","name","json","currentObject","normalCount","vertexCount","uvCount","normalOffset","vertexOffset","uvOffset","toString","split","line","startsWith","Mesh","console","error","Error","Vector","Number","parseFloat","TexCoord","Face","drawScaledTextureClip","frame","filename","fetch","response","JSON","parse","cameraPath","CameraPath","keys","myFrame","CameraFrame","location","frames","CameraKeyFrame","rx","ry","rz","constructZRotationMatrix","translation","getPosition","_start","_end","_length","isEmpty","insertStart","node","next","previous","insertEnd","insert","currentNode","deleteStart","deleteEnd","delete","getNode","toArray","array","_data","_next","_previous","input","value","istart","istop","ostart","ostop","random","srcPosition","dst","dstPosition","slice","prototype","splice","apply","concat","fade","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","y0","y3","a0","AbstractCube","AbstractScene","blurred","accumulationBuffer","renderingPipeline","GouraudShadingRenderingPipeline","BlenderLoader","mesh","generateProceduralNoise","drawBlenderScene2","texture3","model","BakedLighting","skyBox","baked","blenderObj8","SkyBox","loadWithTexture","drawBlenderScene7","drawMeshArray","BlenderCameraScene","texture4","fpsStartTime","fpsCount","fps","meshes","path","light1","light2","cameraAnimator","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","setLights","WavefrontLoader","CameraLoader","BlenderCameraAnimator","computeFps","currentTime","timeInput","TransitionMethods","BlockFade","ledTexture","transitionFramebufferTo","transitionCircle","transitionWipe","c3","drawCircle","textureBackground","putpixel","x0","radius","blockFade","transition","transitionSceneFrom","transitionSceneTo","transitionMethod","transitionValue","trunc","BLOCKFADE","CROSSFADE","crossFade","FADEIN","fadeIn","FADEOUT","fadeOut","WIPE_LEFT","crossFadeImage","CIRCLE","pixelArray","pixelArrayWidth","blockWidth","horizontalUnits","verticalUnits","fadeArray","blend","transitionImage","clamp","startColor","endColor","renderScanlines","shiftAmount","offRed","offGreen","offBlue","strips","verticalPosition","imagePixelR","imagePixelG","imagePixelB","CubeScene","cubeMesh","Cube","BACKGROUND_COLOR","renderCube","getMesh","getModelViewMatrix","renderBackground","soundManager","canvasRecorder","sceneList","nodeInstance","timelineRef","stats","SoundManager","DoublyLinkedList","initControls","allProgress","loadMusic","prepareSync","plug","initScene","outputX","args","constructorName","Object","newNode","DLNode","CanvasRecorder","initTimeline","initStats","tickerPlayRef","tickerStopRef","tickerNextRef","tickerBackRef","tickerRecordRef","tickerScreenshotRef","tickerVolumeRef","onPause","seek","classList","remove","recording","saveVideo","onPlay","recordVideo","audioElement","isPlaying","setAttribute","toggleSound","muted","localStorage","setItem","String","date","fileName","toISOString","toTimeString","replace","image","toDataURL","anchor","click","jump","musicProperties","timeSeconds","target","directionToScroll","deltaY","stopPropagation","passive","key","promises","progressCallback","Stats","statsObj","body","updateMusic","sceneData","effect","transitionType","timeMilliseconds","drawStats","syncDevice","connected","demoMode","innerText","toFixed","canvasRecordingOptions","audioTrack","getType","ext","fileExtension","includes","pop","createCanvasRecorder","options","audio","link","frameRate","download","recorderOptions","mimeType","audioBitsPerSecond","videoBitsPerSecond","chunks","stream","captureStream","recorder","MediaRecorder","ondataavailable","onstop","blob","Blob","type","url","URL","createObjectURL","href","MouseEvent","dispatchEvent","setTimeout","revokeObjectURL","timeslice","stop","dispose","sound","info","canvasObj","PlaneDeformationFloorScene","PlaneDeformationScene","MetalHeadzScene","DofBallsScene","TorusKnotTunnelScene","GearsScene","ParticleStreamsScene","HoodlumScene","TwisterScene","RazorScene","logo","SineScrollerScene","background","pizza","PlasmaScene","TorusScene","DistortedSphereScene","renderTransparent","RotoZoomerScene","VoxelBallsScene","LedPlasmaScene","heightmapSphere","env","createSphereDistplaced","shadingSphereEnvDisp2","createSphere","pointsA","divideSphere","point","find","findPoint","idx","indexOf","steps","vn1","vn2","vn3","newPoints","result","rot","norm","norm2","cross","sub2","cross2","add2","normalize2","normalMatrix","computeNormalMatrix","multiplyHomArr","vertex1","Vertex","vertex2","vertex3","vertexArray","clipConvexPolygon","drawTriangleDDA","particleTexture2","drawParticleTorus","computeDepthBlur","nearPlane","focalPlane","farPlane","depth","spriteNum","gearsMesh","FRONT","drawBlenderScene4","factor","dampFactor","lab2","spaceLabMesh","hoodlumLogoMesh","createProceduralTexture3","drawBlenderScene9","scale2","resolve","dx","dy","led","lineDirection","radialWaveCenter","difference","directionalWave","intensity","metalheadz","texture11","texture13","blenderObjMetal","computeCameraMovement","lensflareScreenSpace","generateProceduralParticleTexture","radius2","Matrix3f","effectStyle","texturePath","mLUT","createLUT","effectWidth","effectHeight","textureWidth","textureHeight","Int32Array","bright","pow","elapsedTimeY","elapsedTimeX","pixelCount","o","adjustBrightness","currentPixel","drawOldPlaneDeformationFloor","drawOldPlaneDeformationStar","GRADIENTLEN","SWINGLEN","SWINGMAX","colorGrad","swingCurve","makeGradient","makeSwingCurve","drawPlasma","arrlen","maxval","halfmax","ni","cos256","amplitude","swing","gradient","swingT","swingY","swingYT","texture10","cube","dodecahedron","pyramid","icosahedron","Dodecahedron","Pyramid","Sphere","reproduceRazorScene","distance","yDisplacement","enableLighting","setColor","DARK_GRAY","constructShadowMatrix","logoTexture","drawRotoZoomer","yStepX","yStepY","xStepX","xStepY","texYCoord","texXCoord","texYCoordInner","texXCoordInner","framebufferPos","fontTexture","charToIndex","fonts","Map","addCharInex","drawText2","xFonts","asciiCode","has","get","sine","xOff","textOff","startW","endW","yDisp","char","texture2","fontRenderer","fontRenderer2","FontRenderer","drawStarField","myTime","waveSum","red","green","frambuffer","stars","stars2","DARK_BLUE","particleTexture","cocoon","torusKnot","TorusKnot","fog","LinearFog","setFog","generateProceduralParticleTexture2","torusTunnel","glitchScreen","glitchFactor","rng2","off","glIndex","torusFunction3","frame2","tangent","constructIdentityMatrix","m14","m24","m34","m11","m21","m31","m12","m22","m32","m13","m23","m33","finalMatrix","transpose","razorLogo","drawTitanEffect","shadingTorus","horizontalNum","verticalNum","backgroundTexture","x2","x3","x4","xPos","drawSpan","ypos","textureForwardDifference","hightlight","YELLOW","mat","xSteps","xsteps","zsteps","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","AbstractGeometricObject","super","ySteps","STEPS","sphereFunction","center","xScale","yScale","zScale","vector","m41","m42","m43","m44","setIdentityMatrix","inverseTranslation","scale1","scale3","inverseRotation","getInverseRotation","planePoint","planeNormal","lightPosition","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr2","multiplyArr","isInsidePositiveHalfSpace","getNormal","getDistance","getTran","perp","vec","scal","reci","mult","vec1","vec2","componentWiseMul","BlenderJsonParser","getBlenderScene","convertToMeshArray","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","colorSlope","setup","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","lights","material","lighting","clipper","projectedVertices","SutherlandHodgman2DClipper","Material","ambientColor","diffuseColor","specularColor","shininess","enable","setMaterial","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","S","projected","late","clippedPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","Fog","zStart","zEnd","fogColor","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","Light","emissiveColor","BPM","ROWS_PER_BEAT","ROW_RATE","audioContext","row","audioPlayer","player","track","JSRocket","SyncDevice","toLowerCase","Cowbell","Player","OpenMPT","Audio","Track","open","setConfig","on","onSyncReady","newRow","onSyncUpdate","getTrack","snare","bass","isNaN","getValue","paused","play","log","pause","direction","sceneLength","effectJump","parseInt","ref","isMuted","newLocal","jumpTo","getItem","libopenmpt","poll","modulePtr","updateRange","duration","onloadedmetadata","maxWidth","maxHeight","getPixel","getBilinearFilteredPixel","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","transparency","Image","onload","onerror","withAlpha","conv","SyncData","_track","getIndexForName","getTrackLength","createIndex","varName","lo","hi","mi","findKeyIndex","k0","k1","interpolation","SyncDevicePlayer","cfg","_urlRequest","_syncData","_eventHandler","XMLHttpRequest","onreadystatechange","urlRequestHandler","send","readyState","status","xmlString","tLen","kLen","trackList","DOMParser","parseFromString","getElementsByTagName","keyList","ready","readXML","responseText","rocketXML","undefined","evt","handler","SyncDeviceClient","_ws","WebSocket","socketURL","toInt","arr","view","DataView","setUint8","byteLength","getInt8","getInt32","onopen","binaryType","onmessage","queue","Uint8Array","cmd","subarray","getFloat32","save","onclose","warn","utf8Name","encodeURIComponent","fromCharCode","message","buffer","streamInt","_device","_previousIntRow","_connected","_config","deviceReady","deviceUpdate","devicePlay","devicePause","mode","option","hasOwnProperty","getConfig","createPlayer","containerElement","opts","ui","UI","Basic","playerOpts","trackOpts","jQuery","fn","cowbell","each","OpenMPTGenerator","audioCtx","leftBufferPtr","rightBufferPtr","initModule","byteArray","Int8Array","ptrToFile","_malloc","asciiToStack","str","stackStr","stackAlloc","writeAsciiToMemory","HEAPU8","_openmpt_module_create_from_memory","stack","stackSave","_openmpt_module_ctl_set","stackRestore","_openmpt_module_get_duration_seconds","cleanup","_openmpt_module_destroy","_free","onReady","pathToLibOpenMPT","head","script","onRuntimeInitialized","removeChild","ensureLibOpenMPT","channelCount","request","responseType","generateAudio","outputBuffer","outputL","getChannelData","outputR","framesToRender","framesRendered","framesPerChunk","actualFramesPerChunk","_openmpt_module_read_float_stereo","sampleRate","rawAudioLeft","HEAPF32","rawAudioRight","seekable","_openmpt_module_set_position_seconds","reset","Common","WebAudioPlayer","generatorConstructor","generator","AudioContext","webkitAudioContext","latencyHint","HAVE_NOTHING","HAVE_METADATA","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","scriptNode","playStartTimestamp","generatorIsReady","playWasRequestedBeforeReady","hasStartedProcessing","playFromTime","newTime","disconnect","createScriptProcessor","onaudioprocess","playbackTime","generatedLength","chan","numberOfChannels","channelData","onended","ontimeupdate","connect","destination","state","resume","onplay","pausedAtTrackTime","pausedAtTimestamp","onpause","__defineGetter__","__defineSetter__","close","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","globalThis","Function","scriptUrl","importScripts","currentScript","scripts","Application","Canvas","CANVAS_WIDTH","CANVAS_HEIGHT","DemoScene","main"],"sourceRoot":""}