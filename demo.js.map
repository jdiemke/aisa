{"version":3,"file":"demo.js","mappings":"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","sources":["webpack://aisa/./node_modules/jsxm/xm.js","webpack://aisa/./node_modules/jsxm/xmeffects.js","webpack://aisa/./node_modules/stats.js/build/stats.min.js","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/SkyBox.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/animation/BlenderCameraAnimator.ts","webpack://aisa/./src/animation/CameraKeyFrame.ts","webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/blender/face.ts","webpack://aisa/./src/blender/mesh.ts","webpack://aisa/./src/blender/parseUtils.ts","webpack://aisa/./src/blender/tex-coord.ts","webpack://aisa/./src/blender/vector.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/CameraFrame.ts","webpack://aisa/./src/camera/CameraLoader.ts","webpack://aisa/./src/camera/CameraPath.ts","webpack://aisa/./src/camera/EulerAngleCamera.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/core/LinkedList.ts","webpack://aisa/./src/core/Node.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/examples/abstract-cube/AbstractCube.ts","webpack://aisa/./src/examples/baked-lighting/BakedLighting.ts","webpack://aisa/./src/examples/blender-camera-animation/BlenderCameraScene.ts","webpack://aisa/./src/examples/block-fade/BlockFade.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/demo/DemoScene.ts","webpack://aisa/./src/examples/demo/canvas-record.ts","webpack://aisa/./src/examples/demo/parts/Scene1.ts","webpack://aisa/./src/examples/demo/parts/Scene10.ts","webpack://aisa/./src/examples/demo/parts/Scene11.ts","webpack://aisa/./src/examples/demo/parts/Scene12.ts","webpack://aisa/./src/examples/demo/parts/Scene13.ts","webpack://aisa/./src/examples/demo/parts/Scene14.ts","webpack://aisa/./src/examples/demo/parts/Scene15.ts","webpack://aisa/./src/examples/demo/parts/Scene16.ts","webpack://aisa/./src/examples/demo/parts/Scene17.ts","webpack://aisa/./src/examples/demo/parts/Scene18.ts","webpack://aisa/./src/examples/demo/parts/Scene19.ts","webpack://aisa/./src/examples/demo/parts/Scene2.ts","webpack://aisa/./src/examples/demo/parts/Scene20.ts","webpack://aisa/./src/examples/demo/parts/Scene3.ts","webpack://aisa/./src/examples/demo/parts/Scene4.ts","webpack://aisa/./src/examples/demo/parts/Scene5.ts","webpack://aisa/./src/examples/demo/parts/Scene6.ts","webpack://aisa/./src/examples/demo/parts/Scene7.ts","webpack://aisa/./src/examples/demo/parts/Scene8.ts","webpack://aisa/./src/examples/demo/parts/Scene9.ts","webpack://aisa/./src/examples/distorted-sphere/DistortedSphereScene.ts","webpack://aisa/./src/examples/dof-balls/DofBallsScene.ts","webpack://aisa/./src/examples/gears/GearsScene.ts","webpack://aisa/./src/examples/hoodlum/HoodlumScene.ts","webpack://aisa/./src/examples/led-plasma/LedPlasmaScene.ts","webpack://aisa/./src/examples/metalheadz/MetalHeadzScene.ts","webpack://aisa/./src/examples/particle-streams/ParticleStreamsScene.ts","webpack://aisa/./src/examples/plane-deformation/PlaneDeformationScene.ts","webpack://aisa/./src/examples/plasma/PlasmaScene.ts","webpack://aisa/./src/examples/razor/RazorScene.ts","webpack://aisa/./src/examples/roto-zoomer/RotoZoomerScene.ts","webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/examples/sine-scroller/SineScrollerScene.ts","webpack://aisa/./src/examples/torus-knot-tunnel/TorusKnotTunnelScene.ts","webpack://aisa/./src/examples/torus/TorusScene.ts","webpack://aisa/./src/examples/twister/TwisterScene.ts","webpack://aisa/./src/examples/voxel-balls/VoxelBallsScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Dodecahedron.ts","webpack://aisa/./src/geometrical-objects/Pyramid.ts","webpack://aisa/./src/geometrical-objects/Sphere.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/geometrical-objects/TorusKnot.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/blender/BlenderLoader.ts","webpack://aisa/./src/model/wavefront-obj/WavefrontLoader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/fog/Fog.ts","webpack://aisa/./src/shading/fog/LinearFog.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/sound/SoundManager.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/./src/sound/JSRocket.js","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/demo/Application.ts"],"sourcesContent":["(function (window) {\nif (!window.XMPlayer) {\n  window.XMPlayer = {};\n}\nvar player = window.XMPlayer;\n\nif (!window.XMView) {\n  window.XMView = {};\n}\nvar XMView = window.XMView;\n\nplayer.periodForNote = periodForNote;\nplayer.prettify_effect = prettify_effect;\nplayer.init = init;\nplayer.load = load;\nplayer.play = play;\nplayer.pause = pause;\nplayer.stop = stop;\nplayer.cur_songpos = -1;\nplayer.cur_pat = -1;\nplayer.cur_row = 64;\nplayer.cur_ticksamp = 0;\nplayer.cur_tick = 6;\nplayer.xm = {};  // contains all song data\nplayer.xm.global_volume = player.max_global_volume = 128;\n\n// exposed for testing\nplayer.nextTick = nextTick;\nplayer.nextRow = nextRow;\nplayer.Envelope = Envelope;\n\n// for pretty-printing notes\nvar _note_names = [\n  \"C-\", \"C#\", \"D-\", \"D#\", \"E-\", \"F-\",\n  \"F#\", \"G-\", \"G#\", \"A-\", \"A#\", \"B-\"];\n\nvar f_smp = 44100;  // updated by play callback, default value here\n\n// per-sample exponential moving average for volume changes (to prevent pops\n// and clicks); evaluated every 8 samples\nvar popfilter_alpha = 0.9837;\n\nfunction prettify_note(note) {\n  if (note < 0) return \"---\";\n  if (note == 96) return \"^^^\";\n  return _note_names[note%12] + ~~(note/12);\n}\n\nfunction prettify_number(num) {\n  if (num == -1) return \"--\";\n  if (num < 10) return \"0\" + num;\n  return num;\n}\n\nfunction prettify_volume(num) {\n  if (num < 0x10) return \"--\";\n  return num.toString(16);\n}\n\nfunction prettify_effect(t, p) {\n  if (t >= 10) t = String.fromCharCode(55 + t);\n  if (p < 16) p = '0' + p.toString(16);\n  else p = p.toString(16);\n  return t + p;\n}\n\nfunction prettify_notedata(data) {\n  return (prettify_note(data[0]) + \" \" + prettify_number(data[1]) + \" \" +\n      prettify_volume(data[2]) + \" \" +\n      prettify_effect(data[3], data[4]));\n}\n\nfunction getstring(dv, offset, len) {\n  var str = [];\n  for (var i = offset; i < offset+len; i++) {\n    var c = dv.getUint8(i);\n    if (c === 0) break;\n    str.push(String.fromCharCode(c));\n  }\n  return str.join('');\n}\n\n// Return 2-pole Butterworth lowpass filter coefficients for\n// center frequncy f_c (relative to sampling frequency)\nfunction filterCoeffs(f_c) {\n  if (f_c > 0.5) {  // we can't lowpass above the nyquist frequency...\n    f_c = 0.5;\n  }\n  var wct = Math.sqrt(2) * Math.PI * f_c;\n  var e = Math.exp(-wct);\n  var c = e * Math.cos(wct);\n  var gain = (1 - 2*c + e*e) / 2;\n  return [gain, 2*c, -e*e];\n}\n\nfunction updateChannelPeriod(ch, period) {\n  var freq = 8363 * Math.pow(2, (1152.0 - period) / 192.0);\n  if (isNaN(freq)) {\n    console.log(\"invalid period!\", period);\n    return;\n  }\n  ch.doff = freq / f_smp;\n  ch.filter = filterCoeffs(ch.doff / 2);\n}\n\nfunction periodForNote(ch, note) {\n  return 1920 - (note + ch.samp.note)*16 - ch.fine / 8.0;\n}\n\nfunction setCurrentPattern() {\n  var nextPat = player.xm.songpats[player.cur_songpos];\n\n  // check for out of range pattern index\n  while (nextPat >= player.xm.patterns.length) {\n    if (player.cur_songpos + 1 < player.xm.songpats.length) {\n      // first try skipping the position\n      player.cur_songpos++;\n    } else if ((player.cur_songpos === player.xm.song_looppos && player.cur_songpos !== 0)\n      || player.xm.song_looppos >= player.xm.songpats.length) {\n      // if we allready tried song_looppos or if song_looppos\n      // is out of range, go to the first position\n      player.cur_songpos = 0;\n    } else {\n      // try going to song_looppos\n      player.cur_songpos = player.xm.song_looppos;\n    }\n\n    nextPat = player.xm.songpats[player.cur_songpos];\n  }\n\n  player.cur_pat = nextPat;\n}\n\nfunction nextRow() {\n  if(typeof player.next_row === \"undefined\") { player.next_row = player.cur_row + 1; }\n  player.cur_row = player.next_row;\n  player.next_row++;\n\n  if (player.cur_pat == -1 || player.cur_row >= player.xm.patterns[player.cur_pat].length) {\n    player.cur_row = 0;\n    player.next_row = 1;\n    player.cur_songpos++;\n    if (player.cur_songpos >= player.xm.songpats.length)\n      player.cur_songpos = player.xm.song_looppos;\n    setCurrentPattern();\n  }\n  var p = player.xm.patterns[player.cur_pat];\n  var r = p[player.cur_row];\n  for (var i = 0; i < r.length; i++) {\n    var ch = player.xm.channelinfo[i];\n    var inst = ch.inst;\n    var triggernote = false;\n    // instrument trigger\n    if (r[i][1] != -1) {\n      inst = player.xm.instruments[r[i][1] - 1];\n      if (inst && inst.samplemap) {\n        ch.inst = inst;\n        // retrigger unless overridden below\n        triggernote = true;\n        if (ch.note && inst.samplemap) {\n          ch.samp = inst.samples[inst.samplemap[ch.note]];\n          ch.vol = ch.samp.vol;\n          ch.pan = ch.samp.pan;\n          ch.fine = ch.samp.fine;\n        }\n      } else {\n        // console.log(\"invalid inst\", r[i][1], instruments.length);\n      }\n    }\n\n    // note trigger\n    if (r[i][0] != -1) {\n      if (r[i][0] == 96) {\n        ch.release = 1;\n        triggernote = false;\n      } else {\n        if (inst && inst.samplemap) {\n          var note = r[i][0];\n          ch.note = note;\n          ch.samp = inst.samples[inst.samplemap[ch.note]];\n          if (triggernote) {\n            // if we were already triggering the note, reset vol/pan using\n            // (potentially) new sample\n            ch.pan = ch.samp.pan;\n            ch.vol = ch.samp.vol;\n            ch.fine = ch.samp.fine;\n          }\n          triggernote = true;\n        }\n      }\n    }\n\n    ch.voleffectfn = undefined;\n    if (r[i][2] != -1) {  // volume column\n      var v = r[i][2];\n      ch.voleffectdata = v & 0x0f;\n      if (v < 0x10) {\n        console.log(\"channel\", i, \"invalid volume\", v.toString(16));\n      } else if (v <= 0x50) {\n        ch.vol = v - 0x10;\n      } else if (v >= 0x60 && v < 0x70) {  // volume slide down\n        ch.voleffectfn = function(ch) {\n          ch.vol = Math.max(0, ch.vol - ch.voleffectdata);\n        };\n      } else if (v >= 0x70 && v < 0x80) {  // volume slide up\n        ch.voleffectfn = function(ch) {\n          ch.vol = Math.min(64, ch.vol + ch.voleffectdata);\n        };\n      } else if (v >= 0x80 && v < 0x90) {  // fine volume slide down\n        ch.vol = Math.max(0, ch.vol - (v & 0x0f));\n      } else if (v >= 0x90 && v < 0xa0) {  // fine volume slide up\n        ch.vol = Math.min(64, ch.vol + (v & 0x0f));\n      } else if (v >= 0xa0 && v < 0xb0) {  // vibrato speed\n        ch.vibratospeed = v & 0x0f;\n      } else if (v >= 0xb0 && v < 0xc0) {  // vibrato w/ depth\n        ch.vibratodepth = v & 0x0f;\n        ch.voleffectfn = player.effects_t1[4];  // use vibrato effect directly\n        player.effects_t1[4](ch);  // and also call it on tick 0\n      } else if (v >= 0xc0 && v < 0xd0) {  // set panning\n        ch.pan = (v & 0x0f) * 0x11;\n      } else if (v >= 0xf0 && v <= 0xff) {  // portamento\n        if (v & 0x0f) {\n          ch.portaspeed = (v & 0x0f) << 4;\n        }\n        ch.voleffectfn = player.effects_t1[3];  // just run 3x0\n      } else {\n        console.log(\"channel\", i, \"volume effect\", v.toString(16));\n      }\n    }\n\n    ch.effect = r[i][3];\n    ch.effectdata = r[i][4];\n    if (ch.effect < 36) {\n      ch.effectfn = player.effects_t1[ch.effect];\n      var eff_t0 = player.effects_t0[ch.effect];\n      if (eff_t0 && eff_t0(ch, ch.effectdata)) {\n        triggernote = false;\n      }\n    } else {\n      console.log(\"channel\", i, \"effect > 36\", ch.effect);\n    }\n\n    // special handling for portamentos: don't trigger the note\n    if (ch.effect == 3 || ch.effect == 5 || r[i][2] >= 0xf0) {\n      if (r[i][0] != -1) {\n        ch.periodtarget = periodForNote(ch, ch.note);\n      }\n      triggernote = false;\n      if (inst && inst.samplemap) {\n        if (ch.env_vol == undefined) {\n          // note wasn't already playing; we basically have to ignore the\n          // portamento and just trigger\n          triggernote = true;\n        } else if (ch.release) {\n          // reset envelopes if note was released but leave offset/pitch/etc\n          // alone\n          ch.envtick = 0;\n          ch.release = 0;\n          ch.env_vol = new EnvelopeFollower(inst.env_vol);\n          ch.env_pan = new EnvelopeFollower(inst.env_pan);\n        }\n      }\n    }\n\n    if (triggernote) {\n      // there's gotta be a less hacky way to handle offset commands...\n      if (ch.effect != 9) ch.off = 0;\n      ch.release = 0;\n      ch.envtick = 0;\n      ch.env_vol = new EnvelopeFollower(inst.env_vol);\n      ch.env_pan = new EnvelopeFollower(inst.env_pan);\n      if (ch.note) {\n        ch.period = periodForNote(ch, ch.note);\n      }\n      // waveforms 0-3 are retriggered on new notes while 4-7 are continuous\n      if (ch.vibratotype < 4) {\n        ch.vibratopos = 0;\n      }\n    }\n  }\n}\n\nfunction Envelope(points, type, sustain, loopstart, loopend) {\n  this.points = points;\n  this.type = type;\n  this.sustain = sustain;\n  this.loopstart = points[loopstart*2];\n  this.loopend = points[loopend*2];\n}\n\nEnvelope.prototype.Get = function(ticks) {\n  // TODO: optimize follower with ptr\n  // or even do binary search here\n  var y0;\n  var env = this.points;\n  for (var i = 0; i < env.length; i += 2) {\n    y0 = env[i+1];\n    if (ticks < env[i]) {\n      var x0 = env[i-2];\n      y0 = env[i-1];\n      var dx = env[i] - x0;\n      var dy = env[i+1] - y0;\n      return y0 + (ticks - x0) * dy / dx;\n    }\n  }\n  return y0;\n};\n\nfunction EnvelopeFollower(env) {\n  this.env = env;\n  this.tick = 0;\n}\n\nEnvelopeFollower.prototype.Tick = function(release) {\n  var value = this.env.Get(this.tick);\n\n  // if we're sustaining a note, stop advancing the tick counter\n  if (!release && this.tick >= this.env.points[this.env.sustain*2]) {\n    return this.env.points[this.env.sustain*2 + 1];\n  }\n\n  this.tick++;\n  if (this.env.type & 4) {  // envelope loop?\n    if (!release &&\n        this.tick >= this.env.loopend) {\n      this.tick -= this.env.loopend - this.env.loopstart;\n    }\n  }\n  return value;\n};\n\nfunction nextTick() {\n  player.cur_tick++;\n  var j, ch;\n  for (j = 0; j < player.xm.nchan; j++) {\n    ch = player.xm.channelinfo[j];\n    ch.periodoffset = 0;\n  }\n  if (player.cur_tick >= player.xm.tempo) {\n    player.cur_tick = 0;\n    nextRow();\n  }\n  for (j = 0; j < player.xm.nchan; j++) {\n    ch = player.xm.channelinfo[j];\n    var inst = ch.inst;\n    if (player.cur_tick !== 0) {\n      if(ch.voleffectfn) ch.voleffectfn(ch);\n      if(ch.effectfn) ch.effectfn(ch);\n    }\n    if (isNaN(ch.period)) {\n      console.log(prettify_notedata(\n            player.xm.patterns[player.cur_pat][player.cur_row][j]),\n          \"set channel\", j, \"period to NaN\");\n    }\n    if (inst === undefined) continue;\n    if (ch.env_vol === undefined) {\n      console.log(prettify_notedata(\n            player.xm.patterns[player.cur_pat][player.cur_row][j]),\n          \"set channel\", j, \"env_vol to undefined, but note is playing\");\n      continue;\n    }\n    ch.volE = ch.env_vol.Tick(ch.release);\n    ch.panE = ch.env_pan.Tick(ch.release);\n    updateChannelPeriod(ch, ch.period + ch.periodoffset);\n  }\n}\n\n// This function gradually brings the channel back down to zero if it isn't\n// already to avoid clicks and pops when samples end.\nfunction MixSilenceIntoBuf(ch, start, end, dataL, dataR) {\n  var s = ch.filterstate[1];\n  if (isNaN(s)) {\n    console.log(\"NaN filterstate?\", ch.filterstate, ch.filter);\n    return;\n  }\n  for (var i = start; i < end; i++) {\n    if (Math.abs(s) < 1.526e-5) {  // == 1/65536.0\n      s = 0;\n      break;\n    }\n    dataL[i] += s * ch.vL;\n    dataR[i] += s * ch.vR;\n    s *= popfilter_alpha;\n  }\n  ch.filterstate[1] = s;\n  ch.filterstate[2] = s;\n  if (isNaN(s)) {\n    console.log(\"NaN filterstate after adding silence?\", ch.filterstate, ch.filter, i);\n    return;\n  }\n  return 0;\n}\n\nfunction MixChannelIntoBuf(ch, start, end, dataL, dataR) {\n  var inst = ch.inst;\n  var instsamp = ch.samp;\n  var loop = false;\n  var looplen = 0, loopstart = 0;\n\n  // nothing on this channel, just filter the last dc offset back down to zero\n  if (instsamp == undefined || inst == undefined || ch.mute) {\n    return MixSilenceIntoBuf(ch, start, end, dataL, dataR);\n  }\n\n  var samp = instsamp.sampledata;\n  var sample_end = instsamp.len;\n  if ((instsamp.type & 3) == 1 && instsamp.looplen > 0) {\n    loop = true;\n    loopstart = instsamp.loop;\n    looplen = instsamp.looplen;\n    sample_end = loopstart + looplen;\n  }\n  var samplen = instsamp.len;\n  var volE = ch.volE / 64.0;    // current volume envelope\n  var panE = 4*(ch.panE - 32);  // current panning envelope\n  var p = panE + ch.pan - 128;  // final pan\n  var volL = player.xm.global_volume * volE * (128 - p) * ch.vol / (64 * 128 * 128);\n  var volR = player.xm.global_volume * volE * (128 + p) * ch.vol / (64 * 128 * 128);\n  if (volL < 0) volL = 0;\n  if (volR < 0) volR = 0;\n  if (volR === 0 && volL === 0)\n    return;\n  if (isNaN(volR) || isNaN(volL)) {\n    console.log(\"NaN volume!?\", ch.number, volL, volR, volE, panE, ch.vol);\n    return;\n  }\n  var k = ch.off;\n  var dk = ch.doff;\n  var Vrms = 0;\n  var f0 = ch.filter[0], f1 = ch.filter[1], f2 = ch.filter[2];\n  var fs0 = ch.filterstate[0], fs1 = ch.filterstate[1], fs2 = ch.filterstate[2];\n\n  // we also low-pass filter volume changes with a simple one-zero,\n  // one-pole filter to avoid pops and clicks when volume changes.\n  var vL = popfilter_alpha * ch.vL + (1 - popfilter_alpha) * (volL + ch.vLprev) * 0.5;\n  var vR = popfilter_alpha * ch.vR + (1 - popfilter_alpha) * (volR + ch.vRprev) * 0.5;\n  var pf_8 = Math.pow(popfilter_alpha, 8);\n  ch.vLprev = volL;\n  ch.vRprev = volR;\n\n  // we can mix up to this many bytes before running into a sample end/loop\n  var i = start;\n  var failsafe = 100;\n  while (i < end) {\n    if (failsafe-- === 0) {\n      console.log(\"failsafe in mixing loop! channel\", ch.number, k, sample_end,\n          loopstart, looplen, dk);\n      break;\n    }\n    if (k >= sample_end) {  // TODO: implement pingpong looping\n      if (loop) {\n        k = loopstart + (k - loopstart) % looplen;\n      } else {\n        // kill sample\n        ch.inst = undefined;\n        // fill rest of buf with filtered dc offset using loop above\n        return Vrms + MixSilenceIntoBuf(ch, i, end, dataL, dataR);\n      }\n    }\n    var next_event = Math.max(1, Math.min(end, i + (sample_end - k) / dk));\n    // this is the inner loop of the player\n\n    // unrolled 8x\n    var s, y;\n    for (; i + 7 < next_event; i+=8) {\n      s = samp[k|0];\n      y = f0 * (s + fs0) + f1*fs1 + f2*fs2;\n      fs2 = fs1; fs1 = y; fs0 = s;\n      k += dk;\n      dataL[i] += vL * y;\n      dataR[i] += vR * y;\n      Vrms += (vL + vR) * y * y;\n\n      s = samp[k|0];\n      y = f0 * (s + fs0) + f1*fs1 + f2*fs2;\n      fs2 = fs1; fs1 = y; fs0 = s;\n      k += dk;\n      dataL[i+1] += vL * y;\n      dataR[i+1] += vR * y;\n      Vrms += (vL + vR) * y * y;\n\n      s = samp[k|0];\n      y = f0 * (s + fs0) + f1*fs1 + f2*fs2;\n      fs2 = fs1; fs1 = y; fs0 = s;\n      k += dk;\n      dataL[i+2] += vL * y;\n      dataR[i+2] += vR * y;\n      Vrms += (vL + vR) * y * y;\n\n      s = samp[k|0];\n      y = f0 * (s + fs0) + f1*fs1 + f2*fs2;\n      fs2 = fs1; fs1 = y; fs0 = s;\n      k += dk;\n      dataL[i+3] += vL * y;\n      dataR[i+3] += vR * y;\n      Vrms += (vL + vR) * y * y;\n\n      s = samp[k|0];\n      y = f0 * (s + fs0) + f1*fs1 + f2*fs2;\n      fs2 = fs1; fs1 = y; fs0 = s;\n      k += dk;\n      dataL[i+4] += vL * y;\n      dataR[i+4] += vR * y;\n      Vrms += (vL + vR) * y * y;\n\n      s = samp[k|0];\n      y = f0 * (s + fs0) + f1*fs1 + f2*fs2;\n      fs2 = fs1; fs1 = y; fs0 = s;\n      k += dk;\n      dataL[i+5] += vL * y;\n      dataR[i+5] += vR * y;\n      Vrms += (vL + vR) * y * y;\n\n      s = samp[k|0];\n      y = f0 * (s + fs0) + f1*fs1 + f2*fs2;\n      fs2 = fs1; fs1 = y; fs0 = s;\n      k += dk;\n      dataL[i+6] += vL * y;\n      dataR[i+6] += vR * y;\n      Vrms += (vL + vR) * y * y;\n\n      s = samp[k|0];\n      y = f0 * (s + fs0) + f1*fs1 + f2*fs2;\n      fs2 = fs1; fs1 = y; fs0 = s;\n      k += dk;\n      dataL[i+7] += vL * y;\n      dataR[i+7] += vR * y;\n      Vrms += (vL + vR) * y * y;\n\n      vL = pf_8 * vL + (1 - pf_8) * volL;\n      vR = pf_8 * vR + (1 - pf_8) * volR;\n    }\n\n    for (; i < next_event; i++) {\n      s = samp[k|0];\n      // we low-pass filter here since we are resampling some arbitrary\n      // frequency to f_smp; this is an anti-aliasing filter and is\n      // implemented as an IIR butterworth filter (usually we'd use an FIR\n      // brick wall filter, but this is much simpler computationally and\n      // sounds fine)\n      y = f0 * (s + fs0) + f1*fs1 + f2*fs2;\n      fs2 = fs1; fs1 = y; fs0 = s;\n      dataL[i] += vL * y;\n      dataR[i] += vR * y;\n      Vrms += (vL + vR) * y * y;\n      k += dk;\n    }\n  }\n  ch.off = k;\n  ch.filterstate[0] = fs0;\n  ch.filterstate[1] = fs1;\n  ch.filterstate[2] = fs2;\n  ch.vL = vL;\n  ch.vR = vR;\n  return Vrms * 0.5;\n}\n\nfunction audio_cb(e) {\n  f_smp = player.audioctx.sampleRate;\n  var time_sound_started;\n  var buflen = e.outputBuffer.length;\n  var dataL = e.outputBuffer.getChannelData(0);\n  var dataR = e.outputBuffer.getChannelData(1);\n  var i, j, k;\n\n  for (i = 0; i < buflen; i++) {\n    dataL[i] = 0;\n    dataR[i] = 0;\n  }\n\n  var offset = 0;\n  var ticklen = 0|(f_smp * 2.5 / player.xm.bpm);\n  var scopewidth = XMView.scope_width;\n\n  while(buflen > 0) {\n    if (player.cur_pat == -1 || player.cur_ticksamp >= ticklen) {\n      nextTick(f_smp);\n      player.cur_ticksamp -= ticklen;\n    }\n    var tickduration = Math.min(buflen, ticklen - player.cur_ticksamp);\n    var VU = new Float32Array(player.xm.nchan);\n    var scopes = undefined;\n    for (j = 0; j < player.xm.nchan; j++) {\n      var scope;\n      if (tickduration >= 4*scopewidth) {\n        scope = new Float32Array(scopewidth);\n        for (k = 0; k < scopewidth; k++) {\n          scope[k] = -dataL[offset+k*4] - dataR[offset+k*4];\n        }\n      }\n\n      VU[j] = MixChannelIntoBuf(\n          player.xm.channelinfo[j], offset, offset + tickduration, dataL, dataR) /\n        tickduration;\n\n      if (tickduration >= 4*scopewidth) {\n        for (k = 0; k < scopewidth; k++) {\n          scope[k] += dataL[offset+k*4] + dataR[offset+k*4];\n        }\n        if (scopes === undefined) scopes = [];\n        scopes.push(scope);\n      }\n    }\n    if (XMView.pushEvent) {\n      XMView.pushEvent({\n        t: e.playbackTime + (0.0 + offset) / f_smp,\n        vu: VU,\n        scopes: scopes,\n        songpos: player.cur_songpos,\n        pat: player.cur_pat,\n        row: player.cur_row\n      });\n    }\n    offset += tickduration;\n    player.cur_ticksamp += tickduration;\n    buflen -= tickduration;\n  }\n}\n\nfunction ConvertSample(array, bits) {\n  var len = array.length;\n  var acc = 0;\n  var samp, b, k;\n  if (bits === 0) {  // 8 bit sample\n    samp = new Float32Array(len);\n    for (k = 0; k < len; k++) {\n      acc += array[k];\n      b = acc&255;\n      if (b & 128) b = b-256;\n      samp[k] = b / 128.0;\n    }\n    return samp;\n  } else {\n    len /= 2;\n    samp = new Float32Array(len);\n    for (k = 0; k < len; k++) {\n      b = array[k*2] + (array[k*2 + 1] << 8);\n      if (b & 32768) b = b-65536;\n      acc = Math.max(-1, Math.min(1, acc + b / 32768.0));\n      samp[k] = acc;\n    }\n    return samp;\n  }\n}\n\n// optimization: unroll short sample loops so we can run our inner mixing loop\n// uninterrupted for as long as possible; this also handles pingpong loops.\nfunction UnrollSampleLoop(samp) {\n  var nloops = ((2048 + samp.looplen - 1) / samp.looplen) | 0;\n  var pingpong = samp.type & 2;\n  if (pingpong) {\n    // make sure we have an even number of loops if we are pingponging\n    nloops = (nloops + 1) & (~1);\n  }\n  var samplesiz = samp.loop + nloops * samp.looplen;\n  var data = new Float32Array(samplesiz);\n  for (var i = 0; i < samp.loop; i++) {\n    data[i] = samp.sampledata[i];\n  }\n  for (var j = 0; j < nloops; j++) {\n    var k;\n    if ((j&1) && pingpong) {\n      for (k = samp.looplen - 1; k >= 0; k--) {\n        data[i++] = samp.sampledata[samp.loop + k];\n      }\n    } else {\n      for (k = 0; k < samp.looplen; k++) {\n        data[i++] = samp.sampledata[samp.loop + k];\n      }\n    }\n  }\n  console.log(\"unrolled sample loop; looplen\", samp.looplen, \"x\", nloops, \" = \", samplesiz);\n  samp.sampledata = data;\n  samp.looplen = nloops * samp.looplen;\n  samp.type = 1;\n}\n\nfunction load(arrayBuf) {\n  var dv = new DataView(arrayBuf);\n  player.xm = {};\n\n  player.xm.songname = getstring(dv, 17, 20);\n  var hlen = dv.getUint32(0x3c, true) + 0x3c;\n  var songlen = dv.getUint16(0x40, true);\n  player.xm.song_looppos = dv.getUint16(0x42, true);\n  player.xm.nchan = dv.getUint16(0x44, true);\n  var npat = dv.getUint16(0x46, true);\n  var ninst = dv.getUint16(0x48, true);\n  player.xm.flags = dv.getUint16(0x4a, true);\n  player.xm.tempo = dv.getUint16(0x4c, true);\n  player.xm.bpm = dv.getUint16(0x4e, true);\n  player.xm.channelinfo = [];\n  player.xm.global_volume = player.max_global_volume;\n\n  var i, j, k;\n\n  for (i = 0; i < player.xm.nchan; i++) {\n    player.xm.channelinfo.push({\n      number: i,\n      filterstate: new Float32Array(3),\n      vol: 0,\n      pan: 128,\n      period: 1920 - 48*16,\n      vL: 0, vR: 0,   // left right volume envelope followers (changes per sample)\n      vLprev: 0, vRprev: 0,\n      mute: 0,\n      volE: 0, panE: 0,\n      retrig: 0,\n      vibratopos: 0,\n      vibratodepth: 1,\n      vibratospeed: 1,\n      vibratotype: 0,\n    });\n  }\n  console.log(\"header len \" + hlen);\n\n  console.log(\"songlen %d, %d channels, %d patterns, %d instruments\", songlen, player.xm.nchan, npat, ninst);\n  console.log(\"loop @%d\", player.xm.song_looppos);\n  console.log(\"flags=%d tempo %d bpm %d\", player.xm.flags, player.xm.tempo, player.xm.bpm);\n\n  player.xm.songpats = [];\n  for (i = 0; i < songlen; i++) {\n    player.xm.songpats.push(dv.getUint8(0x50 + i));\n  }\n  console.log(\"song patterns: \", player.xm.songpats);\n\n  var idx = hlen;\n  player.xm.patterns = [];\n  for (i = 0; i < npat; i++) {\n    var pattern = [];\n    var patheaderlen = dv.getUint32(idx, true);\n    var patrows = dv.getUint16(idx + 5, true);\n    var patsize = dv.getUint16(idx + 7, true);\n    console.log(\"pattern %d: %d bytes, %d rows\", i, patsize, patrows);\n    idx += 9;\n    for (j = 0; patsize > 0 && j < patrows; j++) {\n      row = [];\n      for (k = 0; k < player.xm.nchan; k++) {\n        var byte0 = dv.getUint8(idx); idx++;\n        var note = -1, inst = -1, vol = -1, efftype = 0, effparam = 0;\n        if (byte0 & 0x80) {\n          if (byte0 & 0x01) {\n            note = dv.getUint8(idx) - 1; idx++;\n          }\n          if (byte0 & 0x02) {\n            inst = dv.getUint8(idx); idx++;\n          }\n          if (byte0 & 0x04) {\n            vol = dv.getUint8(idx); idx++;\n          }\n          if (byte0 & 0x08) {\n            efftype = dv.getUint8(idx); idx++;\n          }\n          if (byte0 & 0x10) {\n            effparam = dv.getUint8(idx); idx++;\n          }\n        } else {\n          // byte0 is note from 1..96 or 0 for nothing or 97 for release\n          // so we subtract 1 so that C-0 is stored as 0\n          note = byte0 - 1;\n          inst = dv.getUint8(idx); idx++;\n          vol = dv.getUint8(idx); idx++;\n          efftype = dv.getUint8(idx); idx++;\n          effparam = dv.getUint8(idx); idx++;\n        }\n        var notedata = [note, inst, vol, efftype, effparam];\n        row.push(notedata);\n      }\n      pattern.push(row);\n    }\n    player.xm.patterns.push(pattern);\n  }\n\n  player.xm.instruments = [];\n  // now load instruments\n  for (i = 0; i < ninst; i++) {\n    var hdrsiz = dv.getUint32(idx, true);\n    var instname = getstring(dv, idx+0x4, 22);\n    var nsamp = dv.getUint16(idx+0x1b, true);\n    var inst = {\n      'name': instname,\n      'number': i,\n    };\n    if (nsamp > 0) {\n      var samplemap = new Uint8Array(arrayBuf, idx+33, 96);\n\n      var env_nvol = dv.getUint8(idx+225);\n      var env_vol_type = dv.getUint8(idx+233);\n      var env_vol_sustain = dv.getUint8(idx+227);\n      var env_vol_loop_start = dv.getUint8(idx+228);\n      var env_vol_loop_end = dv.getUint8(idx+229);\n      var env_npan = dv.getUint8(idx+226);\n      var env_pan_type = dv.getUint8(idx+234);\n      var env_pan_sustain = dv.getUint8(idx+230);\n      var env_pan_loop_start = dv.getUint8(idx+231);\n      var env_pan_loop_end = dv.getUint8(idx+232);\n      var vol_fadeout = dv.getUint16(idx+239, true);\n      var env_vol = [];\n      for (j = 0; j < env_nvol*2; j++) {\n        env_vol.push(dv.getUint16(idx+129+j*2, true));\n      }\n      var env_pan = [];\n      for (j = 0; j < env_npan*2; j++) {\n        env_pan.push(dv.getUint16(idx+177+j*2, true));\n      }\n      // FIXME: ignoring keymaps for now and assuming 1 sample / instrument\n      // var keymap = getarray(dv, idx+0x21);\n      var samphdrsiz = dv.getUint32(idx+0x1d, true);\n      console.log(\"hdrsiz %d; instrument %s: '%s' %d samples, samphdrsiz %d\",\n          hdrsiz, (i+1).toString(16), instname, nsamp, samphdrsiz);\n      idx += hdrsiz;\n      var totalsamples = 0;\n      var samps = [];\n      for (j = 0; j < nsamp; j++) {\n        var samplen = dv.getUint32(idx, true);\n        var samploop = dv.getUint32(idx+4, true);\n        var samplooplen = dv.getUint32(idx+8, true);\n        var sampvol = dv.getUint8(idx+12);\n        var sampfinetune = dv.getInt8(idx+13);\n        var samptype = dv.getUint8(idx+14);\n        var samppan = dv.getUint8(idx+15);\n        var sampnote = dv.getInt8(idx+16);\n        var sampname = getstring(dv, idx+18, 22);\n        var sampleoffset = totalsamples;\n        if (samplooplen === 0) {\n          samptype &= ~3;\n        }\n        console.log(\"sample %d: len %d name '%s' loop %d/%d vol %d offset %s\",\n            j, samplen, sampname, samploop, samplooplen, sampvol, sampleoffset.toString(16));\n        console.log(\"           type %d note %s(%d) finetune %d pan %d\",\n            samptype, prettify_note(sampnote + 12*4), sampnote, sampfinetune, samppan);\n        console.log(\"           vol env\", env_vol, env_vol_sustain,\n            env_vol_loop_start, env_vol_loop_end, \"type\", env_vol_type,\n            \"fadeout\", vol_fadeout);\n        console.log(\"           pan env\", env_pan, env_pan_sustain,\n            env_pan_loop_start, env_pan_loop_end, \"type\", env_pan_type);\n        var samp = {\n          'len': samplen, 'loop': samploop,\n          'looplen': samplooplen, 'note': sampnote, 'fine': sampfinetune,\n          'pan': samppan, 'type': samptype, 'vol': sampvol,\n          'fileoffset': sampleoffset\n        };\n        // length / pointers are all specified in bytes; fixup for 16-bit samples\n        samps.push(samp);\n        idx += samphdrsiz;\n        totalsamples += samplen;\n      }\n      for (j = 0; j < nsamp; j++) {\n        var samp = samps[j];\n        samp.sampledata = ConvertSample(\n            new Uint8Array(arrayBuf, idx + samp.fileoffset, samp.len), samp.type & 16);\n        if (samp.type & 16) {\n          samp.len /= 2;\n          samp.loop /= 2;\n          samp.looplen /= 2;\n        }\n        // unroll short loops and any pingpong loops\n        if ((samp.type & 3) && (samp.looplen < 2048 || (samp.type & 2))) {\n          UnrollSampleLoop(samp);\n        }\n      }\n      idx += totalsamples;\n      inst.samplemap = samplemap;\n      inst.samples = samps;\n      if (env_vol_type) {\n        // insert an automatic fadeout to 0 at the end of the envelope\n        var env_end_tick = env_vol[env_vol.length-2];\n        if (!(env_vol_type & 2)) {  // if there's no sustain point, create one\n          env_vol_sustain = env_vol.length / 2;\n        }\n        if (vol_fadeout > 0) {\n          var fadeout_ticks = 65536.0 / vol_fadeout;\n          env_vol.push(env_end_tick + fadeout_ticks);\n          env_vol.push(0);\n        }\n        inst.env_vol = new Envelope(\n            env_vol,\n            env_vol_type,\n            env_vol_sustain,\n            env_vol_loop_start,\n            env_vol_loop_end);\n      } else {\n        // no envelope, then just make a default full-volume envelope.\n        // i thought this would use fadeout, but apparently it doesn't.\n        inst.env_vol = new Envelope([0, 64, 1, 0], 2, 0, 0, 0);\n      }\n      if (env_pan_type) {\n        if (!(env_pan_type & 2)) {  // if there's no sustain point, create one\n          env_pan_sustain = env_pan.length / 2;\n        }\n        inst.env_pan = new Envelope(\n            env_pan,\n            env_pan_type,\n            env_pan_sustain,\n            env_pan_loop_start,\n            env_pan_loop_end);\n      } else {\n        // create a default empty envelope\n        inst.env_pan = new Envelope([0, 32], 0, 0, 0, 0);\n      }\n    } else {\n      idx += hdrsiz;\n      console.log(\"empty instrument\", i, hdrsiz, idx);\n    }\n    player.xm.instruments.push(inst);\n  }\n\n  console.log(\"loaded \\\"\" + player.xm.songname + \"\\\"\");\n  return true;\n}\n\nvar jsNode, gainNode;\nfunction init() {\n  if (!player.audioctx) {\n    var audioContext = window.AudioContext || window.webkitAudioContext;\n    player.audioctx = new audioContext();\n    gainNode = player.audioctx.createGain();\n    gainNode.gain.value = 0.1;  // master volume\n  }\n  if (player.audioctx.createScriptProcessor === undefined) {\n    jsNode = player.audioctx.createJavaScriptNode(16384, 0, 2);\n  } else {\n    jsNode = player.audioctx.createScriptProcessor(16384, 0, 2);\n  }\n  jsNode.onaudioprocess = audio_cb;\n  gainNode.connect(player.audioctx.destination);\n}\n\nplayer.playing = false;\nfunction play() {\n  if (!player.playing) {\n    // put paused events back into action, if any\n    if (XMView.resume) XMView.resume();\n    // start playing\n    jsNode.connect(gainNode);\n\n    // hack to get iOS to play anything\n    var temp_osc = player.audioctx.createOscillator();\n    temp_osc.connect(player.audioctx.destination);\n    !!temp_osc.start ? temp_osc.start(0) : temp_osc.noteOn(0);\n    !!temp_osc.stop ? temp_osc.stop(0) : temp_osc.noteOff(0);\n    temp_osc.disconnect();\n  }\n  player.playing = true;\n}\n\nfunction pause() {\n  if (player.playing) {\n    jsNode.disconnect(gainNode);\n    if (XMView.pause) XMView.pause();\n  }\n  player.playing = false;\n}\n\nfunction stop() {\n  if (player.playing) {\n    jsNode.disconnect(gainNode);\n    player.playing = false;\n  }\n  player.cur_pat = -1;\n  player.cur_row = 64;\n  player.cur_songpos = -1;\n  player.cur_ticksamp = 0;\n  player.xm.global_volume = player.max_global_volume;\n  if (XMView.stop) XMView.stop();\n  init();\n}\n})(window);\n","(function (window) {\nif (!window.XMPlayer) {\n  window.XMPlayer = {};\n}\nvar player = window.XMPlayer;\n\nfunction eff_t1_0(ch) {  // arpeggio\n  if (ch.effectdata !== 0 && ch.inst !== undefined) {\n    var arpeggio = [0, ch.effectdata>>4, ch.effectdata&15];\n    var note = ch.note + arpeggio[player.cur_tick % 3];\n    ch.period = player.periodForNote(ch, note);\n  }\n}\n\nfunction eff_t0_1(ch, data) {  // pitch slide up\n  if (data !== 0) {\n    ch.slideupspeed = data;\n  }\n}\n\nfunction eff_t1_1(ch) {  // pitch slide up\n  if (ch.slideupspeed !== undefined) {\n    // is this limited? it appears not\n    ch.period -= ch.slideupspeed;\n  }\n}\n\nfunction eff_t0_2(ch, data) {  // pitch slide down\n  if (data !== 0) {\n    ch.slidedownspeed = data;\n  }\n}\n\nfunction eff_t1_2(ch) {  // pitch slide down\n  if (ch.slidedownspeed !== undefined) {\n    // 1728 is the period for C-1\n    ch.period = Math.min(1728, ch.period + ch.slidedownspeed);\n  }\n}\n\nfunction eff_t0_3(ch, data) {  // portamento\n  if (data !== 0) {\n    ch.portaspeed = data;\n  }\n}\n\nfunction eff_t1_3(ch) {  // portamento\n  if (ch.periodtarget !== undefined && ch.portaspeed !== undefined) {\n    if (ch.period > ch.periodtarget) {\n      ch.period = Math.max(ch.periodtarget, ch.period - ch.portaspeed);\n    } else {\n      ch.period = Math.min(ch.periodtarget, ch.period + ch.portaspeed);\n    }\n  }\n}\n\nfunction eff_t0_4(ch, data) {  // vibrato\n  if (data & 0x0f) {\n    ch.vibratodepth = (data & 0x0f) * 2;\n  }\n  if (data >> 4) {\n    ch.vibratospeed = data >> 4;\n  }\n  eff_t1_4(ch);\n}\n\nfunction eff_t1_4(ch) {  // vibrato\n  ch.periodoffset = getVibratoDelta(ch.vibratotype, ch.vibratopos) * ch.vibratodepth;\n  if (isNaN(ch.periodoffset)) {\n    console.log(\"vibrato periodoffset NaN?\",\n        ch.vibratopos, ch.vibratospeed, ch.vibratodepth);\n    ch.periodoffset = 0;\n  }\n  // only updates on non-first ticks\n  if (player.cur_tick > 0) {\n    ch.vibratopos += ch.vibratospeed;\n    ch.vibratopos &= 63;\n  }\n}\n\nfunction getVibratoDelta(type, x) {\n  var delta = 0;\n  switch (type & 0x03) {\n    case 1: // sawtooth (ramp-down)\n      delta = ((1 + x * 2 / 64) % 2) - 1;\n      break;\n    case 2: // square\n    case 3: // random (in FT2 these two are the same)\n      delta = x < 32 ? 1 : -1;\n      break;\n    case 0:\n    default: // sine\n      delta = Math.sin(x * Math.PI / 32);\n      break;\n  }\n  return delta;\n}\n\nfunction eff_t1_5(ch) {  // portamento + volume slide\n  eff_t1_a(ch);\n  eff_t1_3(ch);\n}\n\nfunction eff_t1_6(ch) {  // vibrato + volume slide\n  eff_t1_a(ch);\n  eff_t1_4(ch);\n}\n\nfunction eff_t0_8(ch, data) {  // set panning\n  ch.pan = data;\n}\n\nfunction eff_t0_9(ch, data) {  // sample offset\n  ch.off = data * 256;\n}\n\nfunction eff_t0_a(ch, data) {  // volume slide\n  if (data) {\n    ch.volumeslide = -(data & 0x0f) + (data >> 4);\n  }\n}\n\nfunction eff_t1_a(ch) {  // volume slide\n  if (ch.volumeslide !== undefined) {\n    ch.vol = Math.max(0, Math.min(64, ch.vol + ch.volumeslide));\n  }\n}\n\nfunction eff_t0_b(ch, data) {  // song jump\n  if (data < player.xm.songpats.length) {\n    player.cur_songpos = data - 1;\n    player.cur_pat = -1;\n    player.cur_row = -1;\n  }\n}\n\nfunction eff_t0_c(ch, data) {  // set volume\n  ch.vol = Math.min(64, data);\n}\n\nfunction eff_t0_d(ch, data) {  // pattern jump\n  player.cur_songpos++;\n  if (player.cur_songpos >= player.xm.songpats.length)\n    player.cur_songpos = player.xm.song_looppos;\n  player.cur_pat = player.xm.songpats[player.cur_songpos];\n  player.next_row = (data >> 4) * 10 + (data & 0x0f);\n}\n\nfunction eff_t0_e(ch, data) {  // extended effects!\n  var eff = data >> 4;\n  data = data & 0x0f;\n  switch (eff) {\n    case 1:  // fine porta up\n      ch.period -= data;\n      break;\n    case 2:  // fine porta down\n      ch.period += data;\n      break;\n    case 4:  // set vibrato waveform\n      ch.vibratotype = data & 0x07;\n      break;\n    case 5:  // finetune\n      ch.fine = (data<<4) + data - 128;\n      break;\n    case 6:  // pattern loop\n      if (data == 0) {\n        ch.loopstart = player.cur_row\n      } else {\n        if (typeof ch.loopend === \"undefined\") {\n          ch.loopend = player.cur_row\n          ch.loopremaining = data\n        }\n        if(ch.loopremaining !== 0) {\n          ch.loopremaining--\n          player.next_row = ch.loopstart || 0\n        } else {\n          delete ch.loopend\n          delete ch.loopstart\n        }\n      }\n      break;\n    case 8:  // panning\n      ch.pan = data * 0x11;\n      break;\n    case 0x0a:  // fine vol slide up (with memory)\n      if (data === 0 && ch.finevolup !== undefined)\n        data = ch.finevolup;\n      ch.vol = Math.min(64, ch.vol + data);\n      ch.finevolup = data;\n      break;\n    case 0x0b:  // fine vol slide down\n      if (data === 0 && ch.finevoldown !== undefined)\n        data = ch.finevoldown;\n      ch.vol = Math.max(0, ch.vol - data);\n      ch.finevoldown = data;\n      break;\n    case 0x0c:  // note cut handled in eff_t1_e\n      break;\n    default:\n      console.log(\"unimplemented extended effect E\", ch.effectdata.toString(16));\n      break;\n  }\n}\n\nfunction eff_t1_e(ch) {  // note cut\n  switch (ch.effectdata >> 4) {\n    case 0x0c:\n      if (player.cur_tick == (ch.effectdata & 0x0f)) {\n        ch.vol = 0;\n      }\n      break;\n  }\n}\n\nfunction eff_t0_f(ch, data) {  // set tempo\n  if (data === 0) {\n    console.log(\"tempo 0?\");\n    return;\n  } else if (data < 0x20) {\n    player.xm.tempo = data;\n  } else {\n    player.xm.bpm = data;\n  }\n}\n\nfunction eff_t0_g(ch, data) {  // set global volume\n  if (data <= 0x40) {\n    // volume gets multiplied by 2 to match\n    // the initial max global volume of 128\n    player.xm.global_volume = Math.max(0, data * 2);\n  } else {\n    player.xm.global_volume = player.max_global_volume;\n  }\n}\n\nfunction eff_t0_h(ch, data) {  // global volume slide\n  if (data) {\n    // same as Axy but multiplied by 2\n    player.xm.global_volumeslide = (-(data & 0x0f) + (data >> 4)) * 2;\n  }\n}\n\nfunction eff_t1_h(ch) {  // global volume slide\n  if (player.xm.global_volumeslide !== undefined) {\n    player.xm.global_volume = Math.max(0, Math.min(player.max_global_volume,\n      player.xm.global_volume + player.xm.global_volumeslide));\n  }\n}\n\nfunction eff_t0_r(ch, data) {  // retrigger\n  if (data & 0x0f) ch.retrig = (ch.retrig & 0xf0) + (data & 0x0f);\n  if (data & 0xf0) ch.retrig = (ch.retrig & 0x0f) + (data & 0xf0);\n\n  // retrigger volume table\n  switch (ch.retrig >> 4) {\n    case 1: ch.vol -= 1; break;\n    case 2: ch.vol -= 2; break;\n    case 3: ch.vol -= 4; break;\n    case 4: ch.vol -= 8; break;\n    case 5: ch.vol -= 16; break;\n    case 6: ch.vol *= 2; ch.vol /= 3; break;\n    case 7: ch.vol /= 2; break;\n    case 9: ch.vol += 1; break;\n    case 0x0a: ch.vol += 2; break;\n    case 0x0b: ch.vol += 4; break;\n    case 0x0c: ch.vol += 8; break;\n    case 0x0d: ch.vol += 16; break;\n    case 0x0e: ch.vol *= 3; ch.vol /= 2; break;\n    case 0x0f: ch.vol *= 2; break;\n  }\n  ch.vol = Math.min(64, Math.max(0, ch.vol));\n}\n\nfunction eff_t1_r(ch) {\n  if (player.cur_tick % (ch.retrig & 0x0f) === 0) {\n    ch.off = 0;\n  }\n}\n\nfunction eff_unimplemented() {}\nfunction eff_unimplemented_t0(ch, data) {\n  console.log(\"unimplemented effect\", player.prettify_effect(ch.effect, data));\n}\n\nplayer.effects_t0 = [  // effect functions on tick 0\n  eff_t1_0,  // 1, arpeggio is processed on all ticks\n  eff_t0_1,\n  eff_t0_2,\n  eff_t0_3,\n  eff_t0_4,  // 4\n  eff_t0_a,  // 5, same as A on first tick\n  eff_t0_a,  // 6, same as A on first tick\n  eff_unimplemented_t0,  // 7\n  eff_t0_8,  // 8\n  eff_t0_9,  // 9\n  eff_t0_a,  // a\n  eff_t0_b,  // b\n  eff_t0_c,  // c\n  eff_t0_d,  // d\n  eff_t0_e,  // e\n  eff_t0_f,  // f\n  eff_t0_g,  // g\n  eff_t0_h,  // h\n  eff_unimplemented_t0,  // i\n  eff_unimplemented_t0,  // j\n  eff_unimplemented_t0,  // k\n  eff_unimplemented_t0,  // l\n  eff_unimplemented_t0,  // m\n  eff_unimplemented_t0,  // n\n  eff_unimplemented_t0,  // o\n  eff_unimplemented_t0,  // p\n  eff_unimplemented_t0,  // q\n  eff_t0_r,  // r\n  eff_unimplemented_t0,  // s\n  eff_unimplemented_t0,  // t\n  eff_unimplemented_t0,  // u\n  eff_unimplemented_t0,  // v\n  eff_unimplemented_t0,  // w\n  eff_unimplemented_t0,  // x\n  eff_unimplemented_t0,  // y\n  eff_unimplemented_t0,  // z\n];\n\nplayer.effects_t1 = [  // effect functions on tick 1+\n  eff_t1_0,\n  eff_t1_1,\n  eff_t1_2,\n  eff_t1_3,\n  eff_t1_4,\n  eff_t1_5,  // 5\n  eff_t1_6,  // 6\n  eff_unimplemented,  // 7\n  null,   // 8\n  null,   // 9\n  eff_t1_a,  // a\n  null,   // b\n  null,   // c\n  null,   // d\n  eff_t1_e,  // e\n  null,   // f\n  null,  // g\n  eff_t1_h,  // h\n  eff_unimplemented,  // i\n  eff_unimplemented,  // j\n  eff_unimplemented,  // k\n  eff_unimplemented,  // l\n  eff_unimplemented,  // m\n  eff_unimplemented,  // n\n  eff_unimplemented,  // o\n  eff_unimplemented,  // p\n  eff_unimplemented,  // q\n  eff_t1_r,  // r\n  eff_unimplemented,  // s\n  eff_unimplemented,  // t\n  eff_unimplemented,  // u\n  eff_unimplemented,  // v\n  eff_unimplemented,  // w\n  eff_unimplemented,  // x\n  eff_unimplemented,  // y\n  eff_unimplemented   // z\n];\n\n})(window);\n","// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n     \n         //this.cylinder = this.createCylinder();\n       \n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    this.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(src: Uint32Array, dest: Uint32Array) {\n        src.set(dest);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n   \n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - this.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n\n    public drawParticleWaves(elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { this.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        this.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const scale = 2;\n        for (let i = 0; i < num; i++) {\n            for (let j = 0; j < num; j++) {\n\n                const x = (j - num / 2) * scale;\n                const y = 4 * (Math.sin(j * 0.09 * 2 + elapsedTime * 0.0008) + Math.cos(i * 0.08 * 2 + elapsedTime * 0.0009));\n                const z = (i - num / 2) * scale;\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n            Matrix4f.constructXRotationMatrix(Math.PI * 0.1).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.00006))\n        );\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        points.forEach((element) => {\n\n            const transformed = this.project(modelViewMartrix.multiply(element));\n\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach((element) => {\n            const size = -(1.3 * 192 / (element.z));\n            this.drawParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, this.interpolate(-60, -25, element.z));\n        });\n    }\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n    \n    /*\n    public createCylinder() {\n        const k = {\n            points: []\n        };\n\n        const LOOPX = 50;\n        const LOOPY = 110;\n        for (let y = 0; y < LOOPY; y++) {\n            for (let x = 0; x < LOOPX; x++) {\n                const xx = Math.sin(2 * Math.PI / LOOPX * x) * 30;\n                const xx2 = Math.sin(2 * Math.PI / LOOPX * (x + 1)) * 30;\n                const yy = Math.cos(2 * Math.PI / LOOPX * x) * 30;\n                const yy2 = Math.cos(2 * Math.PI / LOOPX * (x + 1)) * 30;\n\n                k.points.push(new Vector3f(xx, 0 + y, yy));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n\n                k.points.push(new Vector3f(xx2, 0 + y, yy2));\n                k.points.push(new Vector3f(xx, 1 + y, yy));\n                k.points.push(new Vector3f(xx2, 1 + y, yy2));\n            }\n        }\n        // optimize\n        const points: Array<Vector3f> = [];\n        const points2: Array<Vector3f> = [];\n        const normals: Array<Vector3f> = [];\n        const normals2: Array<Vector3f> = [];\n        const texture: Array<TextureCoordinate> = [];\n\n        const index: Array<number> = [];\n\n        k.points.forEach((i) => {\n            const p = i;\n\n            const point = points.find((pointVar) => pointVar.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector3f(0, 0, 0));\n            normals2.push(new Vector3f(0, 0, 0));\n            points2.push(new Vector3f(0, 0, 0));\n            texture.push(new TextureCoordinate());\n        });\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index,\n            texture\n        };\n    }\n*/\n   /*\n\n*/\n    \n   \n    /*\n    public shadingCylinderEnv(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n        let result = this.cylinder;\n\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].y - 30;\n            let x = result.points[i].x - 50;\n            let length = Math.sqrt(x * x + y * y);\n            let myScale = (1 + 0.2 * Math.sin(result.points[i].y * 0.01 + elapsedTime * 1.83));\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * myScale + Math.sin(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.sin(result.points[i].y * 0.55 + elapsedTime * 2.83) * 2;\n            result.points2[i].z = result.points[i].z * myScale + Math.cos(result.points[i].y * 0.1 + elapsedTime * 3.83) * 8.3\n                + Math.cos(result.points[i].y + result.points[i].x * 0.55 + elapsedTime * 2.83) * 2;\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        let textureCoords: Array<TextureCoordinate> = result.texture;\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(0)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(0).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-80, -210,\n            -290)\n            .multiplyMatrix(modelViewMartrix);\n\n        let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n            this.fakeSphere2(normals2[n], textureCoords[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            // Only render triangles with CCW-ordered vertices\n            //\n            // Reference:\n            // David H. Eberly (this.height6).\n            // 3D Game Engine Design: A Practical Approach to Real-Time Computer Graphics,\n            // p. 69. Morgan Kaufmann Publishers, United States.\n            //\n            let v1 = points2[index[i]];\n            let t1 = textureCoords[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let t2 = textureCoords[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let t3 = textureCoords[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                vertexArray[0].textureCoordinate = t1;\n\n                vertexArray[1].position = v2;\n                vertexArray[1].textureCoordinate = t2;\n\n                vertexArray[2].position = v3;\n                vertexArray[2].textureCoordinate = t3;\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n    */\n     /*\n\n    /*\n    public shadingSphereEnvDisp(elapsedTime: number): void {\n        this.wBuffer.fill(100);\n\n        let result = this.sphereDisp;\n\n        let scale2 = (Math.sin(elapsedTime * 1.8) + 1) * 0.5;\n        for (let i = 0; i < result.points.length; i++) {\n            let y = result.points[i].z;\n            let x = result.points[i].x;\n            let length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + (10 - length) * 0.05 + elapsedTime * 0.9) * 4.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        let points = result.points2;\n        let index = result.index;\n        let normals = result.normals;\n\n        let norm: Vector3f = new Vector3f(0, 0, 0);\n        let norm2: Vector3f = new Vector3f(0, 0, 0);\n        let cross: Vector3f = new Vector3f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            let v1: Vector3f = points[index[i]];\n            let v2: Vector3f = points[index[i + 1]];\n            let v3: Vector3f = points[index[i + 2]];\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            let normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        let scale = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.35)\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.3).multiplyMatrix(Matrix4f.constructTranslationMatrix(0, 0\n                , 0))));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10)\n            .multiplyMatrix(modelViewMartrix);\n\n            let points2: Array<Vector3f> = result.points2;\n        let normals2: Array<Vector3f> = result.normals2;\n\n        let normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            let transformed = modelViewMartrix.multiply(points[p]);\n\n            points2[p].x = Math.round((this.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((this.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        let vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        let vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        let vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        let vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            let v1 = points2[index[i]];\n            let n1 = normals2[index[i]];\n\n            let v2 = points2[index[i + 1]];\n            let n2 = normals2[index[i + 1]];\n\n            let v3 = points2[index[i + 2]];\n            let n3 = normals2[index[i + 2]];\n\n            if (this.isTriangleCCW(v1, v2, v3)) {\n\n                let color = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n\n                vertexArray[0].position = v1;\n                this.fakeSphere(n1, vertex1);\n\n                vertexArray[1].position = v2;\n                this.fakeSphere(n2, vertex2);\n\n                vertexArray[2].position = v3;\n                this.fakeSphere(n3, vertex3);\n\n                if (v1.x < Framebuffer.minWindow.x ||\n                    v2.x < Framebuffer.minWindow.x ||\n                    v3.x < Framebuffer.minWindow.x ||\n                    v1.x > Framebuffer.maxWindow.x ||\n                    v2.x > Framebuffer.maxWindow.x ||\n                    v3.x > Framebuffer.maxWindow.x ||\n                    v1.y < Framebuffer.minWindow.y ||\n                    v2.y < Framebuffer.minWindow.y ||\n                    v3.y < Framebuffer.minWindow.y ||\n                    v1.y > Framebuffer.maxWindow.y ||\n                    v2.y > Framebuffer.maxWindow.y ||\n                    v3.y > Framebuffer.maxWindow.y) {\n\n                    this.clipConvexPolygon2(vertexArray, color);\n                } else {\n                    this.texturedTriangleRasterizer.drawTriangleDDA2(vertexArray[0], vertexArray[1], vertexArray[2], color);\n                }\n            }\n        }\n    }\n*/\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLensFlare(screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < this.width &&\n            pos.y > 0 && pos.y < this.height &&\n            this.wBuffer[pos.x + (pos.y * this.width)] > (1 / pos.z)) {\n            if (!this.lensFlareVisible) {\n                this.lensFlareVisible = true;\n                this.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (this.lensFlareVisible) {\n                this.lensFlareVisible = false;\n                this.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = this.interpolate(this.lensFlareStart, this.lensFlareStart + 100, elapsedTime);\n        if (this.lensFlareVisible !== true) {\n            scale *= (1 - this.interpolate(this.lensFlareEnd, this.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(this.width / 2, this.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                this.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        this.drawScaledTextureClipBi(0, 0, this.width, this.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { Matrix4f, Vector4f } from './math';\nimport { Texture, TextureUtils } from './texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { TexturedMesh } from './rendering-pipelines/TexturedMesh';\n\nexport class SkyBox {\n\n    private back: Texture;\n    private down: Texture;\n    private front: Texture;\n    private left: Texture;\n    private right: Texture;\n    private up: Texture;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline = new TexturingRenderingPipeline(null);\n    public init(): Promise<any> {\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/skybox/skybox_back.png'), false).then(\n                (texture: Texture) => this.back = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_down.png'), false).then(\n                (texture: Texture) => this.down = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_front.png'), false).then(\n                (texture: Texture) => this.front = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_left.png'), false).then(\n                (texture: Texture) => this.left = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_right.png'), false).then(\n                (texture: Texture) => this.right = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_up.png'), false).then(\n                (texture: Texture) => this.up = texture\n            )]).then(() => {\n                this.back.setClamp(true);\n                this.down.setClamp(true);\n                this.front.setClamp(true);\n                this.left.setClamp(true);\n                this.right.setClamp(true);\n                this.up.setClamp(true);\n            });\n    }\n\n    // move code from framebuffer into draw method!\n    public draw(framebuffer: Framebuffer, mv: Matrix4f): void {\n    \n        this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n        this.drawSkyBox(framebuffer, mv.getRotation());\n    }\n\n    public drawSkyBox(framebuffer: Framebuffer, rotation: Matrix4f): void {\n        const sclae = 20;\n        const textures = [\n            this.back,\n            this.left,\n            this.front,\n            this.right\n        ];\n\n        let camera: Matrix4f;\n        let mv: Matrix4f;\n        let skyBoxSideModel: TexturedMesh;\n\n        const skyPoints = [\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, -1, -1, 1)\n        ];\n\n        for (let i = 0; i < 4; i++) {\n            camera =\n                rotation.multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI).multiplyMatrix(\n                        Matrix4f.constructYRotationMatrix(+ Math.PI * 2 / 4 * i)));\n\n\n            mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n\n            // skybox: starz\n            skyBoxSideModel = {\n                points: skyPoints,\n                points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n                uv: [\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                ],\n                faces: [\n                    {\n                        vertices: [0, 1, 2],\n                        uv: [0, 1, 2]\n                    },\n                    {\n                        vertices: [3, 4, 5],\n                        uv: [3, 4, 5]\n                    }\n                ]\n            };\n\n            framebuffer.setTexture(textures[i]);\n            this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n            this.texturedRenderingPipeline.setModelViewMatrix(mv);\n            this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n        }\n\n        camera = rotation.multiplyMatrix(\n            Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(0)\n                    .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 4 * 1).multiplyMatrix(Matrix4f.constructXRotationMatrix(-Math.PI * 2 / 4)))\n            );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.up);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n\n        camera =\n            rotation.multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(0)\n                        .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 2).multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI * 2 / 4)))\n\n                );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.down);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { EulerAngleCamera } from '../camera/EulerAngleCamera';\nimport { Utils } from '../core/Utils';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector3f } from '../math/Vector3f';\nimport { CameraKeyFrame } from './CameraKeyFrame';\n\nexport class BlenderCameraAnimator {\n\n    public pos: Vector3f;\n    private keyFrames: Array<CameraKeyFrame>;\n\n    // TODO:\n    // - should we really loop or better restart??\n    // - dont use linear interpolation see bourke\n    // - maybe quaternions and slerp for rotation\n    // temp solution: no linear for\n\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getViewMatrix(elapsedTime: number): Matrix4f {\n        const keyFrameDuration = 2600;\n\n        elapsedTime *= 1.0;\n\n        const first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        const zero = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        const second = (first + 1) % this.keyFrames.length;\n        const third = (first + 2) % this.keyFrames.length;\n        const fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        const mu2 = (1 - Math.cos(fraction * Math.PI)) / 2;\n        const position = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].position.x, this.keyFrames[first].position.x, this.keyFrames[second].position.x, this.keyFrames[third].position.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.y, this.keyFrames[first].position.y, this.keyFrames[second].position.y, this.keyFrames[third].position.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.z, this.keyFrames[first].position.z, this.keyFrames[second].position.z, this.keyFrames[third].position.z, fraction)\n        );\n        //let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\n\n        const look = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.x, this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x, this.keyFrames[third].rotation.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.y, this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y, this.keyFrames[third].rotation.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.z, this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z, this.keyFrames[third].rotation.z, fraction)\n        );\n        this.pos = position;\n\n        return new EulerAngleCamera(position, look.x, look.y, look.z).getViewMatrix();\n    }\n\n}\n\n","import { Vector3f } from '../math';\n\nexport class CameraKeyFrame {\n\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(position: Vector3f, rotation: Vector3f) {\n        this.position = position;\n        this.rotation = rotation;\n    }\n\n}","import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Face {\n    public vertices: Array<number>;\n    public normals: Array<number>;\n    public uv: Array<number>;\n}\n","import { Face } from './face';\nimport { TexCoord } from './tex-coord';\nimport { Vector } from './vector';\n\nexport class Mesh {\n\n    public name: string;\n    public vertices: Array<Vector>;\n    public normals: Array<Vector>;\n    public uv: Array<TexCoord>;\n    public faces: Array<Face>;\n\n}\n","import { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexCoord } from './tex-coord';\nimport { Face } from './face';\n\nexport function convertToMeshArray(data: string): Array<Mesh> {\n    const json: Array<Mesh> = new Array<Mesh>();\n\n    let currentObject: Mesh = null;\n\n    let normalCount: number = 0;\n    let vertexCount: number = 0;\n    let uvCount: number = 0;\n    let normalOffset: number = 0;\n    let vertexOffset: number = 0;\n    let uvOffset: number = 0;\n\n    data.toString().split('\\n').forEach((line: string) => {\n\n        if (line.startsWith('o ')) {\n            const coords: Array<string> = line.split(' ');\n\n            currentObject = new Mesh();\n            currentObject.name = coords[1];\n            currentObject.normals = [];\n            currentObject.vertices = [];\n            currentObject.faces = [];\n            currentObject.uv = []; // OPTIONAL\n\n            json.push(currentObject);\n            normalOffset = normalCount;\n            vertexOffset = vertexCount;\n            uvOffset = uvCount;\n        }\n\n        if (currentObject === null &&\n            (line.startsWith('v ') ||\n                line.startsWith('vn ') ||\n                line.startsWith('vt '))) {\n            console.error('Error: OBJ file does not contain Objects.');\n            throw Error();\n        }\n\n        if (line.startsWith('v ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const vertex: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.vertices.push(vertex);\n            vertexCount++;\n        }\n\n        if (line.startsWith('vn ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const normal: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.normals.push(normal);\n            normalCount++;\n        }\n\n        if (line.startsWith('vt ')) { // OPTIONAL\n            const coords: Array<string> = line.split(' ');\n\n            const uv: TexCoord = new TexCoord(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2])\n            );\n\n            currentObject.uv.push(uv);\n            uvCount++;\n        }\n\n        if (line.startsWith('f ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const face: Face = new Face();\n            face.vertices = [];\n            face.normals = [];\n            face.uv = [];\n\n            // vertex indices\n            face.vertices.push(Number(coords[1].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[2].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[3].split('/')[0]) - 1 - vertexOffset);\n\n            // uv indices OPTIONAL!\n            face.uv.push(Number(coords[1].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[2].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[3].split('/')[1]) - 1 - uvOffset);\n\n            // normal indices\n            face.normals.push(Number(coords[1].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[2].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[3].split('/')[2]) - 1 - normalOffset);\n\n            currentObject.faces.push(face);\n        }\n    });\n\n    return json;\n}\n","\nexport class TexCoord {\n\n    public u: number;\n    public v: number;\n\n    public constructor(u: number, v: number) {\n        this.u = u;\n        this.v = v;\n    }\n\n}\n","export class Vector {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\n\nexport class CameraFrame {\n    public frame: number;\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(frame: number, position: Vector3f, rotation: Vector3f) {\n        this.frame = frame;\n        this.position = position;\n        this.rotation = rotation;\n    }\n}\n","import { CameraKeyFrame } from '../animation/CameraKeyFrame';\nimport { Vector3f } from '../math';\nimport { CameraPath } from './CameraPath';\nimport { CameraFrame } from './CameraFrame';\n\nexport class CameraLoader {\n\n    public static load(filename: string): Promise<Array<CameraKeyFrame>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<CameraKeyFrame> => {\n\n            const json: any = JSON.parse(text);\n            const cameraPath: CameraPath = new CameraPath();\n            const keys = new Array<CameraKeyFrame>();\n\n            for (let i = 0; i < json.length; i++) {\n                const frame = json[i];\n\n                const myFrame = new CameraFrame(\n                    frame.frame,\n                    new Vector3f(\n                        frame.location[0],\n                        frame.location[1],\n                        frame.location[2]\n                    ),\n                    new Vector3f(\n                        frame.rotation[0],\n                        frame.rotation[1],\n                        frame.rotation[2]\n                    ));\n\n                cameraPath.frames.push(myFrame);\n                keys.push(new CameraKeyFrame(new Vector3f(\n                    frame.location[0],\n                    frame.location[2],\n                    -frame.location[1]\n                ),\n                    new Vector3f(\n                        frame.rotation[0] - 90 * 0.0174533,\n                        frame.rotation[2],\n                        frame.rotation[1]\n                    )));\n\n            }\n\n            return keys;\n        });\n    }\n\n}\n","import { CameraFrame } from './CameraFrame';\n\nexport class CameraPath {\n    public frames: Array<CameraFrame>;\n    constructor() {\n        this.frames = new Array<CameraFrame>();\n    }\n}\n\n","import { Matrix4f, Vector3f } from '../math';\n\nexport class EulerAngleCamera {\n\n    protected position: Vector3f;\n    protected rx: number;\n    protected ry: number;\n    protected rz: number;\n\n    constructor(position: Vector3f, rx: number, ry: number, rz: number) {\n        this.position = position;\n        this.rx = rx;\n        this.ry = ry;\n        this.rz = rz;\n    }\n\n    public getViewMatrix(): Matrix4f {\n        const rz = Matrix4f.constructZRotationMatrix(-this.rz);\n        const rx = Matrix4f.constructXRotationMatrix(-this.rx);\n        const ry = Matrix4f.constructYRotationMatrix(-this.ry);\n\n        const translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\n\n        return rx.multiplyMatrix(ry).multiplyMatrix(rz).multiplyMatrix(translation);\n    }\n\n    public getPosition(): Vector3f {\n        return this.position;\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { DLNode } from './Node';\n\n/**\n * Doubly Linked-List implementation class.\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n * https://github.com/DameLyngdoh/dl-doubly-linked-list-ts\n *\n */\nexport class DoublyLinkedList<T> {\n    /**\n     * The start node of the list.\n     */\n    private _start: DLNode<T> | null;\n\n    /**\n     * The last  node of the list.\n     */\n    private _end: DLNode<T> | null;\n\n    /**\n     * The number of nodes in the list.\n     */\n    private _length: number;\n\n    constructor() {\n        this._start = null;\n        this._end = null;\n        this._length = 0;\n    }\n\n    get start(): DLNode<T> | null {\n        return this._start;\n    }\n\n    set start(start: DLNode<T> | null) {\n        this._start = start;\n    }\n\n    get end(): DLNode<T> | null {\n        return this._end;\n    }\n\n    set end(end: DLNode<T> | null) {\n        this._end = end;\n    }\n\n    get length(): number {\n        return this._length + 1;\n    }\n\n    /**\n     * Returns true if the list is empty.\n     * @returns Returns true if list is empty or false otherwise.\n     */\n    public isEmpty(): boolean {\n        return this.length === 0;\n    }\n\n    /**\n     * Inserts a node to the start of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertStart(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.next = this.start;\n            if (this.start != null) {\n                this.start.previous = node;\n            }\n            this.start = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node to the end of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertEnd(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.previous = this.end;\n            if (this.end != null) {\n                this.end.next = node;\n            }\n            this.end = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node at the specified index in the list.\n     * @param node The node to be inserted to the list.\n     * @param index The index to insert the node at. A value of -1 will insert the node to the end of the list.\n     */\n    public insert(node: DLNode<T>, index: number): void {\n        if (index === 0) {\n            this.insertStart(node);\n            return;\n        }\n        else if (index === -1) {\n            this.insertEnd(node);\n            return;\n        }\n\n        let currentNode = this.start;\n        let i: number = 0;\n        for (i = 0; i < index - 1 && currentNode !== null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        // Insertion not possible\n        if (i !== index - 1 && currentNode === null) {\n            return;\n        }\n\n        if (currentNode != null) {\n            node.previous = currentNode;\n            node.next = currentNode.next;\n            if (currentNode.next != null) {\n                currentNode.next.previous = node;\n            }\n            else {\n                this.end = node;\n            }\n            currentNode.next = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Deletes the first node from the list.\n     */\n    public deleteStart(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.start != null && this.start.next == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.start != null) {\n            this.start = this.start.next;\n            if (this.start != null) {\n                this.start.previous = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes the last node from the list.\n     */\n    public deleteEnd(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.end != null && this.end.previous == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.end != null) {\n            this.end = this.end.previous;\n            if (this.end != null) {\n                this.end.next = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes a node from a specific index in the list. If the index is out of bounds, then no deletion will occur.\n     * @param index The index of the node to be deleted.\n     */\n    public delete(index: number): void {\n        if (this.isEmpty()) {\n            return;\n        }\n        if (index === 0) {\n            this.deleteStart();\n            return;\n        }\n        else if (index === -1) {\n            this.deleteEnd();\n            return;\n        }\n\n        const node = this.getNode(index);\n        if (node != null) {\n            if (node.next === null && node.previous !== null) {\n                this.deleteEnd();\n            }\n            else if (node.previous === null && node.next !== null) {\n                this.deleteStart();\n            }\n            else if (node.next !== null && node.previous !== null) {\n                node.previous.next = node.next;\n                node.next.previous = node.previous;\n                this._length--;\n            }\n        }\n    }\n\n    /**\n     * Retrieves a node from the specific index.\n     * @param index The index from which to retrieve the node.\n     * @returns Returns the node at the specific index or null if the index is out of bounds.\n     */\n    public getNode(index: number): DLNode<T> | null {\n        if (this.isEmpty() || index < 0) {\n            return null;\n        }\n\n        let currentNode = this.start;\n        for (let i = 1; i <= index && currentNode != null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        return currentNode;\n    }\n\n    /**\n     * Returns an array of the nodes in the order of the list.\n     * @returns Array of nodes.\n     */\n    public toArray(): Array<DLNode<T>> {\n        const array: Array<DLNode<T>> = new Array<DLNode<T>>();\n\n        if (this.length === 0) {\n            return array;\n        }\n\n        let i = 0;\n\n        let currentNode: DLNode<T> | null = this.start;\n        while (currentNode != null && i < 12) {\n            array.push(currentNode);\n            currentNode = currentNode.next;\n            i++;\n        }\n        return array;\n    }\n\n    /**\n     * Clears the list and deletes all nodes.\n     */\n    public clear(): void {\n        this.end = null;\n        this.start = null;\n        this._length = 0;\n    }\n}","/**\n * Node implementation class. A node is a vertex in the list which contains data and pointers to the next node and previous node.\n */\nexport class DLNode<T> {\n    /**\n     * The data contained in the node.\n     */\n    private _data: T | null = null;\n\n    /**\n     * The edge or pointer to the next node.\n     */\n    private _next: DLNode<T> | null = null;\n\n    /**\n     * The edge or pointer to the previous node.\n     */\n    private _previous: DLNode<T> | null = null;\n\n    constructor() { }\n\n    get data(): T | null {\n        return this._data;\n    }\n\n    set data(data: T | null) {\n        this._data = data;\n    }\n\n    get next(): DLNode<T> | null {\n        return this._next;\n    }\n\n    set next(next: DLNode<T> | null) {\n        this._next = next;\n    }\n\n    get previous(): DLNode<T> | null {\n        return this._previous;\n    }\n\n    set previous(previous: DLNode<T> | null) {\n        this._previous = previous;\n    }\n}","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class AbstractCube extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    private scene: Array<FlatshadedMesh>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/stravaganza.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.scene = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene2(framebuffer, time);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene2(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(5, 16, 5));\n        let model: FlatshadedMesh = this.scene[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        mv = camera.multiplyMatrix(Matrix4f.constructZRotationMatrix(\n            Math.PI * 0.5 * framebuffer.cosineInterpolate(0, 600, Math.floor(elapsedTime * 0.7) % 4000))\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(\n                Math.PI * 0.5 * framebuffer.cosineInterpolate(2000, 2600, Math.floor(elapsedTime * 0.7) % 4000)))\n        );\n        model = this.scene[1];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\n/**\n * TODO:\n * - Move procedural texture generation into dedicated class\n * - create Mesh / Textured Mesh class\n * - Create Lens Flare class\n * - Create Pipeline class\n */\nexport class BakedLighting extends AbstractScene {\n\n    private skyBox: SkyBox;\n    private baked: Texture;\n    private noise: Texture;\n    private blenderObj8: Array<TexturedMesh>;\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/abstract.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObj8 = mesh\n            ),\n            TextureUtils.load(require('../../assets/Backed.png'), false).then(\n                (texture: Texture) => this.baked = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n\n        this.drawBlenderScene7(framebuffer, time - 1100000);\n        /*\n            [\n                //   { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n            ], this.dirt, this.skybox);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene7(framebuffer: Framebuffer, elapsedTime: number): void {\n        elapsedTime *= 0.2;\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0005).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, -25, 0)\n                    )));\n\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.baked);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.blenderObj8);\n    }\n\n}\n","import { CameraKeyFrame } from '../../animation/CameraKeyFrame';\nimport { CameraLoader } from '../../camera/CameraLoader';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { WavefrontLoader } from '../../model/wavefront-obj/WavefrontLoader';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { PointLight } from '../../shading/light/PointLight';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nimport CameraPathFile from '../../assets/camera-path.jsx';\nimport { BlenderCameraAnimator } from '../../animation/BlenderCameraAnimator';\nimport { SkyBox } from '../../SkyBox';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class BlenderCameraScene extends AbstractScene {\n\n    private texture4: Texture;\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private meshes: Array<FlatshadedMesh>;\n    private path: Array<CameraKeyFrame>;\n    private skyBox: SkyBox;\n\n    private light1: PointLight;\n    private light2: PointLight;\n\n    private cameraAnimator: BlenderCameraAnimator;\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.light1 = new PointLight();\n        this.light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        this.light1.diffuseIntensity = new Vector4f(1, 0.0, 1, 1);\n        this.light1.specularIntensity = new Vector4f(0.5, 0.5, 0.7, 1);\n        this.light1.position = new Vector4f(0, -10, -1, 1);\n\n        this.light2 = new PointLight();\n        this.light2.ambientIntensity = new Vector4f(0.5, 0.5, 1, 1);\n        this.light2.diffuseIntensity = new Vector4f(0.3, 0.3, 1, 1);\n        this.light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        this.light2.position = new Vector4f(3, 0, -2, 1);\n\n        this.renderingPipeline.setLights([this.light1, this.light2]);\n\n        this.skyBox = new SkyBox();\n        return Promise.all([\n            this.skyBox.init(),\n            WavefrontLoader.load(require('../../assets/monkey.obj')).then(\n                (value: Array<FlatshadedMesh>) => this.meshes = value\n            ),\n            CameraLoader.load(require('../../assets/camera-path.jsx')).then(\n                (value: Array<CameraKeyFrame>) => this.path = value\n            ),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n        ]).then(() => {\n            this.cameraAnimator = new BlenderCameraAnimator();\n            this.cameraAnimator.setKeyFrames(this.path);\n        });\n    }\n\n    private computeFps(currentTime: number): void {\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n    }\n\n    public render(framebuffer: Framebuffer, timeInput: number): void {\n        const currentTime: number = Date.now();\n        this.computeFps(currentTime);\n\n        const modelViewMartrix: Matrix4f = this.cameraAnimator.getViewMatrix(timeInput);\n\n        this.skyBox.draw(framebuffer, modelViewMartrix);\n\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.drawMeshArray(framebuffer, this.meshes, modelViewMartrix);\n\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\nimport { Framebuffer } from '../../Framebuffer';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture/index';\n\n// Transitions\nexport enum TransitionMethods {\n    FADEIN = 1,\n    FADEOUT = 2,\n    BLOCKFADE = 3,\n    CROSSFADE = 4,\n    CIRCLE = 5,\n    WIPE_LEFT = 6\n}\n\nexport class BlockFade extends AbstractScene {\n    private ledTexture: Texture;\n    private startTime: number = Date.now();\n    private transitionFramebufferTo: Framebuffer;\n\n    public transitionCircle: Uint32Array;\n    public transitionWipe: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.transitionFramebufferTo = new Framebuffer(framebuffer.width, framebuffer.height);\n\n        // draw side wipe\n        this.transitionWipe = new Uint32Array(framebuffer.width * framebuffer.height);\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const c2 = Utils.map(x, 0, framebuffer.width, 0, 255);\n                const color = new Color(c2, c2, c2, 255).toPackedFormat();\n                this.transitionWipe[x + y * framebuffer.width] = color;\n            }\n        }\n\n        // draw circle gradient\n        this.transitionCircle = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.transitionCircle.fill(Color.WHITE.toPackedFormat(), 0, this.transitionCircle.length);\n        for (let d = 0; d < framebuffer.width / 2; d += 1) {\n            const c3 = Utils.map(d, 0, framebuffer.width / 2, 0, 255);\n            this.drawCircle(framebuffer.width / 2, framebuffer.height / 2, d, c3);\n        }\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (textureBackground: Texture) => this.ledTexture = textureBackground\n            ),\n        ]);\n    }\n\n    private putpixel(x: number, y: number, color: number) {\n        this.transitionCircle[x + y * this.transitionFramebufferTo.width] = new Color(color, color, color, 255).toPackedFormat();\n    }\n\n    private drawCircle(x0: number, y0: number, radius: number, color: number) {\n        let x = 0;\n        let y = radius;\n        let d = -(radius >>> 1);\n\n        while (x <= y) {\n            this.putpixel(x + x0, y + y0, color);\n            this.putpixel(y + x0, x + y0, color);\n            this.putpixel(-x + x0, y + y0, color);\n            this.putpixel(-y + x0, x + y0, color);\n            this.putpixel(-x + x0, -y + y0, color);\n            this.putpixel(-y + x0, -x + y0, color);\n            this.putpixel(x + x0, -y + y0, color);\n            this.putpixel(y + x0, -x + y0, color);\n\n            if (d <= 0) {\n                x++;\n                d += x;\n            } else {\n                y--;\n                d -= y;\n            }\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now() - this.startTime;\n        framebuffer.clear();\n        this.blockFade(framebuffer, this.ledTexture.texture, this.ledTexture.width, time, 0);\n    }\n\n    /**\n     * Transitions from one effect to another using using \"transition\" value from JSRocket\n     *\n     * @param  {Framebuffer} framebuffer             pixels\n     * @param  {AbstractScene} transitionSceneFrom   previous effect\n     * @param  {AbstractScene} transitionSceneTo     effect we are transitioning to\n     * @param  {number} transitionMethod             transition effect to use (blend, wipe, crossfade, etc)\n     */\n    public transition(\n        framebuffer: Framebuffer,\n        transitionSceneFrom: AbstractScene,\n        transitionSceneTo: AbstractScene,\n        transitionMethod: TransitionMethods,\n        transitionValue: number,\n        time: number) {\n\n        // render the 'To' effect into the framebuffer\n        transitionSceneTo.render(this.transitionFramebufferTo, time);\n\n        // render 'From' effect into framebuffer\n        transitionSceneFrom.render(framebuffer, time);\n        // apply transition to framebuffer (fromEffect) using texture (toEffect) 0-255\n        switch (Math.trunc(transitionMethod)) {\n            case TransitionMethods.BLOCKFADE: // 0 - 12000\n                this.blockFade(framebuffer, this.transitionFramebufferTo.framebuffer, this.transitionFramebufferTo.width, Utils.map(transitionValue, 0, 255, 0, 12000), 0);\n                break;\n            case TransitionMethods.CROSSFADE: // 0 - 255\n                this.crossFade(framebuffer.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.FADEIN: // 0-255\n                this.fadeIn(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.FADEOUT: // 0-255\n                this.fadeOut(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.WIPE_LEFT: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionWipe);\n                break;\n            case TransitionMethods.CIRCLE: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionCircle);\n                break;\n            default: // 0 - 512\n                this.crossFade(framebuffer.framebuffer, Utils.map(transitionValue, 0, 255, 0, 12000));\n        }\n    }\n\n    public blockFade(framebuffer: Framebuffer, pixelArray: Uint32Array, pixelArrayWidth: number, time: number, startTime: number) {\n        const blockWidth = 20;\n        const horizontalUnits = Math.ceil(framebuffer.width / blockWidth);\n        const verticalUnits = Math.ceil(framebuffer.height / blockWidth);\n\n        const fadeArray = new Array<number>(horizontalUnits * verticalUnits);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                fadeArray[x + y * horizontalUnits] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, x * blockWidth, y * blockWidth, blockWidth, blockWidth, pixelArray, pixelArrayWidth,\n                    framebuffer.interpolate(startTime + fadeArray[x + y * horizontalUnits], startTime + fadeArray[x + y * horizontalUnits] + 700, time)\n                );\n            }\n        }\n    }\n\n    // blend entire image to another image\n    public crossFade(framebuffer: Uint32Array, alpha: number) {\n        for (let i = 0; i < framebuffer.length; i++) {\n            framebuffer[i] = Framebuffer.blend(\n                framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                alpha)\n        }\n    }\n\n    // transition using image\n    // https://github.com/Slynchy/SDL-AlphaMaskWipes/blob/master/Transition.h\n    public crossFadeImage(framebuffer: Framebuffer, alpha: number, transitionImage: Uint32Array) {\n        for (let i = 0; i < framebuffer.framebuffer.length; i++) {\n            framebuffer.framebuffer[i] = Framebuffer.blend(\n                framebuffer.framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                Utils.clamp(\n                    (alpha * 2) - (transitionImage[i] & 0xff),\n                    0, 255))\n        }\n    }\n\n    // fade in from solid color\n    public fadeIn(framebuffer: Framebuffer, alpha: number, startColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        startColor,\n                        this.transitionFramebufferTo.framebuffer[x + y * framebuffer.width],\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // fade out to solid color\n    public fadeOut(framebuffer: Framebuffer, alpha: number, endColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        framebuffer.framebuffer[x + y * framebuffer.width],\n                        endColor,\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // Alternating scanlines + RGB Distort /w external input\n    public renderScanlines(framebuffer: Framebuffer, shiftAmount: number) {\n        let i = 0;\n\n        const offRed = (2 * shiftAmount) << 0;\n        const offGreen = (5 * shiftAmount) << 0;\n        const offBlue = (2 * shiftAmount) << 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n\n            // horizontal scanlines * intensity\n            const strips = (y & 1) * 16;\n            const verticalPosition = y * framebuffer.width;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                const imagePixelR = framebuffer.framebuffer[Utils.clamp(x + offRed, 0, framebuffer.width - 1) + verticalPosition] & 0xFF;\n                const imagePixelG = framebuffer.framebuffer[Utils.clamp(x + offGreen, 0, framebuffer.width - 1) + verticalPosition] >> 8 & 0xFF;\n                const imagePixelB = framebuffer.framebuffer[Utils.clamp(x + offBlue, 0, framebuffer.width - 1) + verticalPosition] >> 16 & 0xFF;\n\n                framebuffer.framebuffer[i++] = new Color(\n                    Utils.clamp(imagePixelR - strips, 0, 255),\n                    Utils.clamp(imagePixelG - strips, 0, 255),\n                    Utils.clamp(imagePixelB - strips, 0, 255)).toPackedFormat();\n            }\n        }\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\nexport class CubeScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.BLACK.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(CubeScene.BACKGROUND_COLOR);\n        framebuffer.clearDepthBuffer();\n        \n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 3.2;\n\n        return Matrix4f.constructTranslationMatrix(0, 0, -9).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","/*\nName          : Aisa Demo\nRelease Date  : TBD\nPlatform      : JavaScript\nCategory      : Demo\nNotes         : Software rendered effects written in Typescript\n*/\n\n// Core\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SoundManager } from '../../sound/SoundManager';\nimport { Color } from '../../core/Color';\nimport { BlockFade } from '../block-fade/BlockFade';\nimport { DoublyLinkedList } from '../../core/LinkedList';\nimport { DLNode } from '../../core/Node';\n\n// Stats\nimport Stats = require('stats.js');\n\n// Video Recording Tool\nimport { CanvasRecorder } from './canvas-record';\n\nexport class DemoScene {\n\n    // Sound Manager\n    private soundManager: SoundManager;\n\n    // Video Recorder\n    private canvasRecorder: CanvasRecorder;\n\n    // list of scenes\n    private sceneList: DoublyLinkedList<AbstractScene>;\n    private nodeInstance: DLNode<AbstractScene>;\n\n    // moving line marking current place in the timeline\n    private timelineRef: HTMLInputElement;\n\n    // transitions\n    private BlockFade: BlockFade;\n\n    // stats\n    private stats: Array<Stats>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.soundManager = new SoundManager();\n\n        this.sceneList = new DoublyLinkedList();\n\n        this.initControls(framebuffer.width);\n\n        this.BlockFade = new BlockFade();\n\n        // initialize effects with progress\n        return this.allProgress([\n            // load music\n         \n                this.soundManager.loadOgg(require('../../assets/sound/NotMixedorMastered.ogg')),\n          \n\n            // load *.rocket file\n            // Set to true when using *.rocket from file system\n            // set to false when using rocket editor using websocket\n            this.soundManager.prepareSync(require('../../assets/sound/demo.rocket'), true),\n       \n\n            // we use this for transitions\n            this.BlockFade.init(framebuffer),\n\n            // load and initialze effects\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene2').then(plug => this.initScene(framebuffer, plug)), // telephone\n            import('./parts/Scene3').then(plug => this.initScene(framebuffer, plug)), // title screen here\n            import('./parts/Scene4').then(plug => this.initScene(framebuffer, plug)), // pizza delivery guy\n            import('./parts/Scene5').then(plug => this.initScene(framebuffer, plug)), // replace with something else\n            import('./parts/Scene6').then(plug => this.initScene(framebuffer, plug)), // spikeball + plane deformation\n            import('./parts/Scene7').then(plug => this.initScene(framebuffer, plug)), // cube + rotozoomer\n            import('./parts/Scene8').then(plug => this.initScene(framebuffer, plug)), // ledplasma + voxelcubes\n            import('./parts/Scene9').then(plug => this.initScene(framebuffer, plug)), // blender camera\n            import('./parts/Scene10').then(plug => this.initScene(framebuffer, plug)), // MetalHeadzScene\n            import('./parts/Scene11').then(plug => this.initScene(framebuffer, plug)), // AbstractCube\n            import('./parts/Scene12').then(plug => this.initScene(framebuffer, plug)), // DofBallsScene\n            import('./parts/Scene13').then(plug => this.initScene(framebuffer, plug)), // TorusKnotTunnelScene\n            import('./parts/Scene14').then(plug => this.initScene(framebuffer, plug)), // GearsScene\n            import('./parts/Scene15').then(plug => this.initScene(framebuffer, plug)), // BakedLighting\n            import('./parts/Scene16').then(plug => this.initScene(framebuffer, plug)), // ParticleStreamsScene\n            import('./parts/Scene17').then(plug => this.initScene(framebuffer, plug)), // HoodlumScene\n            import('./parts/Scene18').then(plug => this.initScene(framebuffer, plug)), // TwisterScene\n            import('./parts/Scene19').then(plug => this.initScene(framebuffer, plug)), // RazorScene\n            import('./parts/Scene20').then(plug => this.initScene(framebuffer, plug)), // sinescroller\n\n        ], (percent: number) => {\n            // update the progress bar via canvas\n            const outputX = Math.ceil(framebuffer.width * percent);\n            framebuffer.drawRect2(0, (framebuffer.height / 2) - 5, outputX, 10, Color.WHITE.toPackedFormat());\n\n            // update the canvas\n            const canvas = document.getElementById('aisa-canvas') as HTMLCanvasElement;\n            canvas.getContext('2d').putImageData(framebuffer.getImageData(), 0, 0);\n\n            // update memory usage\n            for (const p of this.stats) {\n                p.update();\n            }\n        });\n    }\n\n    /**\n     * Adds AbstractScenes to sceneList array and initializes it\n     *\n     * @param   {Framebuffer} framebuffer            scene initializes with information in framebuffer such as width and height\n     * @param   {Object} plug                        imported class\n     * @returns {Promise<any>}                       resolves promise after completion\n     */\n    private initScene(framebuffer: Framebuffer, plug: unknown, ...args: Array<any>): Promise<any> {\n        const constructorName = Object.keys(plug)[0];\n        const newNode: DLNode<AbstractScene> = new DLNode();\n        newNode.data = new plug[constructorName](...args);\n        this.sceneList.insert(newNode, this.sceneList.length - 1);\n        return newNode.data.init(framebuffer);\n    }\n\n    // this runs after init() has finished\n    public onInit(): void {\n\n        this.canvasRecorder = new CanvasRecorder();\n\n        // jump to last effect in timeline and set mute vs unmuted\n        this.soundManager.initTimeline();\n\n        // show debug / timeline navigator\n        document.getElementById('debug').style.display = 'block';\n    }\n\n    /**\n     * Setup debug tools for local development\n     */\n    private initControls(width: number) {\n        this.stats = new Array<Stats>();\n\n        // Stats - Memory in Megabytes\n        this.initStats(2, 0, width * 2);\n\n        // Stats - Frames per second\n        this.initStats(0, 50, width * 2);\n\n        // Stats - Milliseconds per frame\n        this.initStats(1, 100, width * 2);\n\n        document.getElementById('debug').style.width = `${width * 2}px`;\n\n        // Scene Playback Controls\n        const tickerPlayRef = document.getElementById('ticker_play');\n        const tickerStopRef = document.getElementById('ticker_stop');\n        const tickerNextRef = document.getElementById('ticker_next');\n        const tickerBackRef = document.getElementById('ticker_back');\n        const tickerRecordRef = document.getElementById('ticker_record');\n        const tickerScreenshotRef = document.getElementById('ticker_screenshot');\n        const tickerVolumeRef = document.getElementById('ticker_volume');\n\n        // timeline\n        this.timelineRef = document.getElementById('timeline') as HTMLInputElement;\n\n        // stop\n        tickerStopRef.addEventListener('click', () => {\n            this.soundManager.onPause();\n            this.nodeInstance = this.sceneList.start;\n            this.soundManager.seek(0);\n\n            tickerPlayRef.classList.add('fa-play');\n            tickerPlayRef.classList.remove('fa-pause');\n\n            // save video if recoding\n            if (this.canvasRecorder.recording) {\n                tickerRecordRef.style.color = 'white';\n                this.canvasRecorder.saveVideo();\n            }\n        })\n\n        // record video\n        tickerRecordRef.addEventListener('click', () => {\n            if (!this.canvasRecorder.recording) {\n                // start audio and video recording\n                tickerRecordRef.style.color = 'red';\n                this.soundManager.onPlay();\n                this.canvasRecorder.recordVideo(this.soundManager.audio);\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                // pause audio and save video file\n                tickerRecordRef.style.color = 'white';\n                this.soundManager.onPause();\n                this.canvasRecorder.saveVideo();\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // play / pause\n        tickerPlayRef.addEventListener('click', () => {\n            if (this.soundManager.audio.paused && !this.soundManager.isPlaying) {\n                this.soundManager.onPlay();\n                tickerPlayRef.setAttribute('title', 'pause');\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                this.soundManager.onPause();\n                tickerPlayRef.setAttribute('title', 'play');\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // toggle audio and save preference for subsequent reloads\n        tickerVolumeRef.addEventListener('click', () => {\n            this.soundManager.toggleSound(tickerVolumeRef, !this.soundManager.audio.muted);\n            localStorage.setItem('soundToggle', String(this.soundManager.audio.muted));\n        });\n\n        // save screenshot in PNG format\n        tickerScreenshotRef.addEventListener('click', () => {\n            const date = new Date();\n            const fileName = `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.png`;\n            const canvas = document.getElementById('aisa-canvas');\n            const image = (canvas as HTMLCanvasElement).toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            const anchor = document.createElement('a');\n            anchor.setAttribute('download', fileName);\n            anchor.setAttribute('href', image);\n            anchor.click();\n        })\n\n        // next\n        tickerNextRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.audio.currentTime, 1, this.sceneList.length);\n        })\n\n        // back\n        tickerBackRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.audio.currentTime, -1, this.sceneList.length);\n        })\n\n        // seek\n        this.timelineRef.addEventListener('input', (e) => {\n            const time = Number((e.target as HTMLInputElement).value);\n            const newSeek = time * this.soundManager.audio.duration / 1000;\n            this.soundManager.seek(newSeek);\n        });\n\n        // seek with scrollwheel\n        document.addEventListener(\"wheel\", (e) => {\n            const directionToScroll = (e.deltaY < 0) ? -0.06 : 0.06;\n            this.soundManager.audio.currentTime = this.soundManager.audio.currentTime + directionToScroll;\n            // prevent page scroll\n            e.preventDefault();\n            e.stopPropagation();\n        }, { passive: false })\n\n        // keyboard navigation controls\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            switch (e.key) {\n                case 'MediaStop':\n                    tickerStopRef.click();\n                    break;\n                // play or pause\n                case 'MediaPlayPause':\n                case ' ':\n                    tickerPlayRef.click();\n                    break;\n                // navigate timeline backward\n                case 'ArrowLeft':\n                    this.soundManager.audio.currentTime = this.soundManager.audio.currentTime - 0.06;\n                    break;\n                // navigate timeline forward\n                case 'ArrowRight':\n                    this.soundManager.audio.currentTime = this.soundManager.audio.currentTime + 0.06;\n                    break;\n                // jump to next effect\n                case 'MediaTrackNext':\n                case 'ArrowUp':\n                    this.soundManager.jump(this.soundManager.audio.currentTime, 1, this.sceneList.length);\n                    break;\n                // jump to previous effect\n                case 'MediaTrackPrevious':\n                case 'ArrowDown':\n                    this.soundManager.jump(this.soundManager.audio.currentTime, -1, this.sceneList.length);\n                    break;\n                // toggle full screen\n                case 'f':\n                    document.getElementById('aisa-canvas').click();\n                    break;\n                // save a screenshot\n                case 's':\n                    tickerScreenshotRef.click();\n                    break;\n                // record video in webm format\n                case 'r':\n                    tickerRecordRef.click();\n                    break;\n                case 'd':\n                    break;\n            }\n        })\n    }\n\n    /**\n     * Runs all promises in an array and runs callback with percentage of completion\n     *\n     * @param   {Array<Promise<any>>} promises       array of promises to run\n     * @param   {Function} progressCallback          function sending percentage after individual promise is complete\n     * @returns {Promise<any>}                       promise resolve after all promises are complete\n     */\n    private allProgress(promises: Array<Promise<any>>, progressCallback: (percentage: number) => void): Promise<any> {\n        let d = 0;\n        for (const p of promises) {\n            p.then(() => {\n                d++;\n                progressCallback(d / promises.length);\n            });\n        }\n        return Promise.all(promises);\n    }\n\n    /**\n     * Adds JavaScript Performance Monitor and initializes it\n     *\n     * @param   {Object} args                        stat type[0-3], top in pixels, left in pixels\n     */\n    private initStats(...args: Array<number>) {\n        this.stats.push(new Stats());\n        const statsObj = this.stats[this.stats.length - 1];\n        statsObj.showPanel(args[0]);\n        statsObj.dom.style.cssText = `position:absolute;top:${args[1]}px;left:${args[2]}px;`;\n        document.body.appendChild(statsObj.dom);\n    }\n\n    public render(framebuffer: Framebuffer) {\n        // get time and values from music\n        this.soundManager.updateMusic();\n\n        // get which effect to run\n        this.nodeInstance = this.sceneList.getNode(this.soundManager.musicProperties.sceneData.effect);\n\n        // if \"transitionType\" in JSRocket is zero then run the effect by itself\n        if (this.soundManager.musicProperties.sceneData.transitionType === 0) {\n            this.nodeInstance.data.render(framebuffer, this.soundManager.musicProperties.timeMilliseconds)\n        } else {\n            // otherwise blend two effects together\n            this.BlockFade.transition(\n                framebuffer,\n                this.nodeInstance.data,\n                this.nodeInstance.next.data,\n                this.soundManager.musicProperties.sceneData.transitionType,\n                this.soundManager.musicProperties.sceneData.transitionValue,\n                this.soundManager.musicProperties.timeMilliseconds);\n        }\n\n        // TODO: send musicProperties instead of timeMilliseconds so all scenes can act on any channel\n        //this.BlockFade.renderScanlines(framebuffer, this.soundManager.musicProperties.sceneData.bass * 2);\n\n        // comment out for release\n        this.drawStats();\n    }\n\n    /**\n     * Show FPS, Memory Usage and js rocket time and effect number\n     */\n    private drawStats() {\n\n        // update timeline marker\n        this.timelineRef.value = String((this.soundManager.musicProperties.timeSeconds * 1000 / this.soundManager.audio.duration));\n\n        // keep current time in local storage to stay in place during reloads\n        localStorage.setItem('lastTime', String(this.soundManager.musicProperties.timeSeconds));\n\n        if (!this.soundManager.syncDevice.connected && !this.soundManager.demoMode) {\n            console.error('Rocket not connected.');\n            return;\n        } else {\n            // get values from JS rocket\n            document.getElementById('scene').innerText = this.soundManager.musicProperties.sceneData.effect.toString();\n            document.getElementById('time').innerText = this.soundManager.musicProperties.timeSeconds.toFixed(2);\n        }\n        // update FPS and Memory usage\n        for (const p of this.stats) {\n            p.update();\n        }\n    }\n\n}\n","export class CanvasRecorder {\n\n    public recording: boolean;\n    private canvasRecordingOptions;\n    private canvasRecorder;\n    private audioTrack: MediaStreamTrack;\n\n    public constructor() {\n        this.recording = false;\n    }\n\n    public getType(filename: string) {\n        const ext = this.fileExtension(filename);\n        return ['mkv'].includes(ext) ? 'video/x-matroska;codecs=avc1' : 'video/webm';\n    }\n\n    private fileExtension(filename: string): string {\n        return filename.split('.').pop();\n    }\n\n    public createCanvasRecorder(canvas: HTMLCanvasElement, options = {}, audio: HTMLMediaElement) {\n        const date = new Date();\n        let link = null;\n\n        const {\n            filename = `Recording ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate = 25,\n            download = true,\n            recorderOptions = {\n                mimeType: 'video/x-matroska;codecs=avc1',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 2500000 // 2.5 Mbit/sec\n            }\n        } = {\n            ...options\n        };\n\n        const mimeType = recorderOptions.mimeType || this.getType(filename);\n\n        if (download) {\n            link = link || document.createElement('a');\n            link.download = filename;\n        }\n\n        let chunks = [];\n\n        let stream = canvas.captureStream(frameRate);\n\n        if (!this.canvasRecorder) {\n            // get the audio track:\n            const ctx = new AudioContext();\n            const dest = ctx.createMediaStreamDestination();\n            const sourceNode = ctx.createMediaElementSource(audio);\n            sourceNode.connect(dest);\n            sourceNode.connect(ctx.destination);\n            this.audioTrack = dest.stream.getAudioTracks()[0];\n        }\n\n        stream.addTrack(this.audioTrack);\n\n        let recorder = new MediaRecorder(stream, { mimeType, ...recorderOptions });\n\n        recorder.ondataavailable = event => {\n            event.data.size && chunks.push(event.data);\n        };\n        recorder.onstop = () => {\n            if (download && chunks.length) {\n                const blob = new Blob(chunks, { type: mimeType });\n                const url = URL.createObjectURL(blob);\n                link.href = url;\n\n                const event = new MouseEvent('click');\n                link.dispatchEvent(event);\n                setTimeout(() => {\n                    URL.revokeObjectURL(url);\n                }, 1);\n            }\n        };\n\n        return {\n            start(timeslice) {\n                chunks = [];\n                recorder.start(timeslice);\n            },\n            set filename(name) {\n                link.download = name;\n            },\n            stop() {\n                recorder.stop();\n                return chunks;\n            },\n            dispose() {\n                recorder = null;\n                stream = null;\n            },\n            stream,\n            recorder\n        };\n    }\n\n    /**\n     * Records a video and sound using CanvasRecorder\n     */\n    public recordVideo(sound: HTMLMediaElement) {\n        console.info('recording video...');\n        this.recording = true;\n        const date = new Date();\n\n        // options\n        this.canvasRecordingOptions = {\n            filename: `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate: 60,\n            download: true,\n            recorderOptions: {\n                mimeType: 'video/webm',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 5000000 // 2.5 Mbit/sec\n            }\n        }\n\n        // Create canvas video recorder\n        const canvasObj = document.getElementById('aisa-canvas');\n        this.canvasRecorder = this.createCanvasRecorder(canvasObj as HTMLCanvasElement, this.canvasRecordingOptions, sound);\n        this.canvasRecorder.start();\n    }\n\n    public saveVideo() {\n        // Stop and dispose\n        this.canvasRecorder.stop();\n        this.canvasRecorder.dispose();\n        this.recording = false;\n        console.info(`saved video as ${this.canvasRecordingOptions.filename}`);\n    }\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\n\n// sideways 3D office scene\nexport class Scene1 {\n    private PlaneDeformationFloorScene = new PlaneDeformationScene(8, require('../../../assets/ground.png'));\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        return Promise.all([\n            this.PlaneDeformationFloorScene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlaneDeformationFloorScene.drawPlaneDeformation(framebuffer, 0, time >> 3);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { MetalHeadzScene } from '../../metalheadz/MetalHeadzScene';\n\nexport class Scene10 {\n    private MetalHeadzScene: MetalHeadzScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.MetalHeadzScene = new MetalHeadzScene();\n\n        return Promise.all([\n            this.MetalHeadzScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.MetalHeadzScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { AbstractCube } from '../../abstract-cube/AbstractCube';\n\nexport class Scene11 {\n    private AbstractCube: AbstractCube;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.AbstractCube = new AbstractCube();\n\n        return Promise.all([\n            this.AbstractCube.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.AbstractCube.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { DofBallsScene } from '../../dof-balls/DofBallsScene';\n\nexport class Scene12 {\n    private DofBallsScene: DofBallsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.DofBallsScene = new DofBallsScene();\n\n        return Promise.all([\n            this.DofBallsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.DofBallsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusKnotTunnelScene } from '../../torus-knot-tunnel/TorusKnotTunnelScene';\n\nexport class Scene13 {\n    private TorusKnotTunnelScene: TorusKnotTunnelScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusKnotTunnelScene = new TorusKnotTunnelScene();\n\n        return Promise.all([\n            this.TorusKnotTunnelScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusKnotTunnelScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { GearsScene } from '../../gears/GearsScene';\n\nexport class Scene14 {\n    private GearsScene: GearsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.GearsScene = new GearsScene();\n\n        return Promise.all([\n            this.GearsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.GearsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BakedLighting } from '../../baked-lighting/BakedLighting';\n\nexport class Scene15 {\n    private BakedLighting: BakedLighting;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BakedLighting = new BakedLighting();\n\n        return Promise.all([\n            this.BakedLighting.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.BakedLighting.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { ParticleStreamsScene } from '../../particle-streams/ParticleStreamsScene';\n\nexport class Scene16 {\n    private ParticleStreamsScene: ParticleStreamsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.ParticleStreamsScene = new ParticleStreamsScene();\n\n        return Promise.all([\n            this.ParticleStreamsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.ParticleStreamsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { HoodlumScene } from '../../hoodlum/HoodlumScene';\n\nexport class Scene17 {\n    private HoodlumScene: HoodlumScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.HoodlumScene = new HoodlumScene();\n\n        return Promise.all([\n            this.HoodlumScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.HoodlumScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TwisterScene } from '../../twister/TwisterScene';\n\nexport class Scene18 {\n    private TwisterScene: TwisterScene;\n    public init(): Promise<any> {\n\n        this.TwisterScene = new TwisterScene();\n\n        return Promise.all([\n            this.TwisterScene.init(),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TwisterScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RazorScene } from '../../razor/RazorScene';\n\nexport class Scene19 {\n    private RazorScene: RazorScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RazorScene = new RazorScene();\n\n        return Promise.all([\n            this.RazorScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RazorScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene2 {\n    private logo: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { SineScrollerScene } from '../../sine-scroller/SineScrollerScene';\n\nexport class Scene20 {\n    private SineScrollerScene: SineScrollerScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.SineScrollerScene = new SineScrollerScene();\n\n        return Promise.all([\n            this.SineScrollerScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.SineScrollerScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene3 {\n    private logo: Texture;\n    private background: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.background = texture\n            ),\n            TextureUtils.load(require('../../../assets/logos/pizza_express.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.background.height / 2)) | 0, this.background, 1.0);\n\n        framebuffer.drawTexture(\n            ((framebuffer.width / 2) - (this.logo.width / 2)) | 0,\n            ((framebuffer.height / 2) - (this.logo.height / 2)) | 0,\n            this.logo,\n            1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\nimport { PlasmaScene } from '../../plasma/PlasmaScene';\n\n// pizza being delivered\nexport class Scene4 {\n\n    private pizza: Texture;\n    private image: Texture;\n    private PlasmaScene: PlasmaScene;\n\n    public init(): Promise<any> {\n        this.PlasmaScene = new PlasmaScene();\n\n        return Promise.all([\n            // https://www.pngkey.com/detail/u2r5r5o0o0e6a9i1_sign-up-for-deals-pizza-delivery-guy-png/\n            TextureUtils.load(require('../../../assets/logos/pizza-delivery.png'), true).then(\n                (texture: Texture) => this.pizza = texture\n            ),\n            TextureUtils.load(require('../../../assets/lsd.png'), true).then(\n                (texture: Texture) => this.image = texture\n            ),\n            this.PlasmaScene.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlasmaScene.render(framebuffer, time);\n        framebuffer.drawTexture(50,  ((framebuffer.height / 2) - (this.image.height / 2)) | 0, this.image, 1.0);\n        framebuffer.drawTexture(framebuffer.width - this.pizza.width, (framebuffer.height ) - (this.pizza.height ) | 0, this.pizza, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusScene } from '../../torus/TorusScene';\n\nexport class Scene5 {\n    private TorusScene: TorusScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusScene = new TorusScene();\n\n        return Promise.all([\n            this.TorusScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\nimport { DistortedSphereScene } from '../../distorted-sphere/DistortedSphereScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class Scene6 {\n    private PlaneDeformationScene: PlaneDeformationScene;\n    private DistortedSphereScene: DistortedSphereScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.PlaneDeformationScene = new PlaneDeformationScene(3, require('../../../assets/textures/checker.png'));\n        this.DistortedSphereScene = new DistortedSphereScene();\n\n        return Promise.all([\n            this.DistortedSphereScene.init(framebuffer),\n            this.PlaneDeformationScene.init(framebuffer),\n            // https://www.pngitem.com/middle/iwTwxh_face-facial-hair-sitting-tongue-fear-woman-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick-2.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.PlaneDeformationScene.render(framebuffer, time);\n        this.DistortedSphereScene.renderTransparent(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RotoZoomerScene } from '../../roto-zoomer/RotoZoomerScene';\nimport { CubeScene } from '../../cube/CubeScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene7 {\n    private RotoZoomerScene: RotoZoomerScene;\n    private CubeScene: CubeScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RotoZoomerScene = new RotoZoomerScene();\n        this.CubeScene = new CubeScene();\n\n        return Promise.all([\n            this.CubeScene.init(framebuffer),\n            this.RotoZoomerScene.init(),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RotoZoomerScene.render(framebuffer, time);\n        this.CubeScene.renderBackground(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { VoxelBallsScene } from '../../voxel-balls/VoxelBallsScene';\nimport { LedPlasmaScene } from '../../led-plasma/LedPlasmaScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene8 {\n    private VoxelBallsScene: VoxelBallsScene;\n    private LedPlasmaScene: LedPlasmaScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.VoxelBallsScene = new VoxelBallsScene();\n        this.LedPlasmaScene = new LedPlasmaScene();\n\n        return Promise.all([\n            this.LedPlasmaScene.init(),\n            this.VoxelBallsScene.init(framebuffer),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.LedPlasmaScene.render(framebuffer, time);\n        this.VoxelBallsScene.renderTransparent(framebuffer, time);\n        // framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BlenderCameraScene } from '../../blender-camera-animation/BlenderCameraScene';\nexport class Scene9 {\n    private BlenderCameraScene: BlenderCameraScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BlenderCameraScene = new BlenderCameraScene();\n\n        return Promise.all([\n            this.BlenderCameraScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(0);\n        framebuffer.clearDepthBuffer();\n        this.BlenderCameraScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { Vertex } from '../../Vertex';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\ninterface IndexMesh {\n    points: Array<Vector4f>,\n    points2: Array<Vector4f>,\n    normals: Array<Vector4f>,\n    normals2: Array<Vector4f>,\n    index: Array<number>\n}\n\nexport class DistortedSphereScene extends AbstractScene {\n\n    private heightmapSphere: Texture;\n\n    private env: Texture;\n    private obj: IndexMesh;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/heightmapSphere.png'), false).then(\n                texture => this.heightmapSphere = texture\n            ),\n            TextureUtils.load(require('../../assets/envmap.png'), false).then(\n                texture => this.env = texture\n            ),\n        ]).then(\n            () => {\n                this.obj = this.createSphereDistplaced(this.heightmapSphere);\n            });\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(Color.BLACK.toPackedFormat());\n        this.renderTransparent(framebuffer, time);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.env);\n        const scale: number = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(time * 0.0001)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(time * 0.0001)));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10 - (Math.sin(time * 0.0006) * 0.5 + 0.5) * 6)\n            .multiplyMatrix(modelViewMartrix);\n        framebuffer.clearDepthBuffer();\n        this.shadingSphereEnvDisp2(framebuffer, time * 0.0004, modelViewMartrix);\n    }\n\n    public createSphere() {\n\n        const pointsA: Array<Vector4f> = [\n            new Vector4f(0.0, -1.0, 0.0),\n            new Vector4f(1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, 1.0),\n            new Vector4f(-1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, -1.0),\n            new Vector4f(0.0, 1.0, 0.0)\n        ];\n\n        const indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        const k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        const points: Array<Vector4f> = [];\n        const points2: Array<Vector4f> = [];\n        const normals: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n\n        const index: Array<number> = [];\n\n        k.index.forEach(i => {\n            const p = k.points[i];\n\n            const point = points.find(findPoint => findPoint.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector4f(0, 0, 0));\n            normals2.push(new Vector4f(0, 0, 0));\n            points2.push(new Vector4f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public divideSphere(points: Array<Vector4f>, index: Array<number>, steps: number) {\n\n        const points2: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n        const index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points[index[i]];\n            const v2 = points[index[i + 1]];\n            const v3 = points[index[i + 2]];\n\n            const vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            const vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            const vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n\n    public createSphereDistplaced(texture: Texture) {\n        const sphere: {\n            points: Array<Vector4f>,\n            points2: Array<Vector4f>,\n            normals: Array<Vector4f>,\n            normals2: Array<Vector4f>,\n            index: Array<number>\n        } = this.createSphere();\n        const newPoints: Array<Vector4f> = new Array<Vector4f>();\n        sphere.points.forEach((point) => {\n            const x = point.x;\n            const y = point.y;\n            const z = point.z;\n            const u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            const v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            const disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public shadingSphereEnvDisp2(framebuffer: Framebuffer, elapsedTime: number, modelViewMartrix: Matrix4f): void {\n        const result = this.obj;\n\n\n        for (let i = 0; i < result.points.length; i++) {\n            const y = result.points[i].z;\n            const x = result.points[i].x;\n            const length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + Math.max(20 - length * 2, 0) * 0.06 + elapsedTime * 0.9) * 4.5;\n            rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        const points = result.points2;\n        const index = result.index;\n        const normals = result.normals;\n\n        const norm: Vector4f = new Vector4f(0, 0, 0);\n        const norm2: Vector4f = new Vector4f(0, 0, 0);\n        const cross: Vector4f = new Vector4f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            const v1: Vector4f = points[index[i]];\n            const v2: Vector4f = points[index[i + 1]];\n            const v3: Vector4f = points[index[i + 2]];\n\n\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            const normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        const points2: Array<Vector4f> = result.points2;\n        const normals2: Array<Vector4f> = result.normals2;\n\n        const normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyHomArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            points2[p].x = Math.round((framebuffer.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((framebuffer.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        const vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        const vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        const vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        const vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const n1 = normals2[index[i]];\n\n            const v2 = points2[index[i + 1]];\n            const n2 = normals2[index[i + 1]];\n\n            const v3 = points2[index[i + 2]];\n            const n3 = normals2[index[i + 2]];\n\n            if (framebuffer.isTriangleCCW(v1, v2, v3)) {\n\n                vertexArray[0].projection = v1;\n                framebuffer.fakeSphere(n1, vertex1);\n\n                vertexArray[1].projection = v2;\n                framebuffer.fakeSphere(n2, vertex2);\n\n                vertexArray[2].projection = v3;\n                framebuffer.fakeSphere(n3, vertex3);\n\n                if (v1.x < framebuffer.minWindow.x ||\n                    v2.x < framebuffer.minWindow.x ||\n                    v3.x < framebuffer.minWindow.x ||\n                    v1.x > framebuffer.maxWindow.x ||\n                    v2.x > framebuffer.maxWindow.x ||\n                    v3.x > framebuffer.maxWindow.x ||\n                    v1.y < framebuffer.minWindow.y ||\n                    v2.y < framebuffer.minWindow.y ||\n                    v3.y < framebuffer.minWindow.y ||\n                    v1.y > framebuffer.maxWindow.y ||\n                    v2.y > framebuffer.maxWindow.y ||\n                    v3.y > framebuffer.maxWindow.y) {\n\n\n                    this.texturedRenderingPipeline.clipConvexPolygon2(framebuffer, vertexArray);\n                } else {\n                    this.texturedRenderingPipeline.triangleRasterizer.drawTriangleDDA(framebuffer, vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n\n}","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nexport class DofBallsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n    private start: number;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.start = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.load(require('../../assets/spriteBlur.png'), true).then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleTorus(framebuffer, time, this.particleTexture2, true);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.60);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public computeDepthBlur(\n        nearPlane: number,\n        focalPlane: number,\n        farPlane: number, depth: number): number {\n\n        let f: number;\n\n        if (depth > focalPlane) {\n            f = (depth - focalPlane) / (nearPlane - focalPlane);\n        } else {\n            f = (depth - focalPlane) / (farPlane - focalPlane);\n        }\n        return Math.min(f, 1.0);\n    }\n\n    public drawParticleTorus(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        framebuffer.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const radi = 5.2;\n\n        for (let i = 0; i < num; i++) {\n            const x = radi * Math.cos(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n            const y = (i - num * 0.5) * 0.4;\n            const z = radi * Math.sin(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n\n            points.push(new Vector3f(x, y, z));\n        }\n\n        const modelViewMartrix: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.0004)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.0004)));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach((element: Vector3f) => {\n            points2.push(framebuffer.project(modelViewMartrix.multiply(element)));\n        });\n\n        points2.sort((a: Vector3f, b: Vector3f) => a.z - b.z);\n\n        points2.forEach((element: Vector3f) => {\n            const size: number = -(2.9 * 292 / (element.z));\n            const spriteNum: number = Math.round(this.computeDepthBlur(0, -15, -70, element.z) * 13);\n\n            framebuffer.drawParticle2Sub(\n                element.x - size / 2,\n                element.y - size / 2,\n                size, size, texture, 1 / element.z, 1.0, spriteNum, 128\n            );\n        });\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\n\nexport class GearsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n    private gearsMesh: Array<FlatshadedMesh>;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/gear.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.gearsMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene4(framebuffer, time);\n        /*  [\n              { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n              { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n              { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n              { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n              { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n          ], this.dirt);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene4(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -21).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let scale: number = 0.1 * 2.1 * 2.1;\n        let factor: number = 2.1 - 0.09 - 0.09;\n        const fade: number = 0.09;\n        const dampFactor: number = Math.sin(elapsedTime * 0.00001) * 0.5 + 0.5;\n        for (let i: number = 1; i < 6; i++) {\n            scale *= factor;\n            factor -= fade;\n\n            const mv: Matrix4f = this.getModelViewMatrix(camera, dampFactor, scale, i, elapsedTime);\n\n            this.renderingPipeline.draw(framebuffer, this.gearsMesh[0], mv);\n        }\n        // let lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n        // framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n    private getModelViewMatrix(camera: Matrix4f, dampFactor: number, scale: number, i: number,\n        elapsedTime: number): Matrix4f {\n        const modelViewMartrix: Matrix4f =\n            Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.0005 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                    Matrix4f.constructScaleMatrix(scale, scale, scale)));\n\n        return camera.multiplyMatrix(modelViewMartrix);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class HoodlumScene extends AbstractScene {\n\n    private blurred: Texture;\n    private lab2: Texture;\n    private noise: Texture;\n    private particleTexture2: Texture;\n    private spaceLabMesh: Array<TexturedMesh>;\n    private hoodlumLogoMesh: Array<FlatshadedMesh>;\n    private accumulationBuffer: Uint32Array;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/lab2.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.spaceLabMesh = mesh\n            ),\n            BlenderLoader.load(require('../../assets/jsx/hoodlum2018.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.hoodlumLogoMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/lab2.png'), false).then(texture => this.lab2 = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n            this.createProceduralTexture3().then(texture => this.particleTexture2 = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        framebuffer.setCullFace(CullFace.BACK);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.lab2);\n\n        this.drawBlenderScene9(framebuffer, time, this.particleTexture2);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene9(framebuffer: Framebuffer, elapsedTime: number, texture3: Texture): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.spaceLabMesh);\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        const model = this.hoodlumLogoMesh[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                const y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                const scale2 = (1 + 4 * framebuffer.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                const x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                const z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach(element => {\n            const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            const size = -(4.3 * 192 / (element.z));\n            framebuffer.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public createProceduralTexture3(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class LedPlasmaScene extends AbstractScene {\n\n    private ledTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/led.png'), false).then(\n                (texture: Texture) => this.ledTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.led(framebuffer, time, this.ledTexture);\n    }\n\n    // TODO: create interesting pattern!\n    public led(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        const time = elapsedTime * 0.0007 * 1.0;\n        const lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        const radialWaveCenter = new Vector3f(40.0 / 2.0, 35.0 / 2.0, 0).add(new Vector3f(40.0 / 2.0 *\n            Math.sin(-time * 1.2), 35.0 / 2.0 * Math.cos(-time * 1.2), 0));\n        const difference: Vector3f = new Vector3f(0, 0, 0);\n\n        const horizontalUnits = Math.ceil(framebuffer.width / 8);\n        const verticalUnits = Math.ceil(framebuffer.height / 8);\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                const directionalWave = (Math.sin((x * lineDirection.x + y * lineDirection.y) * 0.8 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                const radialWave = (Math.cos(difference.length() * 0.7) + 1.0) * 0.5;\n                const waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                const intensity = ((waveSum * 15) | 0) % 16;\n                framebuffer.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture, TextureUtils } from '../../texture';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class MetalHeadzScene extends AbstractScene {\n\n    private metalheadz: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private noise: Texture;\n    private dirt: Texture;\n    private skyBox: SkyBox;\n\n    private blenderObjMetal: any;\n\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n        // TODO:\n        // make classes for assets\n        // lens flare, 3d modell\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/metalheadz.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObjMetal = mesh\n            ),\n            TextureUtils.load(require('../../assets/metalheadz.png'), false).then(\n                (texture: Texture) => this.metalheadz = texture\n            ),\n            TextureUtils.load(require('../../assets/ring.png'), true).then(\n                (texture: Texture) => this.texture11 = texture\n            ),\n            TextureUtils.load(require('../../assets/bokeh.png'), true).then(\n                (texture: Texture) => this.texture13 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n            TextureUtils.load(require('../../assets/dirt.png'), true).then(\n                (texture: Texture) => this.dirt = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        const elapsedTime: number = 0.2 * time;\n\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = this.computeCameraMovement(elapsedTime);\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 7));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.metalheadz);\n\n        const renderingPipeline: TexturingRenderingPipeline = this.texturedRenderingPipeline;\n\n        renderingPipeline.setModelViewMatrix(mv);\n        renderingPipeline.drawMeshArray(framebuffer, this.blenderObjMetal);\n\n        const scale: number = 20;\n        const lensflareScreenSpace: Vector3f =\n            framebuffer.project(camera.getRotation().multiply(new Vector3f(1.1 * scale, 2 * scale, -0.9 * scale)));\n\n        framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 1.2, [\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    private computeCameraMovement(elapsedTime: number): Matrix4f {\n        return Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17)\n            .multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0008).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0009).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 0, 0)\n                    )\n                )\n            );\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f, Matrix4f, Matrix3f } from '../../math';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture';\n\nexport class ParticleStreamsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture().then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleStreams(framebuffer, time, this.particleTexture2);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.55);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            const radius = 2.8;\n            const radius2 = 2.9 + 3 * Math.sin(Math.PI * 2 * i / num - elapsedTime * 0.002);\n\n            for (let j = 0; j < num2; j++) {\n\n                const x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                const y = Math.cos(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius + 8 + radius2;\n                const z = Math.sin(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius;\n\n                points.push(Matrix3f.constructXRotationMatrix(Math.PI * 2 * i / num - Math.sin(elapsedTime * 0.0003 + Math.PI * 2 * i / num)).multiply(new Vector3f(x, y, z)));\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n                Matrix4f.constructZRotationMatrix(Math.PI * 0.17).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(elapsedTime * 0.00015).multiplyMatrix(\n                        Matrix4f.constructXRotationMatrix(Math.PI * 2 / 3 * i + elapsedTime * 0.0006)))\n            );\n\n            const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort((a, b) => {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                // let size = -(2.0 * 192 / (element.z));\n                const size = -(1.3 * 192 / (element.z));\n                if (element.z < -4)\n                    framebuffer.drawParticleNoDepth(\n                        Math.round(element.x - size / 2),\n                        Math.round(element.y - size / 2),\n                        Math.round(size), Math.round(size), texture, framebuffer.interpolate(-90, -55, element.z));\n            });\n        }\n    }\n\n\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\n\n/**\n * Plane deformation\n *\n * 2D plane deformations using lookup tables was a great\n * way to get smooth animations of complex calculations\n * running on slower processors. These effects were very\n * common in the 90s demoscene.\n *\n * The idea was to take a texture and deform it using a\n * pre-calculated math reference table. Different formulas\n * gave different effects such as fake 3d tunnels, wormholes\n * and landscapes.\n *\n * https://www.iquilezles.org/www/articles/deform/deform.htm\n *\n */\n\nexport class PlaneDeformationScene {\n\n    private mLUT: Int32Array;\n    public texture: Texture;\n\n    constructor(\n        private effectStyle: number,\n        private texturePath: string\n    ) {\n    }\n\n    onInit() { }\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.texturePath, false).then(\n                (texture: Texture) => {\n                    this.texture = texture;\n                    this.createLUT(this.effectStyle, framebuffer.width, framebuffer.height, this.texture.width, this.texture.height);\n                }\n            ),\n        ]);\n\n    }\n\n    // fill math lookup table values with crazy values\n    public createLUT(effectStyle: number, effectWidth: number, effectHeight: number, textureWidth: number, textureHeight: number): Promise<any> {\n\n        // initializae lookup array\n        this.mLUT = new Int32Array(3 * effectWidth * effectHeight);\n\n        // increment placeholder\n        let k = 0;\n\n        // u and v are euclidean coordinates\n        let u = 0;\n        let v = 0\n        let bright = 0;\n\n        for (let j = 0; j < effectHeight; j++) {\n            const y = -1.00 + 2.00 * j / effectHeight;\n            for (let i = 0; i < effectWidth; i++) {\n                const x = -1.00 + 2.00 * i / effectWidth;\n                const d = Math.sqrt(x * x + y * y);\n                const a = Math.atan2(y, x);\n\n                const r = d;\n                switch (effectStyle) {\n                    case 1:   // stereographic projection / anamorphosis\n                        u = Math.cos(a) / d;\n                        v = Math.sin(a) / d;\n                        bright = -50 * (2 / (6 * r + 3 * x));\n                        break;\n                    case 2:  // hypnotic rainbow spiral\n                        v = Math.sin(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        u = Math.cos(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        bright = 1;\n                        break;\n                    case 3:  // rotating tunnel\n                        v = 2 / (6 * r + 3 * x);\n                        u = a * 3 / Math.PI;\n                        bright = 25 * -v;\n                        break;\n                    case 4:  // wavy star-burst\n                        v = (-0.4 / r) + .1 * Math.sin(8 * a);\n                        u = .5 + .5 * a / Math.PI;\n                        bright = 0;\n                        break;\n                    case 5:  // hyper-space travel\n                        u = (0.02 * y + 0.03) * Math.cos(a * 3) / r;\n                        v = (0.02 * y + 0.03) * Math.sin(a * 3) / r;\n                        bright = 0;\n                        break;\n                    case 6:  // five point magnetic flare\n                        u = 1 / (r + 0.5 + 0.5 * Math.sin(5 * a));\n                        v = a * 3 / Math.PI;\n                        bright = 0;\n                        break;\n                    case 7:  // cloud like dream scroll\n                        u = 0.1 * x / (0.11 + r * 0.5);\n                        v = 0.1 * y / (0.11 + r * 0.5);\n                        bright = 0;\n                        break;\n                    case 8:  // floor and ceiling with fade to dark horizon\n                        u = x / Math.abs(y);\n                        v = 1 / Math.abs(y);\n                        bright = 40 * -v;\n                        break;\n                    case 9:  // hot magma liquid swirl\n                        u = 0.5 * (a) / Math.PI;\n                        v = Math.sin(2 * r);\n                        bright = 0;\n                        break;\n                    case 10:  // clockwise flush down the toilet\n                        v = Math.pow(r, 0.1);\n                        u = (1 * a / Math.PI) + r;\n                        bright = 0;\n                        break;\n                    case 11:  // 3D ball\n                        v = x * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        u = y * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        bright = 7 * -18.7 * (x + y + r * r - (x + y - 1) * Math.sqrt(4 - 5 * r * r) / 3) / (r * r + 1);\n                        break;\n                    default:  // show texture with no deformation or lighting\n                        u = x;\n                        v = y;\n                        bright = 0;\n                        break;\n                }\n                this.mLUT[k++] = (textureWidth * u) & textureWidth - 1;\n                this.mLUT[k++] = (textureHeight * v) & textureHeight - 1;\n                this.mLUT[k++] = Utils.clamp(bright, -255, 255);\n            }\n        }\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // this.drawOldPlaneDeformationStar(framebuffer, time >> 3);\n        // this.drawOldPlaneDeformationFloor(framebuffer, time >> 3);\n        this.drawPlaneDeformation(framebuffer, time >> 3, time >> 3);\n    }\n\n    /**\n     * For every frame, go through every pixel and use the reference table (mLUT)\n     * to get which pixel of the texture it should draw at the current pixel.\n     *\n     * TODO:\n     * - Rotate effect via rotozoomer class\n     *   use drawOldPlaneDeformationStar to add another lookup layer [mLUT * 4]\n     *   use drawOldPlaneDeformationFloor to update createLUT(8) floor algorithm\n     *\n     */\n    drawPlaneDeformation(framebuffer: Framebuffer, elapsedTimeY: number, elapsedTimeX: number) {\n\n        for (let pixelCount = 0; pixelCount < framebuffer.framebuffer.length; pixelCount++) {\n            const o = (pixelCount << 1) + pixelCount; // equivalent to 3 * pixelCount\n            const u = this.mLUT[o + 0] + elapsedTimeX; // to look like its animating, add timeDisplacement\n            const v = this.mLUT[o + 1] + elapsedTimeY;\n            const adjustBrightness = this.mLUT[o + 2]; // fade out\n\n            // get the R,G,B values from texture\n            let currentPixel = this.texture.texture[this.texture.width * (v & this.texture.height - 1) + (u & this.texture.width - 1)];\n\n            // only apply brightness if it was calculated\n            if (adjustBrightness !== 0) {\n\n                // disassemble pixel using bit mask to remove color components for greater speed\n                let r = currentPixel & 0xFF;        // get red\n                let g = currentPixel >> 8 & 0xFF;   // get green\n                let b = currentPixel >> 16 & 0xFF;  // get blue\n\n                // make darker or brighter\n                r += adjustBrightness;\n                g += adjustBrightness;\n                b += adjustBrightness;\n\n                // constrain RGB to make sure they are within 0-255 color range\n                r = Utils.clamp(r, 0, 255);\n                g = Utils.clamp(g, 0, 255);\n                b = Utils.clamp(b, 0, 255);\n\n                // reassemble colors back into pixel\n                currentPixel = new Color(r, g, b, 255).toPackedFormat();\n            }\n\n            // put texture pixel on buffer screen\n            framebuffer.framebuffer[pixelCount] = currentPixel;\n        }\n    }\n\n    /**\n     *\n     * Previous Plane deformation without lookup tables for reference\n     *\n     * http://sol.gfxile.net/gp/ch17.html\n     * TODO:\n     * - better textures\n     * - precalc lookup tables\n     * - fadeout\n     * - substraction to create black holes\n     */\n    drawOldPlaneDeformationFloor(framebuffer: Framebuffer, elapsedTime: number) {\n        /*\n        mLUT(8)\n            u = x / Math.abs(y);\n            v = 1 / Math.abs(y);\n            bright = 10 * -v;\n        */\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            const ydist = (y - framebuffer.height / 2);\n            const v = (((1 / Math.abs(ydist / 100 * 0.02) + elapsedTime * 0.069) % 256) + 256) % 256;\n            const alpha = 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2));\n                const u = (((((xdist / framebuffer.width) / Math.abs(ydist / 100 * 0.02))) % 256) + 256) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawOldPlaneDeformationStar(framebuffer: Framebuffer, elapsedTime: number) {\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2)) / (framebuffer.width / 2);\n                const ydist = (y - framebuffer.height / 2) / (framebuffer.height / 2);\n                const alpha = 1;// 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n                const a = Math.atan2(ydist, xdist) + elapsedTime * 0.0004;\n                const v = (a * 3 / Math.PI + elapsedTime * 0.0004) * 128 % 256;\n                const d = Math.sqrt(xdist * xdist + ydist * ydist);\n                const u = (1 / (d + 0.5 + 0.5 * Math.sin(5 * a)) * 32 + elapsedTime * 0.03) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f } from '../../math';\nimport { Color } from '../../core/Color';\n\nexport class PlasmaScene extends AbstractScene {\n\n    private GRADIENTLEN = 1500;\n\n    // swing/wave function parameters\n    private SWINGLEN = this.GRADIENTLEN * 3;\n    private SWINGMAX = this.GRADIENTLEN / 2 - 1;\n\n    // gradient & swing curve arrays\n    private colorGrad: Array<number>;\n    private swingCurve: Array<number>;\n\n    public init(): Promise<any> {\n        this.makeGradient(this.GRADIENTLEN);\n        this.makeSwingCurve(this.SWINGLEN, this.SWINGMAX);\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawPlasma(framebuffer, time);\n        // this.drawOldSchoolPlasma(framebuffer, Date.now());\n    }\n\n    // fill the given array with a nice swingin' curve\n    // three cos waves are layered together for that\n    // the wave \"wraps\" smoothly around\n    makeSwingCurve(arrlen: number, maxval: number) {\n        const factor1 = 2;\n        const factor2 = 3;\n        const factor3 = 6;\n\n        this.swingCurve = new Array<number>(this.SWINGLEN);\n\n        const halfmax = maxval / factor1;\n\n        for (let i = 0; i < arrlen; i++) {\n            const ni = i * (Math.PI * 2) / arrlen; // ni goes [0..TWO_PI] -> one complete cos wave\n            this.swingCurve[i] = Math.round(\n                Math.cos(ni * factor1) *\n                Math.cos(ni * factor2) *\n                Math.cos(ni * factor3) *\n                halfmax + halfmax);\n        }\n    }\n\n    // create a smooth, colorful gradient by cosinus curves in the RGB channels\n    makeGradient(arrlen: number) {\n        // random between 1 and 5\n        const rf = 2;\n        const gf = 4;\n        const bf = 4;\n\n        // random between 0 and gradient length\n        const rd = 818; // 0;\n        const gd = 1095; // arrlen / gf;\n        const bd = 1351; // arrlen / bf / 2;\n\n        this.colorGrad = new Array<number>(this.GRADIENTLEN);\n\n        // fill gradient array\n        for (let i = 0; i < arrlen; i++) {\n            const r = this.cos256(arrlen / rf, i + rd);\n            const g = this.cos256(arrlen / gf, i + gd);\n            const b = this.cos256(arrlen / bf, i + bd);\n            this.colorGrad[i] = new Color(r, g, b, 255).toPackedFormat();\n        }\n    }\n\n    // helper: get cosinus sample normalized to 0..255\n    private cos256(amplitude: number, x: number) {\n        return Math.trunc(Math.cos(x * (Math.PI * 2) / amplitude) * 127 + 127);\n    }\n\n    // helper: get a swing curve sample\n    private swing(i: number) {\n        return this.swingCurve[i % this.SWINGLEN];\n    }\n\n    // helper: get a gradient sample\n    private gradient(i: number) {\n        return this.colorGrad[i % this.GRADIENTLEN];\n    }\n\n    drawPlasma(framebuffer: Framebuffer, time: number) {\n        let i = 0;\n        const t = Math.trunc(time >> 3);\n        const swingT = this.swing(t);\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            const swingY = this.swing(y);\n            const swingYT = this.swing(y + t);\n            for (let x = 0; x < framebuffer.width; x++) {\n                // this is where the magic happens: map x, y, t around\n                // the swing curves and lookup a color from the gradient\n                // the \"formula\" was found by a lot of experimentation\n                framebuffer.framebuffer[i++] = this.gradient(this.swing(\n                    this.swing(x + swingT) + swingYT) +\n                    this.swing(this.swing(x + t) + swingY));\n            }\n        }\n    }\n\n    public drawOldSchoolPlasma(framebuffer: Framebuffer, elapsedTime: number) {\n        const time = elapsedTime * 0.0007 * 1.0;\n        const lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        const radialWaveCenter = new Vector3f(470.0 / 2.0, 230.0 / 2.0, 0).add(new Vector3f(470.0 / 2.0 *\n            Math.sin(-time), 230.0 / 2.0 * Math.cos(-time), 0));\n\n        const difference = new Vector3f(0, 0, 0);\n        let index = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const directionalWave = Math.sin(((x * lineDirection.x + y * lineDirection.y) * 0.02 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                const radialWave = (Math.cos(difference.length() * 0.03) + 1.0) * 0.5;\n                const waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                const red = (Math.cos(Math.PI * waveSum / 0.5 + time) + 1.0) * 0.5 * 255;\n                const green = (Math.sin(Math.PI * waveSum / 0.5 + time) + 1.0) * 0.5 * 255;\n                const blue = (Math.sin(time) + 1.0) * 0.5 * 255;\n\n                framebuffer.framebuffer[index++] = 255 << 24 | blue << 16 | green << 8 | red;\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Dodecahedron } from '../../geometrical-objects/Dodecahedron';\nimport { Pyramid } from '../../geometrical-objects/Pyramid';\nimport { Sphere } from '../../geometrical-objects/Sphere';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class RazorScene extends AbstractScene {\n\n    private texture10: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private dirt: Texture;\n    private noise: Texture;\n\n    private cube: Cube;\n    private dodecahedron: Dodecahedron;\n    private pyramid: Pyramid;\n    private icosahedron: Sphere; // Icosahedron;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.cube = new Cube();\n        this.dodecahedron = new Dodecahedron();\n        this.pyramid = new Pyramid();\n        this.icosahedron = new Sphere(6, 10);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/spark.png'), true).then(texture => this.texture10 = texture),\n            TextureUtils.load(require('./assets/ring.png'), true).then(texture => this.texture11 = texture),\n            TextureUtils.load(require('./assets/bokeh.png'), true).then(texture => this.texture13 = texture),\n            TextureUtils.load(require('./assets/dirt.png'), true).then(texture => this.dirt = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.reproduceRazorScene(framebuffer, time * 0.0025, [\n            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        // framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.drawScaledTextureClipBi(0, 0, framebuffer.width, framebuffer.height, texture3, .75);\n\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise, 0.04);\n    }\n\n    public reproduceRazorScene(framebuffer: Framebuffer, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f;\n\n        const camera = Matrix4f.constructTranslationMatrix(0, 0, -6.4 - 5 * (Math.sin(elapsedTime * 0.06) * 0.5 + 0.5)).multiplyMatrix(\n            Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.08) * 0.5 + 0.5) * 0.5).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.1)));\n\n        let scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            modelViewMartrix);\n\n\n        let model = this.dodecahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        const yDisplacement = -1.5;\n        const distance = 2.8;\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.icosahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        // TODO:  store Mesh inside cube instance and use cube.draw(framebuffer);\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.pyramid.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        /**\n         * SHADOWS\n         */\n        this.renderingPipeline.enableLighting(false);\n        this.renderingPipeline.setColor(Color.DARK_GRAY);\n\n        scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.dodecahedron.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.pyramid.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.icosahedron.getMesh(), modelViewMartrix);\n\n        this.renderingPipeline.enableLighting(true);\n\n        const lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(12.0, 4.0, 0)));\n\n        framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 100, texture, dirt);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class RotoZoomerScene extends AbstractScene {\n\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            /*TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),*/\n            TextureUtils.load(require('../../assets/xray.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawRotoZoomer(framebuffer, time);\n    }\n\n    drawRotoZoomer(framebuffer: Framebuffer, time: number) {\n        const scale = Math.sin(time * 0.0005) + 1.1;\n\n        const yStepX = Math.sin(time * 0.0003) * scale;\n        const yStepY = Math.cos(time * 0.0003) * scale;\n\n        const xStepX = yStepY;\n        const xStepY = -yStepX;\n\n        let texYCoord = Math.sin(time * 0.0002) * 512;\n        let texXCoord = Math.cos(time * 0.0002) * 512;\n\n        let texYCoordInner = 0;\n        let texXCoordInner = 0;\n        let framebufferPos = 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            texXCoordInner = texXCoord;\n            texYCoordInner = texYCoord;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.framebuffer[framebufferPos++] = this.logoTexture.texture[(texXCoordInner & 127) + (texYCoordInner & 127) * 128];\n\n                texXCoordInner += xStepX;\n                texYCoordInner += xStepY;\n            }\n\n            texXCoord += yStepX;\n            texYCoord += yStepY;\n        }\n    }\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","import { Color } from '../../core/Color';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Vector2f } from '../../math/Vector2f';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { FontRenderer } from './FontRenderer';\n\nexport class SineScrollerScene extends AbstractScene {\n\n    private texture2: Texture;\n    private startTime: number;\n    private fontRenderer: FontRenderer;\n    private fontRenderer2: FontRenderer;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.startTime = Date.now();\n\n        const fonts: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ@+# ' +\n            '0123456789' +\n            '!\\'()?-/.,';\n        this.fontRenderer = new FontRenderer(\n            framebuffer,\n            32, 34, fonts,\n            require('./assets/fraxionFont.png')\n        );\n\n        const fonts2: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ 012' +\n            '3456789*:?' +\n            '!-(),\\'.+~<' +\n            '>>#// ';\n        this.fontRenderer2 = new FontRenderer(\n            framebuffer,\n            16, 18, fonts2,\n            require('./assets/anarchyFont.png')\n        );\n        /*\n                const fonts: string =\n                'ABCDEFGHIJ' +\n                'KLMNOPQRST' +\n                'UVWXYZ!?:;' +\n                '0123456789' +\n                '\"(),-.\\'@# ';\n                this.fontRenderer = new FontRenderer(\n                    framebuffer,\n                    32, 25, fonts,\n                    require('./assets/dragonsFont.png')\n                );*/\n        return Promise.all([\n            TextureUtils.load(require('../../assets/hoodlumLogo.png'), true).then(\n                (texture: Texture) => this.texture2 = texture\n            ),\n            this.fontRenderer.init(),\n            this.fontRenderer2.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawStarField(framebuffer, time);\n\n        framebuffer.drawTexture(framebuffer.width/2 - this.texture2.width/2, 0, this.texture2, 1.0);\n\n        this.fontRenderer.drawText(framebuffer, 0, 102, ' # TEAM GENESIS # IS BACK IN 2018 WITH A NEW PC FIRST! \\'STAR WARS - EMPIRE AT WAR\\' DO YOU LIKE THIS?    ', time);\n        this.fontRenderer2.drawText(framebuffer, 0, framebuffer.height - 20,\n            '   * WE REALLY LOVE SCROLLERS * HOW ABOUT YOU? THIS PRODUCTION IS FROM HOODLUM' +\n            '~< LETS GO ON WITH THE GENERAL BLAH BLAH      ', time * 1.6, false);\n\n        // animated rainbow horizontal lines\n        const horizontalUnits = framebuffer.width / 16;\n        for (let i: number = 0; i < horizontalUnits; i++) {\n            const myTime = time * 0.003;\n            const waveSum = i / horizontalUnits * 0.6;\n            const red = (Math.cos(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const green = (Math.sin(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const blue = (Math.sin(myTime) + 1.0) * 0.5 * 255;\n\n            const color: number = 255 << 24 | blue << 16 | green << 8 | red;\n            framebuffer.drawRect(i * 16, 68, 16, color);\n            framebuffer.drawRect(((horizontalUnits-1) - i) * 16, 168, 16, color);\n        }\n    }\n\n    public drawStarField(frambuffer: Framebuffer, elapsedTime: number): void {\n        const darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        const lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        const backgroundColor = 255 << 24 | 0 << 16 | 0 << 8 | 0;\n\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        const stars = new Array<Vector2f>();\n        const stars2 = new Array<Vector2f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        frambuffer.clearColorBuffer(backgroundColor);\n        frambuffer.drawRect2(0, 68, frambuffer.width, 100, Color.DARK_BLUE.toPackedFormat());\n\n        for (let i = 0; i < 100; i++) {\n            frambuffer.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % frambuffer.width, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            frambuffer.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % frambuffer.width, stars2[i].y, lightStarColor);\n        }\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector4f } from '../../math/Vector4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Fog } from '../../shading/fog/Fog';\nimport { LinearFog } from '../../shading/fog/LinearFog';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusKnotTunnelScene extends AbstractScene {\n\n    private noise: Texture;\n    private particleTexture: Texture;\n    private cocoon: Texture;\n    private torusKnot: TorusKnot = new TorusKnot(true);\n    private fog: Fog = new LinearFog(-50, -240, new Vector4f(0.67, 0.4, 0.5, 1.0));\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.renderingPipeline.setFog(this.fog);\n\n        return Promise.all([\n            TextureUtils.generateProceduralNoise().then((texture: Texture) => this.noise = texture),\n            TextureUtils.load(require('../../assets/cocoon.png'), false).then(\n                (texture: Texture) => this.cocoon = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture2().then(\n                (texture: Texture) => this.particleTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.torusTunnel(framebuffer, time * 0.019);\n        framebuffer.drawScaledTextureClipAdd(\n            framebuffer.width / 2 - this.cocoon.width / 2,\n            framebuffer.height / 2 - this.cocoon.height / 2,\n            this.cocoon.width, this.cocoon.height, this.cocoon, 0.67);\n\n        // framebuffer.noise(time, this.noise);\n        this.glitchScreen(framebuffer, time * 5, this.noise);\n    }\n\n    public glitchScreen(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.00002) * 0.9 + 0.1);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        const texture2 = new Texture();\n        texture2.height = framebuffer.height;\n        texture2.width = framebuffer.width;\n        texture2.texture = framebuffer.framebuffer;\n\n\n        const blockWidth = 20;\n        const horizontalUnits = Math.floor(framebuffer.width / blockWidth);\n        const verticalUnits = Math.floor(framebuffer.height / blockWidth);\n\n        for (let x = 0; x < horizontalUnits; x++) {\n            for (let y = 0; y < verticalUnits; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                framebuffer.drawTextureRect(blockWidth * (horizontalUnits - x), blockWidth * ((horizontalUnits * rng.getFloat()) | 0), blockWidth * x, blockWidth * y, blockWidth, blockWidth, texture2.texture, texture2.width, 0.03 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                for (let y = 0; y < verticalUnits; y++) {\n                    framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, blockWidth * (Math.round(elapsedTime / 100 + x + y) % 12), 0, blockWidth, blockWidth, texture.texture, texture.width, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.tmpGlitch, framebuffer.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n        const rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            const scale = rng2.getFloat() * glitchFactor;\n            const off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * framebuffer.width;\n                let glIndex = yStart * framebuffer.width + framebuffer.width - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n\n                glIndex = yStart * framebuffer.width;\n                const count = framebuffer.width - offset;\n\n                for (let i = 0; i < count; i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n    public torusTunnel(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const scale = 1.0;\n        const lookAhead: number = 0.4;\n\n        const frame = this.torusFunction3(elapsedTime * 0.02);\n        const frame2 = this.torusFunction3(elapsedTime * 0.02 + lookAhead);\n\n        const tangent = frame2.sub(frame).normalize();\n        let up = frame.add(frame2).normalize();\n        const right = tangent.cross(up).normalize();\n        up = right.cross(tangent).normalize();\n\n        const translation = Matrix4f.constructIdentityMatrix();\n        // translation vector\n        translation.m14 = -frame.x;\n        translation.m24 = -frame.y;\n        translation.m34 = -frame.z;\n\n        const rotation = Matrix4f.constructIdentityMatrix();\n        // x vector\n        rotation.m11 = right.x;\n        rotation.m21 = right.y;\n        rotation.m31 = right.z;\n\n        // y vector\n        rotation.m12 = up.x;\n        rotation.m22 = up.y;\n        rotation.m32 = up.z;\n\n        // z vector\n        rotation.m13 = -tangent.x;\n        rotation.m23 = -tangent.y;\n        rotation.m33 = -tangent.z;\n\n        const finalMatrix = rotation.transpose().multiplyMatrix(translation);\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -10).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04)));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(elapsedTime * 0.01).multiplyMatrix(finalMatrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torusKnot.getMesh(), modelViewMartrix);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2;\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Torus } from '../../geometrical-objects/Torus';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusScene extends AbstractScene {\n\n    private razorLogo: Texture;\n    private torus: Torus = new Torus();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/razor1911.png'), true).then(\n                (texture: Texture) => this.razorLogo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.drawTitanEffect(framebuffer, time);\n        this.shadingTorus(framebuffer, time * 0.02);\n        framebuffer.drawTexture(framebuffer.width / 2 - this.razorLogo.width / 2, 0, this.razorLogo, 1.0);\n    }\n\n    public shadingTorus(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.05);\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -24).multiplyMatrix(modelViewMartrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torus.getMesh(), modelViewMartrix);\n    }\n\n\n    private drawTitanEffect(framebuffer: Framebuffer, time: number) {\n        framebuffer.clear();\n        const horizontalNum = framebuffer.width / 20;\n        const verticalNum = framebuffer.height / 20;\n\n        for (let x = 0; x < horizontalNum; x++) {\n            for (let y = 0; y < verticalNum; y++) {\n\n                const scale = ((Math.sin(time * 0.004 + x * 0.7 + y * 0.4) + 1) / 2);\n                const size = Math.round(scale * 8 + 1) * 2;\n                const offset = (20 / 2 - size / 2) | 0;\n                const color = 255 << 24 | (85 * scale) << 16 | (55 * scale) << 8 | (55 * scale);\n                framebuffer.drawBox2(x * 20 + offset, y * 20 + offset, size, size, color);\n            }\n        }\n\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract twister into effect class\n */\nexport class TwisterScene extends AbstractScene {\n\n    private backgroundTexture: Texture;\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.backgroundTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.drawScaledTextureClipBi(\n            0,\n            0,\n            framebuffer.width, framebuffer.height, this.backgroundTexture, 1.0);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.backgroundTexture.texture);\n        this.draw(framebuffer, this.logoTexture, time);\n    }\n\n    private draw(framebuffer: Framebuffer, texture: Texture, time: number): void {\n        const a: number = time * 0.001;\n        for (let i: number = 10; i < framebuffer.height - 10; i++) {\n            const xoff = (Math.sin(a + i * 0.01) * 50) | 0;\n            const rot = Math.sin(a * 0.4 + i * 0.0021) * Math.PI * 2;\n            let scale = 42;\n            const x1 = (Math.sin(rot) * scale) | 0;\n            const x2 = (Math.sin(Math.PI * 2 / 4 + rot) * scale) | 0;\n            const x3 = (Math.sin(Math.PI * 2 / 4 * 2 + rot) * scale) | 0;\n            const x4 = (Math.sin(Math.PI * 2 / 4 * 3 + rot) * scale) | 0;\n\n            if (x2 > x1) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 1.5 + rot));\n                const dist = x2 - x1;\n                const xPos = x1 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x3 > x2) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 2.5 + rot));\n                const dist = x3 - x2;\n                const xPos = x2 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x4 > x3) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 3.5 + rot));\n                const dist = x4 - x3;\n                const xPos = x3 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x1 > x4) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 4.5 + rot));\n                const dist = x1 - x4;\n                const xPos = x4 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n        }\n    }\n\n    private drawSpan(\n        framebuffer: Framebuffer,\n        dist: number,\n        xpos: number,\n        ypos: number,\n        scale: number,\n        texture: Texture,\n        time: number): void {\n        let framebufferIndex = xpos + ypos * framebuffer.width;\n        let textureIndex = (((ypos - time * 0.029) | 0) & 0xff) * texture.width;\n        const textureForwardDifference = texture.width / dist;\n        const hightlight = Math.pow(scale, 11) * 115;\n\n        for (let j = 0; j < dist; j++) {\n            const color = texture.texture[textureIndex | 0];\n\n            const r = Math.min(((color >> 0 & 0xff) * scale) + hightlight, 255);\n            const g = Math.min(((color >> 8 & 0xff) * scale) + hightlight, 255);\n            const b = Math.min(((color >> 16 & 0xff) * scale) + hightlight, 255);\n\n            framebuffer.framebuffer[framebufferIndex] = r | g << 8 | b << 16 | 255 << 24;\n\n            framebufferIndex++;\n            textureIndex += textureForwardDifference;\n        }\n    }\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { TextureUtils, Texture } from '../../texture/index';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class VoxelBallsScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.YELLOW.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private blurred: Texture;\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        this.renderTransparent(framebuffer, time);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTextureFullscreen(texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n\n        framebuffer.clearDepthBuffer();\n\n        const xSteps = 5;\n        const xsteps = 5;\n        const zsteps = 5;\n        for (let x = 0; x < xSteps; x++) {\n            for (let y = 0; y < xsteps; y++) {\n                for (let z = 0; z < zsteps; z++) {\n                    let scale = (Math.sin(x * 0.3 + time * 0.0009) + 1.0) * 0.5 *\n                        (Math.sin(y * 0.4 + time * 0.002) + 1.0) * 0.5 *\n                        (Math.sin(z * 0.3 + time * 0.001) + 1.0) * 0.5;\n                    if (scale < 0.3) {\n                        // continue;\n                    }\n                    scale = 0.8;\n                    const mat =\n                        Matrix4f.constructTranslationMatrix(0, 0, -11).multiplyMatrix(\n                            Matrix4f.constructYRotationMatrix(time * 0.0003).multiplyMatrix(\n                                Matrix4f.constructXRotationMatrix(time * 0.0005).multiplyMatrix(\n                                    Matrix4f.constructZRotationMatrix(time * 0.0004).multiplyMatrix(\n                                        Matrix4f.constructTranslationMatrix(x - xSteps / 2 + 0.5, y - xsteps / 2 + 0.5, z - zsteps / 2 + 0.5)\n                                            .multiplyMatrix(\n                                                Matrix4f.constructScaleMatrix(scale, scale, scale)))))); // .multiplyMatrix(\n                    //       Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    //           Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n\n                    this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), mat);\n                }\n            }\n        }\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class Dodecahedron extends AbstractGeometricObject {\n\n    constructor() {\n\n        super();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        const phi = (1 + Math.sqrt(5)) * 0.5;\n        const a = 1;\n        const b = 1 / phi;\n        const c = 2 - phi;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(c, 0, a), new Vector4f(-c, 0, a), new Vector4f(-b, b, b), new Vector4f(0, a, c),\n            new Vector4f(b, b, b), new Vector4f(b, -b, b), new Vector4f(0, -a, c), new Vector4f(-b, -b, b),\n            new Vector4f(c, 0, -a), new Vector4f(-c, 0, -a), new Vector4f(-b, -b, -b), new Vector4f(0, -a, -c),\n            new Vector4f(b, -b, -b), new Vector4f(b, b, -b), new Vector4f(0, a, -c), new Vector4f(-b, b, -b),\n            new Vector4f(1, c, 0), new Vector4f(-a, c, 0), new Vector4f(-1, -c, 0), new Vector4f(a, -c, 0)\n        ];\n\n        const index: Array<number> = [\n            0, 4, 1, 1, 3, 2, 1, 4, 3, 1, 7, 0,\n            0, 6, 5, 0, 7, 6, 8, 12, 9, 9, 11, 10,\n            9, 12, 11, 9, 15, 8, 8, 14, 13, 8, 15, 14,\n            14, 3, 13, 13, 4, 16, 13, 3, 4, 3, 14, 2,\n            2, 15, 17, 2, 14, 15, 11, 6, 10, 10, 7, 18,\n            10, 6, 7, 6, 11, 5, 5, 12, 19, 5, 11, 12,\n            16, 4, 19, 19, 0, 5, 19, 4, 0, 19, 12, 16,\n            16, 8, 13, 16, 12, 8, 17, 15, 18, 18, 9, 10,\n            18, 15, 9, 18, 7, 17, 17, 1, 2, 17, 7, 1\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Pyramid extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(0, a, 0),\n            new Vector4f(a, -a, -a),\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, a),\n            new Vector4f(-a, -a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 1, 2,\n            0, 3, 1,\n            0, 4, 3,\n            0, 2, 4\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Sphere extends AbstractGeometricObject {\n\n    public constructor(xSteps: number = 16, ySteps: number = 16) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = xSteps;\n        const STEPS2 = ySteps;\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    private sphereFunction(theta: number, phi: number): Vector4f {\n        return new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor(inverse: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            const tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize();\n            const right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        this.buildMesh(points, index, inverse);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { BlenderScene } from '../../blender/BlenderScene';\n\n/**\n * Load Wavefront OBJ file that was converted via obj2json utility.\n * to save the convertToMeshArray step\n * renamed to JSX file to load file at runtime\n */\nexport class BlenderLoader {\n\n    public static load(filename: string): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: string): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.getBlenderScene(meshes, false);\n        });\n    }\n\n    private constructor() {\n\n    }\n}\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Mesh } from '../../blender/mesh';\nimport { convertToMeshArray } from '../../blender/parseUtils';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class WavefrontLoader {\n\n    public static load(filename: any): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: any): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.getBlenderScene(meshes);\n        });\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) { \n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n       \n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                    \n                \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n                   \n                   \n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * framebuffer.bob.width;\n                    v = vStart * z * framebuffer.bob.height;\n                \n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n                /*\n                                const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n                                    v.projection = this.project(v.position);\n                                    return v;\n                                });*/\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n                  \n\n                    this.clipConvexPolygon2(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle2(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // TODO: remove temp object here\n        const projected: Array<Vertex> = output.map<Vertex>((v: Vertex) => {\n            v.projection = this.project(v.position);\n            return v;\n        });\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(projected[0].projection, projected[1].projection, projected[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon2(framebuffer, projected);\n    }\n\n\n    public clipConvexPolygon2(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Fog {\n\n    public abstract computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Fog } from './Fog';\n\nexport class LinearFog extends Fog {\n\n    private zStart: number;\n    private zEnd: number;\n    private fogColor: Vector4f;\n\n    public constructor(zStart: number, zEnd: number, fogColor: Vector4f) {\n        super();\n        this.zStart = zStart;\n        this.zEnd = zEnd;\n        this.fogColor = fogColor;\n    }\n\n    public computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f {\n        if (vertex.z >= this.zStart) {\n            return color;\n        } else if (vertex.z <= this.zEnd) {\n            return this.fogColor;\n        } else {\n            const f: number = (this.zEnd - vertex.z) / (this.zEnd - this.zStart);\n            return new Vector4f(\n                color.x * f + this.fogColor.x * (1 - f),\n                color.y * f + this.fogColor.y * (1 - f),\n                color.z * f + this.fogColor.z * (1 - f)\n            );\n        }\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","import 'jsxm/xm';\nimport 'jsxm/xmeffects';\nimport './JSRocket';\n\ntype musicProperties = {\n    // Beats per minute of your demo tune\n    BPM: number;\n    // The resolution between two beats, four is usually fine,- eight adds a bit more finer control\n    ROWS_PER_BEAT: number;\n    // we calculate this now, so we can translate between rows and seconds later on\n    ROW_RATE: number;\n    timeSeconds: number;\n    timeMilliseconds: number;\n    sceneData: sceneData;\n}\n\n// scene variables | things you set through jsRocket\ntype sceneData = {\n    effect: any;\n    transitionType: any;\n    transitionValue: any;\n    snare: any;\n    bass: any;\n}\n\nexport class SoundManager {\n\n    public audioContext: AudioContext;\n    public songLengthSeconds: number;\n    public syncDevice;\n    public audio = new Audio();\n    public isPlaying = false;\n    public demoMode = true;    // use true for release mode\n    public row = 0;    // the current row we're on\n\n    //  container for audio values to be used by effects (time, bass, effect, transitions)\n    public musicProperties: musicProperties;\n    public sceneData: sceneData;\n\n    public constructor() {\n\n        // Initialize JS Rocket\n        this.syncDevice = new JSRocket.SyncDevice();\n        this.syncDevice.connected = false;\n\n        this.musicProperties = {\n            BPM: 0,\n            ROWS_PER_BEAT: 0,\n            ROW_RATE: 0,\n            timeSeconds: 0,\n            timeMilliseconds: 0,\n            sceneData: {\n                effect: 0,\n                transitionType: 0,\n                transitionValue: 0,\n                snare: 0,\n                bass: 0\n            }\n        }\n\n        this.sceneData = {\n            effect: null,\n            transitionType: null,\n            transitionValue: null,\n            snare: null,\n            bass: null,\n        }\n    }\n    /**\n     * Load and play module music tracker files\n     *\n     * @param {string} filename      module file to load\n     * @returns {Promise<Response>}  fetch response\n     */\n    public playExtendedModule(filename: string): Promise<void> {\n        return fetch(filename)\n            .then((response: Response) => response.arrayBuffer())\n            .then((arrayBuffer: ArrayBuffer) => {\n                if (arrayBuffer) {\n                    XMPlayer.init();\n                    XMPlayer.load(arrayBuffer);\n                    XMPlayer.play();\n                } else {\n                    console.log('unable to load', filename);\n                }\n            });\n    }\n\n    // Initialize XM Player\n    public initXM() {\n        XMPlayer.init();\n        this.audioContext = XMPlayer.audioctx;\n    }\n\n    public playOgg(filename: string): Promise<void> {\n        return fetch(filename)\n            .then((response: Response) => response.arrayBuffer())\n            .then((arrayBuffer: ArrayBuffer) => {\n                if (arrayBuffer) {\n                    this.audioContext.decodeAudioData(arrayBuffer,\n                        (buffer: AudioBuffer) => {\n                            const sourceBuffer = this.audioContext.createBufferSource();\n                            console.info('ogg create buffer');\n                            sourceBuffer.buffer = buffer;\n                            sourceBuffer.connect(this.audioContext.destination);\n                            console.info('ogg connect');\n                            sourceBuffer.loop = true;\n                            sourceBuffer.start(this.audioContext.currentTime);\n                            console.info('ogg ready');\n                        })\n                } else {\n                    console.log('unable to load', filename);\n                }\n            });\n    }\n\n    public loadOgg(filename: string): Promise<void>  {\n        const audio = this.audio;\n        return new Promise((resolve) => {\n            audio.src = filename;\n            audio.load();\n            audio.preload = 'auto';\n            audio.loop = true;\n            audio.autoplay = false;\n            audio.oncanplay = () => resolve();\n        });\n    }\n\n    prepareSync(filename: string, demoMode: boolean): Promise<void> {\n        this.demoMode = demoMode;\n        return new Promise((resolve) => {\n            if (this.demoMode) {\n                this.syncDevice.setConfig({\n                    'rocketXML': filename\n                });\n                this.syncDevice.init('demo');\n\n            } else {\n                this.syncDevice.init();\n            }\n\n            // XML file from JS Rocket library was loaded and parsed, make sure your ogg is ready\n            this.syncDevice.on('ready', () => this.onSyncReady());\n\n            // [JS Rocket - Arrow keys] whenever you change the row, a value or interpolation mode this will get called\n            this.syncDevice.on('update', (newRow: number) => this.onSyncUpdate(newRow));\n\n            // [JS Rocket - Spacebar] in Rocket calls one of those\n            this.syncDevice.on('play', () => this.onPlay());\n            this.syncDevice.on('pause', () => this.onPause());\n            resolve()\n        });\n    }\n\n    onSyncReady() {\n        this.musicProperties.BPM = 120;\n        this.musicProperties.ROWS_PER_BEAT = 8;\n        this.musicProperties.ROW_RATE = this.musicProperties.BPM / 60 * this.musicProperties.ROWS_PER_BEAT;\n        this.syncDevice.connected = true;\n        this.sceneData.effect = this.syncDevice.getTrack('effect');\n        this.sceneData.snare = this.syncDevice.getTrack('snare');\n        this.sceneData.bass = this.syncDevice.getTrack('bass');\n        this.sceneData.transitionType = this.syncDevice.getTrack('transitionType');\n        this.sceneData.transitionValue = this.syncDevice.getTrack('transitionValue');\n\n        this.audio.onpause = () => {\n            this.isPlaying = false;\n        };\n\n        this.audio.onplay = () => {\n            this.isPlaying = true;\n        }\n\n    }\n\n    // row is only given if you navigate, or change a value on the row in Rocket\n    // on interpolation change (hit [i]) no row value is sent, as the current there is the upper row of your block\n    onSyncUpdate(newRow: number) {\n        if (!isNaN(newRow)) {\n            this.row = newRow;\n        }\n        this.audio.currentTime = newRow / this.musicProperties.ROW_RATE;\n    }\n\n    updateMusic() {\n        // show message if rocket app is not running in background\n        if (!this.syncDevice.connected && !this.demoMode) {\n            return;\n        }\n\n        // update music properties\n        this.musicProperties.timeSeconds = this.audio.currentTime;\n        this.musicProperties.timeMilliseconds = this.musicProperties.timeSeconds * 1000;\n        this.row = this.musicProperties.timeSeconds * this.musicProperties.ROW_RATE;\n\n        this.musicProperties.sceneData = {\n            effect: this.sceneData.effect.getValue(this.row),\n            transitionType: this.sceneData.transitionType.getValue(this.row),\n            transitionValue: this.sceneData.transitionValue.getValue(this.row),\n            snare: this.sceneData.snare.getValue(this.row),\n            bass: this.sceneData.bass.getValue(this.row),\n        }\n\n        // update JS rocket\n        if (this.audio.paused === false) {\n            // otherwise we may jump into a point in the audio where there's\n            // no timeframe, resulting in Rocket setting row 2 and we report\n            // row 1 back - thus Rocket spasming out\n\n            // this informs Rocket where we are\n            this.syncDevice.update(this.row);\n        }\n    }\n\n    onPlay() {\n        console.log('[onPlay]');\n        this.audio.currentTime = this.row / this.musicProperties.ROW_RATE;\n        if (!this.isPlaying) {\n            const playPromise = this.audio.play();\n            if (playPromise !== undefined) {\n                playPromise.then(() => {\n                    this.isPlaying = true;\n                })\n                    .catch(error => {\n                        console.log(error);\n                    });\n            }\n        }\n    }\n\n    onPause() {\n        console.info('[onPause]');\n        this.row = this.audio.currentTime * this.musicProperties.ROW_RATE;\n\n        if (!this.audio.paused && this.isPlaying) {\n            this.audio.pause();\n        }\n    }\n\n    /**\n     * find the prev/next effect and jump to it\n     *\n     * @param   {number} time       where we are in the audio timeline\n     * @param   {number} direction  direction to skip -1 goes backwards.  1 goes forward\n     */\n    public jump(time: number, direction: number, sceneLength: number) {\n        this.row = time * this.musicProperties.ROW_RATE;\n        const effectJump = Number(this.sceneData.effect.getValue(this.row).toFixed(1));\n        if (Math.trunc(Number(this.musicProperties.sceneData.effect)) !== Math.trunc(effectJump) && effectJump >= 1) {\n            // if running into transition effect 2.5..then keep searching and only land on whole numbers\n            if (parseInt(effectJump.toString(), 10) !== effectJump) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                this.seek(time);\n            }\n        } else {\n            if (time >= 0 && effectJump < sceneLength - 3) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                // go back to the beginning\n                this.seek(0);\n            }\n        }\n    }\n\n    /**\n     * Jumps to a point in the audio timeline in milliseconds\n     *\n     * @param  {number} time            time in milliseconds\n     */\n    public seek(time: number) {\n        this.audio.currentTime = time;\n        // update rocket editor position to new timeline location\n        if (!this.demoMode) {\n            this.syncDevice.update(this.audio.currentTime * this.musicProperties.ROW_RATE);\n        }\n    }\n\n    /**\n     * Turns music volume on or off\n     *\n     * @param  {HTMLElement} ref         volume icon to toggle\n     * @param  {boolean} isMuted         on or off\n     */\n    public toggleSound(ref: HTMLElement, isMuted: boolean) {\n        if (isMuted) {\n            ref.setAttribute('title', 'enable sound');\n            ref.classList.remove('fa-volume-up');\n            ref.classList.add('fa-volume-off');\n        } else {\n            ref.setAttribute('title', 'mute sound');\n            ref.classList.remove('fa-volume-off');\n            ref.classList.add('fa-volume-up');\n        }\n        this.audio.muted = isMuted;\n    }\n\n    /**\n     * Restore position of timeline & mute preference on reload\n     */\n    public initTimeline() {\n        // jump to last position on timeline for local development reloading\n        const jumpTo = localStorage.getItem('lastTime');\n        if (jumpTo) {\n            this.seek(Number(jumpTo));\n        }\n\n        // remember last sound preferences\n        const isMuted = localStorage.getItem('soundToggle') === 'true';\n        this.toggleSound(document.getElementById('ticker_volume'), isMuted);\n    }\n\n    /*\n    // todo: add effect # markers to timeline\n    fetch(rocketData.default).then(response => response.text())\n        .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\n        .then(data => {\n            const tracks: Element[] = Array.from(data.documentElement.getElementsByTagName(\"track\"));\n            tracks.forEach((element) => {\n                if (element.getAttribute(\"name\") === 'effect') {\n                    const keys: Element[] = Array.from(element.getElementsByTagName(\"key\"));\n                    keys.forEach((elementKey) => {\n                        const p = document.createElement(\"option\");\n                        const value = elementKey.getAttribute('row').valueOf();\n                        const label = elementKey.getAttribute('value').valueOf();\n\n                        // remap rows to a range between 0 and 1000\n                        const newValue = Utils.map(Number(label), 0, 1520, 0, 1000);\n\n                        p.value = value;\n                        p.label = label;\n                        // this.tickmarkRef.appendChild(p);\n                    })\n                }\n            });\n        });\n        */\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","(function (window) {\n\n    if (!window.JSRocket) {\n        window.JSRocket = {};\n    }\n    JSRocket.SyncData = function () {\n\n        \"use strict\";\n\n        var _track = [];\n\n        function getTrack(index) {\n            return _track[index];\n        }\n\n        function getIndexForName(name) {\n            for (var i = 0; i < _track.length; i++) {\n\n                if (_track[i].name === name) {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n\n        function getTrackLength() {\n            return _track.length;\n        }\n\n        function createIndex(varName) {\n            var track = new JSRocket.Track();\n            track.name = varName;\n\n            _track.push(track);\n        }\n\n        return {\n            getTrack: getTrack,\n            getIndexForName: getIndexForName,\n            getTrackLength: getTrackLength,\n            createIndex: createIndex\n        };\n    };\n    JSRocket.Track = function () {\n\n        \"use strict\";\n\n        var STEP = 0,\n            LINEAR = 1,\n            SMOOTH = 2,\n            RAMP = 3;\n\n        var data = [];\n\n        function findKeyIndex(keys, row) {\n            var lo = 0, hi = keys.length;\n            while (lo < hi) {\n                var mi = ((hi + lo) / 2) | 0;\n\n                if (keys[mi] < row) {\n                    lo = mi + 1;\n                } else if (keys[mi] > row) {\n                    hi = mi;\n                } else {\n                    return mi;\n                }\n            }\n            return lo - 1;\n        }\n\n        function getValue(row) {\n            var keys = Object.keys(data);\n\n            if (!keys.length) {\n                return 0.0;\n            }\n\n            var idx = findKeyIndex(keys, Math.floor(row));\n            if (idx < 0) {\n                return data[keys[0]].value;\n            }\n            if (idx > keys.length - 2) {\n                return data[keys[keys.length - 1]].value;\n            }\n\n            // lookup keys and values\n            var k0 = keys[idx], k1 = keys[idx + 1];\n            var a = data[k0].value;\n            var b = data[k1].value;\n\n            // interpolate\n            var t = (row - k0) / (k1 - k0);\n            switch (data[k0].interpolation) {\n                case 0:\n                    return a;\n                case 1:\n                    return a + (b - a) * t;\n                case 2:\n                    return a + (b - a) * t * t * (3 - 2 * t);\n                case 3:\n                    return a + (b - a) * Math.pow(t, 2.0);\n            }\n        }\n\n        function add(row, value, interpolation) {\n            data[row] = {\n                \"value\": value,\n                \"interpolation\": interpolation\n            };\n        }\n\n        function remove(row) {\n            delete data[row];\n        }\n\n        return {\n            getValue: getValue,\n            add: add,\n            remove: remove\n        };\n    };\n    JSRocket.SyncDevicePlayer = function (cfg) {\n\n        \"use strict\";\n\n        var _urlRequest,\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'error': function () {\n                }\n            };\n\n        function load(url) {\n\n            _urlRequest = new XMLHttpRequest();\n\n            if (_urlRequest === null) {\n                _eventHandler.error();\n                return;\n            }\n\n            _urlRequest.open('GET', url, true);\n            _urlRequest.onreadystatechange = urlRequestHandler;\n\n            _urlRequest.send();\n        }\n\n        function urlRequestHandler() {\n\n            if (_urlRequest.readyState === 4) {\n                if (_urlRequest.status < 300) {\n                    readXML(_urlRequest.responseText);\n                } else {\n                    _eventHandler.error();\n                }\n            }\n        }\n\n        function readXML(xmlString) {\n            var key,\n                t = 0, tLen, k = 0, kLen,\n                xml = (new DOMParser()).parseFromString(xmlString, 'text/xml'),\n                tracks = xml.getElementsByTagName('tracks');\n\n            //<tracks>\n            var trackList = tracks[0].getElementsByTagName('track');\n\n            for (t, tLen = trackList.length; t < tLen; t++) {\n\n                var track = getTrack(trackList[t].getAttribute('name')),\n                    keyList = trackList[t].getElementsByTagName('key');\n\n                for (k = 0, kLen = keyList.length; k < kLen; k++) {\n                    key = keyList[k];\n                    track.add(parseInt(key.getAttribute('row'), 10),\n                        parseFloat(key.getAttribute('value')),\n                        parseInt(key.getAttribute('interpolation'), 10));\n\n                }\n            }\n\n            _eventHandler.ready();\n        }\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        function nop() {\n\n        }\n\n        if (cfg.rocketXML === \"\" || cfg.rocketXML === undefined || cfg.rocketXML === undefined) {\n            throw (\"[jsRocket] rocketXML is not set, try _syncDevice.setConfig({'rocketXML':'url/To/RocketXML.rocket'})\");\n        } else {\n            load(cfg.rocketXML);\n        }\n\n        return {\n            load: load,\n            getTrack: getTrack,\n            update: nop,\n            on: setEvent\n        };\n    };\n    JSRocket.SyncDeviceClient = function (cfg) {\n\n        \"use strict\";\n\n        var CMD_SET_KEY = 0,\n            CMD_DELETE_KEY = 1,\n            CMD_GET_TRACK = 2,\n            CMD_SET_ROW = 3,\n            CMD_PAUSE = 4,\n            CMD_SAVE_TRACKS = 5;\n\n        var _ws = new WebSocket(cfg.socketURL),\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                },\n                'save': function () {\n                }\n            };\n\n        function onOpen() {\n\n            _ws.binaryType = \"arraybuffer\";\n            _ws.send('hello, synctracker!');\n        }\n\n        function onMessage(e) {\n\n            var queue = (new Uint8Array(e.data)),\n                cmd = queue[0],\n                track, row, value, interpolation;\n\n            //Handshake\n            if (cmd === 104) {\n\n                _eventHandler.ready();\n\n                //PAUSE\n            } else if (CMD_PAUSE === cmd) {\n\n                if (queue[1] === 1) {\n                    _eventHandler.pause();\n                } else {\n                    _eventHandler.play();\n                }\n\n                //SET_ROW\n            } else if (CMD_SET_ROW === cmd) {\n\n                row = toInt(queue.subarray(1, 5));\n\n                _eventHandler.update(row);\n\n                //SET_KEY\n            } else if (CMD_SET_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                //value = Math.round(toFloat(queue.subarray(9, 13)) * 100) / 100; //round to what's seen in Rocket tracks\n                value = toFloat(queue.subarray(9, 13)); //use the values you see in Rocket statusbar\n\n                interpolation = toInt(queue.subarray(13, 14));\n                _syncData.getTrack(track).add(row, value, interpolation);\n\n                //DELETE\n            } else if (CMD_DELETE_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                _syncData.getTrack(track).remove(row);\n\n                //SAVE\n            } else if (CMD_SAVE_TRACKS === cmd) {\n                _eventHandler.save();\n            }\n        }\n\n        function onClose(e) {\n            console.warn(\">> connection closed\", e);\n        }\n\n        function onError(e) {\n            console.error(\">> connection error'd\", e);\n        }\n\n        _ws.onopen = onOpen;\n        _ws.onmessage = onMessage;\n        _ws.onclose = onClose;\n        _ws.onerror = onError;\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            var utf8Name = encodeURIComponent(name).replace(/%([\\dA-F]{2})/g, function (m, c) {\n                return String.fromCharCode('0x' + c);\n            });\n            var message = [CMD_GET_TRACK,\n                (utf8Name.length >> 24) & 0xFF, (utf8Name.length >> 16) & 0xFF,\n                (utf8Name.length >> 8) & 0xFF, (utf8Name.length) & 0xFF];\n\n            for (var i = 0; i < utf8Name.length; i++) {\n                message.push(utf8Name.charCodeAt(i));\n            }\n\n            _ws.send(new Uint8Array(message).buffer);\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setRow(row) {\n\n            var streamInt = [(row >> 24) & 0xFF,\n            (row >> 16) & 0xFF,\n            (row >> 8) & 0xFF,\n            (row) & 0xFF];\n\n            _ws.send(new Uint8Array([CMD_SET_ROW, streamInt[0], streamInt[1], streamInt[2], streamInt[3]]).buffer);\n        }\n\n        function toInt(arr) {\n\n            var i = 0,\n                view = new DataView(new ArrayBuffer(arr.length));\n\n            for (; i < arr.length; i++) {\n                view.setUint8(i, arr[i]);\n            }\n\n            if (view.byteLength === 1) {\n                return view.getInt8(0);\n            } else {\n                return view.getInt32(0);\n            }\n        }\n\n        function toFloat(arr) {\n            var view = new DataView(new ArrayBuffer(4));\n            view.setUint8(0, arr[0]);\n            view.setUint8(1, arr[1]);\n            view.setUint8(2, arr[2]);\n            view.setUint8(3, arr[3]);\n\n            return view.getFloat32(0);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            getTrack: getTrack,\n            update: setRow,\n            on: setEvent\n        };\n    };\n\n    JSRocket.SyncDevice = function () {\n\n        \"use strict\";\n\n        var _connected = false,\n            _device,\n            _previousIntRow,\n            _config = {\n                \"socketURL\": \"ws://localhost:1339\",\n                \"rocketXML\": \"\"\n            },\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                }\n            };\n\n        function init(mode) {\n            if (mode === \"demo\") {\n                _device = new JSRocket.SyncDevicePlayer(_config);\n            } else {\n                _device = new JSRocket.SyncDeviceClient(_config);\n            }\n\n            _device.on('ready', deviceReady);\n            _device.on('update', deviceUpdate);\n            _device.on('play', devicePlay);\n            _device.on('pause', devicePause);\n        }\n\n        function getConfig() {\n            return _config;\n        }\n\n        function setConfig(cfg) {\n            for (var option in cfg) {\n                if (cfg.hasOwnProperty(option)) {\n                    _config[option] = cfg[option];\n                }\n            }\n\n            return _config;\n        }\n\n        function deviceReady() {\n            _connected = true;\n            _eventHandler.ready();\n        }\n\n        function deviceUpdate(row) {\n            _eventHandler.update(row);\n        }\n\n        function devicePlay() {\n            _eventHandler.play();\n        }\n\n        function devicePause() {\n            _eventHandler.pause();\n        }\n\n        function getTrack(name) {\n            if (_connected) {\n                return _device.getTrack(name);\n            } else {\n                return null;\n            }\n        }\n\n        function update(row) {\n            //no need to update rocket on float rows\n            if (Math.floor(row) !== _previousIntRow) {\n                _previousIntRow = Math.floor(row);\n                _device.update(_previousIntRow);\n            }\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            init: init,\n            setConfig: setConfig,\n            getConfig: getConfig,\n            getTrack: getTrack,\n            update: update,\n            on: setEvent\n        };\n    };\n\n})(window);\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { DemoScene } from './DemoScene';\n\nclass Application {\n\n    // HD Resolution 1920 x 1080\n    public static readonly CANVAS_WIDTH = 1920 / 5;\n    public static readonly CANVAS_HEIGHT = 1080 / 5;\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(Application.CANVAS_WIDTH, Application.CANVAS_HEIGHT, new DemoScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["window","XMPlayer","player","XMView","periodForNote","prettify_effect","init","load","arrayBuf","dv","DataView","xm","songname","getstring","hlen","getUint32","songlen","getUint16","song_looppos","nchan","i","j","k","npat","ninst","flags","tempo","bpm","channelinfo","global_volume","max_global_volume","push","number","filterstate","Float32Array","vol","pan","period","vL","vR","vLprev","vRprev","mute","volE","panE","retrig","vibratopos","vibratodepth","vibratospeed","vibratotype","console","log","songpats","getUint8","idx","patterns","pattern","patrows","patsize","row","byte0","note","inst","efftype","effparam","notedata","instruments","hdrsiz","instname","nsamp","samplemap","Uint8Array","env_nvol","env_vol_type","env_vol_sustain","env_vol_loop_start","env_vol_loop_end","env_npan","env_pan_type","env_pan_sustain","env_pan_loop_start","env_pan_loop_end","vol_fadeout","env_vol","env_pan","samphdrsiz","toString","totalsamples","samps","samplen","samploop","samplooplen","sampvol","sampfinetune","getInt8","samptype","samppan","sampnote","sampname","sampleoffset","prettify_note","samp","sampledata","ConvertSample","fileoffset","len","type","loop","looplen","UnrollSampleLoop","samples","env_end_tick","length","fadeout_ticks","Envelope","play","playing","resume","jsNode","connect","gainNode","temp_osc","audioctx","createOscillator","destination","start","noteOn","stop","noteOff","disconnect","pause","cur_pat","cur_row","cur_songpos","cur_ticksamp","cur_tick","nextTick","nextRow","_note_names","f_smp","popfilter_alpha","t","p","String","fromCharCode","prettify_notedata","data","num","prettify_volume","offset","str","c","join","updateChannelPeriod","ch","freq","Math","pow","isNaN","doff","filter","f_c","wct","sqrt","PI","e","exp","cos","filterCoeffs","fine","next_row","nextPat","setCurrentPattern","r","triggernote","release","voleffectfn","undefined","v","voleffectdata","max","min","effects_t1","portaspeed","effect","effectdata","effectfn","eff_t0","effects_t0","periodtarget","envtick","EnvelopeFollower","off","points","sustain","loopstart","loopend","this","env","tick","periodoffset","Tick","MixSilenceIntoBuf","end","dataL","dataR","s","abs","MixChannelIntoBuf","instsamp","sample_end","volL","volR","dk","Vrms","f0","f1","f2","fs0","fs1","fs2","pf_8","failsafe","y","next_event","audio_cb","sampleRate","buflen","outputBuffer","getChannelData","ticklen","scopewidth","scope_width","tickduration","VU","scopes","scope","pushEvent","playbackTime","vu","songpos","pat","array","bits","b","acc","nloops","pingpong","samplesiz","audioContext","AudioContext","webkitAudioContext","createGain","gain","value","createScriptProcessor","createJavaScriptNode","onaudioprocess","prototype","Get","ticks","y0","x0","dx","eff_t1_0","arpeggio","eff_t1_3","eff_t1_4","x","delta","sin","getVibratoDelta","eff_t0_a","volumeslide","eff_t1_a","eff_unimplemented","eff_unimplemented_t0","slideupspeed","slidedownspeed","eff","loopremaining","finevolup","finevoldown","global_volumeslide","f","module","exports","a","appendChild","dom","u","d","children","style","display","l","document","createElement","cssText","addEventListener","preventDefault","performance","Date","now","g","Panel","h","self","memory","REVISION","addPanel","showPanel","begin","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","Infinity","round","devicePixelRatio","m","n","q","width","height","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","drawImage","scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","id","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","appendTo","getElementById","event","FullscreenUtils","toggleFullscreen","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","set","clear","color","Color","BLACK","toPackedFormat","count","clearColorBuffer","fill","drawPixel","drawPixel4","alpha","index","inverseAlpha","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","floor","roundedY","percent","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","drawRect2","drawText","text","xpos","firstIndex","charCodeAt","tx","ty","drawTextureRectFastAlpha","addReflections","interpolate","drawTextureRect2","xs","ys","xt","yt","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","current","fastFramebufferCopyOffset","src","dest","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","STEPS2","sphereFunction2","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","dist2","angle","atan2","color1","cosineInterpolate","final","drawParticleWaves","noClear","forEach","multiply","sort","size","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","torusFunction","y2","mu","mu2","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","drawLensFlare","screenPos","dirt","dir","sub","temp","theta","phi","Vector4f","seed","back","down","front","left","right","up","Promise","all","TextureUtils","setClamp","draw","mv","setFramebuffer","drawSkyBox","getRotation","rotation","sclae","textures","skyBoxSideModel","skyPoints","map","uv","TextureCoordinate","faces","vertices","setModelViewMatrix","position","projection","keyFrames","setKeyFrames","getViewMatrix","first","zero","second","third","fraction","Utils","CubicInterpolate","look","EulerAngleCamera","blenderScene","invert","object","normals","normalize","n1","n2","n3","obj","transformedNormals","transformedPoints","file","disp","coords","ComputationalGeometryUtils","computeBoundingSphere","normals2","boundingSphere","name","json","currentObject","normalCount","vertexCount","uvCount","normalOffset","vertexOffset","uvOffset","split","line","startsWith","Mesh","error","Error","Vector","Number","parseFloat","TexCoord","Face","drawScaledTextureClip","frame","filename","fetch","response","JSON","parse","cameraPath","CameraPath","keys","myFrame","CameraFrame","location","frames","CameraKeyFrame","rx","ry","rz","constructZRotationMatrix","translation","getPosition","_start","_end","_length","isEmpty","insertStart","node","next","previous","insertEnd","insert","currentNode","deleteStart","deleteEnd","delete","getNode","toArray","_data","_next","_previous","input","istart","istop","ostart","ostop","random","srcPosition","dst","dstPosition","slice","splice","apply","concat","fade","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","y3","a0","AbstractCube","AbstractScene","blurred","accumulationBuffer","renderingPipeline","GouraudShadingRenderingPipeline","BlenderLoader","mesh","generateProceduralNoise","drawBlenderScene2","texture3","model","BakedLighting","skyBox","baked","blenderObj8","SkyBox","loadWithTexture","drawBlenderScene7","drawMeshArray","BlenderCameraScene","texture4","fpsStartTime","fpsCount","fps","meshes","path","light1","light2","cameraAnimator","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","setLights","WavefrontLoader","CameraLoader","BlenderCameraAnimator","computeFps","currentTime","timeInput","TransitionMethods","BlockFade","ledTexture","transitionFramebufferTo","transitionCircle","transitionWipe","c3","drawCircle","textureBackground","putpixel","radius","blockFade","transition","transitionSceneFrom","transitionSceneTo","transitionMethod","transitionValue","trunc","BLOCKFADE","CROSSFADE","crossFade","FADEIN","fadeIn","FADEOUT","fadeOut","WIPE_LEFT","crossFadeImage","CIRCLE","pixelArray","pixelArrayWidth","blockWidth","horizontalUnits","verticalUnits","fadeArray","blend","transitionImage","clamp","startColor","endColor","renderScanlines","shiftAmount","offRed","offGreen","offBlue","strips","verticalPosition","imagePixelR","imagePixelG","imagePixelB","CubeScene","cubeMesh","Cube","BACKGROUND_COLOR","renderCube","getMesh","getModelViewMatrix","renderBackground","soundManager","canvasRecorder","sceneList","nodeInstance","timelineRef","stats","SoundManager","DoublyLinkedList","initControls","allProgress","loadOgg","prepareSync","plug","initScene","outputX","args","constructorName","Object","newNode","DLNode","CanvasRecorder","initTimeline","initStats","tickerPlayRef","tickerStopRef","tickerNextRef","tickerBackRef","tickerRecordRef","tickerScreenshotRef","tickerVolumeRef","onPause","seek","classList","remove","recording","saveVideo","onPlay","recordVideo","audio","paused","isPlaying","setAttribute","toggleSound","muted","localStorage","setItem","date","fileName","toISOString","toTimeString","replace","image","toDataURL","anchor","click","jump","newSeek","target","duration","directionToScroll","deltaY","stopPropagation","passive","key","promises","progressCallback","Stats","statsObj","body","updateMusic","musicProperties","sceneData","transitionType","timeMilliseconds","drawStats","timeSeconds","syncDevice","connected","demoMode","innerText","toFixed","canvasRecordingOptions","audioTrack","getType","ext","fileExtension","includes","pop","createCanvasRecorder","options","link","frameRate","download","recorderOptions","mimeType","audioBitsPerSecond","videoBitsPerSecond","chunks","stream","captureStream","ctx","createMediaStreamDestination","sourceNode","createMediaElementSource","getAudioTracks","addTrack","recorder","MediaRecorder","ondataavailable","onstop","blob","Blob","url","URL","createObjectURL","href","MouseEvent","dispatchEvent","setTimeout","revokeObjectURL","timeslice","dispose","sound","info","canvasObj","PlaneDeformationFloorScene","PlaneDeformationScene","MetalHeadzScene","DofBallsScene","TorusKnotTunnelScene","GearsScene","ParticleStreamsScene","HoodlumScene","TwisterScene","RazorScene","logo","SineScrollerScene","background","pizza","PlasmaScene","TorusScene","DistortedSphereScene","renderTransparent","RotoZoomerScene","VoxelBallsScene","LedPlasmaScene","heightmapSphere","createSphereDistplaced","shadingSphereEnvDisp2","createSphere","pointsA","divideSphere","point","find","findPoint","indexOf","steps","vn1","vn2","vn3","newPoints","result","rot","norm","norm2","cross","sub2","cross2","add2","normalize2","normalMatrix","computeNormalMatrix","multiplyHomArr","vertex1","Vertex","vertex2","vertex3","vertexArray","clipConvexPolygon2","drawTriangleDDA","particleTexture2","drawParticleTorus","computeDepthBlur","nearPlane","focalPlane","farPlane","depth","spriteNum","gearsMesh","FRONT","drawBlenderScene4","factor","dampFactor","lab2","spaceLabMesh","hoodlumLogoMesh","createProceduralTexture3","drawBlenderScene9","scale2","resolve","dy","led","lineDirection","radialWaveCenter","difference","directionalWave","intensity","metalheadz","texture11","texture13","blenderObjMetal","computeCameraMovement","lensflareScreenSpace","generateProceduralParticleTexture","radius2","Matrix3f","effectStyle","texturePath","mLUT","createLUT","effectWidth","effectHeight","textureWidth","textureHeight","Int32Array","bright","elapsedTimeY","elapsedTimeX","pixelCount","o","adjustBrightness","currentPixel","drawOldPlaneDeformationFloor","drawOldPlaneDeformationStar","GRADIENTLEN","SWINGLEN","SWINGMAX","colorGrad","swingCurve","makeGradient","makeSwingCurve","drawPlasma","arrlen","maxval","halfmax","ni","cos256","amplitude","swing","gradient","swingT","swingY","swingYT","drawOldSchoolPlasma","waveSum","red","green","blue","texture10","cube","dodecahedron","pyramid","icosahedron","Dodecahedron","Pyramid","Sphere","reproduceRazorScene","distance","yDisplacement","enableLighting","setColor","DARK_GRAY","constructShadowMatrix","logoTexture","drawRotoZoomer","yStepX","yStepY","xStepX","xStepY","texYCoord","texXCoord","texYCoordInner","texXCoordInner","framebufferPos","fontTexture","charToIndex","fonts","Map","addCharInex","drawText2","xFonts","asciiCode","has","get","sine","xOff","textOff","startW","endW","yDisp","char","texture2","fontRenderer","fontRenderer2","FontRenderer","drawStarField","myTime","frambuffer","stars","stars2","DARK_BLUE","particleTexture","cocoon","torusKnot","TorusKnot","fog","LinearFog","setFog","generateProceduralParticleTexture2","torusTunnel","glitchScreen","glitchFactor","rng2","glIndex","torusFunction3","frame2","tangent","constructIdentityMatrix","m14","m24","m34","m11","m21","m31","m12","m22","m32","m13","m23","m33","finalMatrix","transpose","razorLogo","drawTitanEffect","shadingTorus","horizontalNum","verticalNum","backgroundTexture","x2","x3","x4","xPos","drawSpan","ypos","textureForwardDifference","hightlight","YELLOW","mat","xSteps","xsteps","zsteps","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","AbstractGeometricObject","super","ySteps","STEPS","sphereFunction","center","xScale","yScale","zScale","vector","m41","m42","m43","m44","setIdentityMatrix","inverseTranslation","scale1","scale3","inverseRotation","getInverseRotation","planePoint","planeNormal","lightPosition","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr2","multiplyArr","isInsidePositiveHalfSpace","getNormal","getDistance","getTran","perp","vec","scal","reci","mult","vec1","vec2","componentWiseMul","BlenderJsonParser","getBlenderScene","convertToMeshArray","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","colorSlope","setup","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","lights","material","lighting","clipper","projectedVertices","SutherlandHodgman2DClipper","Material","ambientColor","diffuseColor","specularColor","shininess","enable","setMaterial","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","S","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","zClipTriangle2","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","Fog","zStart","zEnd","fogColor","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","Light","emissiveColor","songLengthSeconds","Audio","JSRocket","SyncDevice","BPM","ROWS_PER_BEAT","ROW_RATE","snare","bass","playExtendedModule","initXM","playOgg","decodeAudioData","buffer","sourceBuffer","createBufferSource","preload","autoplay","oncanplay","setConfig","on","onSyncReady","newRow","onSyncUpdate","getTrack","onpause","onplay","getValue","playPromise","catch","direction","sceneLength","effectJump","parseInt","ref","isMuted","jumpTo","getItem","maxWidth","maxHeight","getPixel","getBilinearFilteredPixel","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","transparency","Image","onload","onerror","withAlpha","conv","SyncData","_track","getIndexForName","getTrackLength","createIndex","varName","track","Track","lo","hi","mi","findKeyIndex","k0","k1","interpolation","SyncDevicePlayer","cfg","_urlRequest","_syncData","_eventHandler","XMLHttpRequest","open","onreadystatechange","urlRequestHandler","send","readyState","status","xmlString","tLen","kLen","trackList","DOMParser","parseFromString","getElementsByTagName","keyList","ready","readXML","responseText","rocketXML","evt","handler","SyncDeviceClient","_ws","WebSocket","socketURL","toInt","arr","view","setUint8","byteLength","getInt32","onopen","binaryType","onmessage","queue","cmd","subarray","getFloat32","save","onclose","warn","utf8Name","encodeURIComponent","message","streamInt","_device","_previousIntRow","_connected","_config","deviceReady","deviceUpdate","devicePlay","devicePause","mode","option","hasOwnProperty","getConfig","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","globalThis","Function","scriptUrl","importScripts","currentScript","scripts","Application","Canvas","CANVAS_WIDTH","CANVAS_HEIGHT","DemoScene","main"],"sourceRoot":""}