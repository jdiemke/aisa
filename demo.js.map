{"version":3,"file":"demo.js","mappings":"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","sources":["webpack://aisa/./node_modules/stats.js/build/stats.min.js","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/SkyBox.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/animation/BlenderCameraAnimator.ts","webpack://aisa/./src/animation/CameraKeyFrame.ts","webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/blender/face.ts","webpack://aisa/./src/blender/mesh.ts","webpack://aisa/./src/blender/parseUtils.ts","webpack://aisa/./src/blender/tex-coord.ts","webpack://aisa/./src/blender/vector.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/CameraFrame.ts","webpack://aisa/./src/camera/CameraLoader.ts","webpack://aisa/./src/camera/CameraPath.ts","webpack://aisa/./src/camera/EulerAngleCamera.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/core/LinkedList.ts","webpack://aisa/./src/core/Node.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/examples/abstract-cube/AbstractCube.ts","webpack://aisa/./src/examples/baked-lighting/BakedLighting.ts","webpack://aisa/./src/examples/blender-camera-animation/BlenderCameraScene.ts","webpack://aisa/./src/examples/block-fade/BlockFade.ts","webpack://aisa/./src/examples/block-fade/Particle.ts","webpack://aisa/./src/examples/block-fade/TransitionMethods.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/demo/DemoScene.ts","webpack://aisa/./src/examples/demo/canvas-record.ts","webpack://aisa/./src/examples/demo/parts/Scene1.ts","webpack://aisa/./src/examples/demo/parts/Scene10.ts","webpack://aisa/./src/examples/demo/parts/Scene11.ts","webpack://aisa/./src/examples/demo/parts/Scene12.ts","webpack://aisa/./src/examples/demo/parts/Scene13.ts","webpack://aisa/./src/examples/demo/parts/Scene14.ts","webpack://aisa/./src/examples/demo/parts/Scene15.ts","webpack://aisa/./src/examples/demo/parts/Scene16.ts","webpack://aisa/./src/examples/demo/parts/Scene17.ts","webpack://aisa/./src/examples/demo/parts/Scene18.ts","webpack://aisa/./src/examples/demo/parts/Scene19.ts","webpack://aisa/./src/examples/demo/parts/Scene2.ts","webpack://aisa/./src/examples/demo/parts/Scene20.ts","webpack://aisa/./src/examples/demo/parts/Scene3.ts","webpack://aisa/./src/examples/demo/parts/Scene4.ts","webpack://aisa/./src/examples/demo/parts/Scene5.ts","webpack://aisa/./src/examples/demo/parts/Scene6.ts","webpack://aisa/./src/examples/demo/parts/Scene7.ts","webpack://aisa/./src/examples/demo/parts/Scene8.ts","webpack://aisa/./src/examples/demo/parts/Scene9.ts","webpack://aisa/./src/examples/distorted-sphere/DistortedSphereScene.ts","webpack://aisa/./src/examples/dof-balls/DofBallsScene.ts","webpack://aisa/./src/examples/gears/GearsScene.ts","webpack://aisa/./src/examples/hoodlum/HoodlumScene.ts","webpack://aisa/./src/examples/led-plasma/LedPlasmaScene.ts","webpack://aisa/./src/examples/metalheadz/MetalHeadzScene.ts","webpack://aisa/./src/examples/particle-streams/ParticleStreamsScene.ts","webpack://aisa/./src/examples/plane-deformation/PlaneDeformationScene.ts","webpack://aisa/./src/examples/plasma/PlasmaScene.ts","webpack://aisa/./src/examples/razor/RazorScene.ts","webpack://aisa/./src/examples/roto-zoomer/RotoZoomerScene.ts","webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/examples/sine-scroller/SineScrollerScene.ts","webpack://aisa/./src/examples/torus-knot-tunnel/TorusKnotTunnelScene.ts","webpack://aisa/./src/examples/torus/TorusScene.ts","webpack://aisa/./src/examples/twister/TwisterScene.ts","webpack://aisa/./src/examples/voxel-balls/VoxelBallsScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Dodecahedron.ts","webpack://aisa/./src/geometrical-objects/Pyramid.ts","webpack://aisa/./src/geometrical-objects/Sphere.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/geometrical-objects/TorusKnot.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/blender/BlenderLoader.ts","webpack://aisa/./src/model/wavefront-obj/WavefrontLoader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/fog/Fog.ts","webpack://aisa/./src/shading/fog/LinearFog.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/sound/MusicProperties.ts","webpack://aisa/./src/sound/SoundManager.ts","webpack://aisa/./src/special-effects/LensFlare.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/./src/sound/JSRocket.js","webpack://aisa/./src/sound/cowbell/audio_player.js","webpack://aisa/./src/sound/cowbell/cowbell.js","webpack://aisa/./src/sound/cowbell/openmpt/openmpt_player.js","webpack://aisa/./src/sound/cowbell/web_audio_player.js","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/demo/Application.ts"],"sourcesContent":["// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n        \n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n        \n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n        \n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { Matrix4f, Vector4f } from './math';\nimport { Texture, TextureUtils } from './texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { TexturedMesh } from './rendering-pipelines/TexturedMesh';\n\nexport class SkyBox {\n\n    private back: Texture;\n    private down: Texture;\n    private front: Texture;\n    private left: Texture;\n    private right: Texture;\n    private up: Texture;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline = new TexturingRenderingPipeline(null);\n    public init(): Promise<any> {\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/skybox/skybox_back.png'), false).then(\n                (texture: Texture) => this.back = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_down.png'), false).then(\n                (texture: Texture) => this.down = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_front.png'), false).then(\n                (texture: Texture) => this.front = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_left.png'), false).then(\n                (texture: Texture) => this.left = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_right.png'), false).then(\n                (texture: Texture) => this.right = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_up.png'), false).then(\n                (texture: Texture) => this.up = texture\n            )]).then(() => {\n                this.back.setClamp(true);\n                this.down.setClamp(true);\n                this.front.setClamp(true);\n                this.left.setClamp(true);\n                this.right.setClamp(true);\n                this.up.setClamp(true);\n            });\n    }\n\n    // move code from framebuffer into draw method!\n    public draw(framebuffer: Framebuffer, mv: Matrix4f): void {\n    \n        this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n        this.drawSkyBox(framebuffer, mv.getRotation());\n    }\n\n    public drawSkyBox(framebuffer: Framebuffer, rotation: Matrix4f): void {\n        const sclae = 20;\n        const textures = [\n            this.back,\n            this.left,\n            this.front,\n            this.right\n        ];\n\n        let camera: Matrix4f;\n        let mv: Matrix4f;\n        let skyBoxSideModel: TexturedMesh;\n\n        const skyPoints = [\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, -1, -1, 1)\n        ];\n\n        for (let i = 0; i < 4; i++) {\n            camera =\n                rotation.multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI).multiplyMatrix(\n                        Matrix4f.constructYRotationMatrix(+ Math.PI * 2 / 4 * i)));\n\n\n            mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n\n            // skybox: starz\n            skyBoxSideModel = {\n                points: skyPoints,\n                points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n                uv: [\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                ],\n                faces: [\n                    {\n                        vertices: [0, 1, 2],\n                        uv: [0, 1, 2]\n                    },\n                    {\n                        vertices: [3, 4, 5],\n                        uv: [3, 4, 5]\n                    }\n                ]\n            };\n\n            framebuffer.setTexture(textures[i]);\n            this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n            this.texturedRenderingPipeline.setModelViewMatrix(mv);\n            this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n        }\n\n        camera = rotation.multiplyMatrix(\n            Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(0)\n                    .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 4 * 1).multiplyMatrix(Matrix4f.constructXRotationMatrix(-Math.PI * 2 / 4)))\n            );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.up);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n\n        camera =\n            rotation.multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(0)\n                        .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 2).multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI * 2 / 4)))\n\n                );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.down);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { EulerAngleCamera } from '../camera/EulerAngleCamera';\nimport { Utils } from '../core/Utils';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector3f } from '../math/Vector3f';\nimport { CameraKeyFrame } from './CameraKeyFrame';\n\nexport class BlenderCameraAnimator {\n\n    public pos: Vector3f;\n    private keyFrames: Array<CameraKeyFrame>;\n\n    // TODO:\n    // - should we really loop or better restart??\n    // - dont use linear interpolation see bourke\n    // - maybe quaternions and slerp for rotation\n    // temp solution: no linear for\n\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getViewMatrix(elapsedTime: number): Matrix4f {\n        const keyFrameDuration = 2600;\n\n        elapsedTime *= 1.0;\n\n        const first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        const zero = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        const second = (first + 1) % this.keyFrames.length;\n        const third = (first + 2) % this.keyFrames.length;\n        const fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        const mu2 = (1 - Math.cos(fraction * Math.PI)) / 2;\n        const position = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].position.x, this.keyFrames[first].position.x, this.keyFrames[second].position.x, this.keyFrames[third].position.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.y, this.keyFrames[first].position.y, this.keyFrames[second].position.y, this.keyFrames[third].position.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.z, this.keyFrames[first].position.z, this.keyFrames[second].position.z, this.keyFrames[third].position.z, fraction)\n        );\n        //let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\n\n        const look = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.x, this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x, this.keyFrames[third].rotation.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.y, this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y, this.keyFrames[third].rotation.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.z, this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z, this.keyFrames[third].rotation.z, fraction)\n        );\n        this.pos = position;\n\n        return new EulerAngleCamera(position, look.x, look.y, look.z).getViewMatrix();\n    }\n\n}\n\n","import { Vector3f } from '../math';\n\nexport class CameraKeyFrame {\n\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(position: Vector3f, rotation: Vector3f) {\n        this.position = position;\n        this.rotation = rotation;\n    }\n\n}","import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Face {\n    public vertices: Array<number>;\n    public normals: Array<number>;\n    public uv: Array<number>;\n}\n","import { Face } from './face';\nimport { TexCoord } from './tex-coord';\nimport { Vector } from './vector';\n\nexport class Mesh {\n\n    public name: string;\n    public vertices: Array<Vector>;\n    public normals: Array<Vector>;\n    public uv: Array<TexCoord>;\n    public faces: Array<Face>;\n\n}\n","import { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexCoord } from './tex-coord';\nimport { Face } from './face';\n\nexport function convertToMeshArray(data: string): Array<Mesh> {\n    const json: Array<Mesh> = new Array<Mesh>();\n\n    let currentObject: Mesh = null;\n\n    let normalCount: number = 0;\n    let vertexCount: number = 0;\n    let uvCount: number = 0;\n    let normalOffset: number = 0;\n    let vertexOffset: number = 0;\n    let uvOffset: number = 0;\n\n    data.toString().split('\\n').forEach((line: string) => {\n\n        if (line.startsWith('o ')) {\n            const coords: Array<string> = line.split(' ');\n\n            currentObject = new Mesh();\n            currentObject.name = coords[1];\n            currentObject.normals = [];\n            currentObject.vertices = [];\n            currentObject.faces = [];\n            currentObject.uv = []; // OPTIONAL\n\n            json.push(currentObject);\n            normalOffset = normalCount;\n            vertexOffset = vertexCount;\n            uvOffset = uvCount;\n        }\n\n        if (currentObject === null &&\n            (line.startsWith('v ') ||\n                line.startsWith('vn ') ||\n                line.startsWith('vt '))) {\n            console.error('Error: OBJ file does not contain Objects.');\n            throw Error();\n        }\n\n        if (line.startsWith('v ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const vertex: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.vertices.push(vertex);\n            vertexCount++;\n        }\n\n        if (line.startsWith('vn ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const normal: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.normals.push(normal);\n            normalCount++;\n        }\n\n        if (line.startsWith('vt ')) { // OPTIONAL\n            const coords: Array<string> = line.split(' ');\n\n            const uv: TexCoord = new TexCoord(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2])\n            );\n\n            currentObject.uv.push(uv);\n            uvCount++;\n        }\n\n        if (line.startsWith('f ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const face: Face = new Face();\n            face.vertices = [];\n            face.normals = [];\n            face.uv = [];\n\n            // vertex indices\n            face.vertices.push(Number(coords[1].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[2].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[3].split('/')[0]) - 1 - vertexOffset);\n\n            // uv indices OPTIONAL!\n            face.uv.push(Number(coords[1].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[2].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[3].split('/')[1]) - 1 - uvOffset);\n\n            // normal indices\n            face.normals.push(Number(coords[1].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[2].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[3].split('/')[2]) - 1 - normalOffset);\n\n            currentObject.faces.push(face);\n        }\n    });\n\n    return json;\n}\n","\nexport class TexCoord {\n\n    public u: number;\n    public v: number;\n\n    public constructor(u: number, v: number) {\n        this.u = u;\n        this.v = v;\n    }\n\n}\n","export class Vector {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\n\nexport class CameraFrame {\n    public frame: number;\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(frame: number, position: Vector3f, rotation: Vector3f) {\n        this.frame = frame;\n        this.position = position;\n        this.rotation = rotation;\n    }\n}\n","import { CameraKeyFrame } from '../animation/CameraKeyFrame';\nimport { Vector3f } from '../math';\nimport { CameraPath } from './CameraPath';\nimport { CameraFrame } from './CameraFrame';\n\nexport class CameraLoader {\n\n    public static load(filename: string): Promise<Array<CameraKeyFrame>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<CameraKeyFrame> => {\n\n            const json: any = JSON.parse(text);\n            const cameraPath: CameraPath = new CameraPath();\n            const keys = new Array<CameraKeyFrame>();\n\n            for (let i = 0; i < json.length; i++) {\n                const frame = json[i];\n\n                const myFrame = new CameraFrame(\n                    frame.frame,\n                    new Vector3f(\n                        frame.location[0],\n                        frame.location[1],\n                        frame.location[2]\n                    ),\n                    new Vector3f(\n                        frame.rotation[0],\n                        frame.rotation[1],\n                        frame.rotation[2]\n                    ));\n\n                cameraPath.frames.push(myFrame);\n                keys.push(new CameraKeyFrame(new Vector3f(\n                    frame.location[0],\n                    frame.location[2],\n                    -frame.location[1]\n                ),\n                    new Vector3f(\n                        frame.rotation[0] - 90 * 0.0174533,\n                        frame.rotation[2],\n                        frame.rotation[1]\n                    )));\n\n            }\n\n            return keys;\n        });\n    }\n\n}\n","import { CameraFrame } from './CameraFrame';\n\nexport class CameraPath {\n    public frames: Array<CameraFrame>;\n    constructor() {\n        this.frames = new Array<CameraFrame>();\n    }\n}\n\n","import { Matrix4f, Vector3f } from '../math';\n\nexport class EulerAngleCamera {\n\n    protected position: Vector3f;\n    protected rx: number;\n    protected ry: number;\n    protected rz: number;\n\n    constructor(position: Vector3f, rx: number, ry: number, rz: number) {\n        this.position = position;\n        this.rx = rx;\n        this.ry = ry;\n        this.rz = rz;\n    }\n\n    public getViewMatrix(): Matrix4f {\n        const rz = Matrix4f.constructZRotationMatrix(-this.rz);\n        const rx = Matrix4f.constructXRotationMatrix(-this.rx);\n        const ry = Matrix4f.constructYRotationMatrix(-this.ry);\n\n        const translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\n\n        return rx.multiplyMatrix(ry).multiplyMatrix(rz).multiplyMatrix(translation);\n    }\n\n    public getPosition(): Vector3f {\n        return this.position;\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { DLNode } from './Node';\n\n/**\n * Doubly Linked-List implementation class.\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n * https://github.com/DameLyngdoh/dl-doubly-linked-list-ts\n *\n */\nexport class DoublyLinkedList<T> {\n    /**\n     * The start node of the list.\n     */\n    private _start: DLNode<T> | null;\n\n    /**\n     * The last  node of the list.\n     */\n    private _end: DLNode<T> | null;\n\n    /**\n     * The number of nodes in the list.\n     */\n    private _length: number;\n\n    constructor() {\n        this._start = null;\n        this._end = null;\n        this._length = 0;\n    }\n\n    get start(): DLNode<T> | null {\n        return this._start;\n    }\n\n    set start(start: DLNode<T> | null) {\n        this._start = start;\n    }\n\n    get end(): DLNode<T> | null {\n        return this._end;\n    }\n\n    set end(end: DLNode<T> | null) {\n        this._end = end;\n    }\n\n    get length(): number {\n        return this._length + 1;\n    }\n\n    /**\n     * Returns true if the list is empty.\n     * @returns Returns true if list is empty or false otherwise.\n     */\n    public isEmpty(): boolean {\n        return this.length === 0;\n    }\n\n    /**\n     * Inserts a node to the start of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertStart(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.next = this.start;\n            if (this.start != null) {\n                this.start.previous = node;\n            }\n            this.start = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node to the end of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertEnd(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.previous = this.end;\n            if (this.end != null) {\n                this.end.next = node;\n            }\n            this.end = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node at the specified index in the list.\n     * @param node The node to be inserted to the list.\n     * @param index The index to insert the node at. A value of -1 will insert the node to the end of the list.\n     */\n    public insert(node: DLNode<T>, index: number): void {\n        if (index === 0) {\n            this.insertStart(node);\n            return;\n        }\n        else if (index === -1) {\n            this.insertEnd(node);\n            return;\n        }\n\n        let currentNode = this.start;\n        let i: number = 0;\n        for (i = 0; i < index - 1 && currentNode !== null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        // Insertion not possible\n        if (i !== index - 1 && currentNode === null) {\n            return;\n        }\n\n        if (currentNode != null) {\n            node.previous = currentNode;\n            node.next = currentNode.next;\n            if (currentNode.next != null) {\n                currentNode.next.previous = node;\n            }\n            else {\n                this.end = node;\n            }\n            currentNode.next = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Deletes the first node from the list.\n     */\n    public deleteStart(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.start != null && this.start.next == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.start != null) {\n            this.start = this.start.next;\n            if (this.start != null) {\n                this.start.previous = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes the last node from the list.\n     */\n    public deleteEnd(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.end != null && this.end.previous == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.end != null) {\n            this.end = this.end.previous;\n            if (this.end != null) {\n                this.end.next = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes a node from a specific index in the list. If the index is out of bounds, then no deletion will occur.\n     * @param index The index of the node to be deleted.\n     */\n    public delete(index: number): void {\n        if (this.isEmpty()) {\n            return;\n        }\n        if (index === 0) {\n            this.deleteStart();\n            return;\n        }\n        else if (index === -1) {\n            this.deleteEnd();\n            return;\n        }\n\n        const node = this.getNode(index);\n        if (node != null) {\n            if (node.next === null && node.previous !== null) {\n                this.deleteEnd();\n            }\n            else if (node.previous === null && node.next !== null) {\n                this.deleteStart();\n            }\n            else if (node.next !== null && node.previous !== null) {\n                node.previous.next = node.next;\n                node.next.previous = node.previous;\n                this._length--;\n            }\n        }\n    }\n\n    /**\n     * Retrieves a node from the specific index.\n     * @param index The index from which to retrieve the node.\n     * @returns Returns the node at the specific index or null if the index is out of bounds.\n     */\n    public getNode(index: number): DLNode<T> | null {\n        if (this.isEmpty() || index < 0) {\n            return null;\n        }\n\n        let currentNode = this.start;\n        for (let i = 1; i <= index && currentNode != null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        return currentNode;\n    }\n\n    /**\n     * Returns an array of the nodes in the order of the list.\n     * @returns Array of nodes.\n     */\n    public toArray(): Array<DLNode<T>> {\n        const array: Array<DLNode<T>> = new Array<DLNode<T>>();\n\n        if (this.length === 0) {\n            return array;\n        }\n\n        let i = 0;\n\n        let currentNode: DLNode<T> | null = this.start;\n        while (currentNode != null && i < 12) {\n            array.push(currentNode);\n            currentNode = currentNode.next;\n            i++;\n        }\n        return array;\n    }\n\n    /**\n     * Clears the list and deletes all nodes.\n     */\n    public clear(): void {\n        this.end = null;\n        this.start = null;\n        this._length = 0;\n    }\n}","/**\n * Node implementation class. A node is a vertex in the list which contains data and pointers to the next node and previous node.\n */\nexport class DLNode<T> {\n    /**\n     * The data contained in the node.\n     */\n    private _data: T | null = null;\n\n    /**\n     * The edge or pointer to the next node.\n     */\n    private _next: DLNode<T> | null = null;\n\n    /**\n     * The edge or pointer to the previous node.\n     */\n    private _previous: DLNode<T> | null = null;\n\n    constructor() { }\n\n    get data(): T | null {\n        return this._data;\n    }\n\n    set data(data: T | null) {\n        this._data = data;\n    }\n\n    get next(): DLNode<T> | null {\n        return this._next;\n    }\n\n    set next(next: DLNode<T> | null) {\n        this._next = next;\n    }\n\n    get previous(): DLNode<T> | null {\n        return this._previous;\n    }\n\n    set previous(previous: DLNode<T> | null) {\n        this._previous = previous;\n    }\n}","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Interpolator } from '../../math/Interpolator';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class AbstractCube extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    private scene: Array<FlatshadedMesh>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/stravaganza.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.scene = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene2(framebuffer, time);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene2(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(5, 16, 5));\n        let model: FlatshadedMesh = this.scene[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        mv = camera.multiplyMatrix(Matrix4f.constructZRotationMatrix(\n            Math.PI * 0.5 * Interpolator.cosineInterpolate(0, 600, Math.floor(elapsedTime * 0.7) % 4000))\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(\n                Math.PI * 0.5 * Interpolator.cosineInterpolate(2000, 2600, Math.floor(elapsedTime * 0.7) % 4000)))\n        );\n        model = this.scene[1];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\n/**\n * TODO:\n * - Move procedural texture generation into dedicated class\n * - create Mesh / Textured Mesh class\n * - Create Lens Flare class\n * - Create Pipeline class\n */\nexport class BakedLighting extends AbstractScene {\n\n    private skyBox: SkyBox;\n    private baked: Texture;\n    private noise: Texture;\n    private blenderObj8: Array<TexturedMesh>;\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/abstract.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObj8 = mesh\n            ),\n            TextureUtils.load(require('../../assets/Backed.png'), false).then(\n                (texture: Texture) => this.baked = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n\n        this.drawBlenderScene7(framebuffer, time - 1100000);\n        /*\n            [\n                //   { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n            ], this.dirt, this.skybox);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene7(framebuffer: Framebuffer, elapsedTime: number): void {\n        elapsedTime *= 0.2;\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0005).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, -25, 0)\n                    )));\n\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.baked);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.blenderObj8);\n    }\n\n}\n","import { CameraKeyFrame } from '../../animation/CameraKeyFrame';\nimport { CameraLoader } from '../../camera/CameraLoader';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { WavefrontLoader } from '../../model/wavefront-obj/WavefrontLoader';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { PointLight } from '../../shading/light/PointLight';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nimport CameraPathFile from '../../assets/camera-path.jsx';\nimport { BlenderCameraAnimator } from '../../animation/BlenderCameraAnimator';\nimport { SkyBox } from '../../SkyBox';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class BlenderCameraScene extends AbstractScene {\n\n    private texture4: Texture;\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private meshes: Array<FlatshadedMesh>;\n    private path: Array<CameraKeyFrame>;\n    private skyBox: SkyBox;\n\n    private light1: PointLight;\n    private light2: PointLight;\n\n    private cameraAnimator: BlenderCameraAnimator;\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.light1 = new PointLight();\n        this.light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        this.light1.diffuseIntensity = new Vector4f(1, 0.0, 1, 1);\n        this.light1.specularIntensity = new Vector4f(0.5, 0.5, 0.7, 1);\n        this.light1.position = new Vector4f(0, -10, -1, 1);\n\n        this.light2 = new PointLight();\n        this.light2.ambientIntensity = new Vector4f(0.5, 0.5, 1, 1);\n        this.light2.diffuseIntensity = new Vector4f(0.3, 0.3, 1, 1);\n        this.light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        this.light2.position = new Vector4f(3, 0, -2, 1);\n\n        this.renderingPipeline.setLights([this.light1, this.light2]);\n\n        this.skyBox = new SkyBox();\n        return Promise.all([\n            this.skyBox.init(),\n            WavefrontLoader.load(require('../../assets/monkey.obj')).then(\n                (value: Array<FlatshadedMesh>) => this.meshes = value\n            ),\n            CameraLoader.load(require('../../assets/camera-path.jsx')).then(\n                (value: Array<CameraKeyFrame>) => this.path = value\n            ),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n        ]).then(() => {\n            this.cameraAnimator = new BlenderCameraAnimator();\n            this.cameraAnimator.setKeyFrames(this.path);\n        });\n    }\n\n    private computeFps(currentTime: number): void {\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n    }\n\n    public render(framebuffer: Framebuffer, timeInput: number): void {\n        const currentTime: number = Date.now();\n        this.computeFps(currentTime);\n\n        const modelViewMartrix: Matrix4f = this.cameraAnimator.getViewMatrix(timeInput);\n\n        this.skyBox.draw(framebuffer, modelViewMartrix);\n\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.drawMeshArray(framebuffer, this.meshes, modelViewMartrix);\n\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Interpolator } from '../../math/Interpolator';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture/index';\nimport { TransitionMethods } from './TransitionMethods';\nimport { Particle } from './Particle';\n\nexport class BlockFade extends AbstractScene {\n    private ledTexture: Texture;\n    private startTime: number = Date.now();\n    private transitionFramebufferTo: Framebuffer;\n\n    public transitionCircle: Uint32Array;\n    public transitionWipe: Uint32Array;\n\n    // dissolve \n    private croud: Float32Array;        // Stores data for mask control\n    private prevMask: Array<boolean>;    // mask picture\n    private curMask: Array<boolean>;\n    private diff: Array<boolean>;       // difference mask\n    private noiseMask: Array<boolean>;  // particle mask\n    private croudMask: Uint32Array;     // cloud mask\n    private particleArray: Array<Particle>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.transitionFramebufferTo = new Framebuffer(framebuffer.width, framebuffer.height);\n\n        // draw side wipe\n        this.transitionWipe = new Uint32Array(framebuffer.width * framebuffer.height);\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const c2 = Utils.map(x, 0, framebuffer.width, 0, 255);\n                const color = new Color(c2, c2, c2, 255).toPackedFormat();\n                this.transitionWipe[x + y * framebuffer.width] = color;\n            }\n        }\n\n        // draw circle gradient\n        this.transitionCircle = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.transitionCircle.fill(Color.WHITE.toPackedFormat(), 0, this.transitionCircle.length);\n        for (let d = 0; d < framebuffer.width / 2; d += 1) {\n            const c3 = Utils.map(d, 0, framebuffer.width / 2, 0, 255);\n            this.drawCircle(framebuffer.width / 2, framebuffer.height / 2, d, c3);\n        }\n\n        //dissolve effect\n        this.initDissolve(framebuffer.width, framebuffer.height);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (textureBackground: Texture) => this.ledTexture = textureBackground\n            ),\n        ]);\n    }\n\n    private initDissolve(width: number, height: number) {\n        this.croud = new Float32Array(width * height);\n        this.prevMask = new Array<boolean>(width * height);\n        this.curMask = new Array<boolean>(width * height);\n        this.diff = new Array<boolean>(width * height);\n        this.noiseMask = new Array<boolean>(width * height);\n        this.particleArray = new Array<Particle>();\n\n        this.croudMask = new Uint32Array(width * height);\n        this.particleArray.splice(0, this.particleArray.length);\n\n        this.createCroud(width, height);\n        const threshold = 0;\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const index = y * width + x;\n                const isBackground = (this.croudMask[y * width + x] & 0xFF) < 0x80;\n                if (isBackground) {\n                    this.croud[index] = 0xFF000000;\n                }\n                this.prevMask[index] = this.curMask[index] = this.croud[index] < threshold;\n                if (Math.random() > 0.90) {\n                    this.noiseMask[index] = !isBackground;\n                }\n            }\n        }\n    }\n\n    private createCroud(width: number, height: number) {\n        if (this.croud == null) {\n            this.croud = new Float32Array(width * height);\n        }\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                this.croudMask[y * width + x] = 0xFFFFFFFF;\n            }\n        }\n\n        const bias: number = Math.min(150.0, 0xFF);\n        const xbase = Math.random() * 100;\n        const ybase = Math.random() * 100;\n\n        let xnoise = 0.0;\n        let ynoise = 0.0;\n        const inc = 0.02;\n\n        const pn = Utils.PerlinNoise;\n\n        for (let y = 0; y < height; y++) {\n            const curBias = y * bias / height;\n            for (let x = 0; x < width; x++) {\n                const _gray = (pn.noise((xnoise + xbase), (ynoise + ybase), 0) * (0xFF - bias) + curBias);\n                this.croud[y * width + x] = _gray;\n                xnoise += inc;\n            }\n            xnoise = 0.0;\n            ynoise += inc;\n        }\n    }\n\n    // dissolve\n    public dissolve(renderBuffer: Framebuffer, renderBuffer2: Uint32Array, time: number) {\n\n        if (time <= 5) {\n\n            // update mask for current scene\n            for (let y = 0; y < renderBuffer.height; y++) {\n                for (let x = 0; x < renderBuffer.width; x++) {\n                    const index = y * renderBuffer.width + x;\n                    const isBackground = (this.croudMask[y * renderBuffer.width + x] & 0xFF) < 0x80;\n                    if (isBackground) {\n                        this.croud[index] = renderBuffer2[index];\n                    }\n                    this.prevMask[index] = this.curMask[index] = this.croud[index] < 0;\n                    if (Math.random() > 0.90) {\n                        this.noiseMask[index] = !isBackground;\n                    }\n                }\n            }\n\n            // delete loose particles\n            this.particleArray.splice(0, this.particleArray.length);\n        }\n\n        for (let y = 0; y < renderBuffer.height; y++) {\n            for (let x = 0; x < renderBuffer.width; x++) {\n                const index = y * renderBuffer.width + x;\n                this.curMask[index] = this.croud[index] < time;\n                this.diff[index] = this.prevMask[index] != this.curMask[index];\n                this.prevMask[index] = this.curMask[index];\n\n                if (this.curMask[index]) {\n                    renderBuffer.framebuffer[index] = renderBuffer2[index];\n                }\n\n                if (this.diff[index]) {\n                    if (this.noiseMask[index]) {\n                        const particle = new Particle(x, y, renderBuffer[index], renderBuffer.width, renderBuffer.height);\n                        particle._color = renderBuffer.framebuffer[index];\n                        this.particleArray.push(particle);\n                    }\n                    renderBuffer.framebuffer[index] = 0xFFFFFFFF;\n                }\n            }\n        }\n\n        for (let it = 0; it < this.particleArray.length; it++) {\n            const p = this.particleArray[it];\n\n            if (!p.update()) {\n                this.particleArray.splice(it, 1); continue;\n            }\n            renderBuffer.framebuffer[p.y * renderBuffer.width + p.x] = Framebuffer.addColor(renderBuffer.framebuffer[p.y * renderBuffer.width + p.x], p._color);\n        }\n    }\n\n    private putpixel(x: number, y: number, color: number) {\n        this.transitionCircle[x + y * this.transitionFramebufferTo.width] = new Color(color, color, color, 255).toPackedFormat();\n    }\n\n    private drawCircle(x0: number, y0: number, radius: number, color: number) {\n        let x = 0;\n        let y = radius;\n        let d = -(radius >>> 1);\n\n        while (x <= y) {\n            this.putpixel(x + x0, y + y0, color);\n            this.putpixel(y + x0, x + y0, color);\n            this.putpixel(-x + x0, y + y0, color);\n            this.putpixel(-y + x0, x + y0, color);\n            this.putpixel(-x + x0, -y + y0, color);\n            this.putpixel(-y + x0, -x + y0, color);\n            this.putpixel(x + x0, -y + y0, color);\n            this.putpixel(y + x0, -x + y0, color);\n\n            if (d <= 0) {\n                x++;\n                d += x;\n            } else {\n                y--;\n                d -= y;\n            }\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now() - this.startTime;\n        framebuffer.clear();\n        this.blockFade(framebuffer, this.ledTexture.texture, this.ledTexture.width, time, 0);\n    }\n\n    /**\n     * Transitions from one effect to another using using \"transition\" value from JSRocket\n     *\n     * @param  {Framebuffer} framebuffer             pixels\n     * @param  {AbstractScene} transitionSceneFrom   previous effect\n     * @param  {AbstractScene} transitionSceneTo     effect we are transitioning to\n     * @param  {number} transitionMethod             transition effect to use (blend, wipe, crossfade, etc)\n     */\n    public transition(\n        framebuffer: Framebuffer,\n        transitionSceneFrom: AbstractScene,\n        transitionSceneTo: AbstractScene,\n        transitionMethod: TransitionMethods,\n        transitionValue: number,\n        time: number) {\n\n        // render the 'To' effect into the framebuffer\n        transitionSceneTo.render(this.transitionFramebufferTo, time);\n\n        // render 'From' effect into framebuffer\n        transitionSceneFrom.render(framebuffer, time);\n        // apply transition to framebuffer (fromEffect) using texture (toEffect) 0-255\n        switch (Math.trunc(transitionMethod)) {\n            case TransitionMethods.BLOCKFADE: // 0 - 12000\n                this.blockFade(framebuffer, this.transitionFramebufferTo.framebuffer, this.transitionFramebufferTo.width, Utils.map(transitionValue, 0, 255, 0, 12000), 0);\n                break;\n            case TransitionMethods.CROSSFADE: // 0 - 255\n                this.crossFade(framebuffer.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.DISSOLVE: // 0 - 255\n                this.dissolve(framebuffer, this.transitionFramebufferTo.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.FADEIN: // 0-255\n                this.fadeIn(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.FADEOUT: // 0-255\n                this.fadeOut(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.WIPE_LEFT: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionWipe);\n                break;\n            case TransitionMethods.CIRCLE: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionCircle);\n                break;\n            default: // 0 - 512\n                this.crossFade(framebuffer.framebuffer, Utils.map(transitionValue, 0, 255, 0, 12000));\n        }\n    }\n\n    public blockFade(framebuffer: Framebuffer, pixelArray: Uint32Array, pixelArrayWidth: number, time: number, startTime: number) {\n        const blockWidth = 20;\n        const horizontalUnits = Math.ceil(framebuffer.width / blockWidth);\n        const verticalUnits = Math.ceil(framebuffer.height / blockWidth);\n\n        const fadeArray = new Array<number>(horizontalUnits * verticalUnits);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                fadeArray[x + y * horizontalUnits] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, x * blockWidth, y * blockWidth, blockWidth, blockWidth, pixelArray, pixelArrayWidth,\n                    Interpolator.interpolate(startTime + fadeArray[x + y * horizontalUnits], startTime + fadeArray[x + y * horizontalUnits] + 700, time)\n                );\n            }\n        }\n    }\n\n    // blend entire image to another image\n    public crossFade(framebuffer: Uint32Array, alpha: number) {\n        for (let i = 0; i < framebuffer.length; i++) {\n            framebuffer[i] = Framebuffer.blend(\n                framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                alpha)\n        }\n    }\n\n    // transition using image\n    // https://github.com/Slynchy/SDL-AlphaMaskWipes/blob/master/Transition.h\n    public crossFadeImage(framebuffer: Framebuffer, alpha: number, transitionImage: Uint32Array) {\n        for (let i = 0; i < framebuffer.framebuffer.length; i++) {\n            framebuffer.framebuffer[i] = Framebuffer.blend(\n                framebuffer.framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                Utils.clamp(\n                    (alpha * 2) - (transitionImage[i] & 0xff),\n                    0, 255))\n        }\n    }\n\n    // fade in from solid color\n    public fadeIn(framebuffer: Framebuffer, alpha: number, startColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        startColor,\n                        this.transitionFramebufferTo.framebuffer[x + y * framebuffer.width],\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // fade out to solid color\n    public fadeOut(framebuffer: Framebuffer, alpha: number, endColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        framebuffer.framebuffer[x + y * framebuffer.width],\n                        endColor,\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // Alternating scanlines + RGB Distort /w external input\n    public renderScanlines(framebuffer: Framebuffer, shiftAmount: number) {\n        let i = 0;\n\n        const offRed = (2 * shiftAmount) << 0;\n        const offGreen = (5 * shiftAmount) << 0;\n        const offBlue = (2 * shiftAmount) << 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n\n            // horizontal scanlines * intensity\n            const strips = (y & 1) * 16;\n            const verticalPosition = y * framebuffer.width;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                const imagePixelR = framebuffer.framebuffer[Utils.clamp(x + offRed, 0, framebuffer.width - 1) + verticalPosition] & 0xFF;\n                const imagePixelG = framebuffer.framebuffer[Utils.clamp(x + offGreen, 0, framebuffer.width - 1) + verticalPosition] >> 8 & 0xFF;\n                const imagePixelB = framebuffer.framebuffer[Utils.clamp(x + offBlue, 0, framebuffer.width - 1) + verticalPosition] >> 16 & 0xFF;\n\n                framebuffer.framebuffer[i++] = new Color(\n                    Utils.clamp(imagePixelR - strips, 0, 255),\n                    Utils.clamp(imagePixelG - strips, 0, 255),\n                    Utils.clamp(imagePixelB - strips, 0, 255)).toPackedFormat();\n            }\n        }\n    }\n\n}\n","export class Particle {\n    public x: number;\n    public y: number;\n    public _color: number;\n\n    private _x: number;\n    private _y: number;\n    private dx: number;\n    private dy: number;\n\n    private TTL: number = Math.round(Math.random() * 50);\n    private time: number;\n    private isLiving: boolean;\n    private width: number;\n    private height: number;\n\n    constructor(x: number, y: number, _color: number, width: number, height: number) {\n        this._x = this.x = x;\n        this._y = this.y = y;\n\n        this.dx = 0;\n        this.dy = - (Math.random() * (3 - 0.1) + 0.1);\n        this.time = 0;\n        this._color = 0xFF000000 | _color;\n\n        this.isLiving = true;\n\n        this.width = width;\n        this.height = height;\n    }\n\n    update(): boolean {\n        if (!this.isLiving) return false;\n\n        this.x = Math.round((this._x += this.dx) + 0.5);\n        this.y = Math.round((this._y += this.dy) + 0.5);\n\n        const a = ((this.TTL - this.time) / this.TTL);\n        const r = Math.round((this._color >> 16 & 0xFF) * a + 0.5);\n        const g = Math.round((this._color >> 8 & 0xFF) * a + 0.5);\n        const b = Math.round((this._color & 0xFF) * a + 0.5);\n\n        this._color = 0xFF << 24 | r << 16 | g << 8 | b;\n\n        if (this.x < 0 || this.x >= this.width) this.isLiving = false;\n        if (this.y < 0 || this.y >= this.height) this.isLiving = false;\n        if (this.time++ >= this.TTL) this.isLiving = false;\n        return this.isLiving;\n    }\n}","export enum TransitionMethods {\n        FADEIN = 1,\n        FADEOUT = 2,\n        BLOCKFADE = 3,\n        CROSSFADE = 4,\n        CIRCLE = 5,\n        WIPE_LEFT = 6,\n        DISSOLVE = 7\n}","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class CubeScene extends AbstractScene {\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private fairlight: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/logo-fairlight-10.png'), false).then(texture => this.fairlight = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.fairlight.texture);\n        framebuffer.clearDepthBuffer();\n\n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 6.2  +Math.sin(elapsedTime * 0.05)*3;\n\n        return Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.08)*8, Math.sin(elapsedTime * 0.05)*6, -20).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.09)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","/*\nName          : Aisa Demo\nRelease Date  : TBD\nPlatform      : JavaScript\nCategory      : Demo\nNotes         : Software rendered effects written in Typescript\n*/\n\n// Core\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SoundManager } from '../../sound/SoundManager';\nimport { Color } from '../../core/Color';\nimport { BlockFade } from '../block-fade/BlockFade';\nimport { DoublyLinkedList } from '../../core/LinkedList';\nimport { DLNode } from '../../core/Node';\n\n// Stats\nimport Stats = require('stats.js');\n\n// Video Recording Tool\nimport { CanvasRecorder } from './canvas-record';\n\nexport class DemoScene {\n\n    // Sound Manager\n    private soundManager: SoundManager;\n\n    // Video Recorder\n    private canvasRecorder: CanvasRecorder;\n\n    // list of scenes\n    private sceneList: DoublyLinkedList<AbstractScene>;\n    private nodeInstance: DLNode<AbstractScene>;\n\n    // transitions\n    private BlockFade: BlockFade;\n\n    // stats\n    private stats: Array<Stats>;\n\n    // our main canvas\n    private canvasRef: HTMLCanvasElement;\n\n    // moving line marking current place in the timeline\n    private timelineRef: HTMLInputElement;\n\n    // displays which scene we're on\n    private sceneRef: HTMLSpanElement;\n\n    // displays time in seconds\n    private timeRef: HTMLSpanElement;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.soundManager = new SoundManager();\n\n        this.sceneList = new DoublyLinkedList();\n\n        this.initControls(framebuffer.width);\n\n        this.BlockFade = new BlockFade();\n\n        this.canvasRef = document.getElementById('aisa-canvas') as HTMLCanvasElement;\n\n        // initialize effects with progress\n        return this.allProgress([\n\n            // load music\n            // this.soundManager.loadMusic(require(`../../assets/sound/dubmood_-_cromenu1_haschkaka.xm`)),\n            this.soundManager.loadMusic(require(`../../assets/sound/showeroflove.mod`)),\n            // this.soundManager.loadMusic(require('../../assets/sound/NotMixedorMastered.ogg')),\n\n            // load *.rocket file for scene/music synchronization\n            this.soundManager.prepareSync(require('../../assets/sound/demo.rocket'), true),\n\n            // we use this for transitions\n            this.BlockFade.init(framebuffer),\n\n            // load and initialze effects\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene2').then(plug => this.initScene(framebuffer, plug)), // telephone\n            import('./parts/Scene3').then(plug => this.initScene(framebuffer, plug)), // title screen here\n            import('./parts/Scene4').then(plug => this.initScene(framebuffer, plug)), // pizza delivery guy\n            import('./parts/Scene5').then(plug => this.initScene(framebuffer, plug)), // replace with something else\n            import('./parts/Scene6').then(plug => this.initScene(framebuffer, plug)), // spikeball + plane deformation\n            import('./parts/Scene7').then(plug => this.initScene(framebuffer, plug)), // cube + rotozoomer\n            import('./parts/Scene8').then(plug => this.initScene(framebuffer, plug)), // ledplasma + voxelcubes\n            import('./parts/Scene9').then(plug => this.initScene(framebuffer, plug)), // blender camera\n            import('./parts/Scene10').then(plug => this.initScene(framebuffer, plug)), // MetalHeadzScene\n            import('./parts/Scene11').then(plug => this.initScene(framebuffer, plug)), // AbstractCube\n            import('./parts/Scene12').then(plug => this.initScene(framebuffer, plug)), // DofBallsScene\n            import('./parts/Scene13').then(plug => this.initScene(framebuffer, plug)), // TorusKnotTunnelScene\n            import('./parts/Scene14').then(plug => this.initScene(framebuffer, plug)), // GearsScene\n            import('./parts/Scene15').then(plug => this.initScene(framebuffer, plug)), // BakedLighting\n            import('./parts/Scene16').then(plug => this.initScene(framebuffer, plug)), // ParticleStreamsScene\n            import('./parts/Scene17').then(plug => this.initScene(framebuffer, plug)), // HoodlumScene\n            import('./parts/Scene18').then(plug => this.initScene(framebuffer, plug)), // TwisterScene\n            import('./parts/Scene19').then(plug => this.initScene(framebuffer, plug)), // RazorScene\n            import('./parts/Scene20').then(plug => this.initScene(framebuffer, plug)), // sinescroller\n\n        ], (percent: number) => {\n            // update the progress bar via canvas\n            const outputX = Math.ceil(framebuffer.width * percent);\n            framebuffer.drawRect2(0, (framebuffer.height / 2) - 5, outputX, 10, Color.WHITE.toPackedFormat());\n\n            // update the canvas\n            this.canvasRef.getContext('2d').putImageData(framebuffer.getImageData(), 0, 0);\n\n            // update memory usage\n            for (const p of this.stats) {\n                p.update();\n            }\n        });\n    }\n\n    /**\n     * Adds AbstractScenes to sceneList array and initializes it\n     *\n     * @param   {Framebuffer} framebuffer            scene initializes with information in framebuffer such as width and height\n     * @param   {Object} plug                        imported class\n     * @returns {Promise<any>}                       resolves promise after completion\n     */\n    private initScene(framebuffer: Framebuffer, plug: unknown, ...args: Array<any>): Promise<any> {\n        const constructorName = Object.keys(plug)[0];\n        const newNode: DLNode<AbstractScene> = new DLNode();\n        newNode.data = new plug[constructorName](...args);\n        this.sceneList.insert(newNode, this.sceneList.length - 1);\n        return newNode.data.init(framebuffer);\n    }\n\n    // this runs after init() has finished\n    public onInit(): void {\n\n        this.canvasRecorder = new CanvasRecorder();\n\n        // jump to last effect in timeline and set mute vs unmuted\n        this.soundManager.initTimeline();\n\n        // show debug / timeline navigator\n        document.getElementById('debug').style.display = 'block';\n    }\n\n    /**\n     * Setup debug tools for local development\n     */\n    private initControls(width: number) {\n        this.stats = new Array<Stats>();\n\n        // Stats - Memory in Megabytes\n        this.initStats(2, 0, width * 2);\n\n        // Stats - Frames per second\n        this.initStats(0, 50, width * 2);\n\n        // Stats - Milliseconds per frame\n        this.initStats(1, 100, width * 2);\n\n        document.getElementById('debug').style.width = `${width * 2}px`;\n\n        // Scene Playback Controls\n        const tickerPlayRef = document.getElementById('ticker_play');\n        const tickerStopRef = document.getElementById('ticker_stop');\n        const tickerNextRef = document.getElementById('ticker_next');\n        const tickerBackRef = document.getElementById('ticker_back');\n        const tickerRecordRef = document.getElementById('ticker_record');\n        const tickerScreenshotRef = document.getElementById('ticker_screenshot');\n        const tickerVolumeRef = document.getElementById('ticker_volume');\n\n        // timeline slider, scene and time display\n        this.timelineRef = document.getElementById('timeline') as HTMLInputElement;\n        this.sceneRef = document.getElementById('scene') as HTMLSpanElement;\n        this.timeRef = document.getElementById('time') as HTMLSpanElement;\n\n        // stop\n        tickerStopRef.addEventListener('click', () => {\n            this.soundManager.onPause();\n            this.soundManager.seek(0);\n\n            tickerPlayRef.classList.add('fa-play');\n            tickerPlayRef.classList.remove('fa-pause');\n\n            // save video if recoding\n            if (this.canvasRecorder.recording) {\n                tickerRecordRef.style.color = 'white';\n                this.canvasRecorder.saveVideo();\n            }\n        })\n\n        // record video\n        tickerRecordRef.addEventListener('click', () => {\n            if (!this.canvasRecorder.recording) {\n                // start audio and video recording\n                tickerRecordRef.style.color = 'red';\n                this.soundManager.onPlay();\n                this.canvasRecorder.recordVideo(this.soundManager.audioElement);\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                // pause audio and save video file\n                tickerRecordRef.style.color = 'white';\n                this.soundManager.onPause();\n                this.canvasRecorder.saveVideo();\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // play / pause\n        tickerPlayRef.addEventListener('click', () => {\n            if (!this.soundManager.isPlaying) {\n                this.soundManager.onPlay();\n                tickerPlayRef.setAttribute('title', 'pause');\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                this.soundManager.onPause();\n                tickerPlayRef.setAttribute('title', 'play');\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // toggle audio and save preference for subsequent reloads\n        tickerVolumeRef.addEventListener('click', () => {\n            this.soundManager.toggleSound(tickerVolumeRef, !this.soundManager.audioElement.muted);\n            localStorage.setItem('soundToggle', String(this.soundManager.audioElement.muted));\n        });\n\n        // save screenshot in PNG format\n        tickerScreenshotRef.addEventListener('click', () => {\n            const date = new Date();\n            const fileName = `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.png`;\n            const image = this.canvasRef.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            const anchor = document.createElement('a');\n            anchor.setAttribute('download', fileName);\n            anchor.setAttribute('href', image);\n            anchor.click();\n        })\n\n        // next\n        tickerNextRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.musicProperties.timeSeconds, 1, this.sceneList.length);\n        })\n\n        // back\n        tickerBackRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.musicProperties.timeSeconds, -1, this.sceneList.length);\n        })\n\n        // seek\n        this.timelineRef.addEventListener('input', (e) => {\n            const time = Number((e.target as HTMLInputElement).value);\n            this.soundManager.seek(time / 1000);\n        });\n\n        // seek with scrollwheel\n        document.addEventListener(\"wheel\", (e) => {\n            const directionToScroll = (e.deltaY < 0) ? -0.06 : 0.06;\n            this.soundManager.seek(this.soundManager.audioElement.currentTime + directionToScroll);\n            // prevent page scroll\n            e.preventDefault();\n            e.stopPropagation();\n        }, { passive: false })\n\n        // keyboard navigation controls\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            switch (e.key) {\n                case 'MediaStop':\n                    tickerStopRef.click();\n                    break;\n                // play or pause\n                case 'MediaPlayPause':\n                case ' ':\n                    tickerPlayRef.click();\n                    break;\n                // navigate timeline backward\n                case 'ArrowLeft':\n                    this.soundManager.seek(this.soundManager.audioElement.currentTime - 0.06);\n                    break;\n                // navigate timeline forward\n                case 'ArrowRight':\n                    this.soundManager.seek(this.soundManager.audioElement.currentTime + 0.06);\n                    break;\n                // jump to next effect\n                case 'MediaTrackNext':\n                case 'ArrowUp':\n                    this.soundManager.jump(this.soundManager.audioElement.currentTime, 1, this.sceneList.length);\n                    break;\n                // jump to previous effect\n                case 'MediaTrackPrevious':\n                case 'ArrowDown':\n                    this.soundManager.jump(this.soundManager.audioElement.currentTime, -1, this.sceneList.length);\n                    break;\n                // toggle full screen\n                case 'f':\n                    this.canvasRef.click();\n                    break;\n                // save a screenshot\n                case 's':\n                    tickerScreenshotRef.click();\n                    break;\n                // record video in webm format\n                case 'r':\n                    tickerRecordRef.click();\n                    break;\n                case 'd':\n                    break;\n            }\n        })\n    }\n\n    /**\n     * Runs all promises in an array and runs callback with percentage of completion\n     *\n     * @param   {Array<Promise<any>>} promises       array of promises to run\n     * @param   {Function} progressCallback          function sending percentage after individual promise is complete\n     * @returns {Promise<any>}                       promise resolve after all promises are complete\n     */\n    private allProgress(promises: Array<Promise<any>>, progressCallback: (percentage: number) => void): Promise<any> {\n        let d = 0;\n        for (const p of promises) {\n            p.then(() => {\n                d++;\n                progressCallback(d / promises.length);\n            });\n        }\n        return Promise.all(promises);\n    }\n\n    /**\n     * Adds JavaScript Performance Monitor and initializes it\n     *\n     * @param   {Object} args                        stat type[0-3], top in pixels, left in pixels\n     */\n    private initStats(...args: Array<number>) {\n        this.stats.push(new Stats());\n        const statsObj = this.stats[this.stats.length - 1];\n        statsObj.showPanel(args[0]);\n        statsObj.dom.style.cssText = `position:absolute;top:${args[1]}px;left:${args[2]}px;`;\n        document.body.appendChild(statsObj.dom);\n    }\n\n    public render(framebuffer: Framebuffer) {\n        // get time and values from music\n        this.soundManager.updateMusic();\n\n        // get which effect to run\n        this.nodeInstance = this.sceneList.getNode(this.soundManager.musicProperties.sceneData.effect);\n\n        // if \"transitionType\" in JSRocket is zero then run the effect by itself\n        if (this.soundManager.musicProperties.sceneData.transitionType === 0) {\n            this.nodeInstance.data.render(framebuffer, this.soundManager.musicProperties.timeMilliseconds)\n        } else {\n            // otherwise blend two effects together\n            this.BlockFade.transition(\n                framebuffer,\n                this.nodeInstance.data,\n                this.nodeInstance.next.data,\n                this.soundManager.musicProperties.sceneData.transitionType,\n                this.soundManager.musicProperties.sceneData.transitionValue,\n                this.soundManager.musicProperties.timeMilliseconds);\n        }\n\n        // comment out for release\n        this.drawStats();\n    }\n\n    /**\n     * Show FPS, Memory Usage and js rocket time and effect number\n     */\n    private drawStats() {\n        // update timeline marker\n        this.timelineRef.value = String(this.soundManager.musicProperties.timeMilliseconds);\n\n        // keep current time in local storage to stay in place during reloads\n        localStorage.setItem('lastTime', String(this.soundManager.musicProperties.timeSeconds));\n\n        if (!this.soundManager.syncDevice.connected && !this.soundManager.demoMode) {\n            console.error('Rocket not connected.');\n            return;\n        } else {\n            // get values from JS rocket\n            this.sceneRef.innerText = this.soundManager.musicProperties.sceneData.effect.toString();\n            this.timeRef.innerText = this.soundManager.musicProperties.timeSeconds.toFixed(2);\n        }\n        // update FPS and Memory usage\n        for (const p of this.stats) {\n            p.update();\n        }\n    }\n\n}\n","export class CanvasRecorder {\n\n    public recording: boolean;\n    private canvasRecordingOptions;\n    private canvasRecorder;\n    private audioTrack: MediaStreamTrack;\n\n    public constructor() {\n        this.recording = false;\n    }\n\n    public getType(filename: string) {\n        const ext = this.fileExtension(filename);\n        return ['mkv'].includes(ext) ? 'video/x-matroska;codecs=avc1' : 'video/webm';\n    }\n\n    private fileExtension(filename: string): string {\n        return filename.split('.').pop();\n    }\n\n    public createCanvasRecorder(canvas: HTMLCanvasElement, options = {}, audio: HTMLMediaElement) {\n        const date = new Date();\n        let link = null;\n\n        const {\n            filename = `Recording ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate = 25,\n            download = true,\n            recorderOptions = {\n                mimeType: 'video/x-matroska;codecs=avc1',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 2500000 // 2.5 Mbit/sec\n            }\n        } = {\n            ...options\n        };\n\n        const mimeType = recorderOptions.mimeType || this.getType(filename);\n\n        if (download) {\n            link = link || document.createElement('a');\n            link.download = filename;\n        }\n\n        let chunks = [];\n\n        let stream = canvas.captureStream(frameRate);\n\n        /*\n        if (!this.canvasRecorder) {\n            // get the audio track:\n            const ctx = new AudioContext();\n            const dest = ctx.createMediaStreamDestination();\n            const sourceNode = ctx.createMediaElementSource(audio);\n            sourceNode.connect(dest);\n            sourceNode.connect(ctx.destination);\n            this.audioTrack = dest.stream.getAudioTracks()[0];\n        }\n\n        stream.addTrack(this.audioTrack);\n        */\n\n        let recorder = new MediaRecorder(stream, { mimeType, ...recorderOptions });\n\n        recorder.ondataavailable = event => {\n            event.data.size && chunks.push(event.data);\n        };\n        recorder.onstop = () => {\n            if (download && chunks.length) {\n                const blob = new Blob(chunks, { type: mimeType });\n                const url = URL.createObjectURL(blob);\n                link.href = url;\n\n                const event = new MouseEvent('click');\n                link.dispatchEvent(event);\n                setTimeout(() => {\n                    URL.revokeObjectURL(url);\n                }, 1);\n            }\n        };\n\n        return {\n            start(timeslice) {\n                chunks = [];\n                recorder.start(timeslice);\n            },\n            set filename(name) {\n                link.download = name;\n            },\n            stop() {\n                recorder.stop();\n                return chunks;\n            },\n            dispose() {\n                recorder = null;\n                stream = null;\n            },\n            stream,\n            recorder\n        };\n    }\n\n    /**\n     * Records a video and sound using CanvasRecorder\n     */\n    public recordVideo(sound: HTMLMediaElement) {\n        console.info('recording video...');\n        this.recording = true;\n        const date = new Date();\n\n        // options\n        this.canvasRecordingOptions = {\n            filename: `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate: 60,\n            download: true,\n            recorderOptions: {\n                mimeType: 'video/webm',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 5000000 // 2.5 Mbit/sec\n            }\n        }\n\n        // Create canvas video recorder\n        const canvasObj = document.getElementById('aisa-canvas');\n        this.canvasRecorder = this.createCanvasRecorder(canvasObj as HTMLCanvasElement, this.canvasRecordingOptions, sound);\n        this.canvasRecorder.start();\n    }\n\n    public saveVideo() {\n        // Stop and dispose\n        this.canvasRecorder.stop();\n        this.canvasRecorder.dispose();\n        this.recording = false;\n        console.info(`saved video as ${this.canvasRecordingOptions.filename}`);\n    }\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\n\n// sideways 3D office scene\nexport class Scene1 {\n    private PlaneDeformationFloorScene = new PlaneDeformationScene(8, require('../../../assets/ground.png'));\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        return Promise.all([\n            this.PlaneDeformationFloorScene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlaneDeformationFloorScene.drawPlaneDeformation(framebuffer, 0, time >> 3);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { MetalHeadzScene } from '../../metalheadz/MetalHeadzScene';\n\nexport class Scene10 {\n    private MetalHeadzScene: MetalHeadzScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.MetalHeadzScene = new MetalHeadzScene();\n\n        return Promise.all([\n            this.MetalHeadzScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.MetalHeadzScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { AbstractCube } from '../../abstract-cube/AbstractCube';\n\nexport class Scene11 {\n    private AbstractCube: AbstractCube;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.AbstractCube = new AbstractCube();\n\n        return Promise.all([\n            this.AbstractCube.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.AbstractCube.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { DofBallsScene } from '../../dof-balls/DofBallsScene';\n\nexport class Scene12 {\n    private DofBallsScene: DofBallsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.DofBallsScene = new DofBallsScene();\n\n        return Promise.all([\n            this.DofBallsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.DofBallsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusKnotTunnelScene } from '../../torus-knot-tunnel/TorusKnotTunnelScene';\n\nexport class Scene13 {\n    private TorusKnotTunnelScene: TorusKnotTunnelScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusKnotTunnelScene = new TorusKnotTunnelScene();\n\n        return Promise.all([\n            this.TorusKnotTunnelScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusKnotTunnelScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { GearsScene } from '../../gears/GearsScene';\n\nexport class Scene14 {\n    private GearsScene: GearsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.GearsScene = new GearsScene();\n\n        return Promise.all([\n            this.GearsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.GearsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BakedLighting } from '../../baked-lighting/BakedLighting';\n\nexport class Scene15 {\n    private BakedLighting: BakedLighting;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BakedLighting = new BakedLighting();\n\n        return Promise.all([\n            this.BakedLighting.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.BakedLighting.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { ParticleStreamsScene } from '../../particle-streams/ParticleStreamsScene';\n\nexport class Scene16 {\n    private ParticleStreamsScene: ParticleStreamsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.ParticleStreamsScene = new ParticleStreamsScene();\n\n        return Promise.all([\n            this.ParticleStreamsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.ParticleStreamsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { HoodlumScene } from '../../hoodlum/HoodlumScene';\n\nexport class Scene17 {\n    private HoodlumScene: HoodlumScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.HoodlumScene = new HoodlumScene();\n\n        return Promise.all([\n            this.HoodlumScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.HoodlumScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TwisterScene } from '../../twister/TwisterScene';\n\nexport class Scene18 {\n    private TwisterScene: TwisterScene;\n    public init(): Promise<any> {\n\n        this.TwisterScene = new TwisterScene();\n\n        return Promise.all([\n            this.TwisterScene.init(),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TwisterScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RazorScene } from '../../razor/RazorScene';\n\nexport class Scene19 {\n    private RazorScene: RazorScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RazorScene = new RazorScene();\n\n        return Promise.all([\n            this.RazorScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RazorScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene2 {\n    private logo: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { SineScrollerScene } from '../../sine-scroller/SineScrollerScene';\n\nexport class Scene20 {\n    private SineScrollerScene: SineScrollerScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.SineScrollerScene = new SineScrollerScene();\n\n        return Promise.all([\n            this.SineScrollerScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.SineScrollerScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene3 {\n    private logo: Texture;\n    private background: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.background = texture\n            ),\n            TextureUtils.load(require('../../../assets/logos/pizza_express.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.background.height / 2)) | 0, this.background, 1.0);\n\n        framebuffer.drawTexture(\n            ((framebuffer.width / 2) - (this.logo.width / 2)) | 0,\n            ((framebuffer.height / 2) - (this.logo.height / 2)) | 0,\n            this.logo,\n            1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\nimport { PlasmaScene } from '../../plasma/PlasmaScene';\n\n// pizza being delivered\nexport class Scene4 {\n\n    private pizza: Texture;\n    private image: Texture;\n    private PlasmaScene: PlasmaScene;\n\n    public init(): Promise<any> {\n        this.PlasmaScene = new PlasmaScene();\n\n        return Promise.all([\n            // https://www.pngkey.com/detail/u2r5r5o0o0e6a9i1_sign-up-for-deals-pizza-delivery-guy-png/\n            TextureUtils.load(require('../../../assets/logos/pizza-delivery.png'), true).then(\n                (texture: Texture) => this.pizza = texture\n            ),\n            TextureUtils.load(require('../../../assets/lsd.png'), true).then(\n                (texture: Texture) => this.image = texture\n            ),\n            this.PlasmaScene.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlasmaScene.render(framebuffer, time);\n        framebuffer.drawTexture(50,  ((framebuffer.height / 2) - (this.image.height / 2)) | 0, this.image, 1.0);\n        framebuffer.drawTexture(framebuffer.width - this.pizza.width, (framebuffer.height ) - (this.pizza.height ) | 0, this.pizza, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusScene } from '../../torus/TorusScene';\n\nexport class Scene5 {\n    private TorusScene: TorusScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusScene = new TorusScene();\n\n        return Promise.all([\n            this.TorusScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\nimport { DistortedSphereScene } from '../../distorted-sphere/DistortedSphereScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class Scene6 {\n    private PlaneDeformationScene: PlaneDeformationScene;\n    private DistortedSphereScene: DistortedSphereScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.PlaneDeformationScene = new PlaneDeformationScene(3, require('../../../assets/textures/checker.png'));\n        this.DistortedSphereScene = new DistortedSphereScene();\n\n        return Promise.all([\n            this.DistortedSphereScene.init(framebuffer),\n            this.PlaneDeformationScene.init(framebuffer),\n            // https://www.pngitem.com/middle/iwTwxh_face-facial-hair-sitting-tongue-fear-woman-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick-2.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.PlaneDeformationScene.render(framebuffer, time);\n        this.DistortedSphereScene.renderTransparent(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RotoZoomerScene } from '../../roto-zoomer/RotoZoomerScene';\nimport { CubeScene } from '../../cube/CubeScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene7 {\n    private RotoZoomerScene: RotoZoomerScene;\n    private CubeScene: CubeScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RotoZoomerScene = new RotoZoomerScene();\n        this.CubeScene = new CubeScene();\n\n        return Promise.all([\n            this.CubeScene.init(framebuffer),\n            this.RotoZoomerScene.init(),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RotoZoomerScene.render(framebuffer, time);\n        this.CubeScene.renderBackground(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { VoxelBallsScene } from '../../voxel-balls/VoxelBallsScene';\nimport { LedPlasmaScene } from '../../led-plasma/LedPlasmaScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene8 {\n    private VoxelBallsScene: VoxelBallsScene;\n    private LedPlasmaScene: LedPlasmaScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.VoxelBallsScene = new VoxelBallsScene();\n        this.LedPlasmaScene = new LedPlasmaScene();\n\n        return Promise.all([\n            this.LedPlasmaScene.init(),\n            this.VoxelBallsScene.init(framebuffer),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.LedPlasmaScene.render(framebuffer, time);\n        this.VoxelBallsScene.renderTransparent(framebuffer, time);\n        // framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BlenderCameraScene } from '../../blender-camera-animation/BlenderCameraScene';\nexport class Scene9 {\n    private BlenderCameraScene: BlenderCameraScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BlenderCameraScene = new BlenderCameraScene();\n\n        return Promise.all([\n            this.BlenderCameraScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(0);\n        framebuffer.clearDepthBuffer();\n        this.BlenderCameraScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { Vertex } from '../../Vertex';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\ninterface IndexMesh {\n    points: Array<Vector4f>,\n    points2: Array<Vector4f>,\n    normals: Array<Vector4f>,\n    normals2: Array<Vector4f>,\n    index: Array<number>\n}\n\nexport class DistortedSphereScene extends AbstractScene {\n\n    private heightmapSphere: Texture;\n\n    private env: Texture;\n    private obj: IndexMesh;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/heightmapSphere.png'), false).then(\n                texture => this.heightmapSphere = texture\n            ),\n            TextureUtils.load(require('../../assets/envmap.png'), false).then(\n                texture => this.env = texture\n            ),\n        ]).then(\n            () => {\n                this.obj = this.createSphereDistplaced(this.heightmapSphere);\n            });\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(Color.BLACK.toPackedFormat());\n        this.renderTransparent(framebuffer, time);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.env);\n        const scale: number = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(time * 0.0001)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(time * 0.0001)));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10 - (Math.sin(time * 0.0006) * 0.5 + 0.5) * 6)\n            .multiplyMatrix(modelViewMartrix);\n        framebuffer.clearDepthBuffer();\n        this.shadingSphereEnvDisp2(framebuffer, time * 0.0004, modelViewMartrix);\n    }\n\n    public createSphere() {\n\n        const pointsA: Array<Vector4f> = [\n            new Vector4f(0.0, -1.0, 0.0),\n            new Vector4f(1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, 1.0),\n            new Vector4f(-1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, -1.0),\n            new Vector4f(0.0, 1.0, 0.0)\n        ];\n\n        const indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        const k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        const points: Array<Vector4f> = [];\n        const points2: Array<Vector4f> = [];\n        const normals: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n\n        const index: Array<number> = [];\n\n        k.index.forEach(i => {\n            const p = k.points[i];\n\n            const point = points.find(findPoint => findPoint.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector4f(0, 0, 0));\n            normals2.push(new Vector4f(0, 0, 0));\n            points2.push(new Vector4f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public divideSphere(points: Array<Vector4f>, index: Array<number>, steps: number) {\n\n        const points2: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n        const index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points[index[i]];\n            const v2 = points[index[i + 1]];\n            const v3 = points[index[i + 2]];\n\n            const vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            const vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            const vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n\n    public createSphereDistplaced(texture: Texture) {\n        const sphere: {\n            points: Array<Vector4f>,\n            points2: Array<Vector4f>,\n            normals: Array<Vector4f>,\n            normals2: Array<Vector4f>,\n            index: Array<number>\n        } = this.createSphere();\n        const newPoints: Array<Vector4f> = new Array<Vector4f>();\n        sphere.points.forEach((point) => {\n            const x = point.x;\n            const y = point.y;\n            const z = point.z;\n            const u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            const v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            const disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public shadingSphereEnvDisp2(framebuffer: Framebuffer, elapsedTime: number, modelViewMartrix: Matrix4f): void {\n        const result = this.obj;\n\n\n        for (let i = 0; i < result.points.length; i++) {\n            const y = result.points[i].z;\n            const x = result.points[i].x;\n            const length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + Math.max(20 - length * 2, 0) * 0.06 + elapsedTime * 0.9) * 4.5;\n            rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        const points = result.points2;\n        const index = result.index;\n        const normals = result.normals;\n\n        const norm: Vector4f = new Vector4f(0, 0, 0);\n        const norm2: Vector4f = new Vector4f(0, 0, 0);\n        const cross: Vector4f = new Vector4f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            const v1: Vector4f = points[index[i]];\n            const v2: Vector4f = points[index[i + 1]];\n            const v3: Vector4f = points[index[i + 2]];\n\n\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            const normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        const points2: Array<Vector4f> = result.points2;\n        const normals2: Array<Vector4f> = result.normals2;\n\n        const normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyHomArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            points2[p].x = Math.round((framebuffer.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((framebuffer.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        const vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        const vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        const vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        const vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const n1 = normals2[index[i]];\n\n            const v2 = points2[index[i + 1]];\n            const n2 = normals2[index[i + 1]];\n\n            const v3 = points2[index[i + 2]];\n            const n3 = normals2[index[i + 2]];\n\n            if (framebuffer.isTriangleCCW(v1, v2, v3)) {\n\n                vertexArray[0].projection = v1;\n                framebuffer.fakeSphere(n1, vertex1);\n\n                vertexArray[1].projection = v2;\n                framebuffer.fakeSphere(n2, vertex2);\n\n                vertexArray[2].projection = v3;\n                framebuffer.fakeSphere(n3, vertex3);\n\n                if (v1.x < framebuffer.minWindow.x ||\n                    v2.x < framebuffer.minWindow.x ||\n                    v3.x < framebuffer.minWindow.x ||\n                    v1.x > framebuffer.maxWindow.x ||\n                    v2.x > framebuffer.maxWindow.x ||\n                    v3.x > framebuffer.maxWindow.x ||\n                    v1.y < framebuffer.minWindow.y ||\n                    v2.y < framebuffer.minWindow.y ||\n                    v3.y < framebuffer.minWindow.y ||\n                    v1.y > framebuffer.maxWindow.y ||\n                    v2.y > framebuffer.maxWindow.y ||\n                    v3.y > framebuffer.maxWindow.y) {\n\n\n                    this.texturedRenderingPipeline.clipConvexPolygon(framebuffer, vertexArray);\n                } else {\n                    this.texturedRenderingPipeline.triangleRasterizer.drawTriangleDDA(framebuffer, vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nexport class DofBallsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n    private start: number;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.start = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.load(require('../../assets/spriteBlur.png'), true).then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleTorus(framebuffer, time, this.particleTexture2, true);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.60);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public computeDepthBlur(\n        nearPlane: number,\n        focalPlane: number,\n        farPlane: number, depth: number): number {\n\n        let f: number;\n\n        if (depth > focalPlane) {\n            f = (depth - focalPlane) / (nearPlane - focalPlane);\n        } else {\n            f = (depth - focalPlane) / (farPlane - focalPlane);\n        }\n        return Math.min(f, 1.0);\n    }\n\n    public drawParticleTorus(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        framebuffer.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const radi = 5.2;\n\n        for (let i = 0; i < num; i++) {\n            const x = radi * Math.cos(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n            const y = (i - num * 0.5) * 0.4;\n            const z = radi * Math.sin(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n\n            points.push(new Vector3f(x, y, z));\n        }\n\n        const modelViewMartrix: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.0004)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.0004)));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach((element: Vector3f) => {\n            points2.push(framebuffer.project(modelViewMartrix.multiply(element)));\n        });\n\n        points2.sort((a: Vector3f, b: Vector3f) => a.z - b.z);\n\n        points2.forEach((element: Vector3f) => {\n            const size: number = -(2.9 * 292 / (element.z));\n            const spriteNum: number = Math.round(this.computeDepthBlur(0, -15, -70, element.z) * 13);\n\n            framebuffer.drawParticle2Sub(\n                element.x - size / 2,\n                element.y - size / 2,\n                size, size, texture, 1 / element.z, 1.0, spriteNum, 128\n            );\n        });\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\n\nexport class GearsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n    private gearsMesh: Array<FlatshadedMesh>;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/gear.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.gearsMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene4(framebuffer, time);\n        /*  [\n              { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n              { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n              { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n              { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n              { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n          ], this.dirt);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene4(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -21).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let scale: number = 0.1 * 2.1 * 2.1;\n        let factor: number = 2.1 - 0.09 - 0.09;\n        const fade: number = 0.09;\n        const dampFactor: number = Math.sin(elapsedTime * 0.00001) * 0.5 + 0.5;\n        for (let i: number = 1; i < 6; i++) {\n            scale *= factor;\n            factor -= fade;\n\n            const mv: Matrix4f = this.getModelViewMatrix(camera, dampFactor, scale, i, elapsedTime);\n\n            this.renderingPipeline.draw(framebuffer, this.gearsMesh[0], mv);\n        }\n        // let lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n        // framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n    private getModelViewMatrix(camera: Matrix4f, dampFactor: number, scale: number, i: number,\n        elapsedTime: number): Matrix4f {\n        const modelViewMartrix: Matrix4f =\n            Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.0005 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                    Matrix4f.constructScaleMatrix(scale, scale, scale)));\n\n        return camera.multiplyMatrix(modelViewMartrix);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { Interpolator } from '../../math/Interpolator';\n\nexport class HoodlumScene extends AbstractScene {\n\n    private blurred: Texture;\n    private lab2: Texture;\n    private noise: Texture;\n    private particleTexture2: Texture;\n    private spaceLabMesh: Array<TexturedMesh>;\n    private hoodlumLogoMesh: Array<FlatshadedMesh>;\n    private accumulationBuffer: Uint32Array;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/lab2.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.spaceLabMesh = mesh\n            ),\n            BlenderLoader.load(require('../../assets/jsx/hoodlum2018.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.hoodlumLogoMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/lab2.png'), false).then(texture => this.lab2 = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n            this.createProceduralTexture3().then(texture => this.particleTexture2 = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        framebuffer.setCullFace(CullFace.BACK);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.lab2);\n\n        this.drawBlenderScene9(framebuffer, time, this.particleTexture2);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene9(framebuffer: Framebuffer, elapsedTime: number, texture3: Texture): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.spaceLabMesh);\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        const model = this.hoodlumLogoMesh[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                const y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                const scale2 = (1 + 4 * Interpolator.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                const x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                const z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach(element => {\n            const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            const size = -(4.3 * 192 / (element.z));\n            framebuffer.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public createProceduralTexture3(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class LedPlasmaScene extends AbstractScene {\n\n    private ledTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/led.png'), false).then(\n                (texture: Texture) => this.ledTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.led(framebuffer, time, this.ledTexture);\n    }\n\n    // TODO: create interesting pattern!\n    public led(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        const time = elapsedTime * 0.0007 * 1.0;\n        const lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        const radialWaveCenter = new Vector3f(40.0 / 2.0, 35.0 / 2.0, 0).add(new Vector3f(40.0 / 2.0 *\n            Math.sin(-time * 1.2), 35.0 / 2.0 * Math.cos(-time * 1.2), 0));\n        const difference: Vector3f = new Vector3f(0, 0, 0);\n\n        const horizontalUnits = Math.ceil(framebuffer.width / 8);\n        const verticalUnits = Math.ceil(framebuffer.height / 8);\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                const directionalWave = (Math.sin((x * lineDirection.x + y * lineDirection.y) * 0.8 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                const radialWave = (Math.cos(difference.length() * 0.7) + 1.0) * 0.5;\n                const waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                const intensity = ((waveSum * 15) | 0) % 16;\n                framebuffer.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture, TextureUtils } from '../../texture';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { LensFlare } from '../../special-effects/LensFlare';\n\nexport class MetalHeadzScene extends AbstractScene {\n\n    private metalheadz: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private noise: Texture;\n    private dirt: Texture;\n    private skyBox: SkyBox;\n\n    private blenderObjMetal: any;\n\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n        // TODO:\n        // make classes for assets\n        // lens flare, 3d modell\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/metalheadz.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObjMetal = mesh\n            ),\n            TextureUtils.load(require('../../assets/metalheadz.png'), false).then(\n                (texture: Texture) => this.metalheadz = texture\n            ),\n            TextureUtils.load(require('../../assets/ring.png'), true).then(\n                (texture: Texture) => this.texture11 = texture\n            ),\n            TextureUtils.load(require('../../assets/bokeh.png'), true).then(\n                (texture: Texture) => this.texture13 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n            TextureUtils.load(require('../../assets/dirt.png'), true).then(\n                (texture: Texture) => this.dirt = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        const elapsedTime: number = 0.2 * time;\n\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = this.computeCameraMovement(elapsedTime);\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 7));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.metalheadz);\n\n        const renderingPipeline: TexturingRenderingPipeline = this.texturedRenderingPipeline;\n\n        renderingPipeline.setModelViewMatrix(mv);\n        renderingPipeline.drawMeshArray(framebuffer, this.blenderObjMetal);\n\n        const scale: number = 20;\n        const lensflareScreenSpace: Vector3f =\n            framebuffer.project(camera.getRotation().multiply(new Vector3f(1.1 * scale, 2 * scale, -0.9 * scale)));\n\n        LensFlare.drawLensFlare(framebuffer, lensflareScreenSpace, elapsedTime * 1.2, [\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    private computeCameraMovement(elapsedTime: number): Matrix4f {\n        return Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17)\n            .multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0008).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0009).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 0, 0)\n                    )\n                )\n            );\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f, Matrix4f, Matrix3f } from '../../math';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture';\nimport { Interpolator } from '../../math/Interpolator';\n\nexport class ParticleStreamsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture().then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleStreams(framebuffer, time, this.particleTexture2);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.55);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            const radius = 2.8;\n            const radius2 = 2.9 + 3 * Math.sin(Math.PI * 2 * i / num - elapsedTime * 0.002);\n\n            for (let j = 0; j < num2; j++) {\n\n                const x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                const y = Math.cos(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius + 8 + radius2;\n                const z = Math.sin(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius;\n\n                points.push(Matrix3f.constructXRotationMatrix(Math.PI * 2 * i / num - Math.sin(elapsedTime * 0.0003 + Math.PI * 2 * i / num)).multiply(new Vector3f(x, y, z)));\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n                Matrix4f.constructZRotationMatrix(Math.PI * 0.17).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(elapsedTime * 0.00015).multiplyMatrix(\n                        Matrix4f.constructXRotationMatrix(Math.PI * 2 / 3 * i + elapsedTime * 0.0006)))\n            );\n\n            const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort((a, b) => {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                // let size = -(2.0 * 192 / (element.z));\n                const size = -(1.3 * 192 / (element.z));\n                if (element.z < -4)\n                    framebuffer.drawParticleNoDepth(\n                        Math.round(element.x - size / 2),\n                        Math.round(element.y - size / 2),\n                        Math.round(size), Math.round(size), texture, Interpolator.interpolate(-90, -55, element.z));\n            });\n        }\n    }\n\n\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\n\n/**\n * Plane deformation\n *\n * 2D plane deformations using lookup tables was a great\n * way to get smooth animations of complex calculations\n * running on slower processors. These effects were very\n * common in the 90s demoscene.\n *\n * The idea was to take a texture and deform it using a\n * pre-calculated math reference table. Different formulas\n * gave different effects such as fake 3d tunnels, wormholes\n * and landscapes.\n *\n * https://www.iquilezles.org/www/articles/deform/deform.htm\n *\n */\n\nexport class PlaneDeformationScene {\n\n    private mLUT: Int32Array;\n    public texture: Texture;\n\n    constructor(\n        private effectStyle: number,\n        private texturePath: string\n    ) {\n    }\n\n    onInit() { }\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.texturePath, false).then(\n                (texture: Texture) => {\n                    this.texture = texture;\n                    this.createLUT(this.effectStyle, framebuffer.width, framebuffer.height, this.texture.width, this.texture.height);\n                }\n            ),\n        ]);\n\n    }\n\n    // fill math lookup table values with crazy values\n    public createLUT(effectStyle: number, effectWidth: number, effectHeight: number, textureWidth: number, textureHeight: number): Promise<any> {\n\n        // initializae lookup array\n        this.mLUT = new Int32Array(3 * effectWidth * effectHeight);\n\n        // increment placeholder\n        let k = 0;\n\n        // u and v are euclidean coordinates\n        let u = 0;\n        let v = 0\n        let bright = 0;\n\n        for (let j = 0; j < effectHeight; j++) {\n            const y = -1.00 + 2.00 * j / effectHeight;\n            for (let i = 0; i < effectWidth; i++) {\n                const x = -1.00 + 2.00 * i / effectWidth;\n                const d = Math.sqrt(x * x + y * y);\n                const a = Math.atan2(y, x);\n\n                const r = d;\n                switch (effectStyle) {\n                    case 1:   // stereographic projection / anamorphosis\n                        u = Math.cos(a) / d;\n                        v = Math.sin(a) / d;\n                        bright = -50 * (2 / (6 * r + 3 * x));\n                        break;\n                    case 2:  // hypnotic rainbow spiral\n                        v = Math.sin(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        u = Math.cos(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        bright = 1;\n                        break;\n                    case 3:  // rotating tunnel\n                        v = 2 / (6 * r + 3 * x);\n                        u = a * 3 / Math.PI;\n                        bright = 25 * -v;\n                        break;\n                    case 4:  // wavy star-burst\n                        v = (-0.4 / r) + .1 * Math.sin(8 * a);\n                        u = .5 + .5 * a / Math.PI;\n                        bright = 0;\n                        break;\n                    case 5:  // hyper-space travel\n                        u = (0.02 * y + 0.03) * Math.cos(a * 3) / r;\n                        v = (0.02 * y + 0.03) * Math.sin(a * 3) / r;\n                        bright = 0;\n                        break;\n                    case 6:  // five point magnetic flare\n                        u = 1 / (r + 0.5 + 0.5 * Math.sin(5 * a));\n                        v = a * 3 / Math.PI;\n                        bright = 0;\n                        break;\n                    case 7:  // cloud like dream scroll\n                        u = 0.1 * x / (0.11 + r * 0.5);\n                        v = 0.1 * y / (0.11 + r * 0.5);\n                        bright = 0;\n                        break;\n                    case 8:  // floor and ceiling with fade to dark horizon\n                        u = x / Math.abs(y);\n                        v = 1 / Math.abs(y);\n                        bright = 40 * -v;\n                        break;\n                    case 9:  // hot magma liquid swirl\n                        u = 0.5 * (a) / Math.PI;\n                        v = Math.sin(2 * r);\n                        bright = 0;\n                        break;\n                    case 10:  // clockwise flush down the toilet\n                        v = Math.pow(r, 0.1);\n                        u = (1 * a / Math.PI) + r;\n                        bright = 0;\n                        break;\n                    case 11:  // 3D ball\n                        v = x * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        u = y * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        bright = 7 * -18.7 * (x + y + r * r - (x + y - 1) * Math.sqrt(4 - 5 * r * r) / 3) / (r * r + 1);\n                        break;\n                    default:  // show texture with no deformation or lighting\n                        u = x;\n                        v = y;\n                        bright = 0;\n                        break;\n                }\n                this.mLUT[k++] = (textureWidth * u) & textureWidth - 1;\n                this.mLUT[k++] = (textureHeight * v) & textureHeight - 1;\n                this.mLUT[k++] = Utils.clamp(bright, -255, 255);\n            }\n        }\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // this.drawOldPlaneDeformationStar(framebuffer, time >> 3);\n        // this.drawOldPlaneDeformationFloor(framebuffer, time >> 3);\n        this.drawPlaneDeformation(framebuffer, time >> 3, time >> 3);\n    }\n\n    /**\n     * For every frame, go through every pixel and use the reference table (mLUT)\n     * to get which pixel of the texture it should draw at the current pixel.\n     *\n     * TODO:\n     * - Rotate effect via rotozoomer class\n     *   use drawOldPlaneDeformationStar to add another lookup layer [mLUT * 4]\n     *   use drawOldPlaneDeformationFloor to update createLUT(8) floor algorithm\n     *\n     */\n    drawPlaneDeformation(framebuffer: Framebuffer, elapsedTimeY: number, elapsedTimeX: number) {\n\n        for (let pixelCount = 0; pixelCount < framebuffer.framebuffer.length; pixelCount++) {\n            const o = (pixelCount << 1) + pixelCount; // equivalent to 3 * pixelCount\n            const u = this.mLUT[o + 0] + elapsedTimeX; // to look like its animating, add timeDisplacement\n            const v = this.mLUT[o + 1] + elapsedTimeY;\n            const adjustBrightness = this.mLUT[o + 2]; // fade out\n\n            // get the R,G,B values from texture\n            let currentPixel = this.texture.texture[this.texture.width * (v & this.texture.height - 1) + (u & this.texture.width - 1)];\n\n            // only apply brightness if it was calculated\n            if (adjustBrightness !== 0) {\n\n                // disassemble pixel using bit mask to remove color components for greater speed\n                let r = currentPixel & 0xFF;        // get red\n                let g = currentPixel >> 8 & 0xFF;   // get green\n                let b = currentPixel >> 16 & 0xFF;  // get blue\n\n                // make darker or brighter\n                r += adjustBrightness;\n                g += adjustBrightness;\n                b += adjustBrightness;\n\n                // constrain RGB to make sure they are within 0-255 color range\n                r = Utils.clamp(r, 0, 255);\n                g = Utils.clamp(g, 0, 255);\n                b = Utils.clamp(b, 0, 255);\n\n                // reassemble colors back into pixel\n                currentPixel = new Color(r, g, b, 255).toPackedFormat();\n            }\n\n            // put texture pixel on buffer screen\n            framebuffer.framebuffer[pixelCount] = currentPixel;\n        }\n    }\n\n    /**\n     *\n     * Previous Plane deformation without lookup tables for reference\n     *\n     * http://sol.gfxile.net/gp/ch17.html\n     * TODO:\n     * - better textures\n     * - precalc lookup tables\n     * - fadeout\n     * - substraction to create black holes\n     */\n    drawOldPlaneDeformationFloor(framebuffer: Framebuffer, elapsedTime: number) {\n        /*\n        mLUT(8)\n            u = x / Math.abs(y);\n            v = 1 / Math.abs(y);\n            bright = 10 * -v;\n        */\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            const ydist = (y - framebuffer.height / 2);\n            const v = (((1 / Math.abs(ydist / 100 * 0.02) + elapsedTime * 0.069) % 256) + 256) % 256;\n            const alpha = 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2));\n                const u = (((((xdist / framebuffer.width) / Math.abs(ydist / 100 * 0.02))) % 256) + 256) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawOldPlaneDeformationStar(framebuffer: Framebuffer, elapsedTime: number) {\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2)) / (framebuffer.width / 2);\n                const ydist = (y - framebuffer.height / 2) / (framebuffer.height / 2);\n                const alpha = 1;// 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n                const a = Math.atan2(ydist, xdist) + elapsedTime * 0.0004;\n                const v = (a * 3 / Math.PI + elapsedTime * 0.0004) * 128 % 256;\n                const d = Math.sqrt(xdist * xdist + ydist * ydist);\n                const u = (1 / (d + 0.5 + 0.5 * Math.sin(5 * a)) * 32 + elapsedTime * 0.03) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f } from '../../math';\nimport { Color } from '../../core/Color';\n\nexport class PlasmaScene extends AbstractScene {\n\n    private GRADIENTLEN = 1500;\n\n    // swing/wave function parameters\n    private SWINGLEN = this.GRADIENTLEN * 3;\n    private SWINGMAX = this.GRADIENTLEN / 2 - 1;\n\n    // gradient & swing curve arrays\n    private colorGrad: Array<number>;\n    private swingCurve: Array<number>;\n\n    public init(): Promise<any> {\n        this.makeGradient(this.GRADIENTLEN);\n        this.makeSwingCurve(this.SWINGLEN, this.SWINGMAX);\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawPlasma(framebuffer, time);\n        // this.drawOldSchoolPlasma(framebuffer, Date.now());\n    }\n\n    // fill the given array with a nice swingin' curve\n    // three cos waves are layered together for that\n    // the wave \"wraps\" smoothly around\n    makeSwingCurve(arrlen: number, maxval: number) {\n        const factor1 = 2;\n        const factor2 = 3;\n        const factor3 = 6;\n\n        this.swingCurve = new Array<number>(this.SWINGLEN);\n\n        const halfmax = maxval / factor1;\n\n        for (let i = 0; i < arrlen; i++) {\n            const ni = i * (Math.PI * 2) / arrlen; // ni goes [0..TWO_PI] -> one complete cos wave\n            this.swingCurve[i] = Math.round(\n                Math.cos(ni * factor1) *\n                Math.cos(ni * factor2) *\n                Math.cos(ni * factor3) *\n                halfmax + halfmax);\n        }\n    }\n\n    // create a smooth, colorful gradient by cosinus curves in the RGB channels\n    makeGradient(arrlen: number) {\n        // random between 1 and 5\n        const rf = 2;\n        const gf = 4;\n        const bf = 4;\n\n        // random between 0 and gradient length\n        const rd = 818; // 0;\n        const gd = 1095; // arrlen / gf;\n        const bd = 1351; // arrlen / bf / 2;\n\n        this.colorGrad = new Array<number>(this.GRADIENTLEN);\n\n        // fill gradient array\n        for (let i = 0; i < arrlen; i++) {\n            const r = this.cos256(arrlen / rf, i + rd);\n            const g = this.cos256(arrlen / gf, i + gd);\n            const b = this.cos256(arrlen / bf, i + bd);\n            this.colorGrad[i] = new Color(r, g, b, 255).toPackedFormat();\n        }\n    }\n\n    // helper: get cosinus sample normalized to 0..255\n    private cos256(amplitude: number, x: number) {\n        return Math.trunc(Math.cos(x * (Math.PI * 2) / amplitude) * 127 + 127);\n    }\n\n    // helper: get a swing curve sample\n    private swing(i: number) {\n        return this.swingCurve[i % this.SWINGLEN];\n    }\n\n    // helper: get a gradient sample\n    private gradient(i: number) {\n        return this.colorGrad[i % this.GRADIENTLEN];\n    }\n\n    drawPlasma(framebuffer: Framebuffer, time: number) {\n        let i = 0;\n        const t = Math.trunc(time >> 3);\n        const swingT = this.swing(t);\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            const swingY = this.swing(y);\n            const swingYT = this.swing(y + t);\n            for (let x = 0; x < framebuffer.width; x++) {\n                // this is where the magic happens: map x, y, t around\n                // the swing curves and lookup a color from the gradient\n                // the \"formula\" was found by a lot of experimentation\n                framebuffer.framebuffer[i++] = this.gradient(this.swing(\n                    this.swing(x + swingT) + swingYT) +\n                    this.swing(this.swing(x + t) + swingY));\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Dodecahedron } from '../../geometrical-objects/Dodecahedron';\nimport { Pyramid } from '../../geometrical-objects/Pyramid';\nimport { Sphere } from '../../geometrical-objects/Sphere';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { LensFlare } from '../../special-effects/LensFlare';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class RazorScene extends AbstractScene {\n\n    private texture10: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private dirt: Texture;\n    private noise: Texture;\n\n    private cube: Cube;\n    private dodecahedron: Dodecahedron;\n    private pyramid: Pyramid;\n    private icosahedron: Sphere; // Icosahedron;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.cube = new Cube();\n        this.dodecahedron = new Dodecahedron();\n        this.pyramid = new Pyramid();\n        this.icosahedron = new Sphere(6, 10);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/spark.png'), true).then(texture => this.texture10 = texture),\n            TextureUtils.load(require('./assets/ring.png'), true).then(texture => this.texture11 = texture),\n            TextureUtils.load(require('./assets/bokeh.png'), true).then(texture => this.texture13 = texture),\n            TextureUtils.load(require('./assets/dirt.png'), true).then(texture => this.dirt = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.reproduceRazorScene(framebuffer, time * 0.0025, [\n            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        // framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.drawScaledTextureClipBi(0, 0, framebuffer.width, framebuffer.height, texture3, .75);\n\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise, 0.04);\n    }\n\n    public reproduceRazorScene(framebuffer: Framebuffer, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f;\n\n        const camera = Matrix4f.constructTranslationMatrix(0, 0, -6.4 - 5 * (Math.sin(elapsedTime * 0.06) * 0.5 + 0.5)).multiplyMatrix(\n            Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.08) * 0.5 + 0.5) * 0.5).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.1)));\n\n        let scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            modelViewMartrix);\n\n\n        let model = this.dodecahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        const yDisplacement = -1.5;\n        const distance = 2.8;\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.icosahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        // TODO:  store Mesh inside cube instance and use cube.draw(framebuffer);\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.pyramid.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        /**\n         * SHADOWS\n         */\n        this.renderingPipeline.enableLighting(false);\n        this.renderingPipeline.setColor(Color.DARK_GRAY);\n\n        scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.dodecahedron.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.pyramid.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.icosahedron.getMesh(), modelViewMartrix);\n\n        this.renderingPipeline.enableLighting(true);\n\n        const lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(12.0, 4.0, 0)));\n\n        LensFlare.drawLensFlare(framebuffer, lensflareScreenSpace, elapsedTime * 100, texture, dirt);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class RotoZoomerScene extends AbstractScene {\n\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            /*TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),*/\n            TextureUtils.load(require('../../assets/xray.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawRotoZoomer(framebuffer, time);\n    }\n\n    drawRotoZoomer(framebuffer: Framebuffer, time: number) {\n        const scale = Math.sin(time * 0.0005) + 1.1;\n\n        const yStepX = Math.sin(time * 0.0003) * scale;\n        const yStepY = Math.cos(time * 0.0003) * scale;\n\n        const xStepX = yStepY;\n        const xStepY = -yStepX;\n\n        let texYCoord = Math.sin(time * 0.0002) * 512;\n        let texXCoord = Math.cos(time * 0.0002) * 512;\n\n        let texYCoordInner = 0;\n        let texXCoordInner = 0;\n        let framebufferPos = 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            texXCoordInner = texXCoord;\n            texYCoordInner = texYCoord;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.framebuffer[framebufferPos++] = this.logoTexture.texture[(texXCoordInner & 127) + (texYCoordInner & 127) * 128];\n\n                texXCoordInner += xStepX;\n                texYCoordInner += xStepY;\n            }\n\n            texXCoord += yStepX;\n            texYCoord += yStepY;\n        }\n    }\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","import { Color } from '../../core/Color';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Vector2f } from '../../math/Vector2f';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { FontRenderer } from './FontRenderer';\n\nexport class SineScrollerScene extends AbstractScene {\n\n    private texture2: Texture;\n    private startTime: number;\n    private fontRenderer: FontRenderer;\n    private fontRenderer2: FontRenderer;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.startTime = Date.now();\n\n        const fonts: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ@+# ' +\n            '0123456789' +\n            '!\\'()?-/.,';\n        this.fontRenderer = new FontRenderer(\n            framebuffer,\n            32, 34, fonts,\n            require('./assets/fraxionFont.png')\n        );\n\n        const fonts2: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ 012' +\n            '3456789*:?' +\n            '!-(),\\'.+~<' +\n            '>>#// ';\n        this.fontRenderer2 = new FontRenderer(\n            framebuffer,\n            16, 18, fonts2,\n            require('./assets/anarchyFont.png')\n        );\n        /*\n                const fonts: string =\n                'ABCDEFGHIJ' +\n                'KLMNOPQRST' +\n                'UVWXYZ!?:;' +\n                '0123456789' +\n                '\"(),-.\\'@# ';\n                this.fontRenderer = new FontRenderer(\n                    framebuffer,\n                    32, 25, fonts,\n                    require('./assets/dragonsFont.png')\n                );*/\n        return Promise.all([\n            TextureUtils.load(require('../../assets/hoodlumLogo.png'), true).then(\n                (texture: Texture) => this.texture2 = texture\n            ),\n            this.fontRenderer.init(),\n            this.fontRenderer2.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawStarField(framebuffer, time);\n\n        framebuffer.drawTexture(framebuffer.width/2 - this.texture2.width/2, 0, this.texture2, 1.0);\n\n        this.fontRenderer.drawText(framebuffer, 0, 102, ' # TEAM GENESIS # IS BACK IN 2018 WITH A NEW PC FIRST! \\'STAR WARS - EMPIRE AT WAR\\' DO YOU LIKE THIS?    ', time);\n        this.fontRenderer2.drawText(framebuffer, 0, framebuffer.height - 20,\n            '   * WE REALLY LOVE SCROLLERS * HOW ABOUT YOU? THIS PRODUCTION IS FROM HOODLUM' +\n            '~< LETS GO ON WITH THE GENERAL BLAH BLAH      ', time * 1.6, false);\n\n        // animated rainbow horizontal lines\n        const horizontalUnits = framebuffer.width / 16;\n        for (let i: number = 0; i < horizontalUnits; i++) {\n            const myTime = time * 0.003;\n            const waveSum = i / horizontalUnits * 0.6;\n            const red = (Math.cos(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const green = (Math.sin(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const blue = (Math.sin(myTime) + 1.0) * 0.5 * 255;\n\n            const color: number = 255 << 24 | blue << 16 | green << 8 | red;\n            framebuffer.drawRect(i * 16, 68, 16, color);\n            framebuffer.drawRect(((horizontalUnits-1) - i) * 16, 168, 16, color);\n        }\n    }\n\n    public drawStarField(frambuffer: Framebuffer, elapsedTime: number): void {\n        const darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        const lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        const backgroundColor = 255 << 24 | 0 << 16 | 0 << 8 | 0;\n\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        const stars = new Array<Vector2f>();\n        const stars2 = new Array<Vector2f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        frambuffer.clearColorBuffer(backgroundColor);\n        frambuffer.drawRect2(0, 68, frambuffer.width, 100, Color.DARK_BLUE.toPackedFormat());\n\n        for (let i = 0; i < 100; i++) {\n            frambuffer.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % frambuffer.width, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            frambuffer.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % frambuffer.width, stars2[i].y, lightStarColor);\n        }\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector4f } from '../../math/Vector4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Fog } from '../../shading/fog/Fog';\nimport { LinearFog } from '../../shading/fog/LinearFog';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusKnotTunnelScene extends AbstractScene {\n\n    private noise: Texture;\n    private particleTexture: Texture;\n    private cocoon: Texture;\n    private torusKnot: TorusKnot = new TorusKnot(true);\n    private fog: Fog = new LinearFog(-50, -240, new Vector4f(0.67, 0.4, 0.5, 1.0));\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.renderingPipeline.setFog(this.fog);\n\n        return Promise.all([\n            TextureUtils.generateProceduralNoise().then((texture: Texture) => this.noise = texture),\n            TextureUtils.load(require('../../assets/cocoon.png'), false).then(\n                (texture: Texture) => this.cocoon = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture2().then(\n                (texture: Texture) => this.particleTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.torusTunnel(framebuffer, time * 0.019);\n        framebuffer.drawScaledTextureClipAdd(\n            framebuffer.width / 2 - this.cocoon.width / 2,\n            framebuffer.height / 2 - this.cocoon.height / 2,\n            this.cocoon.width, this.cocoon.height, this.cocoon, 0.67);\n\n        // framebuffer.noise(time, this.noise);\n        this.glitchScreen(framebuffer, time * 5, this.noise);\n    }\n\n    public glitchScreen(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.00002) * 0.9 + 0.1);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        const texture2 = new Texture();\n        texture2.height = framebuffer.height;\n        texture2.width = framebuffer.width;\n        texture2.texture = framebuffer.framebuffer;\n\n\n        const blockWidth = 20;\n        const horizontalUnits = Math.floor(framebuffer.width / blockWidth);\n        const verticalUnits = Math.floor(framebuffer.height / blockWidth);\n\n        for (let x = 0; x < horizontalUnits; x++) {\n            for (let y = 0; y < verticalUnits; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                framebuffer.drawTextureRect(blockWidth * (horizontalUnits - x), blockWidth * ((horizontalUnits * rng.getFloat()) | 0), blockWidth * x, blockWidth * y, blockWidth, blockWidth, texture2.texture, texture2.width, 0.03 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                for (let y = 0; y < verticalUnits; y++) {\n                    framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, blockWidth * (Math.round(elapsedTime / 100 + x + y) % 12), 0, blockWidth, blockWidth, texture.texture, texture.width, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.tmpGlitch, framebuffer.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n        const rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            const scale = rng2.getFloat() * glitchFactor;\n            const off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * framebuffer.width;\n                let glIndex = yStart * framebuffer.width + framebuffer.width - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n\n                glIndex = yStart * framebuffer.width;\n                const count = framebuffer.width - offset;\n\n                for (let i = 0; i < count; i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n    public torusTunnel(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const scale = 1.0;\n        const lookAhead: number = 0.4;\n\n        const frame = this.torusFunction3(elapsedTime * 0.02);\n        const frame2 = this.torusFunction3(elapsedTime * 0.02 + lookAhead);\n\n        const tangent = frame2.sub(frame).normalize();\n        let up = frame.add(frame2).normalize();\n        const right = tangent.cross(up).normalize();\n        up = right.cross(tangent).normalize();\n\n        const translation = Matrix4f.constructIdentityMatrix();\n        // translation vector\n        translation.m14 = -frame.x;\n        translation.m24 = -frame.y;\n        translation.m34 = -frame.z;\n\n        const rotation = Matrix4f.constructIdentityMatrix();\n        // x vector\n        rotation.m11 = right.x;\n        rotation.m21 = right.y;\n        rotation.m31 = right.z;\n\n        // y vector\n        rotation.m12 = up.x;\n        rotation.m22 = up.y;\n        rotation.m32 = up.z;\n\n        // z vector\n        rotation.m13 = -tangent.x;\n        rotation.m23 = -tangent.y;\n        rotation.m33 = -tangent.z;\n\n        const finalMatrix = rotation.transpose().multiplyMatrix(translation);\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -10).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04)));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(elapsedTime * 0.01).multiplyMatrix(finalMatrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torusKnot.getMesh(), modelViewMartrix);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2;\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Torus } from '../../geometrical-objects/Torus';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusScene extends AbstractScene {\n\n    private razorLogo: Texture;\n    private torus: Torus = new Torus();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/razor1911.png'), true).then(\n                (texture: Texture) => this.razorLogo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.drawTitanEffect(framebuffer, time);\n        this.shadingTorus(framebuffer, time * 0.02);\n        framebuffer.drawTexture(framebuffer.width / 2 - this.razorLogo.width / 2, 0, this.razorLogo, 1.0);\n    }\n\n    public shadingTorus(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.05);\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -24).multiplyMatrix(modelViewMartrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torus.getMesh(), modelViewMartrix);\n    }\n\n\n    private drawTitanEffect(framebuffer: Framebuffer, time: number) {\n        framebuffer.clear();\n        const horizontalNum = framebuffer.width / 20;\n        const verticalNum = framebuffer.height / 20;\n\n        for (let x = 0; x < horizontalNum; x++) {\n            for (let y = 0; y < verticalNum; y++) {\n\n                const scale = ((Math.sin(time * 0.004 + x * 0.7 + y * 0.4) + 1) / 2);\n                const size = Math.round(scale * 8 + 1) * 2;\n                const offset = (20 / 2 - size / 2) | 0;\n                const color = 255 << 24 | (85 * scale) << 16 | (55 * scale) << 8 | (55 * scale);\n                framebuffer.drawBox2(x * 20 + offset, y * 20 + offset, size, size, color);\n            }\n        }\n\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract twister into effect class\n */\nexport class TwisterScene extends AbstractScene {\n\n    private backgroundTexture: Texture;\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.backgroundTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.drawScaledTextureClipBi(\n            0,\n            0,\n            framebuffer.width, framebuffer.height, this.backgroundTexture, 1.0);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.backgroundTexture.texture);\n        this.draw(framebuffer, this.logoTexture, time);\n    }\n\n    private draw(framebuffer: Framebuffer, texture: Texture, time: number): void {\n        const a: number = time * 0.001;\n        for (let i: number = 10; i < framebuffer.height - 10; i++) {\n            const xoff = (Math.sin(a + i * 0.01) * 50) | 0;\n            const rot = Math.sin(a * 0.4 + i * 0.0021) * Math.PI * 2;\n            let scale = 42;\n            const x1 = (Math.sin(rot) * scale) | 0;\n            const x2 = (Math.sin(Math.PI * 2 / 4 + rot) * scale) | 0;\n            const x3 = (Math.sin(Math.PI * 2 / 4 * 2 + rot) * scale) | 0;\n            const x4 = (Math.sin(Math.PI * 2 / 4 * 3 + rot) * scale) | 0;\n\n            if (x2 > x1) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 1.5 + rot));\n                const dist = x2 - x1;\n                const xPos = x1 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x3 > x2) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 2.5 + rot));\n                const dist = x3 - x2;\n                const xPos = x2 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x4 > x3) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 3.5 + rot));\n                const dist = x4 - x3;\n                const xPos = x3 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x1 > x4) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 4.5 + rot));\n                const dist = x1 - x4;\n                const xPos = x4 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n        }\n    }\n\n    private drawSpan(\n        framebuffer: Framebuffer,\n        dist: number,\n        xpos: number,\n        ypos: number,\n        scale: number,\n        texture: Texture,\n        time: number): void {\n        let framebufferIndex = xpos + ypos * framebuffer.width;\n        let textureIndex = (((ypos - time * 0.029) | 0) & 0xff) * texture.width;\n        const textureForwardDifference = texture.width / dist;\n        const hightlight = Math.pow(scale, 11) * 115;\n\n        for (let j = 0; j < dist; j++) {\n            const color = texture.texture[textureIndex | 0];\n\n            const r = Math.min(((color >> 0 & 0xff) * scale) + hightlight, 255);\n            const g = Math.min(((color >> 8 & 0xff) * scale) + hightlight, 255);\n            const b = Math.min(((color >> 16 & 0xff) * scale) + hightlight, 255);\n\n            framebuffer.framebuffer[framebufferIndex] = r | g << 8 | b << 16 | 255 << 24;\n\n            framebufferIndex++;\n            textureIndex += textureForwardDifference;\n        }\n    }\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { TextureUtils, Texture } from '../../texture/index';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class VoxelBallsScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.YELLOW.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private blurred: Texture;\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        this.renderTransparent(framebuffer, time);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTextureFullscreen(texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n\n        framebuffer.clearDepthBuffer();\n\n        const xSteps = 5;\n        const xsteps = 5;\n        const zsteps = 5;\n        for (let x = 0; x < xSteps; x++) {\n            for (let y = 0; y < xsteps; y++) {\n                for (let z = 0; z < zsteps; z++) {\n                    let scale = (Math.sin(x * 0.3 + time * 0.0009) + 1.0) * 0.5 *\n                        (Math.sin(y * 0.4 + time * 0.002) + 1.0) * 0.5 *\n                        (Math.sin(z * 0.3 + time * 0.001) + 1.0) * 0.5;\n                    if (scale < 0.3) {\n                        // continue;\n                    }\n                    scale = 0.8;\n                    const mat =\n                        Matrix4f.constructTranslationMatrix(0, 0, -11).multiplyMatrix(\n                            Matrix4f.constructYRotationMatrix(time * 0.0003).multiplyMatrix(\n                                Matrix4f.constructXRotationMatrix(time * 0.0005).multiplyMatrix(\n                                    Matrix4f.constructZRotationMatrix(time * 0.0004).multiplyMatrix(\n                                        Matrix4f.constructTranslationMatrix(x - xSteps / 2 + 0.5, y - xsteps / 2 + 0.5, z - zsteps / 2 + 0.5)\n                                            .multiplyMatrix(\n                                                Matrix4f.constructScaleMatrix(scale, scale, scale)))))); // .multiplyMatrix(\n                    //       Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    //           Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n\n                    this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), mat);\n                }\n            }\n        }\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class Dodecahedron extends AbstractGeometricObject {\n\n    constructor() {\n\n        super();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        const phi = (1 + Math.sqrt(5)) * 0.5;\n        const a = 1;\n        const b = 1 / phi;\n        const c = 2 - phi;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(c, 0, a), new Vector4f(-c, 0, a), new Vector4f(-b, b, b), new Vector4f(0, a, c),\n            new Vector4f(b, b, b), new Vector4f(b, -b, b), new Vector4f(0, -a, c), new Vector4f(-b, -b, b),\n            new Vector4f(c, 0, -a), new Vector4f(-c, 0, -a), new Vector4f(-b, -b, -b), new Vector4f(0, -a, -c),\n            new Vector4f(b, -b, -b), new Vector4f(b, b, -b), new Vector4f(0, a, -c), new Vector4f(-b, b, -b),\n            new Vector4f(1, c, 0), new Vector4f(-a, c, 0), new Vector4f(-1, -c, 0), new Vector4f(a, -c, 0)\n        ];\n\n        const index: Array<number> = [\n            0, 4, 1, 1, 3, 2, 1, 4, 3, 1, 7, 0,\n            0, 6, 5, 0, 7, 6, 8, 12, 9, 9, 11, 10,\n            9, 12, 11, 9, 15, 8, 8, 14, 13, 8, 15, 14,\n            14, 3, 13, 13, 4, 16, 13, 3, 4, 3, 14, 2,\n            2, 15, 17, 2, 14, 15, 11, 6, 10, 10, 7, 18,\n            10, 6, 7, 6, 11, 5, 5, 12, 19, 5, 11, 12,\n            16, 4, 19, 19, 0, 5, 19, 4, 0, 19, 12, 16,\n            16, 8, 13, 16, 12, 8, 17, 15, 18, 18, 9, 10,\n            18, 15, 9, 18, 7, 17, 17, 1, 2, 17, 7, 1\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Pyramid extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(0, a, 0),\n            new Vector4f(a, -a, -a),\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, a),\n            new Vector4f(-a, -a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 1, 2,\n            0, 3, 1,\n            0, 4, 3,\n            0, 2, 4\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Sphere extends AbstractGeometricObject {\n\n    public constructor(xSteps: number = 16, ySteps: number = 16) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = xSteps;\n        const STEPS2 = ySteps;\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    private sphereFunction(theta: number, phi: number): Vector4f {\n        return new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor(inverse: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            const tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize();\n            const right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        this.buildMesh(points, index, inverse);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { BlenderScene } from '../../blender/BlenderScene';\n\n/**\n * Load Wavefront OBJ file that was converted via obj2json utility.\n * to save the convertToMeshArray step\n * renamed to JSX file to load file at runtime\n */\nexport class BlenderLoader {\n\n    public static load(filename: string): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: string): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.getBlenderScene(meshes, false);\n        });\n    }\n\n    private constructor() {\n\n    }\n}\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Mesh } from '../../blender/mesh';\nimport { convertToMeshArray } from '../../blender/parseUtils';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class WavefrontLoader {\n\n    public static load(filename: any): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: any): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.getBlenderScene(meshes);\n        });\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Fog {\n\n    public abstract computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Fog } from './Fog';\n\nexport class LinearFog extends Fog {\n\n    private zStart: number;\n    private zEnd: number;\n    private fogColor: Vector4f;\n\n    public constructor(zStart: number, zEnd: number, fogColor: Vector4f) {\n        super();\n        this.zStart = zStart;\n        this.zEnd = zEnd;\n        this.fogColor = fogColor;\n    }\n\n    public computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f {\n        if (vertex.z >= this.zStart) {\n            return color;\n        } else if (vertex.z <= this.zEnd) {\n            return this.fogColor;\n        } else {\n            const f: number = (this.zEnd - vertex.z) / (this.zEnd - this.zStart);\n            return new Vector4f(\n                color.x * f + this.fogColor.x * (1 - f),\n                color.y * f + this.fogColor.y * (1 - f),\n                color.z * f + this.fogColor.z * (1 - f)\n            );\n        }\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export interface musicProperties {\n    timeSeconds: number;\n    timeMilliseconds: number;\n    sceneData: sceneData;\n}\n\n// scene variables | things you set through jsRocket\nexport interface sceneData {\n    effect: any;\n    transitionType: any;\n    transitionValue: any;\n    snare: any;\n    bass: any;\n}\n\n// Beats per minute of your demo tune\nexport const BPM = 125;\n\n// The resolution between two beats, four is usually fine,- eight adds a bit more finer control\nexport const ROWS_PER_BEAT = 6;\n\n// we calculate this now, so we can translate between rows and seconds later on\nexport const ROW_RATE = BPM / 60 * ROWS_PER_BEAT;\n","import './JSRocket';\nimport './cowbell/cowbell'\nimport './cowbell/audio_player'\nimport './cowbell/web_audio_player'\nimport './cowbell/openmpt/openmpt_player'\nimport {\n    musicProperties,\n    ROW_RATE,\n    sceneData\n} from './MusicProperties';\nexport class SoundManager {\n\n    public syncDevice;\n    public isPlaying = false;\n    public demoMode: boolean;\n    public row = 0;    // the current row we're on\n\n    //  container for audio values to be used by effects (time, bass, effect, transitions)\n    public musicProperties: musicProperties;\n    public sceneData: sceneData;\n    public audioElement: HTMLAudioElement;\n\n    public constructor() {\n\n        // Initialize JS Rocket\n        this.syncDevice = new JSRocket.SyncDevice();\n        this.syncDevice.connected = false;\n\n    }\n\n    /**\n     * Load audio files supported by cowbell\n     *\n     * @param {string} filename     audio file to load\n     * @returns {Promise<void>}     promise\n     */\n    public loadMusic(filename: string): Promise<void> {\n        return new Promise((resolve) => {\n\n            const fileExtension = filename.split('.').pop().toLowerCase();\n            let audioPlayer;\n\n            switch (fileExtension) {\n                case 'it':\n                case 'xm':\n                case 's3m':\n                case 'mod':\n                    audioPlayer = new Cowbell.Player.OpenMPT({\n                        'pathToLibOpenMPT': './openmpt/libopenmpt.js'\n                    });\n                    break;\n                case 'ogg':\n                case 'mp3':\n                default:\n                    audioPlayer = new Cowbell.Player.Audio();\n                    break;\n            }\n            const track = new audioPlayer.Track(filename);\n            this.audioElement = track.open();\n            resolve();\n        });\n    }\n\n    /**\n     * Load XML file for music syncronization for use with JS Rocket\n     *\n     * @param {string} filename      XML file to load\n     * @param {string} demoMode      use true for release mode (uses file) | false when using rocket editor\n     * @returns {Promise<void>}      promise\n     */\n    prepareSync(filename: string, demoMode: boolean): Promise<void> {\n        this.demoMode = demoMode;\n        return new Promise((resolve) => {\n            if (this.demoMode) {\n                this.syncDevice.setConfig({\n                    'rocketXML': filename\n                });\n                this.syncDevice.init('demo');\n\n            } else {\n                this.syncDevice.init();\n            }\n\n            // XML file from JS Rocket library was loaded and parsed, make sure your ogg is ready\n            this.syncDevice.on('ready', () => this.onSyncReady());\n\n            // [JS Rocket - Arrow keys] whenever you change the row, a value or interpolation mode this will get called\n            this.syncDevice.on('update', (newRow: number) => this.onSyncUpdate(newRow));\n\n            // [JS Rocket - Spacebar] in Rocket calls one of those\n            this.syncDevice.on('play', () => this.onPlay());\n            this.syncDevice.on('pause', () => this.onPause());\n            resolve()\n        });\n    }\n\n    onSyncReady() {\n        this.syncDevice.connected = true;\n\n        this.sceneData = {\n            effect: this.syncDevice.getTrack('effect'),\n            snare: this.syncDevice.getTrack('snare'),\n            bass: this.syncDevice.getTrack('bass'),\n            transitionType: this.syncDevice.getTrack('transitionType'),\n            transitionValue: this.syncDevice.getTrack('transitionValue')\n        }\n    }\n\n    // row is only given if you navigate, or change a value on the row in Rocket\n    // on interpolation change (hit [i]) no row value is sent, as the current there is the upper row of your block\n    onSyncUpdate(newRow: number) {\n        if (!isNaN(newRow)) {\n            this.row = newRow;\n        }\n        this.audioElement.currentTime = newRow / ROW_RATE;\n    }\n\n    updateMusic() {\n        // show message if rocket app is not running in background\n        if (!this.syncDevice.connected && !this.demoMode) {\n            return;\n        }\n\n        // update music properties\n        this.musicProperties = {\n            timeSeconds: (this.audioElement?.currentTime) || 0,\n            timeMilliseconds: (this.audioElement?.currentTime) * 1000,\n            sceneData: {\n                effect: this.sceneData.effect.getValue(this.row),\n                transitionType: this.sceneData.transitionType.getValue(this.row),\n                transitionValue: this.sceneData.transitionValue.getValue(this.row),\n                snare: this.sceneData.snare.getValue(this.row),\n                bass: this.sceneData.bass.getValue(this.row),\n            }\n        }\n\n        this.row = this.musicProperties.timeSeconds * ROW_RATE;\n\n        // update JS rocket\n        if (this.audioElement && this.audioElement.paused === false) {\n            // otherwise we may jump into a point in the audio where there's\n            // no timeframe, resulting in Rocket setting row 2 and we report\n            // row 1 back - thus Rocket spasming out\n\n            // this informs Rocket where we are\n            this.syncDevice.update(this.row);\n        }\n\n        // stop once timeline reaches end\n        if (Math.floor(this.audioElement.duration) === Math.floor(this.musicProperties.timeSeconds)) {\n            document.getElementById('ticker_stop').click();\n        }\n    }\n\n    onPlay() {\n        if (!this.isPlaying && this.audioElement) {\n            if (this.audioElement.currentTime) {\n                this.audioElement.currentTime = this.row / ROW_RATE;\n            }\n            this.isPlaying = true;\n            this.audioElement.play();\n        }\n        console.log('[onPlay]');\n    }\n\n    onPause() {\n        this.row = this.audioElement.currentTime * ROW_RATE;\n        if (!this.audioElement.paused && this.isPlaying) {\n            this.audioElement.pause();\n            this.isPlaying = false;\n        }\n        console.info('[onPause]');\n    }\n\n    /**\n     * find the prev/next effect and jump to it\n     *\n     * @param   {number} time       where we are in the audio timeline\n     * @param   {number} direction  direction to skip -1 goes backwards.  1 goes forward\n     */\n    public jump(time: number, direction: number, sceneLength: number) {\n        this.row = time * ROW_RATE;\n        const effectJump = Number(this.sceneData.effect.getValue(this.row).toFixed(1));\n        if (Math.trunc(Number(this.musicProperties.sceneData.effect)) !== Math.trunc(effectJump) && effectJump >= 1) {\n            // if running into transition effect 2.5..then keep searching and only land on whole numbers\n            if (parseInt(effectJump.toString(), 10) !== effectJump) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                this.seek(time);\n            }\n        } else {\n            if (time >= 0 && effectJump < sceneLength - 3) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                // go back to the beginning\n                this.seek(0);\n            }\n        }\n    }\n\n    /**\n     * Jumps to a point in the audio timeline in milliseconds\n     *\n     * @param  {number} time            time in milliseconds\n     */\n    public seek(time: number) {\n        this.audioElement.currentTime = time;\n        // update rocket editor position to new timeline location\n        if (!this.demoMode) {\n            this.syncDevice.update(this.audioElement.currentTime * ROW_RATE);\n        }\n    }\n\n    /**\n     * Turns music volume on or off\n     *\n     * @param  {HTMLElement} ref         volume icon to toggle\n     * @param  {boolean} isMuted         on or off\n     */\n    public toggleSound(ref: HTMLElement, isMuted: boolean) {\n        if (isMuted) {\n            ref.setAttribute('title', 'enable sound');\n            ref.classList.remove('fa-volume-up');\n            ref.classList.add('fa-volume-off');\n        } else {\n            ref.setAttribute('title', 'mute sound');\n            ref.classList.remove('fa-volume-off');\n            ref.classList.add('fa-volume-up');\n        }\n        this.audioElement.muted = isMuted;\n    }\n\n    /**\n     * Restore position of timeline & mute preferences on reloads\n     */\n    public initTimeline() {\n        // jump to last position on timeline for local development reloading\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const newLocal = this;\n        const jumpTo = Number(localStorage.getItem('lastTime'));\n\n        // poll for mod player since library does not use promises\n        if ((window as any).libopenmpt) {\n            (function poll() {\n                // check if mod was loaded then seek\n                if ((window as any).modulePtr) {\n\n                    // openmpt does not support volume control or muting\n                    document.getElementById('ticker_volume').style.display = 'none';\n                    newLocal.updateRange(newLocal.audioElement.duration);\n                    newLocal.seek(jumpTo);\n                    return;\n                }\n                setTimeout(poll, 150);\n            })();\n        } else {\n            newLocal.audioElement.onloadedmetadata = function () {\n                newLocal.updateRange(newLocal.audioElement.duration);\n            };\n            newLocal.seek(jumpTo);\n        }\n\n        // remember last sound preferences\n        const isMuted = localStorage.getItem('soundToggle') === 'true';\n        this.toggleSound(document.getElementById('ticker_volume'), isMuted);\n    }\n\n    /**\n     * Set timeline slider max range\n     *\n     * @param  {number} value         length time in seconds\n     */\n    private updateRange(value: number) {\n        (document.getElementById(\"timeline\") as HTMLInputElement).max = String(Math.floor(value) * 1000);\n    }\n\n    /*\n    // todo: add effect # markers to timeline\n    fetch(rocketData.default).then(response => response.text())\n        .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\n        .then(data => {\n            const tracks: Element[] = Array.from(data.documentElement.getElementsByTagName(\"track\"));\n            tracks.forEach((element) => {\n                if (element.getAttribute(\"name\") === 'effect') {\n                    const keys: Element[] = Array.from(element.getElementsByTagName(\"key\"));\n                    keys.forEach((elementKey) => {\n                        const p = document.createElement(\"option\");\n                        const value = elementKey.getAttribute('row').valueOf();\n                        const label = elementKey.getAttribute('value').valueOf();\n\n                        // remap rows to a range between 0 and 1000\n                        const newValue = Utils.map(Number(label), 0, 1520, 0, 1000);\n\n                        p.value = value;\n                        p.label = label;\n                        // this.tickmarkRef.appendChild(p);\n                    })\n                }\n            });\n        });\n        */\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math\";\nimport { Interpolator } from \"../math/Interpolator\";\nimport { Texture } from \"../texture\";\n\nexport class LensFlare {\n\n    public static drawLensFlare(framebuffer: Framebuffer, screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < framebuffer.width &&\n            pos.y > 0 && pos.y < framebuffer.height &&\n            framebuffer.wBuffer[pos.x + (pos.y * framebuffer.width)] > (1 / pos.z)) {\n            if (!framebuffer.lensFlareVisible) {\n                framebuffer.lensFlareVisible = true;\n                framebuffer.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (framebuffer.lensFlareVisible) {\n                framebuffer.lensFlareVisible = false;\n                framebuffer.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = Interpolator.interpolate(framebuffer.lensFlareStart, framebuffer.lensFlareStart + 100, elapsedTime);\n        if (framebuffer.lensFlareVisible !== true) {\n            scale *= (1 - Interpolator.interpolate(framebuffer.lensFlareEnd, framebuffer.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(framebuffer.width / 2, framebuffer.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                framebuffer.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        framebuffer.drawScaledTextureClipBi(0, 0, framebuffer.width, framebuffer.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","(function (window) {\n\n    if (!window.JSRocket) {\n        window.JSRocket = {};\n    }\n    JSRocket.SyncData = function () {\n\n        \"use strict\";\n\n        var _track = [];\n\n        function getTrack(index) {\n            return _track[index];\n        }\n\n        function getIndexForName(name) {\n            for (var i = 0; i < _track.length; i++) {\n\n                if (_track[i].name === name) {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n\n        function getTrackLength() {\n            return _track.length;\n        }\n\n        function createIndex(varName) {\n            var track = new JSRocket.Track();\n            track.name = varName;\n\n            _track.push(track);\n        }\n\n        return {\n            getTrack: getTrack,\n            getIndexForName: getIndexForName,\n            getTrackLength: getTrackLength,\n            createIndex: createIndex\n        };\n    };\n    JSRocket.Track = function () {\n\n        \"use strict\";\n\n        var STEP = 0,\n            LINEAR = 1,\n            SMOOTH = 2,\n            RAMP = 3;\n\n        var data = [];\n\n        function findKeyIndex(keys, row) {\n            var lo = 0, hi = keys.length;\n            while (lo < hi) {\n                var mi = ((hi + lo) / 2) | 0;\n\n                if (keys[mi] < row) {\n                    lo = mi + 1;\n                } else if (keys[mi] > row) {\n                    hi = mi;\n                } else {\n                    return mi;\n                }\n            }\n            return lo - 1;\n        }\n\n        function getValue(row) {\n            var keys = Object.keys(data);\n\n            if (!keys.length) {\n                return 0.0;\n            }\n\n            var idx = findKeyIndex(keys, Math.floor(row));\n            if (idx < 0) {\n                return data[keys[0]].value;\n            }\n            if (idx > keys.length - 2) {\n                return data[keys[keys.length - 1]].value;\n            }\n\n            // lookup keys and values\n            var k0 = keys[idx], k1 = keys[idx + 1];\n            var a = data[k0].value;\n            var b = data[k1].value;\n\n            // interpolate\n            var t = (row - k0) / (k1 - k0);\n            switch (data[k0].interpolation) {\n                case 0:\n                    return a;\n                case 1:\n                    return a + (b - a) * t;\n                case 2:\n                    return a + (b - a) * t * t * (3 - 2 * t);\n                case 3:\n                    return a + (b - a) * Math.pow(t, 2.0);\n            }\n        }\n\n        function add(row, value, interpolation) {\n            data[row] = {\n                \"value\": value,\n                \"interpolation\": interpolation\n            };\n        }\n\n        function remove(row) {\n            delete data[row];\n        }\n\n        return {\n            getValue: getValue,\n            add: add,\n            remove: remove\n        };\n    };\n    JSRocket.SyncDevicePlayer = function (cfg) {\n\n        \"use strict\";\n\n        var _urlRequest,\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'error': function () {\n                }\n            };\n\n        function load(url) {\n\n            _urlRequest = new XMLHttpRequest();\n\n            if (_urlRequest === null) {\n                _eventHandler.error();\n                return;\n            }\n\n            _urlRequest.open('GET', url, true);\n            _urlRequest.onreadystatechange = urlRequestHandler;\n\n            _urlRequest.send();\n        }\n\n        function urlRequestHandler() {\n\n            if (_urlRequest.readyState === 4) {\n                if (_urlRequest.status < 300) {\n                    readXML(_urlRequest.responseText);\n                } else {\n                    _eventHandler.error();\n                }\n            }\n        }\n\n        function readXML(xmlString) {\n            var key,\n                t = 0, tLen, k = 0, kLen,\n                xml = (new DOMParser()).parseFromString(xmlString, 'text/xml'),\n                tracks = xml.getElementsByTagName('tracks');\n\n            //<tracks>\n            var trackList = tracks[0].getElementsByTagName('track');\n\n            for (t, tLen = trackList.length; t < tLen; t++) {\n\n                var track = getTrack(trackList[t].getAttribute('name')),\n                    keyList = trackList[t].getElementsByTagName('key');\n\n                for (k = 0, kLen = keyList.length; k < kLen; k++) {\n                    key = keyList[k];\n                    track.add(parseInt(key.getAttribute('row'), 10),\n                        parseFloat(key.getAttribute('value')),\n                        parseInt(key.getAttribute('interpolation'), 10));\n\n                }\n            }\n\n            _eventHandler.ready();\n        }\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        function nop() {\n\n        }\n\n        if (cfg.rocketXML === \"\" || cfg.rocketXML === undefined || cfg.rocketXML === undefined) {\n            throw (\"[jsRocket] rocketXML is not set, try _syncDevice.setConfig({'rocketXML':'url/To/RocketXML.rocket'})\");\n        } else {\n            load(cfg.rocketXML);\n        }\n\n        return {\n            load: load,\n            getTrack: getTrack,\n            update: nop,\n            on: setEvent\n        };\n    };\n    JSRocket.SyncDeviceClient = function (cfg) {\n\n        \"use strict\";\n\n        var CMD_SET_KEY = 0,\n            CMD_DELETE_KEY = 1,\n            CMD_GET_TRACK = 2,\n            CMD_SET_ROW = 3,\n            CMD_PAUSE = 4,\n            CMD_SAVE_TRACKS = 5;\n\n        var _ws = new WebSocket(cfg.socketURL),\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                },\n                'save': function () {\n                }\n            };\n\n        function onOpen() {\n\n            _ws.binaryType = \"arraybuffer\";\n            _ws.send('hello, synctracker!');\n        }\n\n        function onMessage(e) {\n\n            var queue = (new Uint8Array(e.data)),\n                cmd = queue[0],\n                track, row, value, interpolation;\n\n            //Handshake\n            if (cmd === 104) {\n\n                _eventHandler.ready();\n\n                //PAUSE\n            } else if (CMD_PAUSE === cmd) {\n\n                if (queue[1] === 1) {\n                    _eventHandler.pause();\n                } else {\n                    _eventHandler.play();\n                }\n\n                //SET_ROW\n            } else if (CMD_SET_ROW === cmd) {\n\n                row = toInt(queue.subarray(1, 5));\n\n                _eventHandler.update(row);\n\n                //SET_KEY\n            } else if (CMD_SET_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                //value = Math.round(toFloat(queue.subarray(9, 13)) * 100) / 100; //round to what's seen in Rocket tracks\n                value = toFloat(queue.subarray(9, 13)); //use the values you see in Rocket statusbar\n\n                interpolation = toInt(queue.subarray(13, 14));\n                _syncData.getTrack(track).add(row, value, interpolation);\n\n                //DELETE\n            } else if (CMD_DELETE_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                _syncData.getTrack(track).remove(row);\n\n                //SAVE\n            } else if (CMD_SAVE_TRACKS === cmd) {\n                _eventHandler.save();\n            }\n        }\n\n        function onClose(e) {\n            console.warn(\">> connection closed\", e);\n        }\n\n        function onError(e) {\n            console.error(\">> connection error'd\", e);\n        }\n\n        _ws.onopen = onOpen;\n        _ws.onmessage = onMessage;\n        _ws.onclose = onClose;\n        _ws.onerror = onError;\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            var utf8Name = encodeURIComponent(name).replace(/%([\\dA-F]{2})/g, function (m, c) {\n                return String.fromCharCode('0x' + c);\n            });\n            var message = [CMD_GET_TRACK,\n                (utf8Name.length >> 24) & 0xFF, (utf8Name.length >> 16) & 0xFF,\n                (utf8Name.length >> 8) & 0xFF, (utf8Name.length) & 0xFF];\n\n            for (var i = 0; i < utf8Name.length; i++) {\n                message.push(utf8Name.charCodeAt(i));\n            }\n\n            _ws.send(new Uint8Array(message).buffer);\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setRow(row) {\n\n            var streamInt = [(row >> 24) & 0xFF,\n            (row >> 16) & 0xFF,\n            (row >> 8) & 0xFF,\n            (row) & 0xFF];\n\n            _ws.send(new Uint8Array([CMD_SET_ROW, streamInt[0], streamInt[1], streamInt[2], streamInt[3]]).buffer);\n        }\n\n        function toInt(arr) {\n\n            var i = 0,\n                view = new DataView(new ArrayBuffer(arr.length));\n\n            for (; i < arr.length; i++) {\n                view.setUint8(i, arr[i]);\n            }\n\n            if (view.byteLength === 1) {\n                return view.getInt8(0);\n            } else {\n                return view.getInt32(0);\n            }\n        }\n\n        function toFloat(arr) {\n            var view = new DataView(new ArrayBuffer(4));\n            view.setUint8(0, arr[0]);\n            view.setUint8(1, arr[1]);\n            view.setUint8(2, arr[2]);\n            view.setUint8(3, arr[3]);\n\n            return view.getFloat32(0);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            getTrack: getTrack,\n            update: setRow,\n            on: setEvent\n        };\n    };\n\n    JSRocket.SyncDevice = function () {\n\n        \"use strict\";\n\n        var _connected = false,\n            _device,\n            _previousIntRow,\n            _config = {\n                \"socketURL\": \"ws://localhost:1339\",\n                \"rocketXML\": \"\"\n            },\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                }\n            };\n\n        function init(mode) {\n            if (mode === \"demo\") {\n                _device = new JSRocket.SyncDevicePlayer(_config);\n            } else {\n                _device = new JSRocket.SyncDeviceClient(_config);\n            }\n\n            _device.on('ready', deviceReady);\n            _device.on('update', deviceUpdate);\n            _device.on('play', devicePlay);\n            _device.on('pause', devicePause);\n        }\n\n        function getConfig() {\n            return _config;\n        }\n\n        function setConfig(cfg) {\n            for (var option in cfg) {\n                if (cfg.hasOwnProperty(option)) {\n                    _config[option] = cfg[option];\n                }\n            }\n\n            return _config;\n        }\n\n        function deviceReady() {\n            _connected = true;\n            _eventHandler.ready();\n        }\n\n        function deviceUpdate(row) {\n            _eventHandler.update(row);\n        }\n\n        function devicePlay() {\n            _eventHandler.play();\n        }\n\n        function devicePause() {\n            _eventHandler.pause();\n        }\n\n        function getTrack(name) {\n            if (_connected) {\n                return _device.getTrack(name);\n            } else {\n                return null;\n            }\n        }\n\n        function update(row) {\n            //no need to update rocket on float rows\n            if (Math.floor(row) !== _previousIntRow) {\n                _previousIntRow = Math.floor(row);\n                _device.update(_previousIntRow);\n            }\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            init: init,\n            setConfig: setConfig,\n            getConfig: getConfig,\n            getTrack: getTrack,\n            update: update,\n            on: setEvent\n        };\n    };\n\n})(window);\n\n","/* Trivial player for formats that the browser supports natively through the <audio> element,\nsuch as MP3 and OGG */\n\nCowbell.Player.Audio = function() {\n\tthis.Track = function(url) {\n\t\tthis.open = function() {\n\t\t\tvar audio = document.createElement('audio');\n\t\t\taudio.src = url;\n\t\t\tdocument.body.appendChild(audio);\n\n\t\t\treturn audio;\n\t\t};\n\t};\n};\n","window.Cowbell = {\n\t'UI': {},\n\t'Player': {},\n\t'Common': {}\n};\n\nwindow.Cowbell.createPlayer = function(containerElement, opts) {\n\tif (!opts) opts = {};\n\n\tif (typeof(containerElement) == 'string') {\n\t\tcontainerElement = document.getElementById(containerElement);\n\t}\n\n\tvar uiConstructor = opts.ui || Cowbell.UI.Basic;\n\tvar ui = new uiConstructor(containerElement);\n\n\tif (opts.player) {\n\t\tvar player = new opts.player(opts.playerOpts);\n\n\t\tif (opts.url) {\n\t\t\tvar track = new player.Track(opts.url, opts.trackOpts);\n\t\t\tui.open(track);\n\t\t}\n\t}\n\n\treturn ui;\n};\n\nif (window.jQuery) {\n\twindow.jQuery.fn.cowbell = function(opts) {\n\t\tthis.each(function() {\n\t\t\tCowbell.createPlayer(this, opts);\n\t\t});\n\t};\n}\n","/* Player for module formats supported by libopenmpt */\n\n(function() {\n\tfunction OpenMPTGenerator(url, audioCtx, playerOpts, trackOpts) {\n\t\tvar modulePtr, leftBufferPtr, rightBufferPtr;\n\t\tvar maxFramesPerChunk = 4096;\n\t\tvar self = this;\n\t\tif (!playerOpts) playerOpts = {};\n\t\tif (!trackOpts) trackOpts = {};\n\n\t\tfunction initModule(data) {\n\t\t\tvar byteArray = new Int8Array(data);\n\t\t\tvar ptrToFile = libopenmpt._malloc(byteArray.byteLength);\n\t\t\tlibopenmpt.HEAPU8.set(byteArray, ptrToFile);\n\n\t\t\tmodulePtr = libopenmpt._openmpt_module_create_from_memory(ptrToFile, byteArray.byteLength, 0, 0, 0);\n            global.window.modulePtr = modulePtr;\n\t\t\tleftBufferPtr  = libopenmpt._malloc(4 * maxFramesPerChunk);\n\t\t\trightBufferPtr = libopenmpt._malloc(4 * maxFramesPerChunk);\n\n\t\t\tfunction asciiToStack(str) {\n\t\t\t\tvar stackStr = stackAlloc(str.length + 1);\n\t\t\t\twriteAsciiToMemory(str, stackStr);\n\t\t\t\treturn stackStr;\n\t\t\t}\n\t\t\tvar stack = stackSave();\n\t\t\tlibopenmpt._openmpt_module_ctl_set(modulePtr, asciiToStack('render.resampler.emulate_amiga'), asciiToStack('1')); // enable Amiga resampler\n\t\t\tlibopenmpt._openmpt_module_ctl_set(modulePtr, asciiToStack('render.resampler.emulate_amiga_type'), asciiToStack('a1200')); // set emulated Amiga model to A1200\n\t\t\tstackRestore(stack);\n\n\t\t\tself.duration = libopenmpt._openmpt_module_get_duration_seconds(modulePtr);\n\t\t}\n\n\t\tfunction ensureLibOpenMPT(onReady) {\n\t\t\tif (!playerOpts.pathToLibOpenMPT) {\n\t\t\t\tthrow \"pathToLibOpenMPT not specified\";\n\t\t\t}\n\n\t\t\tif (window.libopenmpt && window.libopenmpt._openmpt_module_create_from_memory) {\n\t\t\t\t/* libopenmpt already loaded */\n\t\t\t\tonReady();\n\t\t\t} else {\n\t\t\t\t/* load libopenmpt via <script> tag injection */\n\t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n\t\t\t\tvar script = document.createElement(\"script\");\n\t\t\t\tscript.src = playerOpts.pathToLibOpenMPT;\n\n\t\t\t\twindow.libopenmpt = {\n\t\t\t\t\tonRuntimeInitialized: function() {\n\t\t\t\t\t\tonReady();\n\t\t\t\t\t\thead.removeChild(script);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\thead.appendChild(script);\n\t\t\t}\n\t\t}\n\n\t\tthis.cleanup = function() {\n\t\t\tif (modulePtr) {\n\t\t\t\tlibopenmpt._openmpt_module_destroy(modulePtr);\n\t\t\t}\n\t\t\tif (leftBufferPtr) {\n\t\t\t\tlibopenmpt._free(leftBufferPtr);\n\t\t\t}\n\t\t\tif (rightBufferPtr) {\n\t\t\t\tlibopenmpt._free(rightBufferPtr);\n\t\t\t}\n\t\t};\n\n\t\tthis.load = function(onReady) {\n\t\t\tvar self = this;\n\t\t\tensureLibOpenMPT(function() {\n\t\t\t\tself.channelCount = 2;\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.addEventListener('error', function(e) {\n\t\t\t\t\tconsole.log('XHR error', e);\n\t\t\t\t});\n\n\t\t\t\trequest.addEventListener('load', function(e) {\n\t\t\t\t\tdata = request.response;\n\t\t\t\t\tinitModule(data);\n\t\t\t\t\tonReady();\n\t\t\t\t});\n\n\t\t\t\t/* trigger XHR */\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.responseType = \"arraybuffer\";\n\t\t\t\trequest.send();\n\t\t\t});\n\t\t};\n\n\t\tthis.generateAudio = function(outputBuffer) {\n\t\t\tvar outputL = outputBuffer.getChannelData(0);\n\t\t\tvar outputR = outputBuffer.getChannelData(1);\n\t\t\tvar framesToRender = outputBuffer.length;\n\n\t\t\tvar framesRendered = 0;\n\t\t\tvar ended = false;\n\t\t\twhile (framesToRender > 0) {\n\t\t\t\tvar framesPerChunk = Math.min(framesToRender, maxFramesPerChunk);\n\t\t\t\tvar actualFramesPerChunk = libopenmpt._openmpt_module_read_float_stereo(modulePtr, audioCtx.sampleRate, framesPerChunk, leftBufferPtr, rightBufferPtr);\n\t\t\t\tvar rawAudioLeft = libopenmpt.HEAPF32.subarray(leftBufferPtr / 4, leftBufferPtr / 4 + actualFramesPerChunk);\n\t\t\t\tvar rawAudioRight = libopenmpt.HEAPF32.subarray(rightBufferPtr / 4, rightBufferPtr / 4 + actualFramesPerChunk);\n\t\t\t\tfor (var i = 0; i < actualFramesPerChunk; ++i) {\n\t\t\t\t\toutputL[framesRendered + i] = rawAudioLeft[i];\n\t\t\t\t\toutputR[framesRendered + i] = rawAudioRight[i];\n\t\t\t\t}\n\t\t\t\tframesToRender -= actualFramesPerChunk;\n\t\t\t\tframesRendered += actualFramesPerChunk;\n\t\t\t\tif (actualFramesPerChunk < framesPerChunk) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn framesRendered;\n\t\t};\n\n\t\tthis.seekable = true;\n\n\t\tthis.seek = function(position) {\n\t\t\tlibopenmpt._openmpt_module_set_position_seconds(modulePtr, position);\n\t\t};\n\n\t\tthis.reset = function() {\n\t\t\tthis.seek(0);\n\t\t}\n\t}\n\tCowbell.Player.OpenMPT = function(opts) {\n\t\treturn new Cowbell.Common.WebAudioPlayer(OpenMPTGenerator, opts);\n\t};\n})();\n","/*\nWrapper to allow Web Audio createScriptProcessor-based player routines to expose\na subset of the HTML5 Media Element API.\n\nThis wrapper handles the details of buffering, pausing, and keeping track of current play time.\nInner routines only need to implement a simple 'generator' API consisting of filling a buffer\nwith audio data, and seeking to a specified time.\n*/\n\n(function () {\n    var audioCtx;\n    Cowbell.Common.WebAudioPlayer = function (generatorConstructor, playerOpts) {\n        this.Track = function (url, trackOpts) {\n            var generator;\n\n            this.open = function () {\n                var self = {};\n\n                if (!audioCtx) {\n                    var AudioContext = window.AudioContext || window.webkitAudioContext;\n                    audioCtx = new AudioContext({\n                        latencyHint: \"playback\",\n                        sampleRate: 22050\n                      });\n                }\n\n                var BUFFER_SIZE = 4096;\n\n                self.HAVE_NOTHING = 0;\n                self.HAVE_METADATA = 1;\n                self.HAVE_CURRENT_DATA = 2;\n                self.HAVE_FUTURE_DATA = 3;\n                self.HAVE_ENOUGH_DATA = 4;\n                self.readyState = self.HAVE_NOTHING;\n\n                generator = new generatorConstructor(url, audioCtx, playerOpts, trackOpts);\n                var generatorIsReady = false;\n                var playWasRequestedBeforeReady = false;\n                var scriptNode;\n\n                var hasStartedProcessing = false;\n                var playFromTime = 0;\n                var playStartTimestamp;\n                self.paused = true;\n\n                generator.load(function () {\n                    generatorIsReady = true;\n                    self.readyState = self.HAVE_ENOUGH_DATA;\n                    self.duration = generator.duration;\n                    if (generator.seekable) {\n                        self.seekable = {\n                            'length': 1,\n                            'start': function (i) {\n                                if (i !== 0) throw \"Out of range\";\n                                return 0;\n                            },\n                            'end': function (i) {\n                                if (i !== 0) throw \"Out of range\";\n                                return generator.duration;\n                            }\n                        };\n                    } else {\n                        self.seekable = {\n                            'length': 0,\n                            'start': function (i) {\n                                throw \"Out of range\";\n                            },\n                            'end': function (i) {\n                                throw \"Out of range\";\n                            }\n                        };\n                    }\n                    seek(0);\n                    if (self.onloadedmetadata) self.onloadedmetadata();\n                    if (playWasRequestedBeforeReady) self.play();\n                });\n\n                function seek(newTime) {\n                    if (scriptNode) scriptNode.disconnect(0);\n                    if (newTime > 0) {\n                        generator.seek(newTime);\n                    } else {\n                        generator.reset();\n                    }\n                    playFromTime = newTime;\n                    hasStartedProcessing = false;\n                    scriptNode = audioCtx.createScriptProcessor(BUFFER_SIZE, 0, generator.channelCount);\n                    scriptNode.onaudioprocess = generateAudio;\n                    if (!self.paused) {\n                        self.paused = true;\n                        self.play();\n                    }\n                }\n\n                function generateAudio(event) {\n                    if (!hasStartedProcessing) {\n                        playStartTimestamp = event.playbackTime;\n                        hasStartedProcessing = true;\n                    }\n\n                    var generatedLength = generator.generateAudio(event.outputBuffer);\n\n                    if (generatedLength < event.outputBuffer.length) {\n                        /* generate silence for the remainder of the buffer */\n                        for (var chan = 0; chan < event.outputBuffer.numberOfChannels; chan++) {\n                            var channelData = event.outputBuffer.getChannelData(chan);\n                            for (var i = generatedLength; i < event.outputBuffer.length; i++) {\n                                channelData[i] = 0;\n                            }\n                        }\n\n                        if (self.currentTime > self.duration) {\n                            /* we've finished playing (not just generating) the audio */\n                            self.pause();\n                            if (self.onended) self.onended();\n                            seek(0);\n                        }\n                    }\n\n                    if (self.ontimeupdate) self.ontimeupdate();\n                }\n\n                self.play = function () {\n                    if (!generatorIsReady) {\n                        playWasRequestedBeforeReady = true;\n                        return;\n                    }\n                    if (self.paused) {\n                        scriptNode.connect(audioCtx.destination);\n                        self.paused = false;\n                        // If an AudioContext is created prior to the document receiving a user gesture, \n                        // it will be created in the \"suspended\" state, and you will need to call resume() \n                        // after a user gesture is received.\n                        if (audioCtx.state === 'suspended') { audioCtx.resume() };\n                        if (self.onplay) self.onplay();\n\n                        if (hasStartedProcessing) {\n                            playStartTimestamp = audioCtx.currentTime;\n                            playFromTime = pausedAtTrackTime;\n                        }\n                    }\n                };\n\n                self.pause = function () {\n                    if (!self.paused) {\n                        pausedAtTimestamp = audioCtx.currentTime;\n                        pausedAtTrackTime = self.currentTime;\n\n                        scriptNode.disconnect(0);\n                        self.paused = true;\n                        if (self.onpause) self.onpause();\n                    }\n                };\n\n\n                /*\n                hasStartedProcessing = false && self.paused = true  =>  initial state\n                hasStartedProcessing = false && self.paused = false  =>  the instant we just called play()\n                hasStartedProcessing = true && self.paused = false  =>\n                    ready to play if currentTime < playStartTimestamp; playing if currentTime >= playStartTimestamp\n                hasStartedProcessing = true && self.paused = true  => paused\n                */\n\n                self.__defineGetter__('currentTime', function () {\n                    if (!hasStartedProcessing) return playFromTime;\n                    if (self.paused) return pausedAtTrackTime;\n                    if (audioCtx.currentTime < playStartTimestamp) return playFromTime;\n                    return playFromTime + audioCtx.currentTime - playStartTimestamp;\n                });\n\n                self.__defineSetter__('currentTime', function (newTime) {\n                    if (generator.seekable || newTime === 0) {\n                        seek(newTime);\n                    }\n                });\n\n                return self;\n            };\n            this.close = function () {\n                if (generator && generator.cleanup) {\n                    generator.cleanup();\n                }\n            };\n        };\n    };\n})();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { DemoScene } from './DemoScene';\n\nclass Application {\n\n    // HD Resolution 1920 x 1080\n    public static readonly CANVAS_WIDTH = 1920 / 5;\n    public static readonly CANVAS_HEIGHT = 1080 / 5;\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(Application.CANVAS_WIDTH, Application.CANVAS_HEIGHT, new DemoScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["f","module","exports","e","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","this","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","v","m","n","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","id","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","event","FullscreenUtils","toggleFullscreen","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","floor","roundedY","percent","abs","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","theta","phi","Vector4f","seed","back","down","front","left","right","up","Promise","all","TextureUtils","load","setClamp","draw","mv","setFramebuffer","drawSkyBox","getRotation","rotation","sclae","textures","skyBoxSideModel","skyPoints","map","uv","TextureCoordinate","faces","vertices","setModelViewMatrix","position","projection","keyFrames","setKeyFrames","getViewMatrix","first","zero","second","third","fraction","Utils","CubicInterpolate","look","EulerAngleCamera","blenderScene","invert","object","normals","normalize","n1","n2","n3","obj","transformedNormals","transformedPoints","file","disp","coords","ComputationalGeometryUtils","computeBoundingSphere","normals2","boundingSphere","name","json","currentObject","normalCount","vertexCount","uvCount","normalOffset","vertexOffset","uvOffset","toString","split","line","startsWith","Mesh","console","error","Error","Vector","Number","parseFloat","TexCoord","Face","drawScaledTextureClip","frame","filename","fetch","response","JSON","parse","cameraPath","CameraPath","keys","myFrame","CameraFrame","location","frames","CameraKeyFrame","rx","ry","rz","constructZRotationMatrix","translation","getPosition","sub","num","_start","_end","_length","isEmpty","insertStart","node","next","previous","insertEnd","insert","currentNode","deleteStart","deleteEnd","delete","getNode","toArray","array","_data","_next","_previous","input","value","istart","istop","ostart","ostop","random","srcPosition","dst","dstPosition","slice","prototype","splice","apply","concat","fade","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","y0","y2","y3","mu","mu2","a0","AbstractCube","AbstractScene","blurred","accumulationBuffer","renderingPipeline","GouraudShadingRenderingPipeline","BlenderLoader","mesh","generateProceduralNoise","drawBlenderScene2","texture3","model","BakedLighting","skyBox","baked","blenderObj8","SkyBox","loadWithTexture","drawBlenderScene7","drawMeshArray","BlenderCameraScene","texture4","fpsStartTime","fpsCount","fps","meshes","path","light1","light2","cameraAnimator","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","setLights","WavefrontLoader","CameraLoader","BlenderCameraAnimator","computeFps","currentTime","timeInput","BlockFade","ledTexture","transitionFramebufferTo","transitionCircle","transitionWipe","croud","prevMask","curMask","diff","noiseMask","croudMask","particleArray","c3","drawCircle","initDissolve","textureBackground","createCroud","isBackground","bias","xbase","ybase","xnoise","ynoise","pn","PerlinNoise","curBias","_gray","dissolve","renderBuffer","renderBuffer2","particle","Particle","_color","it","addColor","putpixel","x0","radius","blockFade","transition","transitionSceneFrom","transitionSceneTo","transitionMethod","transitionValue","trunc","TransitionMethods","BLOCKFADE","CROSSFADE","crossFade","DISSOLVE","FADEIN","fadeIn","FADEOUT","fadeOut","WIPE_LEFT","crossFadeImage","CIRCLE","pixelArray","pixelArrayWidth","blockWidth","horizontalUnits","verticalUnits","fadeArray","blend","transitionImage","clamp","startColor","endColor","renderScanlines","shiftAmount","offRed","offGreen","offBlue","strips","verticalPosition","imagePixelR","imagePixelG","imagePixelB","_x","_y","dx","dy","TTL","isLiving","CubeScene","cubeMesh","Cube","fairlight","renderCube","getMesh","getModelViewMatrix","renderBackground","soundManager","canvasRecorder","sceneList","nodeInstance","stats","canvasRef","timelineRef","sceneRef","timeRef","SoundManager","DoublyLinkedList","initControls","allProgress","loadMusic","prepareSync","plug","initScene","outputX","args","constructorName","Object","newNode","DLNode","CanvasRecorder","initTimeline","initStats","tickerPlayRef","tickerStopRef","tickerNextRef","tickerBackRef","tickerRecordRef","tickerScreenshotRef","tickerVolumeRef","onPause","seek","classList","remove","recording","saveVideo","onPlay","recordVideo","audioElement","isPlaying","setAttribute","toggleSound","muted","localStorage","setItem","String","date","fileName","toISOString","toTimeString","replace","image","toDataURL","anchor","click","jump","musicProperties","timeSeconds","target","directionToScroll","deltaY","stopPropagation","passive","key","promises","progressCallback","Stats","statsObj","body","updateMusic","sceneData","effect","transitionType","timeMilliseconds","drawStats","syncDevice","connected","demoMode","innerText","toFixed","canvasRecordingOptions","audioTrack","getType","ext","fileExtension","includes","pop","createCanvasRecorder","options","audio","link","frameRate","download","recorderOptions","mimeType","audioBitsPerSecond","videoBitsPerSecond","chunks","stream","captureStream","recorder","MediaRecorder","ondataavailable","onstop","blob","Blob","type","url","URL","createObjectURL","href","MouseEvent","dispatchEvent","setTimeout","revokeObjectURL","timeslice","stop","dispose","sound","info","canvasObj","PlaneDeformationFloorScene","PlaneDeformationScene","MetalHeadzScene","DofBallsScene","TorusKnotTunnelScene","GearsScene","ParticleStreamsScene","HoodlumScene","TwisterScene","RazorScene","logo","SineScrollerScene","background","pizza","PlasmaScene","TorusScene","DistortedSphereScene","renderTransparent","RotoZoomerScene","VoxelBallsScene","LedPlasmaScene","heightmapSphere","env","createSphereDistplaced","shadingSphereEnvDisp2","createSphere","pointsA","divideSphere","point","find","findPoint","idx","indexOf","steps","vn1","vn2","vn3","newPoints","result","rot","norm","norm2","cross","sub2","cross2","add2","normalize2","normalMatrix","computeNormalMatrix","multiplyHomArr","vertex1","Vertex","vertex2","vertex3","vertexArray","clipConvexPolygon","drawTriangleDDA","particleTexture2","drawParticleTorus","computeDepthBlur","nearPlane","focalPlane","farPlane","depth","noClear","spriteNum","gearsMesh","FRONT","drawBlenderScene4","factor","dampFactor","lab2","spaceLabMesh","hoodlumLogoMesh","createProceduralTexture3","drawBlenderScene9","scale2","resolve","led","lineDirection","radialWaveCenter","difference","directionalWave","intensity","metalheadz","texture11","texture13","dirt","blenderObjMetal","computeCameraMovement","lensflareScreenSpace","LensFlare","drawLensFlare","generateProceduralParticleTexture","radius2","effectStyle","texturePath","mLUT","createLUT","effectWidth","effectHeight","textureWidth","textureHeight","Int32Array","bright","pow","elapsedTimeY","elapsedTimeX","pixelCount","o","adjustBrightness","currentPixel","drawOldPlaneDeformationFloor","drawOldPlaneDeformationStar","GRADIENTLEN","SWINGLEN","SWINGMAX","colorGrad","swingCurve","makeGradient","makeSwingCurve","drawPlasma","arrlen","maxval","halfmax","ni","cos256","amplitude","swing","gradient","swingT","swingY","swingYT","texture10","cube","dodecahedron","pyramid","icosahedron","Dodecahedron","Pyramid","Sphere","reproduceRazorScene","distance","yDisplacement","enableLighting","setColor","DARK_GRAY","constructShadowMatrix","logoTexture","drawRotoZoomer","yStepX","yStepY","xStepX","xStepY","texYCoord","texXCoord","texYCoordInner","texXCoordInner","framebufferPos","fontTexture","charToIndex","fonts","Map","addCharInex","drawText2","xFonts","asciiCode","has","get","sine","textOff","startW","endW","yDisp","char","texture2","fontRenderer","fontRenderer2","FontRenderer","drawStarField","myTime","waveSum","red","green","frambuffer","stars","stars2","DARK_BLUE","particleTexture","cocoon","torusKnot","TorusKnot","fog","LinearFog","setFog","generateProceduralParticleTexture2","torusTunnel","glitchScreen","glitchFactor","rng2","off","glIndex","torusFunction3","frame2","tangent","constructIdentityMatrix","m14","m24","m34","m11","m21","m31","m12","m22","m32","m13","m23","m33","finalMatrix","transpose","razorLogo","drawTitanEffect","shadingTorus","horizontalNum","verticalNum","backgroundTexture","x2","x3","x4","xPos","drawSpan","ypos","textureForwardDifference","hightlight","YELLOW","mat","xSteps","xsteps","zsteps","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","AbstractGeometricObject","super","ySteps","STEPS","sphereFunction","center","current","xScale","yScale","zScale","vector","m41","m42","m43","m44","setIdentityMatrix","inverseTranslation","scale1","scale3","inverseRotation","getInverseRotation","planePoint","planeNormal","lightPosition","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr2","multiplyArr","isInsidePositiveHalfSpace","getNormal","getDistance","getTran","perp","vec","scal","reci","mult","vec1","vec2","componentWiseMul","BlenderJsonParser","getBlenderScene","convertToMeshArray","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","colorSlope","setup","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","lights","material","lighting","clipper","projectedVertices","SutherlandHodgman2DClipper","Material","ambientColor","diffuseColor","specularColor","shininess","enable","setMaterial","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","S","projected","late","clippedPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","Fog","zStart","zEnd","fogColor","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","Light","emissiveColor","BPM","ROWS_PER_BEAT","ROW_RATE","row","JSRocket","SyncDevice","audioPlayer","toLowerCase","Cowbell","Player","OpenMPT","Audio","track","Track","open","setConfig","on","onSyncReady","newRow","onSyncUpdate","getTrack","snare","bass","isNaN","getValue","paused","duration","play","log","pause","direction","sceneLength","effectJump","parseInt","ref","isMuted","newLocal","jumpTo","getItem","libopenmpt","poll","modulePtr","updateRange","onloadedmetadata","screenPos","dir","maxWidth","maxHeight","getPixel","getBilinearFilteredPixel","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","transparency","Image","onload","onerror","withAlpha","conv","SyncData","_track","getIndexForName","getTrackLength","createIndex","varName","lo","hi","mi","findKeyIndex","k0","k1","interpolation","SyncDevicePlayer","cfg","_urlRequest","_syncData","_eventHandler","XMLHttpRequest","onreadystatechange","urlRequestHandler","send","readyState","status","xmlString","tLen","kLen","trackList","DOMParser","parseFromString","getElementsByTagName","keyList","ready","readXML","responseText","rocketXML","undefined","evt","handler","SyncDeviceClient","_ws","WebSocket","socketURL","toInt","arr","view","DataView","setUint8","byteLength","getInt8","getInt32","onopen","binaryType","onmessage","queue","Uint8Array","cmd","subarray","getFloat32","save","onclose","warn","utf8Name","encodeURIComponent","fromCharCode","message","buffer","streamInt","_device","_previousIntRow","_connected","_config","deviceReady","deviceUpdate","devicePlay","devicePause","mode","option","hasOwnProperty","getConfig","createPlayer","containerElement","opts","ui","UI","Basic","player","playerOpts","trackOpts","jQuery","fn","cowbell","each","OpenMPTGenerator","audioCtx","leftBufferPtr","rightBufferPtr","initModule","byteArray","Int8Array","ptrToFile","_malloc","asciiToStack","str","stackStr","stackAlloc","writeAsciiToMemory","HEAPU8","_openmpt_module_create_from_memory","stack","stackSave","_openmpt_module_ctl_set","stackRestore","_openmpt_module_get_duration_seconds","cleanup","_openmpt_module_destroy","_free","onReady","pathToLibOpenMPT","head","script","onRuntimeInitialized","removeChild","ensureLibOpenMPT","channelCount","request","responseType","generateAudio","outputBuffer","outputL","getChannelData","outputR","framesToRender","framesRendered","framesPerChunk","actualFramesPerChunk","_openmpt_module_read_float_stereo","sampleRate","rawAudioLeft","HEAPF32","rawAudioRight","seekable","_openmpt_module_set_position_seconds","reset","Common","WebAudioPlayer","generatorConstructor","generator","AudioContext","webkitAudioContext","latencyHint","HAVE_NOTHING","HAVE_METADATA","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","scriptNode","playStartTimestamp","generatorIsReady","playWasRequestedBeforeReady","hasStartedProcessing","playFromTime","newTime","disconnect","createScriptProcessor","onaudioprocess","playbackTime","generatedLength","chan","numberOfChannels","channelData","onended","ontimeupdate","connect","destination","state","resume","onplay","pausedAtTrackTime","pausedAtTimestamp","onpause","__defineGetter__","__defineSetter__","close","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","globalThis","Function","scriptUrl","importScripts","currentScript","scripts","Application","Canvas","CANVAS_WIDTH","CANVAS_HEIGHT","DemoScene","main"],"sourceRoot":""}