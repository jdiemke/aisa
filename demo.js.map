{"version":3,"file":"demo.js","mappings":"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","sources":["webpack://aisa/./src/demo-style.css","webpack://aisa/./node_modules/css-loader/dist/runtime/api.js","webpack://aisa/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://aisa/./node_modules/stats.js/build/stats.min.js","webpack://aisa/./src/demo-style.css?5811","webpack://aisa/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://aisa/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/SkyBox.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/animation/BlenderCameraAnimator.ts","webpack://aisa/./src/animation/CameraKeyFrame.ts","webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/blender/face.ts","webpack://aisa/./src/blender/mesh.ts","webpack://aisa/./src/blender/parseUtils.ts","webpack://aisa/./src/blender/tex-coord.ts","webpack://aisa/./src/blender/vector.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/camera/CameraFrame.ts","webpack://aisa/./src/camera/CameraLoader.ts","webpack://aisa/./src/camera/CameraPath.ts","webpack://aisa/./src/camera/EulerAngleCamera.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/core/LinkedList.ts","webpack://aisa/./src/core/Node.ts","webpack://aisa/./src/core/Utils.ts","webpack://aisa/./src/examples/abstract-cube/AbstractCube.ts","webpack://aisa/./src/examples/baked-lighting/BakedLighting.ts","webpack://aisa/./src/examples/blender-camera-animation/BlenderCameraScene.ts","webpack://aisa/./src/examples/block-fade/BlockFade.ts","webpack://aisa/./src/examples/block-fade/Particle.ts","webpack://aisa/./src/examples/block-fade/TransitionMethods.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/demo/DemoScene.ts","webpack://aisa/./src/examples/demo/canvas-record.ts","webpack://aisa/./src/examples/demo/parts/Scene1.ts","webpack://aisa/./src/examples/demo/parts/Scene10.ts","webpack://aisa/./src/examples/demo/parts/Scene11.ts","webpack://aisa/./src/examples/demo/parts/Scene12.ts","webpack://aisa/./src/examples/demo/parts/Scene13.ts","webpack://aisa/./src/examples/demo/parts/Scene14.ts","webpack://aisa/./src/examples/demo/parts/Scene15.ts","webpack://aisa/./src/examples/demo/parts/Scene16.ts","webpack://aisa/./src/examples/demo/parts/Scene17.ts","webpack://aisa/./src/examples/demo/parts/Scene18.ts","webpack://aisa/./src/examples/demo/parts/Scene19.ts","webpack://aisa/./src/examples/demo/parts/Scene2.ts","webpack://aisa/./src/examples/demo/parts/Scene20.ts","webpack://aisa/./src/examples/demo/parts/Scene3.ts","webpack://aisa/./src/examples/demo/parts/Scene4.ts","webpack://aisa/./src/examples/demo/parts/Scene5.ts","webpack://aisa/./src/examples/demo/parts/Scene6.ts","webpack://aisa/./src/examples/demo/parts/Scene7.ts","webpack://aisa/./src/examples/demo/parts/Scene8.ts","webpack://aisa/./src/examples/demo/parts/Scene9.ts","webpack://aisa/./src/examples/distorted-sphere/DistortedSphereScene.ts","webpack://aisa/./src/examples/dof-balls/DofBallsScene.ts","webpack://aisa/./src/examples/gears/GearsScene.ts","webpack://aisa/./src/examples/hoodlum/HoodlumScene.ts","webpack://aisa/./src/examples/led-plasma/LedPlasmaScene.ts","webpack://aisa/./src/examples/metalheadz/MetalHeadzScene.ts","webpack://aisa/./src/examples/particle-streams/ParticleStreamsScene.ts","webpack://aisa/./src/examples/plane-deformation/PlaneDeformationScene.ts","webpack://aisa/./src/examples/plasma/PlasmaScene.ts","webpack://aisa/./src/examples/razor/RazorScene.ts","webpack://aisa/./src/examples/roto-zoomer/RotoZoomerScene.ts","webpack://aisa/./src/examples/sine-scroller/FontRenderer.ts","webpack://aisa/./src/examples/sine-scroller/SineScrollerScene.ts","webpack://aisa/./src/examples/torus-knot-tunnel/TorusKnotTunnelScene.ts","webpack://aisa/./src/examples/torus/TorusScene.ts","webpack://aisa/./src/examples/twister/TwisterScene.ts","webpack://aisa/./src/examples/voxel-balls/VoxelBallsScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Dodecahedron.ts","webpack://aisa/./src/geometrical-objects/Pyramid.ts","webpack://aisa/./src/geometrical-objects/Sphere.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/geometrical-objects/TorusKnot.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/blender/BlenderLoader.ts","webpack://aisa/./src/model/wavefront-obj/WavefrontLoader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/fog/Fog.ts","webpack://aisa/./src/shading/fog/LinearFog.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/sound/MusicProperties.ts","webpack://aisa/./src/sound/SoundManager.ts","webpack://aisa/./src/special-effects/LensFlare.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/./src/texture/index.ts","webpack://aisa/./src/sound/JSRocket.js","webpack://aisa/./src/sound/cowbell/audio_player.js","webpack://aisa/./src/sound/cowbell/cowbell.js","webpack://aisa/./src/sound/cowbell/openmpt/openmpt_player.js","webpack://aisa/./src/sound/cowbell/web_audio_player.js","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/compat get default export","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/webpack/runtime/nonce","webpack://aisa/./src/examples/demo/Application.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n    padding: 0;\n    margin: 0;\n    color: white;\n    background-color: #000;\n    font-family: 'Play', sans-serif;\n    font-size: 100%;\n}\n\n#aisa {\n    cursor: zoom-in;\n}\n\n/* debugging */\n#debug {\n    bottom: 0;\n    height: 24px;\n    width: 640px;\n    background-color: black;\n    display: none;\n}\n\n#ticker_controls {\n    padding: 10px 0 10px 0;\n    -moz-user-select: -moz-none;\n    -khtml-user-select: none;\n    -webkit-user-select: none;\n}\n\n#ticker_controls .fa {\n    cursor: pointer;\n    color: white;\n    padding-left: 8px;\n    padding-right: 8px;\n    width: 16px;\n}\n\n#timeline {\n    -webkit-appearance: none;\n    width: 100%;\n    height: 25px;\n    background: #fff;\n    outline: none;\n    -webkit-transition: .2s;\n    transition: opacity .2s;\n}\n\n#timeline::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 20px;\n    height: 25px;\n    background: rgb(10, 28, 109);\n    cursor: pointer;\n}\n\n#timeline::-moz-range-thumb {\n    width: 20px;\n    height: 25px;\n    background: #000;\n    cursor: pointer;\n}\n\n#scene, #time {\n    font-weight: bold;\n    padding-right: 10px;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/demo-style.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,UAAU;IACV,SAAS;IACT,YAAY;IACZ,sBAAsB;IACtB,+BAA+B;IAC/B,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA,cAAc;AACd;IACI,SAAS;IACT,YAAY;IACZ,YAAY;IACZ,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,sBAAsB;IACtB,2BAA2B;IAC3B,wBAAwB;IACxB,yBAAyB;AAC7B;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,wBAAwB;IACxB,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,uBAAuB;AAC3B;;AAEA;IACI,wBAAwB;IACxB,gBAAgB;IAChB,WAAW;IACX,YAAY;IACZ,4BAA4B;IAC5B,eAAe;AACnB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,mBAAmB;AACvB\",\"sourcesContent\":[\"body {\\n    padding: 0;\\n    margin: 0;\\n    color: white;\\n    background-color: #000;\\n    font-family: 'Play', sans-serif;\\n    font-size: 100%;\\n}\\n\\n#aisa {\\n    cursor: zoom-in;\\n}\\n\\n/* debugging */\\n#debug {\\n    bottom: 0;\\n    height: 24px;\\n    width: 640px;\\n    background-color: black;\\n    display: none;\\n}\\n\\n#ticker_controls {\\n    padding: 10px 0 10px 0;\\n    -moz-user-select: -moz-none;\\n    -khtml-user-select: none;\\n    -webkit-user-select: none;\\n}\\n\\n#ticker_controls .fa {\\n    cursor: pointer;\\n    color: white;\\n    padding-left: 8px;\\n    padding-right: 8px;\\n    width: 16px;\\n}\\n\\n#timeline {\\n    -webkit-appearance: none;\\n    width: 100%;\\n    height: 25px;\\n    background: #fff;\\n    outline: none;\\n    -webkit-transition: .2s;\\n    transition: opacity .2s;\\n}\\n\\n#timeline::-webkit-slider-thumb {\\n    -webkit-appearance: none;\\n    appearance: none;\\n    width: 20px;\\n    height: 25px;\\n    background: rgb(10, 28, 109);\\n    cursor: pointer;\\n}\\n\\n#timeline::-moz-range-thumb {\\n    width: 20px;\\n    height: 25px;\\n    background: #000;\\n    cursor: pointer;\\n}\\n\\n#scene, #time {\\n    font-weight: bold;\\n    padding-right: 10px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./demo-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./demo-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1,\n    DISABLED\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","import { Framebuffer } from './Framebuffer';\nimport { Matrix4f, Vector4f } from './math';\nimport { Texture, TextureUtils } from './texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { TexturedMesh } from './rendering-pipelines/TexturedMesh';\n\nexport class SkyBox {\n\n    private back: Texture;\n    private down: Texture;\n    private front: Texture;\n    private left: Texture;\n    private right: Texture;\n    private up: Texture;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline = new TexturingRenderingPipeline(null);\n    public init(): Promise<any> {\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/skybox/skybox_back.png'), false).then(\n                (texture: Texture) => this.back = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_down.png'), false).then(\n                (texture: Texture) => this.down = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_front.png'), false).then(\n                (texture: Texture) => this.front = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_left.png'), false).then(\n                (texture: Texture) => this.left = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_right.png'), false).then(\n                (texture: Texture) => this.right = texture\n            ),\n            TextureUtils.load(require('./assets/skybox/skybox_up.png'), false).then(\n                (texture: Texture) => this.up = texture\n            )]).then(() => {\n                this.back.setClamp(true);\n                this.down.setClamp(true);\n                this.front.setClamp(true);\n                this.left.setClamp(true);\n                this.right.setClamp(true);\n                this.up.setClamp(true);\n            });\n    }\n\n    // move code from framebuffer into draw method!\n    public draw(framebuffer: Framebuffer, mv: Matrix4f): void {\n    \n        this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n        this.drawSkyBox(framebuffer, mv.getRotation());\n    }\n\n    public drawSkyBox(framebuffer: Framebuffer, rotation: Matrix4f): void {\n        const sclae = 20;\n        const textures = [\n            this.back,\n            this.left,\n            this.front,\n            this.right\n        ];\n\n        let camera: Matrix4f;\n        let mv: Matrix4f;\n        let skyBoxSideModel: TexturedMesh;\n\n        const skyPoints = [\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, 1, -1, 1),\n            new Vector4f(-1, -1, -1, 1),\n            new Vector4f(1, -1, -1, 1)\n        ];\n\n        for (let i = 0; i < 4; i++) {\n            camera =\n                rotation.multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI).multiplyMatrix(\n                        Matrix4f.constructYRotationMatrix(+ Math.PI * 2 / 4 * i)));\n\n\n            mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n\n            // skybox: starz\n            skyBoxSideModel = {\n                points: skyPoints,\n                points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n                uv: [\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 1),\n                    new TextureCoordinate(0, 0),\n                    new TextureCoordinate(1, 0),\n                ],\n                faces: [\n                    {\n                        vertices: [0, 1, 2],\n                        uv: [0, 1, 2]\n                    },\n                    {\n                        vertices: [3, 4, 5],\n                        uv: [3, 4, 5]\n                    }\n                ]\n            };\n\n            framebuffer.setTexture(textures[i]);\n            this.texturedRenderingPipeline.setFramebuffer(framebuffer);\n            this.texturedRenderingPipeline.setModelViewMatrix(mv);\n            this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n        }\n\n        camera = rotation.multiplyMatrix(\n            Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(0)\n                    .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 4 * 1).multiplyMatrix(Matrix4f.constructXRotationMatrix(-Math.PI * 2 / 4)))\n            );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.up);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n\n\n        camera =\n            rotation.multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(Math.PI)).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(0)\n                        .multiplyMatrix(Matrix4f.constructYRotationMatrix(Math.PI * 2 / 2).multiplyMatrix(Matrix4f.constructXRotationMatrix(Math.PI * 2 / 4)))\n\n                );\n\n\n        mv = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(sclae, sclae, sclae));\n\n        // skybox: starz\n        skyBoxSideModel = {\n            points: skyPoints,\n            points2: skyPoints.map(() => new Vector4f(0, 0, 0)),\n            uv: [\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 1),\n                new TextureCoordinate(0, 0),\n                new TextureCoordinate(1, 0),\n            ],\n            faces: [\n                {\n                    vertices: [0, 1, 2],\n                    uv: [0, 1, 2]\n                },\n                {\n                    vertices: [3, 4, 5],\n                    uv: [3, 4, 5]\n                }\n            ]\n        };\n\n        framebuffer.setTexture(this.down);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.draw(framebuffer, skyBoxSideModel);\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { EulerAngleCamera } from '../camera/EulerAngleCamera';\nimport { Utils } from '../core/Utils';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector3f } from '../math/Vector3f';\nimport { CameraKeyFrame } from './CameraKeyFrame';\n\nexport class BlenderCameraAnimator {\n\n    public pos: Vector3f;\n    private keyFrames: Array<CameraKeyFrame>;\n\n    // TODO:\n    // - should we really loop or better restart??\n    // - dont use linear interpolation see bourke\n    // - maybe quaternions and slerp for rotation\n    // temp solution: no linear for\n\n    public setKeyFrames(keyFrames: Array<CameraKeyFrame>): void {\n        this.keyFrames = keyFrames;\n    }\n\n    public getViewMatrix(elapsedTime: number): Matrix4f {\n        const keyFrameDuration = 2600;\n\n        elapsedTime *= 1.0;\n\n        const first = ((elapsedTime / keyFrameDuration) | 0) % this.keyFrames.length;\n        const zero = ((first - 1) + this.keyFrames.length) % this.keyFrames.length;\n        const second = (first + 1) % this.keyFrames.length;\n        const third = (first + 2) % this.keyFrames.length;\n        const fraction = ((elapsedTime / keyFrameDuration) % this.keyFrames.length) - first;\n\n        const position = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].position.x, this.keyFrames[first].position.x, this.keyFrames[second].position.x, this.keyFrames[third].position.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.y, this.keyFrames[first].position.y, this.keyFrames[second].position.y, this.keyFrames[third].position.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].position.z, this.keyFrames[first].position.z, this.keyFrames[second].position.z, this.keyFrames[third].position.z, fraction)\n        );\n        //let look = this.keyFrames[first].rotation.mul(1 - mu2).add(this.keyFrames[second].rotation.mul(mu2));\n\n        const look = new Vector3f(\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.x, this.keyFrames[first].rotation.x, this.keyFrames[second].rotation.x, this.keyFrames[third].rotation.x, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.y, this.keyFrames[first].rotation.y, this.keyFrames[second].rotation.y, this.keyFrames[third].rotation.y, fraction),\n            Utils.CubicInterpolate(this.keyFrames[zero].rotation.z, this.keyFrames[first].rotation.z, this.keyFrames[second].rotation.z, this.keyFrames[third].rotation.z, fraction)\n        );\n        this.pos = position;\n\n        return new EulerAngleCamera(position, look.x, look.y, look.z).getViewMatrix();\n    }\n\n}\n\n","import { Vector3f } from '../math';\n\nexport class CameraKeyFrame {\n\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(position: Vector3f, rotation: Vector3f) {\n        this.position = position;\n        this.rotation = rotation;\n    }\n\n}","import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Face {\n    public vertices: Array<number>;\n    public normals: Array<number>;\n    public uv: Array<number>;\n}\n","import { Face } from './face';\nimport { TexCoord } from './tex-coord';\nimport { Vector } from './vector';\n\nexport class Mesh {\n\n    public name: string;\n    public vertices: Array<Vector>;\n    public normals: Array<Vector>;\n    public uv: Array<TexCoord>;\n    public faces: Array<Face>;\n\n}\n","import { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexCoord } from './tex-coord';\nimport { Face } from './face';\n\nexport function convertToMeshArray(data: string): Array<Mesh> {\n    const json: Array<Mesh> = new Array<Mesh>();\n\n    let currentObject: Mesh = null;\n\n    let normalCount: number = 0;\n    let vertexCount: number = 0;\n    let uvCount: number = 0;\n    let normalOffset: number = 0;\n    let vertexOffset: number = 0;\n    let uvOffset: number = 0;\n\n    data.toString().split('\\n').forEach((line: string) => {\n\n        if (line.startsWith('o ')) {\n            const coords: Array<string> = line.split(' ');\n\n            currentObject = new Mesh();\n            currentObject.name = coords[1];\n            currentObject.normals = [];\n            currentObject.vertices = [];\n            currentObject.faces = [];\n            currentObject.uv = []; // OPTIONAL\n\n            json.push(currentObject);\n            normalOffset = normalCount;\n            vertexOffset = vertexCount;\n            uvOffset = uvCount;\n        }\n\n        if (currentObject === null &&\n            (line.startsWith('v ') ||\n                line.startsWith('vn ') ||\n                line.startsWith('vt '))) {\n            console.error('Error: OBJ file does not contain Objects.');\n            throw Error();\n        }\n\n        if (line.startsWith('v ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const vertex: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.vertices.push(vertex);\n            vertexCount++;\n        }\n\n        if (line.startsWith('vn ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const normal: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.normals.push(normal);\n            normalCount++;\n        }\n\n        if (line.startsWith('vt ')) { // OPTIONAL\n            const coords: Array<string> = line.split(' ');\n\n            const uv: TexCoord = new TexCoord(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2])\n            );\n\n            currentObject.uv.push(uv);\n            uvCount++;\n        }\n\n        if (line.startsWith('f ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const face: Face = new Face();\n            face.vertices = [];\n            face.normals = [];\n            face.uv = [];\n\n            // vertex indices\n            face.vertices.push(Number(coords[1].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[2].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[3].split('/')[0]) - 1 - vertexOffset);\n\n            // uv indices OPTIONAL!\n            face.uv.push(Number(coords[1].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[2].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[3].split('/')[1]) - 1 - uvOffset);\n\n            // normal indices\n            face.normals.push(Number(coords[1].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[2].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[3].split('/')[2]) - 1 - normalOffset);\n\n            currentObject.faces.push(face);\n        }\n    });\n\n    return json;\n}\n","\nexport class TexCoord {\n\n    public u: number;\n    public v: number;\n\n    public constructor(u: number, v: number) {\n        this.u = u;\n        this.v = v;\n    }\n\n}\n","export class Vector {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","import { Vector3f } from '../math';\n\nexport class CameraFrame {\n    public frame: number;\n    public position: Vector3f;\n    public rotation: Vector3f;\n\n    constructor(frame: number, position: Vector3f, rotation: Vector3f) {\n        this.frame = frame;\n        this.position = position;\n        this.rotation = rotation;\n    }\n}\n","import { CameraKeyFrame } from '../animation/CameraKeyFrame';\nimport { Vector3f } from '../math';\nimport { CameraPath } from './CameraPath';\nimport { CameraFrame } from './CameraFrame';\n\nexport class CameraLoader {\n\n    public static load(filename: string): Promise<Array<CameraKeyFrame>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<CameraKeyFrame> => {\n\n            const json: any = JSON.parse(text);\n            const cameraPath: CameraPath = new CameraPath();\n            const keys = new Array<CameraKeyFrame>();\n\n            for (let i = 0; i < json.length; i++) {\n                const frame = json[i];\n\n                const myFrame = new CameraFrame(\n                    frame.frame,\n                    new Vector3f(\n                        frame.location[0],\n                        frame.location[1],\n                        frame.location[2]\n                    ),\n                    new Vector3f(\n                        frame.rotation[0],\n                        frame.rotation[1],\n                        frame.rotation[2]\n                    ));\n\n                cameraPath.frames.push(myFrame);\n                keys.push(new CameraKeyFrame(new Vector3f(\n                    frame.location[0],\n                    frame.location[2],\n                    -frame.location[1]\n                ),\n                    new Vector3f(\n                        frame.rotation[0] - 90 * 0.0174533,\n                        frame.rotation[2],\n                        frame.rotation[1]\n                    )));\n\n            }\n\n            return keys;\n        });\n    }\n\n}\n","import { CameraFrame } from './CameraFrame';\n\nexport class CameraPath {\n    public frames: Array<CameraFrame>;\n    constructor() {\n        this.frames = new Array<CameraFrame>();\n    }\n}\n\n","import { Matrix4f, Vector3f } from '../math';\n\nexport class EulerAngleCamera {\n\n    protected position: Vector3f;\n    protected rx: number;\n    protected ry: number;\n    protected rz: number;\n\n    constructor(position: Vector3f, rx: number, ry: number, rz: number) {\n        this.position = position;\n        this.rx = rx;\n        this.ry = ry;\n        this.rz = rz;\n    }\n\n    public getViewMatrix(): Matrix4f {\n        const rz = Matrix4f.constructZRotationMatrix(-this.rz);\n        const rx = Matrix4f.constructXRotationMatrix(-this.rx);\n        const ry = Matrix4f.constructYRotationMatrix(-this.ry);\n\n        const translation = Matrix4f.constructTranslationMatrix(-this.position.x, -this.position.y, -this.position.z);\n\n        return rx.multiplyMatrix(ry).multiplyMatrix(rz).multiplyMatrix(translation);\n    }\n\n    public getPosition(): Vector3f {\n        return this.position;\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { DLNode } from './Node';\n\n/**\n * Doubly Linked-List implementation class.\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n * https://github.com/DameLyngdoh/dl-doubly-linked-list-ts\n *\n */\nexport class DoublyLinkedList<T> {\n    /**\n     * The start node of the list.\n     */\n    private _start: DLNode<T> | null;\n\n    /**\n     * The last  node of the list.\n     */\n    private _end: DLNode<T> | null;\n\n    /**\n     * The number of nodes in the list.\n     */\n    private _length: number;\n\n    constructor() {\n        this._start = null;\n        this._end = null;\n        this._length = 0;\n    }\n\n    get start(): DLNode<T> | null {\n        return this._start;\n    }\n\n    set start(start: DLNode<T> | null) {\n        this._start = start;\n    }\n\n    get end(): DLNode<T> | null {\n        return this._end;\n    }\n\n    set end(end: DLNode<T> | null) {\n        this._end = end;\n    }\n\n    get length(): number {\n        return this._length + 1;\n    }\n\n    /**\n     * Returns true if the list is empty.\n     * @returns Returns true if list is empty or false otherwise.\n     */\n    public isEmpty(): boolean {\n        return this.length === 0;\n    }\n\n    /**\n     * Inserts a node to the start of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertStart(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.next = this.start;\n            if (this.start != null) {\n                this.start.previous = node;\n            }\n            this.start = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node to the end of the list.\n     * @param node The node to be inserted to the list.\n     */\n    public insertEnd(node: DLNode<T>): void {\n        if (this.isEmpty()) {\n            this.start = node;\n            this.end = node;\n        }\n        else {\n            node.previous = this.end;\n            if (this.end != null) {\n                this.end.next = node;\n            }\n            this.end = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Inserts a node at the specified index in the list.\n     * @param node The node to be inserted to the list.\n     * @param index The index to insert the node at. A value of -1 will insert the node to the end of the list.\n     */\n    public insert(node: DLNode<T>, index: number): void {\n        if (index === 0) {\n            this.insertStart(node);\n            return;\n        }\n        else if (index === -1) {\n            this.insertEnd(node);\n            return;\n        }\n\n        let currentNode = this.start;\n        let i: number = 0;\n        for (i = 0; i < index - 1 && currentNode !== null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        // Insertion not possible\n        if (i !== index - 1 && currentNode === null) {\n            return;\n        }\n\n        if (currentNode != null) {\n            node.previous = currentNode;\n            node.next = currentNode.next;\n            if (currentNode.next != null) {\n                currentNode.next.previous = node;\n            }\n            else {\n                this.end = node;\n            }\n            currentNode.next = node;\n        }\n        this._length++;\n    }\n\n    /**\n     * Deletes the first node from the list.\n     */\n    public deleteStart(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.start != null && this.start.next == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.start != null) {\n            this.start = this.start.next;\n            if (this.start != null) {\n                this.start.previous = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes the last node from the list.\n     */\n    public deleteEnd(): void {\n        if (this.isEmpty()) {\n            return;\n        }\n\n        if (this.end != null && this.end.previous == null) {\n            this.start = null;\n            this.end = null;\n        }\n        else if (this.end != null) {\n            this.end = this.end.previous;\n            if (this.end != null) {\n                this.end.next = null;\n            }\n        }\n        this._length--;\n    }\n\n    /**\n     * Deletes a node from a specific index in the list. If the index is out of bounds, then no deletion will occur.\n     * @param index The index of the node to be deleted.\n     */\n    public delete(index: number): void {\n        if (this.isEmpty()) {\n            return;\n        }\n        if (index === 0) {\n            this.deleteStart();\n            return;\n        }\n        else if (index === -1) {\n            this.deleteEnd();\n            return;\n        }\n\n        const node = this.getNode(index);\n        if (node != null) {\n            if (node.next === null && node.previous !== null) {\n                this.deleteEnd();\n            }\n            else if (node.previous === null && node.next !== null) {\n                this.deleteStart();\n            }\n            else if (node.next !== null && node.previous !== null) {\n                node.previous.next = node.next;\n                node.next.previous = node.previous;\n                this._length--;\n            }\n        }\n    }\n\n    /**\n     * Retrieves a node from the specific index.\n     * @param index The index from which to retrieve the node.\n     * @returns Returns the node at the specific index or null if the index is out of bounds.\n     */\n    public getNode(index: number): DLNode<T> | null {\n        if (this.isEmpty() || index < 0) {\n            return null;\n        }\n\n        let currentNode = this.start;\n        for (let i = 1; i <= index && currentNode != null; i++) {\n            currentNode = currentNode.next;\n        }\n\n        return currentNode;\n    }\n\n    /**\n     * Returns an array of the nodes in the order of the list.\n     * @returns Array of nodes.\n     */\n    public toArray(): Array<DLNode<T>> {\n        const array: Array<DLNode<T>> = new Array<DLNode<T>>();\n\n        if (this.length === 0) {\n            return array;\n        }\n\n        let i = 0;\n\n        let currentNode: DLNode<T> | null = this.start;\n        while (currentNode != null && i < 12) {\n            array.push(currentNode);\n            currentNode = currentNode.next;\n            i++;\n        }\n        return array;\n    }\n\n    /**\n     * Clears the list and deletes all nodes.\n     */\n    public clear(): void {\n        this.end = null;\n        this.start = null;\n        this._length = 0;\n    }\n}","/**\n * Node implementation class. A node is a vertex in the list which contains data and pointers to the next node and previous node.\n */\nexport class DLNode<T> {\n    /**\n     * The data contained in the node.\n     */\n    private _data: T | null = null;\n\n    /**\n     * The edge or pointer to the next node.\n     */\n    private _next: DLNode<T> | null = null;\n\n    /**\n     * The edge or pointer to the previous node.\n     */\n    private _previous: DLNode<T> | null = null;\n\n    constructor() { }\n\n    get data(): T | null {\n        return this._data;\n    }\n\n    set data(data: T | null) {\n        this._data = data;\n    }\n\n    get next(): DLNode<T> | null {\n        return this._next;\n    }\n\n    set next(next: DLNode<T> | null) {\n        this._next = next;\n    }\n\n    get previous(): DLNode<T> | null {\n        return this._previous;\n    }\n\n    set previous(previous: DLNode<T> | null) {\n        this._previous = previous;\n    }\n}","export class Utils {\n    /**\n     * Returns a number whose value is limited to the given range.\n     *\n     * Example: limit the output of this computation to between 0 and 255\n     * (x * 255).clamp(0, 255)\n     *\n     * @param {Number} min The lower boundary of the output range\n     * @param {Number} max The upper boundary of the output range\n     * @returns A number in the range [min, max]\n     * @type Number\n     */\n    public static clamp(input: number, min: number, max: number): number {\n        return input <= min ? min : input >= max ? max : input;\n    }\n\n    /**\n     * Re-maps a number from one range to another.\n     *\n     * @param  {number} value           the incoming value to be converted\n     * @param  {number} istart          lower bound of the value's current range\n     * @param  {number} istop           upper bound of the value's current range\n     * @param  {number} ostart          lower bound of the value's target range\n     * @param  {number} ostop           upper bound of the value's target range\n     */\n    public static map(value: number, istart: number, istop: number, ostart: number, ostop: number): number {\n        return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));\n    }\n\n    /**\n     * returns random integer between two values\n     *\n     * @param  {number} value           the incoming value to be converted\n     */\n    public static getRandomInt(min: number, max: number): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive\n    }\n\n    public static arrayCopy(src, srcPosition: number, dst, dstPosition: number, length: number) {\n        // the index to begin splicing from dst array\n        let start: number;\n        let end: number;\n\n        if (typeof length !== 'undefined') {\n            end = Math.min(length, src.length);\n            start = dstPosition;\n            src = src.slice(srcPosition, end + srcPosition);\n        } else {\n            if (typeof dst !== 'undefined') {\n                // src, dst, length\n                // rename  so we don't get confused\n                end = dst;\n                end = Math.min(end, src.length);\n            } else {\n                // src, dst\n                end = src.length;\n            }\n\n            start = 0;\n            // rename  so we don't get confused\n            dst = srcPosition;\n            src = src.slice(0, end);\n        }\n\n        // Since we are not returning the array and JavaScript is pass by reference\n        // we must modify the actual values of the array\n        // instead of reassigning arrays\n        Array.prototype.splice.apply(dst, [start, end].concat(src));\n    }\n\n    // This is a port of Ken Perlin's Java code. The\n    // original Java code is at http://cs.nyu.edu/%7Eperlin/noise/.\n    // Note that in this version, a number from 0 to 1 is returned.\n    public static PerlinNoise = new function () {\n\n        this.noise = (x: number, y: number, z: number) => {\n\n            const p = new Array(512)\n            const permutation = [151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n            ];\n            for (let i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n\n            const X = Math.floor(x) & 255;                              // FIND UNIT CUBE THAT\n            const Y = Math.floor(y) & 255;                              // CONTAINS POINT.\n            const Z = Math.floor(z) & 255;\n            x -= Math.floor(x);                                         // FIND RELATIVE X,Y,Z\n            y -= Math.floor(y);                                         // OF POINT IN CUBE.\n            z -= Math.floor(z);\n            const u = fade(x);                                          // COMPUTE FADE CURVES\n            const v = fade(y);                                          // FOR EACH OF X,Y,Z.\n            const w = fade(z);\n            const A = p[X] + Y;\n            const AA = p[A] + Z;\n            const AB = p[A + 1] + Z;       // HASH COORDINATES OF\n            const B = p[X + 1] + Y;\n            const BA = p[B] + Z;\n            const BB = p[B + 1] + Z;   // THE 8 CUBE CORNERS,\n\n            return scale(lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),  // AND ADD\n                grad(p[BA], x - 1, y, z)), // BLENDED\n                lerp(u, grad(p[AB], x, y - 1, z),  // RESULTS\n                    grad(p[BB], x - 1, y - 1, z))),// FROM  8\n                lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1),  // CORNERS\n                    grad(p[BA + 1], x - 1, y, z - 1)), // OF CUBE\n                    lerp(u, grad(p[AB + 1], x, y - 1, z - 1),\n                        grad(p[BB + 1], x - 1, y - 1, z - 1)))));\n        }\n        function fade(t) { return t * t * t * (t * (t * 6 - 15) + 10); }\n        function lerp(t, a, b) { return a + t * (b - a); }\n        function grad(hash, x, y, z) {\n            const h = hash & 15;                      // CONVERT LO 4 BITS OF HASH CODE\n            const u = h < 8 ? x : y;                 // INTO 12 GRADIENT DIRECTIONS.\n            const v = h < 4 ? y : h === 12 || h === 14 ? x : z;\n            return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n        }\n        function scale(n) { return (1 + n) / 2; }\n    }\n\n    /**\n     * Cubic interpolation is the simplest method that offers true continuity between samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} y2           sample 3\n     * @param  {number} y3           sample 4\n     * @param  {number} mu           behaves the same way for interpolating between the sample y1 to y2\n     */\n    public static CubicInterpolate(y0: number, y1: number, y2: number, y3: number, mu: number): number {\n        const mu2 = mu * mu;\n        const a0 = y3 - y2 - y0 + y1;\n        const a1 = y0 - y1 - a0;\n        const a2 = y2 - y0;\n        const a3 = y1;\n        return (a0 * mu * mu2 + a1 * mu2 + a2 * mu + a3);\n    }\n\n    /**\n     * Cosine interpolation serves to provide a smooth transition between adjacent samples. \n     * It estimates values corresponding to intermediate samples present between the original or previous samples\n     *\n     * @param  {number} y0           sample 1\n     * @param  {number} y1           sample 2\n     * @param  {number} mu           behaves the same way for interpolating between the sample 1 to 2\n     */\n    public static CosineInterpolate(y1: number, y2: number, mu: number): number {\n        const mu2 = (1 - Math.cos(mu * Math.PI)) / 2;\n        return (y1 * (1 - mu2) + y2 * mu2);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Interpolator } from '../../math/Interpolator';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class AbstractCube extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    private scene: Array<FlatshadedMesh>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/stravaganza.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.scene = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene2(framebuffer, time);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene2(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(5, 16, 5));\n        let model: FlatshadedMesh = this.scene[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        mv = camera.multiplyMatrix(Matrix4f.constructZRotationMatrix(\n            Math.PI * 0.5 * Interpolator.cosineInterpolate(0, 600, Math.floor(elapsedTime * 0.7) % 4000))\n            .multiplyMatrix(Matrix4f.constructXRotationMatrix(\n                Math.PI * 0.5 * Interpolator.cosineInterpolate(2000, 2600, Math.floor(elapsedTime * 0.7) % 4000)))\n        );\n        model = this.scene[1];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\n/**\n * TODO:\n * - Move procedural texture generation into dedicated class\n * - create Mesh / Textured Mesh class\n * - Create Lens Flare class\n * - Create Pipeline class\n */\nexport class BakedLighting extends AbstractScene {\n\n    private skyBox: SkyBox;\n    private baked: Texture;\n    private noise: Texture;\n    private blenderObj8: Array<TexturedMesh>;\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/abstract.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObj8 = mesh\n            ),\n            TextureUtils.load(require('../../assets/Backed.png'), false).then(\n                (texture: Texture) => this.baked = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n\n        this.drawBlenderScene7(framebuffer, time - 1100000);\n        /*\n            [\n                //   { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n                { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n                { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n                { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n                { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n            ], this.dirt, this.skybox);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene7(framebuffer: Framebuffer, elapsedTime: number): void {\n        elapsedTime *= 0.2;\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0005).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, -25, 0)\n                    )));\n\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.baked);\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.blenderObj8);\n    }\n\n}\n","import { CameraKeyFrame } from '../../animation/CameraKeyFrame';\nimport { CameraLoader } from '../../camera/CameraLoader';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { WavefrontLoader } from '../../model/wavefront-obj/WavefrontLoader';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { PointLight } from '../../shading/light/PointLight';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nimport { BlenderCameraAnimator } from '../../animation/BlenderCameraAnimator';\nimport { SkyBox } from '../../SkyBox';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class BlenderCameraScene extends AbstractScene {\n\n    private texture4: Texture;\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private meshes: Array<FlatshadedMesh>;\n    private path: Array<CameraKeyFrame>;\n    private skyBox: SkyBox;\n\n    private light1: PointLight;\n    private light2: PointLight;\n\n    private cameraAnimator: BlenderCameraAnimator;\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.light1 = new PointLight();\n        this.light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        this.light1.diffuseIntensity = new Vector4f(1, 0.0, 1, 1);\n        this.light1.specularIntensity = new Vector4f(0.5, 0.5, 0.7, 1);\n        this.light1.position = new Vector4f(0, -10, -1, 1);\n\n        this.light2 = new PointLight();\n        this.light2.ambientIntensity = new Vector4f(0.5, 0.5, 1, 1);\n        this.light2.diffuseIntensity = new Vector4f(0.3, 0.3, 1, 1);\n        this.light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        this.light2.position = new Vector4f(3, 0, -2, 1);\n\n        this.renderingPipeline.setLights([this.light1, this.light2]);\n\n        this.skyBox = new SkyBox();\n        return Promise.all([\n            this.skyBox.init(),\n            WavefrontLoader.load(require('../../assets/monkey.obj')).then(\n                (value: Array<FlatshadedMesh>) => this.meshes = value\n            ),\n            CameraLoader.load(require('../../assets/camera-path.jsx')).then(\n                (value: Array<CameraKeyFrame>) => this.path = value\n            ),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n        ]).then(() => {\n            this.cameraAnimator = new BlenderCameraAnimator();\n            this.cameraAnimator.setKeyFrames(this.path);\n        });\n    }\n\n    private computeFps(currentTime: number): void {\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n    }\n\n    public render(framebuffer: Framebuffer, timeInput: number): void {\n        const currentTime: number = Date.now();\n        this.computeFps(currentTime);\n\n        const modelViewMartrix: Matrix4f = this.cameraAnimator.getViewMatrix(timeInput);\n\n        this.skyBox.draw(framebuffer, modelViewMartrix);\n\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.drawMeshArray(framebuffer, this.meshes, modelViewMartrix);\n\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Interpolator } from '../../math/Interpolator';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture/index';\nimport { TransitionMethods } from './TransitionMethods';\nimport { Particle } from './Particle';\n\nexport class BlockFade extends AbstractScene {\n    private ledTexture: Texture;\n    private startTime: number = Date.now();\n    private transitionFramebufferTo: Framebuffer;\n\n    public transitionCircle: Uint32Array;\n    public transitionWipe: Uint32Array;\n\n    // dissolve \n    private croud: Float32Array;        // Stores data for mask control\n    private prevMask: Array<boolean>;    // mask picture\n    private curMask: Array<boolean>;\n    private diff: Array<boolean>;       // difference mask\n    private noiseMask: Array<boolean>;  // particle mask\n    private croudMask: Uint32Array;     // cloud mask\n    private particleArray: Array<Particle>;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.transitionFramebufferTo = new Framebuffer(framebuffer.width, framebuffer.height);\n\n        // draw side wipe\n        this.transitionWipe = new Uint32Array(framebuffer.width * framebuffer.height);\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const c2 = Utils.map(x, 0, framebuffer.width, 0, 255);\n                const color = new Color(c2, c2, c2, 255).toPackedFormat();\n                this.transitionWipe[x + y * framebuffer.width] = color;\n            }\n        }\n\n        // draw circle gradient\n        this.transitionCircle = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.transitionCircle.fill(Color.WHITE.toPackedFormat(), 0, this.transitionCircle.length);\n        for (let d = 0; d < framebuffer.width / 2; d += 1) {\n            const c3 = Utils.map(d, 0, framebuffer.width / 2, 0, 255);\n            this.drawCircle(framebuffer.width / 2, framebuffer.height / 2, d, c3);\n        }\n\n        //dissolve effect\n        this.initDissolve(framebuffer.width, framebuffer.height);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (textureBackground: Texture) => this.ledTexture = textureBackground\n            ),\n        ]);\n    }\n\n    private initDissolve(width: number, height: number) {\n        this.croud = new Float32Array(width * height);\n        this.prevMask = new Array<boolean>(width * height);\n        this.curMask = new Array<boolean>(width * height);\n        this.diff = new Array<boolean>(width * height);\n        this.noiseMask = new Array<boolean>(width * height);\n        this.particleArray = new Array<Particle>();\n\n        this.croudMask = new Uint32Array(width * height);\n        this.particleArray.splice(0, this.particleArray.length);\n\n        this.createCroud(width, height);\n        const threshold = 0;\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const index = y * width + x;\n                const isBackground = (this.croudMask[y * width + x] & 0xFF) < 0x80;\n                if (isBackground) {\n                    this.croud[index] = 0xFF000000;\n                }\n                this.prevMask[index] = this.curMask[index] = this.croud[index] < threshold;\n                if (Math.random() > 0.90) {\n                    this.noiseMask[index] = !isBackground;\n                }\n            }\n        }\n    }\n\n    private createCroud(width: number, height: number) {\n        if (this.croud == null) {\n            this.croud = new Float32Array(width * height);\n        }\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                this.croudMask[y * width + x] = 0xFFFFFFFF;\n            }\n        }\n\n        const bias: number = Math.min(150.0, 0xFF);\n        const xbase = Math.random() * 100;\n        const ybase = Math.random() * 100;\n\n        let xnoise = 0.0;\n        let ynoise = 0.0;\n        const inc = 0.02;\n\n        const pn = Utils.PerlinNoise;\n\n        for (let y = 0; y < height; y++) {\n            const curBias = y * bias / height;\n            for (let x = 0; x < width; x++) {\n                const _gray = (pn.noise((xnoise + xbase), (ynoise + ybase), 0) * (0xFF - bias) + curBias);\n                this.croud[y * width + x] = _gray;\n                xnoise += inc;\n            }\n            xnoise = 0.0;\n            ynoise += inc;\n        }\n    }\n\n    // dissolve\n    public dissolve(renderBuffer: Framebuffer, renderBuffer2: Uint32Array, time: number) {\n\n        if (time <= 5) {\n\n            // update mask for current scene\n            for (let y = 0; y < renderBuffer.height; y++) {\n                for (let x = 0; x < renderBuffer.width; x++) {\n                    const index = y * renderBuffer.width + x;\n                    const isBackground = (this.croudMask[y * renderBuffer.width + x] & 0xFF) < 0x80;\n                    if (isBackground) {\n                        this.croud[index] = renderBuffer2[index];\n                    }\n                    this.prevMask[index] = this.curMask[index] = this.croud[index] < 0;\n                    if (Math.random() > 0.90) {\n                        this.noiseMask[index] = !isBackground;\n                    }\n                }\n            }\n\n            // delete loose particles\n            this.particleArray.splice(0, this.particleArray.length);\n        }\n\n        for (let y = 0; y < renderBuffer.height; y++) {\n            for (let x = 0; x < renderBuffer.width; x++) {\n                const index = y * renderBuffer.width + x;\n                this.curMask[index] = this.croud[index] < time;\n                this.diff[index] = this.prevMask[index] != this.curMask[index];\n                this.prevMask[index] = this.curMask[index];\n\n                if (this.curMask[index]) {\n                    renderBuffer.framebuffer[index] = renderBuffer2[index];\n                }\n\n                if (this.diff[index]) {\n                    if (this.noiseMask[index]) {\n                        const particle = new Particle(x, y, renderBuffer[index], renderBuffer.width, renderBuffer.height);\n                        particle._color = renderBuffer.framebuffer[index];\n                        this.particleArray.push(particle);\n                    }\n                    renderBuffer.framebuffer[index] = 0xFFFFFFFF;\n                }\n            }\n        }\n\n        for (let it = 0; it < this.particleArray.length; it++) {\n            const p = this.particleArray[it];\n\n            if (!p.update()) {\n                this.particleArray.splice(it, 1); continue;\n            }\n            renderBuffer.framebuffer[p.y * renderBuffer.width + p.x] = Framebuffer.addColor(renderBuffer.framebuffer[p.y * renderBuffer.width + p.x], p._color);\n        }\n    }\n\n    private putpixel(x: number, y: number, color: number) {\n        this.transitionCircle[x + y * this.transitionFramebufferTo.width] = new Color(color, color, color, 255).toPackedFormat();\n    }\n\n    private drawCircle(x0: number, y0: number, radius: number, color: number) {\n        let x = 0;\n        let y = radius;\n        let d = -(radius >>> 1);\n\n        while (x <= y) {\n            this.putpixel(x + x0, y + y0, color);\n            this.putpixel(y + x0, x + y0, color);\n            this.putpixel(-x + x0, y + y0, color);\n            this.putpixel(-y + x0, x + y0, color);\n            this.putpixel(-x + x0, -y + y0, color);\n            this.putpixel(-y + x0, -x + y0, color);\n            this.putpixel(x + x0, -y + y0, color);\n            this.putpixel(y + x0, -x + y0, color);\n\n            if (d <= 0) {\n                x++;\n                d += x;\n            } else {\n                y--;\n                d -= y;\n            }\n        }\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const time: number = Date.now() - this.startTime;\n        framebuffer.clear();\n        this.blockFade(framebuffer, this.ledTexture.texture, this.ledTexture.width, time, 0);\n    }\n\n    /**\n     * Transitions from one effect to another using using \"transition\" value from JSRocket\n     *\n     * @param  {Framebuffer} framebuffer             pixels\n     * @param  {AbstractScene} transitionSceneFrom   previous effect\n     * @param  {AbstractScene} transitionSceneTo     effect we are transitioning to\n     * @param  {number} transitionMethod             transition effect to use (blend, wipe, crossfade, etc)\n     */\n    public transition(\n        framebuffer: Framebuffer,\n        transitionSceneFrom: AbstractScene,\n        transitionSceneTo: AbstractScene,\n        transitionMethod: TransitionMethods,\n        transitionValue: number,\n        time: number) {\n\n        // render the 'To' effect into the framebuffer\n        transitionSceneTo.render(this.transitionFramebufferTo, time);\n\n        // render 'From' effect into framebuffer\n        transitionSceneFrom.render(framebuffer, time);\n        // apply transition to framebuffer (fromEffect) using texture (toEffect) 0-255\n        switch (Math.trunc(transitionMethod)) {\n            case TransitionMethods.BLOCKFADE: // 0 - 12000\n                this.blockFade(framebuffer, this.transitionFramebufferTo.framebuffer, this.transitionFramebufferTo.width, Utils.map(transitionValue, 0, 255, 0, 12000), 0);\n                break;\n            case TransitionMethods.CROSSFADE: // 0 - 255\n                this.crossFade(framebuffer.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.DISSOLVE: // 0 - 255\n                this.dissolve(framebuffer, this.transitionFramebufferTo.framebuffer, transitionValue);\n                break;\n            case TransitionMethods.FADEIN: // 0-255\n                this.fadeIn(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.FADEOUT: // 0-255\n                this.fadeOut(framebuffer, transitionValue, 0);\n                break;\n            case TransitionMethods.WIPE_LEFT: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionWipe);\n                break;\n            case TransitionMethods.CIRCLE: // 0 - 255\n                this.crossFadeImage(framebuffer, transitionValue, this.transitionCircle);\n                break;\n            default: // 0 - 512\n                this.crossFade(framebuffer.framebuffer, Utils.map(transitionValue, 0, 255, 0, 12000));\n        }\n    }\n\n    public blockFade(framebuffer: Framebuffer, pixelArray: Uint32Array, pixelArrayWidth: number, time: number, startTime: number) {\n        const blockWidth = 20;\n        const horizontalUnits = Math.ceil(framebuffer.width / blockWidth);\n        const verticalUnits = Math.ceil(framebuffer.height / blockWidth);\n\n        const fadeArray = new Array<number>(horizontalUnits * verticalUnits);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(366);\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                fadeArray[x + y * horizontalUnits] = 500 + Math.round(rng.getFloat() * 600000) % 10000;\n            }\n        }\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, x * blockWidth, y * blockWidth, blockWidth, blockWidth, pixelArray, pixelArrayWidth,\n                    Interpolator.interpolate(startTime + fadeArray[x + y * horizontalUnits], startTime + fadeArray[x + y * horizontalUnits] + 700, time)\n                );\n            }\n        }\n    }\n\n    // blend entire image to another image\n    public crossFade(framebuffer: Uint32Array, alpha: number) {\n        for (let i = 0; i < framebuffer.length; i++) {\n            framebuffer[i] = Framebuffer.blend(\n                framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                alpha)\n        }\n    }\n\n    // transition using image\n    // https://github.com/Slynchy/SDL-AlphaMaskWipes/blob/master/Transition.h\n    public crossFadeImage(framebuffer: Framebuffer, alpha: number, transitionImage: Uint32Array) {\n        for (let i = 0; i < framebuffer.framebuffer.length; i++) {\n            framebuffer.framebuffer[i] = Framebuffer.blend(\n                framebuffer.framebuffer[i],\n                this.transitionFramebufferTo.framebuffer[i],\n                Utils.clamp(\n                    (alpha * 2) - (transitionImage[i] & 0xff),\n                    0, 255))\n        }\n    }\n\n    // fade in from solid color\n    public fadeIn(framebuffer: Framebuffer, alpha: number, startColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        startColor,\n                        this.transitionFramebufferTo.framebuffer[x + y * framebuffer.width],\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // fade out to solid color\n    public fadeOut(framebuffer: Framebuffer, alpha: number, endColor: number) {\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.drawPixel(x, y,\n                    Framebuffer.blend(\n                        framebuffer.framebuffer[x + y * framebuffer.width],\n                        endColor,\n                        alpha)\n                );\n            }\n        }\n    }\n\n    // Alternating scanlines + RGB Distort /w external input\n    public renderScanlines(framebuffer: Framebuffer, shiftAmount: number) {\n        let i = 0;\n\n        const offRed = (2 * shiftAmount) << 0;\n        const offGreen = (5 * shiftAmount) << 0;\n        const offBlue = (2 * shiftAmount) << 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n\n            // horizontal scanlines * intensity\n            const strips = (y & 1) * 16;\n            const verticalPosition = y * framebuffer.width;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                const imagePixelR = framebuffer.framebuffer[Utils.clamp(x + offRed, 0, framebuffer.width - 1) + verticalPosition] & 0xFF;\n                const imagePixelG = framebuffer.framebuffer[Utils.clamp(x + offGreen, 0, framebuffer.width - 1) + verticalPosition] >> 8 & 0xFF;\n                const imagePixelB = framebuffer.framebuffer[Utils.clamp(x + offBlue, 0, framebuffer.width - 1) + verticalPosition] >> 16 & 0xFF;\n\n                framebuffer.framebuffer[i++] = new Color(\n                    Utils.clamp(imagePixelR - strips, 0, 255),\n                    Utils.clamp(imagePixelG - strips, 0, 255),\n                    Utils.clamp(imagePixelB - strips, 0, 255)).toPackedFormat();\n            }\n        }\n    }\n\n}\n","export class Particle {\n    public x: number;\n    public y: number;\n    public _color: number;\n\n    private _x: number;\n    private _y: number;\n    private dx: number;\n    private dy: number;\n\n    private TTL: number = Math.round(Math.random() * 50);\n    private time: number;\n    private isLiving: boolean;\n    private width: number;\n    private height: number;\n\n    constructor(x: number, y: number, _color: number, width: number, height: number) {\n        this._x = this.x = x;\n        this._y = this.y = y;\n\n        this.dx = 0;\n        this.dy = - (Math.random() * (3 - 0.1) + 0.1);\n        this.time = 0;\n        this._color = 0xFF000000 | _color;\n\n        this.isLiving = true;\n\n        this.width = width;\n        this.height = height;\n    }\n\n    update(): boolean {\n        if (!this.isLiving) return false;\n\n        this.x = Math.round((this._x += this.dx) + 0.5);\n        this.y = Math.round((this._y += this.dy) + 0.5);\n\n        const a = ((this.TTL - this.time) / this.TTL);\n        const r = Math.round((this._color >> 16 & 0xFF) * a + 0.5);\n        const g = Math.round((this._color >> 8 & 0xFF) * a + 0.5);\n        const b = Math.round((this._color & 0xFF) * a + 0.5);\n\n        this._color = 0xFF << 24 | r << 16 | g << 8 | b;\n\n        if (this.x < 0 || this.x >= this.width) this.isLiving = false;\n        if (this.y < 0 || this.y >= this.height) this.isLiving = false;\n        if (this.time++ >= this.TTL) this.isLiving = false;\n        return this.isLiving;\n    }\n}","export enum TransitionMethods {\n        FADEIN = 1,\n        FADEOUT = 2,\n        BLOCKFADE = 3,\n        CROSSFADE = 4,\n        CIRCLE = 5,\n        WIPE_LEFT = 6,\n        DISSOLVE = 7\n}","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class CubeScene extends AbstractScene {\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private fairlight: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/logo-fairlight-10.png'), false).then(texture => this.fairlight = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.fairlight.texture);\n        framebuffer.clearDepthBuffer();\n\n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 6.2  +Math.sin(elapsedTime * 0.05)*3;\n\n        return Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.08)*8, Math.sin(elapsedTime * 0.05)*6, -20).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.09)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","/*\nName          : Aisa Demo\nRelease Date  : TBD\nPlatform      : JavaScript\nCategory      : Demo\nNotes         : Software rendered effects written in Typescript\n*/\n\n// Core\nimport { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SoundManager } from '../../sound/SoundManager';\nimport { Color } from '../../core/Color';\nimport { BlockFade } from '../block-fade/BlockFade';\nimport { DoublyLinkedList } from '../../core/LinkedList';\nimport { DLNode } from '../../core/Node';\n\n// Stats\nimport Stats = require('stats.js');\n\n// Video Recording Tool\nimport { CanvasRecorder } from './canvas-record';\n\nexport class DemoScene extends AbstractScene {\n\n    // Sound Manager\n    private soundManager: SoundManager;\n\n    // Video Recorder\n    private canvasRecorder: CanvasRecorder;\n\n    // list of scenes\n    private sceneList: DoublyLinkedList<AbstractScene>;\n    private nodeInstance: DLNode<AbstractScene>;\n\n    // transitions\n    private BlockFade: BlockFade;\n\n    // stats\n    private stats: Array<Stats>;\n\n    // our main canvas\n    private canvasRef: HTMLCanvasElement;\n\n    // moving line marking current place in the timeline\n    private timelineRef: HTMLInputElement;\n\n    // displays which scene we're on\n    private sceneRef: HTMLSpanElement;\n\n    // displays time in seconds\n    private timeRef: HTMLSpanElement;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.soundManager = new SoundManager();\n\n        this.sceneList = new DoublyLinkedList();\n\n        this.initControls(framebuffer.width);\n\n        this.BlockFade = new BlockFade();\n\n        this.canvasRef = document.getElementById('aisa-canvas') as HTMLCanvasElement;\n\n        // initialize effects with progress\n        return this.allProgress([\n\n            // load music\n            // this.soundManager.loadMusic(require(`../../assets/sound/dubmood_-_cromenu1_haschkaka.xm`)),\n            this.soundManager.loadMusic(require(`../../assets/sound/showeroflove.mod`)),\n            // this.soundManager.loadMusic(require('../../assets/sound/NotMixedorMastered.ogg')),\n\n            // load *.rocket file for scene/music synchronization\n            this.soundManager.prepareSync(require('../../assets/sound/demo.rocket'), true),\n\n            // we use this for transitions\n            this.BlockFade.init(framebuffer),\n\n            // load and initialze effects\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene1').then(plug => this.initScene(framebuffer, plug)), // cubicles\n            import('./parts/Scene2').then(plug => this.initScene(framebuffer, plug)), // telephone\n            import('./parts/Scene3').then(plug => this.initScene(framebuffer, plug)), // title screen here\n            import('./parts/Scene4').then(plug => this.initScene(framebuffer, plug)), // pizza delivery guy\n            import('./parts/Scene5').then(plug => this.initScene(framebuffer, plug)), // replace with something else\n            import('./parts/Scene6').then(plug => this.initScene(framebuffer, plug)), // spikeball + plane deformation\n            import('./parts/Scene7').then(plug => this.initScene(framebuffer, plug)), // cube + rotozoomer\n            import('./parts/Scene8').then(plug => this.initScene(framebuffer, plug)), // ledplasma + voxelcubes\n            import('./parts/Scene9').then(plug => this.initScene(framebuffer, plug)), // blender camera\n            import('./parts/Scene10').then(plug => this.initScene(framebuffer, plug)), // MetalHeadzScene\n            import('./parts/Scene11').then(plug => this.initScene(framebuffer, plug)), // AbstractCube\n            import('./parts/Scene12').then(plug => this.initScene(framebuffer, plug)), // DofBallsScene\n            import('./parts/Scene13').then(plug => this.initScene(framebuffer, plug)), // TorusKnotTunnelScene\n            import('./parts/Scene14').then(plug => this.initScene(framebuffer, plug)), // GearsScene\n            import('./parts/Scene15').then(plug => this.initScene(framebuffer, plug)), // BakedLighting\n            import('./parts/Scene16').then(plug => this.initScene(framebuffer, plug)), // ParticleStreamsScene\n            import('./parts/Scene17').then(plug => this.initScene(framebuffer, plug)), // HoodlumScene\n            import('./parts/Scene18').then(plug => this.initScene(framebuffer, plug)), // TwisterScene\n            import('./parts/Scene19').then(plug => this.initScene(framebuffer, plug)), // RazorScene\n            import('./parts/Scene20').then(plug => this.initScene(framebuffer, plug)), // sinescroller\n\n        ], (percent: number) => {\n            // update the progress bar via canvas\n            const outputX = Math.ceil(framebuffer.width * percent);\n            framebuffer.drawRect2(0, (framebuffer.height / 2) - 5, outputX, 10, Color.WHITE.toPackedFormat());\n\n            // update the canvas\n            this.canvasRef.getContext('2d').putImageData(framebuffer.getImageData(), 0, 0);\n\n            // update memory usage\n            for (const p of this.stats) {\n                p.update();\n            }\n        });\n    }\n\n    /**\n     * Adds AbstractScenes to sceneList array and initializes it\n     *\n     * @param   {Framebuffer} framebuffer            scene initializes with information in framebuffer such as width and height\n     * @param   {Object} plug                        imported class\n     * @returns {Promise<any>}                       resolves promise after completion\n     */\n    private initScene(framebuffer: Framebuffer, plug: unknown, ...args: Array<any>): Promise<any> {\n        const constructorName = Object.keys(plug)[0];\n        const newNode: DLNode<AbstractScene> = new DLNode();\n        newNode.data = new plug[constructorName](...args);\n        this.sceneList.insert(newNode, this.sceneList.length - 1);\n        return newNode.data.init(framebuffer);\n    }\n\n    // this runs after init() has finished\n    public onInit(): void {\n\n        this.canvasRecorder = new CanvasRecorder();\n\n        // jump to last effect in timeline and set mute vs unmuted\n        this.soundManager.initTimeline();\n\n        // show debug / timeline navigator\n        document.getElementById('debug').style.display = 'block';\n    }\n\n    /**\n     * Setup debug tools for local development\n     */\n    private initControls(width: number) {\n        this.stats = new Array<Stats>();\n\n        // Stats - Memory in Megabytes\n        this.initStats(2, 0, width * 2);\n\n        // Stats - Frames per second\n        this.initStats(0, 50, width * 2);\n\n        // Stats - Milliseconds per frame\n        this.initStats(1, 100, width * 2);\n\n        document.getElementById('debug').style.width = `${width * 2}px`;\n\n        // Scene Playback Controls\n        const tickerPlayRef = document.getElementById('ticker_play');\n        const tickerStopRef = document.getElementById('ticker_stop');\n        const tickerNextRef = document.getElementById('ticker_next');\n        const tickerBackRef = document.getElementById('ticker_back');\n        const tickerRecordRef = document.getElementById('ticker_record');\n        const tickerScreenshotRef = document.getElementById('ticker_screenshot');\n        const tickerVolumeRef = document.getElementById('ticker_volume');\n\n        // timeline slider, scene and time display\n        this.timelineRef = document.getElementById('timeline') as HTMLInputElement;\n        this.sceneRef = document.getElementById('scene') as HTMLSpanElement;\n        this.timeRef = document.getElementById('time') as HTMLSpanElement;\n\n        // stop\n        tickerStopRef.addEventListener('click', () => {\n            this.soundManager.onPause();\n            this.soundManager.seek(0);\n\n            tickerPlayRef.classList.add('fa-play');\n            tickerPlayRef.classList.remove('fa-pause');\n\n            // save video if recoding\n            if (this.canvasRecorder.recording) {\n                tickerRecordRef.style.color = 'white';\n                this.canvasRecorder.saveVideo();\n            }\n        })\n\n        // record video\n        tickerRecordRef.addEventListener('click', () => {\n            if (!this.canvasRecorder.recording) {\n                // start audio and video recording\n                tickerRecordRef.style.color = 'red';\n                this.soundManager.onPlay();\n                this.canvasRecorder.recordVideo();\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                // pause audio and save video file\n                tickerRecordRef.style.color = 'white';\n                this.soundManager.onPause();\n                this.canvasRecorder.saveVideo();\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // play / pause\n        tickerPlayRef.addEventListener('click', () => {\n            if (!this.soundManager.isPlaying) {\n                this.soundManager.onPlay();\n                tickerPlayRef.setAttribute('title', 'pause');\n                tickerPlayRef.classList.remove('fa-play');\n                tickerPlayRef.classList.add('fa-pause');\n            } else {\n                this.soundManager.onPause();\n                tickerPlayRef.setAttribute('title', 'play');\n                tickerPlayRef.classList.add('fa-play');\n                tickerPlayRef.classList.remove('fa-pause');\n            }\n        })\n\n        // toggle audio and save preference for subsequent reloads\n        tickerVolumeRef.addEventListener('click', () => {\n            this.soundManager.toggleSound(tickerVolumeRef, !this.soundManager.audioElement.muted);\n            localStorage.setItem('soundToggle', String(this.soundManager.audioElement.muted));\n        });\n\n        // save screenshot in PNG format\n        tickerScreenshotRef.addEventListener('click', () => {\n            const date = new Date();\n            const fileName = `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.png`;\n            const image = this.canvasRef.toDataURL('image/png').replace('image/png', 'image/octet-stream');\n            const anchor = document.createElement('a');\n            anchor.setAttribute('download', fileName);\n            anchor.setAttribute('href', image);\n            anchor.click();\n        })\n\n        // next\n        tickerNextRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.musicProperties.timeSeconds, 1, this.sceneList.length);\n        })\n\n        // back\n        tickerBackRef.addEventListener('click', () => {\n            this.soundManager.jump(this.soundManager.musicProperties.timeSeconds, -1, this.sceneList.length);\n        })\n\n        // seek\n        this.timelineRef.addEventListener('input', (e) => {\n            const time = Number((e.target as HTMLInputElement).value);\n            this.soundManager.seek(time / 1000);\n        });\n\n        // seek with scrollwheel\n        document.addEventListener(\"wheel\", (e) => {\n            const directionToScroll = (e.deltaY < 0) ? -0.06 : 0.06;\n            this.soundManager.seek(this.soundManager.audioElement.currentTime + directionToScroll);\n            // prevent page scroll\n            e.preventDefault();\n            e.stopPropagation();\n        }, { passive: false })\n\n        // keyboard navigation controls\n        document.addEventListener('keydown', (e: KeyboardEvent) => {\n            switch (e.key) {\n                case 'MediaStop':\n                    tickerStopRef.click();\n                    break;\n                // play or pause\n                case 'MediaPlayPause':\n                case ' ':\n                    tickerPlayRef.click();\n                    break;\n                // navigate timeline backward\n                case 'ArrowLeft':\n                    this.soundManager.seek(this.soundManager.audioElement.currentTime - 0.06);\n                    break;\n                // navigate timeline forward\n                case 'ArrowRight':\n                    this.soundManager.seek(this.soundManager.audioElement.currentTime + 0.06);\n                    break;\n                // jump to next effect\n                case 'MediaTrackNext':\n                case 'ArrowUp':\n                    this.soundManager.jump(this.soundManager.audioElement.currentTime, 1, this.sceneList.length);\n                    break;\n                // jump to previous effect\n                case 'MediaTrackPrevious':\n                case 'ArrowDown':\n                    this.soundManager.jump(this.soundManager.audioElement.currentTime, -1, this.sceneList.length);\n                    break;\n                // toggle full screen\n                case 'f':\n                    this.canvasRef.click();\n                    break;\n                // save a screenshot\n                case 's':\n                    tickerScreenshotRef.click();\n                    break;\n                // record video in webm format\n                case 'r':\n                    tickerRecordRef.click();\n                    break;\n                case 'd':\n                    break;\n            }\n        })\n    }\n\n    /**\n     * Runs all promises in an array and runs callback with percentage of completion\n     *\n     * @param   {Array<Promise<any>>} promises       array of promises to run\n     * @param   {Function} progressCallback          function sending percentage after individual promise is complete\n     * @returns {Promise<any>}                       promise resolve after all promises are complete\n     */\n    private allProgress(promises: Array<Promise<any>>, progressCallback: (percentage: number) => void): Promise<any> {\n        let d = 0;\n        for (const p of promises) {\n            p.then(() => {\n                d++;\n                progressCallback(d / promises.length);\n            });\n        }\n        return Promise.all(promises);\n    }\n\n    /**\n     * Adds JavaScript Performance Monitor and initializes it\n     *\n     * @param   {Object} args                        stat type[0-3], top in pixels, left in pixels\n     */\n    private initStats(...args: Array<number>) {\n        this.stats.push(new Stats());\n        const statsObj = this.stats[this.stats.length - 1];\n        statsObj.showPanel(args[0]);\n        statsObj.dom.style.cssText = `position:absolute;top:${args[1]}px;left:${args[2]}px;`;\n        document.body.appendChild(statsObj.dom);\n    }\n\n    public render(framebuffer: Framebuffer) {\n        // get time and values from music\n        this.soundManager.updateMusic();\n\n        // get which effect to run\n        this.nodeInstance = this.sceneList.getNode(this.soundManager.musicProperties.sceneData.effect);\n\n        // if \"transitionType\" in JSRocket is zero then run the effect by itself\n        if (this.soundManager.musicProperties.sceneData.transitionType === 0) {\n            this.nodeInstance.data.render(framebuffer, this.soundManager.musicProperties.timeMilliseconds)\n        } else {\n            // otherwise blend two effects together\n            this.BlockFade.transition(\n                framebuffer,\n                this.nodeInstance.data,\n                this.nodeInstance.next.data,\n                this.soundManager.musicProperties.sceneData.transitionType,\n                this.soundManager.musicProperties.sceneData.transitionValue,\n                this.soundManager.musicProperties.timeMilliseconds);\n        }\n\n        // comment out for release\n        this.drawStats();\n    }\n\n    /**\n     * Show FPS, Memory Usage and js rocket time and effect number\n     */\n    private drawStats() {\n        // update timeline marker\n        this.timelineRef.value = String(this.soundManager.musicProperties.timeMilliseconds);\n\n        // keep current time in local storage to stay in place during reloads\n        localStorage.setItem('lastTime', String(this.soundManager.musicProperties.timeSeconds));\n\n        if (!this.soundManager.syncDevice.connected && !this.soundManager.demoMode) {\n            console.error('Rocket not connected.');\n            return;\n        } else {\n            // get values from JS rocket\n            this.sceneRef.innerText = this.soundManager.musicProperties.sceneData.effect.toString();\n            this.timeRef.innerText = this.soundManager.musicProperties.timeSeconds.toFixed(2);\n        }\n        // update FPS and Memory usage\n        for (const p of this.stats) {\n            p.update();\n        }\n    }\n\n}\n","export class CanvasRecorder {\n\n    public recording: boolean;\n    private canvasRecordingOptions;\n    private canvasRecorder;\n    private audioTrack: MediaStreamTrack;\n\n    public constructor() {\n        this.recording = false;\n    }\n\n    public getType(filename: string) {\n        const ext = this.fileExtension(filename);\n        return ['mkv'].includes(ext) ? 'video/x-matroska;codecs=avc1' : 'video/webm';\n    }\n\n    private fileExtension(filename: string): string {\n        return filename.split('.').pop();\n    }\n\n    public createCanvasRecorder(canvas: HTMLCanvasElement, options = {}) {\n        const date = new Date();\n        let link = null;\n\n        const {\n            filename = `Recording ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate = 25,\n            download = true,\n            recorderOptions = {\n                mimeType: 'video/x-matroska;codecs=avc1',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 2500000 // 2.5 Mbit/sec\n            }\n        } = {\n            ...options\n        };\n\n        const mimeType = recorderOptions.mimeType || this.getType(filename);\n\n        if (download) {\n            link = link || document.createElement('a');\n            link.download = filename;\n        }\n\n        let chunks = [];\n\n        let stream = canvas.captureStream(frameRate);\n\n        /*\n        if (!this.canvasRecorder) {\n            // get the audio track:\n            const ctx = new AudioContext();\n            const dest = ctx.createMediaStreamDestination();\n            const sourceNode = ctx.createMediaElementSource(audio);\n            sourceNode.connect(dest);\n            sourceNode.connect(ctx.destination);\n            this.audioTrack = dest.stream.getAudioTracks()[0];\n        }\n\n        stream.addTrack(this.audioTrack);\n        */\n\n        let recorder = new MediaRecorder(stream, { mimeType, ...recorderOptions });\n\n        recorder.ondataavailable = event => {\n            event.data.size && chunks.push(event.data);\n        };\n        recorder.onstop = () => {\n            if (download && chunks.length) {\n                const blob = new Blob(chunks, { type: mimeType });\n                const url = URL.createObjectURL(blob);\n                link.href = url;\n\n                const event = new MouseEvent('click');\n                link.dispatchEvent(event);\n                setTimeout(() => {\n                    URL.revokeObjectURL(url);\n                }, 1);\n            }\n        };\n\n        return {\n            start(timeslice) {\n                chunks = [];\n                recorder.start(timeslice);\n            },\n            set filename(name) {\n                link.download = name;\n            },\n            stop() {\n                recorder.stop();\n                return chunks;\n            },\n            dispose() {\n                recorder = null;\n                stream = null;\n            },\n            stream,\n            recorder\n        };\n    }\n\n    /**\n     * Records a video and sound using CanvasRecorder\n     */\n    public recordVideo() {\n        console.info('recording video...');\n        this.recording = true;\n        const date = new Date();\n\n        // options\n        this.canvasRecordingOptions = {\n            filename: `Aisa ${date.toISOString().slice(0, 10)} at ${date\n                .toTimeString()\n                .slice(0, 8)\n                .replace(/:/g, '.')}.webm`,\n            frameRate: 60,\n            download: true,\n            recorderOptions: {\n                mimeType: 'video/webm',\n                audioBitsPerSecond: 128000, // 128 Kbit/sec\n                videoBitsPerSecond: 5000000 // 2.5 Mbit/sec\n            }\n        }\n\n        // Create canvas video recorder\n        const canvasObj = document.getElementById('aisa-canvas');\n        this.canvasRecorder = this.createCanvasRecorder(canvasObj as HTMLCanvasElement, this.canvasRecordingOptions);\n        this.canvasRecorder.start();\n    }\n\n    public saveVideo() {\n        // Stop and dispose\n        this.canvasRecorder.stop();\n        this.canvasRecorder.dispose();\n        this.recording = false;\n        console.info(`saved video as ${this.canvasRecordingOptions.filename}`);\n    }\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\n\n// sideways 3D office scene\nexport class Scene1 {\n    private PlaneDeformationFloorScene = new PlaneDeformationScene(8, require('../../../assets/ground.png'));\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        return Promise.all([\n            this.PlaneDeformationFloorScene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlaneDeformationFloorScene.drawPlaneDeformation(framebuffer, 0, time >> 3);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { MetalHeadzScene } from '../../metalheadz/MetalHeadzScene';\n\nexport class Scene10 {\n    private MetalHeadzScene: MetalHeadzScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.MetalHeadzScene = new MetalHeadzScene();\n\n        return Promise.all([\n            this.MetalHeadzScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.MetalHeadzScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { AbstractCube } from '../../abstract-cube/AbstractCube';\n\nexport class Scene11 {\n    private AbstractCube: AbstractCube;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.AbstractCube = new AbstractCube();\n\n        return Promise.all([\n            this.AbstractCube.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.AbstractCube.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { DofBallsScene } from '../../dof-balls/DofBallsScene';\n\nexport class Scene12 {\n    private DofBallsScene: DofBallsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.DofBallsScene = new DofBallsScene();\n\n        return Promise.all([\n            this.DofBallsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.DofBallsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusKnotTunnelScene } from '../../torus-knot-tunnel/TorusKnotTunnelScene';\n\nexport class Scene13 {\n    private TorusKnotTunnelScene: TorusKnotTunnelScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusKnotTunnelScene = new TorusKnotTunnelScene();\n\n        return Promise.all([\n            this.TorusKnotTunnelScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusKnotTunnelScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { GearsScene } from '../../gears/GearsScene';\n\nexport class Scene14 {\n    private GearsScene: GearsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.GearsScene = new GearsScene();\n\n        return Promise.all([\n            this.GearsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.GearsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BakedLighting } from '../../baked-lighting/BakedLighting';\n\nexport class Scene15 {\n    private BakedLighting: BakedLighting;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BakedLighting = new BakedLighting();\n\n        return Promise.all([\n            this.BakedLighting.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.BakedLighting.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { ParticleStreamsScene } from '../../particle-streams/ParticleStreamsScene';\n\nexport class Scene16 {\n    private ParticleStreamsScene: ParticleStreamsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.ParticleStreamsScene = new ParticleStreamsScene();\n\n        return Promise.all([\n            this.ParticleStreamsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.ParticleStreamsScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { HoodlumScene } from '../../hoodlum/HoodlumScene';\n\nexport class Scene17 {\n    private HoodlumScene: HoodlumScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.HoodlumScene = new HoodlumScene();\n\n        return Promise.all([\n            this.HoodlumScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.HoodlumScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { TwisterScene } from '../../twister/TwisterScene';\n\nexport class Scene18 {\n    private TwisterScene: TwisterScene;\n    public init(): Promise<any> {\n\n        this.TwisterScene = new TwisterScene();\n\n        return Promise.all([\n            this.TwisterScene.init(),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TwisterScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RazorScene } from '../../razor/RazorScene';\n\nexport class Scene19 {\n    private RazorScene: RazorScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RazorScene = new RazorScene();\n\n        return Promise.all([\n            this.RazorScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RazorScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene2 {\n    private logo: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { SineScrollerScene } from '../../sine-scroller/SineScrollerScene';\n\nexport class Scene20 {\n    private SineScrollerScene: SineScrollerScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.SineScrollerScene = new SineScrollerScene();\n\n        return Promise.all([\n            this.SineScrollerScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.SineScrollerScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n// chick on phone\nexport class Scene3 {\n    private logo: Texture;\n    private background: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../../assets/logos/chick-on-phone.png'), true).then(\n                (texture: Texture) => this.background = texture\n            ),\n            TextureUtils.load(require('../../../assets/logos/pizza_express.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.background.height / 2)) | 0, this.background, 1.0);\n\n        framebuffer.drawTexture(\n            ((framebuffer.width / 2) - (this.logo.width / 2)) | 0,\n            ((framebuffer.height / 2) - (this.logo.height / 2)) | 0,\n            this.logo,\n            1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\nimport { PlasmaScene } from '../../plasma/PlasmaScene';\n\n// pizza being delivered\nexport class Scene4 {\n\n    private pizza: Texture;\n    private image: Texture;\n    private PlasmaScene: PlasmaScene;\n\n    public init(): Promise<any> {\n        this.PlasmaScene = new PlasmaScene();\n\n        return Promise.all([\n            // https://www.pngkey.com/detail/u2r5r5o0o0e6a9i1_sign-up-for-deals-pizza-delivery-guy-png/\n            TextureUtils.load(require('../../../assets/logos/pizza-delivery.png'), true).then(\n                (texture: Texture) => this.pizza = texture\n            ),\n            TextureUtils.load(require('../../../assets/lsd.png'), true).then(\n                (texture: Texture) => this.image = texture\n            ),\n            this.PlasmaScene.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.PlasmaScene.render(framebuffer, time);\n        framebuffer.drawTexture(50,  ((framebuffer.height / 2) - (this.image.height / 2)) | 0, this.image, 1.0);\n        framebuffer.drawTexture(framebuffer.width - this.pizza.width, (framebuffer.height ) - (this.pizza.height ) | 0, this.pizza, 1.0);\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { TorusScene } from '../../torus/TorusScene';\n\nexport class Scene5 {\n    private TorusScene: TorusScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.TorusScene = new TorusScene();\n\n        return Promise.all([\n            this.TorusScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TorusScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { PlaneDeformationScene } from '../../plane-deformation/PlaneDeformationScene';\nimport { DistortedSphereScene } from '../../distorted-sphere/DistortedSphereScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class Scene6 {\n    private PlaneDeformationScene: PlaneDeformationScene;\n    private DistortedSphereScene: DistortedSphereScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.PlaneDeformationScene = new PlaneDeformationScene(3, require('../../../assets/textures/checker.png'));\n        this.DistortedSphereScene = new DistortedSphereScene();\n\n        return Promise.all([\n            this.DistortedSphereScene.init(framebuffer),\n            this.PlaneDeformationScene.init(framebuffer),\n            // https://www.pngitem.com/middle/iwTwxh_face-facial-hair-sitting-tongue-fear-woman-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick-2.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.PlaneDeformationScene.render(framebuffer, time);\n        this.DistortedSphereScene.renderTransparent(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { RotoZoomerScene } from '../../roto-zoomer/RotoZoomerScene';\nimport { CubeScene } from '../../cube/CubeScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene7 {\n    private RotoZoomerScene: RotoZoomerScene;\n    private CubeScene: CubeScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RotoZoomerScene = new RotoZoomerScene();\n        this.CubeScene = new CubeScene();\n\n        return Promise.all([\n            this.CubeScene.init(framebuffer),\n            this.RotoZoomerScene.init(),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RotoZoomerScene.render(framebuffer, time);\n        this.CubeScene.renderBackground(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { VoxelBallsScene } from '../../voxel-balls/VoxelBallsScene';\nimport { LedPlasmaScene } from '../../led-plasma/LedPlasmaScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene8 {\n    private VoxelBallsScene: VoxelBallsScene;\n    private LedPlasmaScene: LedPlasmaScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.VoxelBallsScene = new VoxelBallsScene();\n        this.LedPlasmaScene = new LedPlasmaScene();\n\n        return Promise.all([\n            this.LedPlasmaScene.init(),\n            this.VoxelBallsScene.init(framebuffer),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.LedPlasmaScene.render(framebuffer, time);\n        this.VoxelBallsScene.renderTransparent(framebuffer, time);\n        // framebuffer.drawTexture(0, ((framebuffer.height / 2) - (this.logo.height / 2)) | 0, this.logo, 1.0);\n\n    }\n\n}","import { Framebuffer } from '../../../Framebuffer';\nimport { BlenderCameraScene } from '../../blender-camera-animation/BlenderCameraScene';\nexport class Scene9 {\n    private BlenderCameraScene: BlenderCameraScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.BlenderCameraScene = new BlenderCameraScene();\n\n        return Promise.all([\n            this.BlenderCameraScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(0);\n        framebuffer.clearDepthBuffer();\n        this.BlenderCameraScene.render(framebuffer, time);\n    }\n\n}","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector4f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { Vertex } from '../../Vertex';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\n\ninterface IndexMesh {\n    points: Array<Vector4f>,\n    points2: Array<Vector4f>,\n    normals: Array<Vector4f>,\n    normals2: Array<Vector4f>,\n    index: Array<number>\n}\n\nexport class DistortedSphereScene extends AbstractScene {\n\n    private heightmapSphere: Texture;\n\n    private env: Texture;\n    private obj: IndexMesh;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/heightmapSphere.png'), false).then(\n                texture => this.heightmapSphere = texture\n            ),\n            TextureUtils.load(require('../../assets/envmap.png'), false).then(\n                texture => this.env = texture\n            ),\n        ]).then(\n            () => {\n                this.obj = this.createSphereDistplaced(this.heightmapSphere);\n            });\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.clearColorBuffer(Color.BLACK.toPackedFormat());\n        this.renderTransparent(framebuffer, time);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.env);\n        const scale: number = 3.7;\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(time * 0.0001)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(time * 0.0001)));\n\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-0, -0,\n            -10 - (Math.sin(time * 0.0006) * 0.5 + 0.5) * 6)\n            .multiplyMatrix(modelViewMartrix);\n        framebuffer.clearDepthBuffer();\n        this.shadingSphereEnvDisp2(framebuffer, time * 0.0004, modelViewMartrix);\n    }\n\n    public createSphere() {\n\n        const pointsA: Array<Vector4f> = [\n            new Vector4f(0.0, -1.0, 0.0),\n            new Vector4f(1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, 1.0),\n            new Vector4f(-1.0, 0.0, 0.0),\n            new Vector4f(0.0, 0.0, -1.0),\n            new Vector4f(0.0, 1.0, 0.0)\n        ];\n\n        const indexA: Array<number> = [\n            0, 1, 2,\n            0, 2, 3,\n            0, 3, 4,\n            0, 4, 1,\n            1, 5, 2,\n            2, 5, 3,\n            3, 5, 4,\n            4, 5, 1\n        ];\n\n        const k = this.divideSphere(pointsA, indexA, 4);\n\n        // optimize\n        const points: Array<Vector4f> = [];\n        const points2: Array<Vector4f> = [];\n        const normals: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n\n        const index: Array<number> = [];\n\n        k.index.forEach(i => {\n            const p = k.points[i];\n\n            const point = points.find(findPoint => findPoint.sub(p).length() < 0.001);\n\n            if (point) {\n                const idx = points.indexOf(point);\n                index.push(idx);\n            } else {\n                index.push(points.push(p) - 1);\n            }\n        });\n\n        points.forEach(() => {\n            normals.push(new Vector4f(0, 0, 0));\n            normals2.push(new Vector4f(0, 0, 0));\n            points2.push(new Vector4f(0, 0, 0));\n        })\n\n        return {\n            points,\n            points2,\n            normals,\n            normals2,\n            index\n        }\n    }\n\n    public divideSphere(points: Array<Vector4f>, index: Array<number>, steps: number) {\n\n        const points2: Array<Vector4f> = [];\n        const normals2: Array<Vector4f> = [];\n        const index2: Array<number> = [];\n\n        let c = 0;\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points[index[i]];\n            const v2 = points[index[i + 1]];\n            const v3 = points[index[i + 2]];\n\n            const vn1 = v2.sub(v1).mul(0.5).add(v1).normalize();\n            const vn2 = v3.sub(v2).mul(0.5).add(v2).normalize();\n            const vn3 = v1.sub(v3).mul(0.5).add(v3).normalize();\n\n            points2.push(v1); points2.push(vn1); points2.push(vn3);\n            normals2.push(v1); normals2.push(vn1); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(v2); points2.push(vn2);\n            normals2.push(vn1); normals2.push(v2); normals2.push(vn2);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn1); points2.push(vn2); points2.push(vn3);\n            normals2.push(vn1); normals2.push(vn2); normals2.push(vn3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n\n            points2.push(vn3); points2.push(vn2); points2.push(v3);\n            normals2.push(vn3); normals2.push(vn2); normals2.push(v3);\n            index2.push(c++); index2.push(c++); index2.push(c++);\n        }\n\n        if (steps > 0) {\n            return this.divideSphere(points2, index2, --steps);\n        } else {\n            return {\n                points: points2,\n                normals: normals2,\n                index: index2\n            }\n        }\n    }\n\n\n    public createSphereDistplaced(texture: Texture) {\n        const sphere: {\n            points: Array<Vector4f>,\n            points2: Array<Vector4f>,\n            normals: Array<Vector4f>,\n            normals2: Array<Vector4f>,\n            index: Array<number>\n        } = this.createSphere();\n        const newPoints: Array<Vector4f> = new Array<Vector4f>();\n        sphere.points.forEach((point) => {\n            const x = point.x;\n            const y = point.y;\n            const z = point.z;\n            const u = Math.floor((0.5 + Math.atan2(z, x) / (2 * Math.PI)) * 255);\n            const v = Math.floor((0.5 - Math.asin(y) / Math.PI) * 255);\n            const disp = 1 + 1.4 * ((texture.texture[u + v * 256] & 0xff) / 255);\n            newPoints.push(point.mul(disp));\n        });\n        sphere.points = newPoints;\n        return sphere;\n    }\n\n    public shadingSphereEnvDisp2(framebuffer: Framebuffer, elapsedTime: number, modelViewMartrix: Matrix4f): void {\n        const result = this.obj;\n\n\n        for (let i = 0; i < result.points.length; i++) {\n            const y = result.points[i].z;\n            const x = result.points[i].x;\n            const length = Math.sqrt(x * x + y * y);\n            let rot = Math.sin(result.points[i].y * 0.539 + Math.max(20 - length * 2, 0) * 0.06 + elapsedTime * 0.9) * 4.5;\n            rot *= Math.sin(elapsedTime * 0.25) * 0.5 + 0.5;\n            result.points2[i].y = result.points[i].y;\n            result.points2[i].x = result.points[i].x * Math.cos(rot) - result.points[i].z * Math.sin(rot);\n            result.points2[i].z = result.points[i].x * Math.sin(rot) + result.points[i].z * Math.cos(rot);\n\n            result.normals[i].x = 0;\n            result.normals[i].y = 0;\n            result.normals[i].z = 0;\n        }\n\n        const points = result.points2;\n        const index = result.index;\n        const normals = result.normals;\n\n        const norm: Vector4f = new Vector4f(0, 0, 0);\n        const norm2: Vector4f = new Vector4f(0, 0, 0);\n        const cross: Vector4f = new Vector4f(0, 0, 0);\n        for (let i = 0; i < index.length; i += 3) {\n            const v1: Vector4f = points[index[i]];\n            const v2: Vector4f = points[index[i + 1]];\n            const v3: Vector4f = points[index[i + 2]];\n\n\n            norm.sub2(v2, v1);\n            norm2.sub2(v3, v1);\n            cross.cross2(norm, norm2);\n            const normal = cross;\n            normals[index[i]].add2(normals[index[i]], normal);\n            normals[index[i + 1]].add2(normals[index[i + 1]], normal);\n            normals[index[i + 2]].add2(normals[index[i + 2]], normal);\n        }\n\n        for (let i = 0; i < normals.length; i++) {\n            normals[i].normalize2();\n        }\n\n        const points2: Array<Vector4f> = result.points2;\n        const normals2: Array<Vector4f> = result.normals2;\n\n        const normalMatrix = modelViewMartrix.computeNormalMatrix();\n\n        for (let n = 0; n < normals.length; n++) {\n            normalMatrix.multiplyHomArr(normals[n], normals2[n]);\n        }\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            points2[p].x = Math.round((framebuffer.width * 0.5) + (transformed.x / (-transformed.z * 0.0078)));\n            points2[p].y = Math.round((framebuffer.height * 0.5) - (transformed.y / (-transformed.z * 0.0078)));\n            points2[p].z = transformed.z;\n        }\n\n        const vertex1 = new Vertex();\n        vertex1.textureCoordinate = new TextureCoordinate();\n        const vertex2 = new Vertex();\n        vertex2.textureCoordinate = new TextureCoordinate();\n        const vertex3 = new Vertex();\n        vertex3.textureCoordinate = new TextureCoordinate();\n        const vertexArray = new Array<Vertex>(vertex1, vertex2, vertex3);\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const n1 = normals2[index[i]];\n\n            const v2 = points2[index[i + 1]];\n            const n2 = normals2[index[i + 1]];\n\n            const v3 = points2[index[i + 2]];\n            const n3 = normals2[index[i + 2]];\n\n            if (framebuffer.isTriangleCCW(v1, v2, v3)) {\n\n                vertexArray[0].projection = v1;\n                framebuffer.fakeSphere(n1, vertex1);\n\n                vertexArray[1].projection = v2;\n                framebuffer.fakeSphere(n2, vertex2);\n\n                vertexArray[2].projection = v3;\n                framebuffer.fakeSphere(n3, vertex3);\n\n                if (v1.x < framebuffer.minWindow.x ||\n                    v2.x < framebuffer.minWindow.x ||\n                    v3.x < framebuffer.minWindow.x ||\n                    v1.x > framebuffer.maxWindow.x ||\n                    v2.x > framebuffer.maxWindow.x ||\n                    v3.x > framebuffer.maxWindow.x ||\n                    v1.y < framebuffer.minWindow.y ||\n                    v2.y < framebuffer.minWindow.y ||\n                    v3.y < framebuffer.minWindow.y ||\n                    v1.y > framebuffer.maxWindow.y ||\n                    v2.y > framebuffer.maxWindow.y ||\n                    v3.y > framebuffer.maxWindow.y) {\n\n\n                    this.texturedRenderingPipeline.clipConvexPolygon(framebuffer, vertexArray);\n                } else {\n                    this.texturedRenderingPipeline.triangleRasterizer.drawTriangleDDA(framebuffer, vertexArray[0], vertexArray[1], vertexArray[2]);\n                }\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nexport class DofBallsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.load(require('../../assets/spriteBlur.png'), true).then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleTorus(framebuffer, time, this.particleTexture2, true);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.60);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public computeDepthBlur(\n        nearPlane: number,\n        focalPlane: number,\n        farPlane: number, depth: number): number {\n\n        let f: number;\n\n        if (depth > focalPlane) {\n            f = (depth - focalPlane) / (nearPlane - focalPlane);\n        } else {\n            f = (depth - focalPlane) / (farPlane - focalPlane);\n        }\n        return Math.min(f, 1.0);\n    }\n\n    public drawParticleTorus(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        framebuffer.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const radi = 5.2;\n\n        for (let i = 0; i < num; i++) {\n            const x = radi * Math.cos(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n            const y = (i - num * 0.5) * 0.4;\n            const z = radi * Math.sin(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n\n            points.push(new Vector3f(x, y, z));\n        }\n\n        const modelViewMartrix: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.0004)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.0004)));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach((element: Vector3f) => {\n            points2.push(framebuffer.project(modelViewMartrix.multiply(element)));\n        });\n\n        points2.sort((a: Vector3f, b: Vector3f) => a.z - b.z);\n\n        points2.forEach((element: Vector3f) => {\n            const size: number = -(2.9 * 292 / (element.z));\n            const spriteNum: number = Math.round(this.computeDepthBlur(0, -15, -70, element.z) * 13);\n\n            framebuffer.drawParticle2Sub(\n                element.x - size / 2,\n                element.y - size / 2,\n                size, size, texture, 1 / element.z, 1.0, spriteNum, 128\n            );\n        });\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\n\nexport class GearsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private noise: Texture;\n    private gearsMesh: Array<FlatshadedMesh>;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n\n        return Promise.all([\n            BlenderLoader.load(require('../../assets/jsx/gear.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.gearsMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n\n        this.drawBlenderScene4(framebuffer, time);\n        /*  [\n              { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n              { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n              { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n              { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n              { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n          ], this.dirt);*/\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene4(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -21).multiplyMatrix(\n            Matrix4f.constructYRotationMatrix(elapsedTime * 0.0002)\n                .multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.0002)\n                )\n        );\n\n        let scale: number = 0.1 * 2.1 * 2.1;\n        let factor: number = 2.1 - 0.09 - 0.09;\n        const fade: number = 0.09;\n        const dampFactor: number = Math.sin(elapsedTime * 0.00001) * 0.5 + 0.5;\n        for (let i: number = 1; i < 6; i++) {\n            scale *= factor;\n            factor -= fade;\n\n            const mv: Matrix4f = this.getModelViewMatrix(camera, dampFactor, scale, i, elapsedTime);\n\n            this.renderingPipeline.draw(framebuffer, this.gearsMesh[0], mv);\n        }\n        // let lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(16.0 * 20, 16.0 * 20, 0)));\n        // framebuffer.drawLensFlare(lensflareScreenSpace, elapsedTime * 0.3, texture, dirt);\n    }\n\n    private getModelViewMatrix(camera: Matrix4f, dampFactor: number, scale: number, i: number,\n        elapsedTime: number): Matrix4f {\n        const modelViewMartrix: Matrix4f =\n            Matrix4f.constructXRotationMatrix(elapsedTime * 0.0006 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.0005 + dampFactor * 0.7 * (4 - i)).multiplyMatrix(\n                    Matrix4f.constructScaleMatrix(scale, scale, scale)));\n\n        return camera.multiplyMatrix(modelViewMartrix);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { BlenderLoader } from './../../model/blender/BlenderLoader';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { Interpolator } from '../../math/Interpolator';\n\nexport class HoodlumScene extends AbstractScene {\n\n    private blurred: Texture;\n    private lab2: Texture;\n    private noise: Texture;\n    private particleTexture2: Texture;\n    private spaceLabMesh: Array<TexturedMesh>;\n    private hoodlumLogoMesh: Array<FlatshadedMesh>;\n    private accumulationBuffer: Uint32Array;\n\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/lab2.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.spaceLabMesh = mesh\n            ),\n            BlenderLoader.load(require('../../assets/jsx/hoodlum2018.jsx')).then(\n                (mesh: Array<FlatshadedMesh>) => this.hoodlumLogoMesh = mesh\n            ),\n            TextureUtils.load(require('../../assets/lab2.png'), false).then(texture => this.lab2 = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n            this.createProceduralTexture3().then(texture => this.particleTexture2 = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        framebuffer.setCullFace(CullFace.BACK);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        framebuffer.setCullFace(CullFace.BACK);\n        framebuffer.setTexture(this.lab2);\n\n        this.drawBlenderScene9(framebuffer, time, this.particleTexture2);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawBlenderScene9(framebuffer: Framebuffer, elapsedTime: number, texture3: Texture): void {\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f =\n            Matrix4f.constructTranslationMatrix(0, 0, -34 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 7).multiplyMatrix(\n                Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.00014) * 0.5 + 0.5) * 0.5 - 0.2).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0002).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 1.9, 0)\n                    )));\n\n        let mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(13, 13, 13));\n\n        this.texturedRenderingPipeline.setModelViewMatrix(mv);\n        this.texturedRenderingPipeline.drawMeshArray(framebuffer, this.spaceLabMesh);\n\n        mv = camera.multiplyMatrix(\n            Matrix4f.constructTranslationMatrix(0, -5.5, 0).multiplyMatrix(\n                Matrix4f.constructScaleMatrix(413, 413, 413).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(Math.PI * 0.5)\n                )\n            ));\n\n        const model = this.hoodlumLogoMesh[0];\n        this.renderingPipeline.draw(framebuffer, model, mv);\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 10;\n        const num2 = 6;\n\n        for (let i = 0; i < num; i++) {\n\n            for (let j = 0; j < num2; j++) {\n                const y = ((i + elapsedTime * 0.001) % 10) * 2.5 - 12;\n                const scale2 = (1 + 4 * Interpolator.interpolate(-10, 10, y)) *\n\n                    ((Math.sin(elapsedTime * 0.0012 + Math.PI * 2 / num * i * 2) * 0.5 + 0.5) * 0.5 + 0.5);\n                const x = scale2 * Math.sin(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                const z = scale2 * Math.cos(Math.PI * 2 / num2 * j + elapsedTime * 0.0008);\n\n                points.push(new Vector3f(x, y, z));\n            }\n        }\n\n        const modelViewMartrix = camera.multiplyMatrix(Matrix4f.constructTranslationMatrix(0, -0.0, 0));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach(element => {\n            const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n            points2.push(transformed);\n        });\n\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            const size = -(4.3 * 192 / (element.z));\n            framebuffer.drawSoftParticle(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture3, 1 / element.z, 0.7);\n        });\n    }\n\n    public createProceduralTexture3(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x\n                    const dy = 127 - y\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) c = 0;\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class LedPlasmaScene extends AbstractScene {\n\n    private ledTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/led.png'), false).then(\n                (texture: Texture) => this.ledTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.led(framebuffer, time, this.ledTexture);\n    }\n\n    // TODO: create interesting pattern!\n    public led(framebuffer: Framebuffer, elapsedTime: number, texture: Texture): void {\n        const time = elapsedTime * 0.0007 * 1.0;\n        const lineDirection = new Vector3f(Math.sin(time), Math.cos(time), 0);\n        const radialWaveCenter = new Vector3f(40.0 / 2.0, 35.0 / 2.0, 0).add(new Vector3f(40.0 / 2.0 *\n            Math.sin(-time * 1.2), 35.0 / 2.0 * Math.cos(-time * 1.2), 0));\n        const difference: Vector3f = new Vector3f(0, 0, 0);\n\n        const horizontalUnits = Math.ceil(framebuffer.width / 8);\n        const verticalUnits = Math.ceil(framebuffer.height / 8);\n\n        for (let y = 0; y < verticalUnits; y++) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                const directionalWave = (Math.sin((x * lineDirection.x + y * lineDirection.y) * 0.8 + time) + 1.0) * 0.5;\n                difference.x = x - radialWaveCenter.x;\n                difference.y = y - radialWaveCenter.y;\n                const radialWave = (Math.cos(difference.length() * 0.7) + 1.0) * 0.5;\n                const waveSum: number = (radialWave + directionalWave) * 0.5;\n\n                const intensity = ((waveSum * 15) | 0) % 16;\n                framebuffer.drawTextureRectNoAlpha(x * 8, y * 8, 0, 8 * intensity, 8, 8, texture);\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { SkyBox } from '../../SkyBox';\nimport { Texture, TextureUtils } from '../../texture';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderLoader } from '../../model/blender/BlenderLoader';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { LensFlare } from '../../special-effects/LensFlare';\n\nexport class MetalHeadzScene extends AbstractScene {\n\n    private metalheadz: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private noise: Texture;\n    private dirt: Texture;\n    private skyBox: SkyBox;\n\n    private blenderObjMetal: any;\n\n    private accumulationBuffer: Uint32Array;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.skyBox = new SkyBox();\n        // TODO:\n        // make classes for assets\n        // lens flare, 3d modell\n\n        return Promise.all([\n            this.skyBox.init(),\n            BlenderLoader.loadWithTexture(require('../../assets/jsx/metalheadz.jsx')).then(\n                (mesh: Array<TexturedMesh>) => this.blenderObjMetal = mesh\n            ),\n            TextureUtils.load(require('../../assets/metalheadz.png'), false).then(\n                (texture: Texture) => this.metalheadz = texture\n            ),\n            TextureUtils.load(require('../../assets/ring.png'), true).then(\n                (texture: Texture) => this.texture11 = texture\n            ),\n            TextureUtils.load(require('../../assets/bokeh.png'), true).then(\n                (texture: Texture) => this.texture13 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            ),\n            TextureUtils.load(require('../../assets/dirt.png'), true).then(\n                (texture: Texture) => this.dirt = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.texturedRenderingPipeline.setCullFace(CullFace.BACK);\n        const elapsedTime: number = 0.2 * time;\n\n        framebuffer.clearDepthBuffer();\n\n        const camera: Matrix4f = this.computeCameraMovement(elapsedTime);\n        const mv: Matrix4f = camera.multiplyMatrix(Matrix4f.constructScaleMatrix(7, 7, 7));\n\n        this.skyBox.draw(framebuffer, mv);\n\n        framebuffer.clearDepthBuffer();\n        framebuffer.setTexture(this.metalheadz);\n\n        const renderingPipeline: TexturingRenderingPipeline = this.texturedRenderingPipeline;\n\n        renderingPipeline.setModelViewMatrix(mv);\n        renderingPipeline.drawMeshArray(framebuffer, this.blenderObjMetal);\n\n        const scale: number = 20;\n        const lensflareScreenSpace: Vector3f =\n            framebuffer.project(camera.getRotation().multiply(new Vector3f(1.1 * scale, 2 * scale, -0.9 * scale)));\n\n        LensFlare.drawLensFlare(framebuffer, lensflareScreenSpace, elapsedTime * 1.2, [\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    private computeCameraMovement(elapsedTime: number): Matrix4f {\n        return Matrix4f.constructTranslationMatrix(0, 0, -134 + (Math.sin(elapsedTime * 0.00007) * 0.5 + 0.5) * 17)\n            .multiplyMatrix(\n                Matrix4f.constructXRotationMatrix(elapsedTime * 0.0008).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(-elapsedTime * 0.0009).multiplyMatrix(\n                        Matrix4f.constructTranslationMatrix(0, 0, 0)\n                    )\n                )\n            );\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Vector3f, Matrix4f, Matrix3f } from '../../math';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture';\nimport { Interpolator } from '../../math/Interpolator';\n\nexport class ParticleStreamsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture().then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleStreams(framebuffer, time, this.particleTexture2);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.55);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise);\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const num2 = 10;\n        const scale = 2.1;\n\n        for (let i = 0; i < num; i++) {\n            const radius = 2.8;\n            const radius2 = 2.9 + 3 * Math.sin(Math.PI * 2 * i / num - elapsedTime * 0.002);\n\n            for (let j = 0; j < num2; j++) {\n\n                const x = ((i - num / 2) * scale - elapsedTime * 0.008) % (num * scale) + (num * scale * 0.5);\n                const y = Math.cos(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius + 8 + radius2;\n                const z = Math.sin(Math.PI * 2 / num2 * j + i * 0.02 + elapsedTime * 0.0005) * radius;\n\n                points.push(Matrix3f.constructXRotationMatrix(Math.PI * 2 * i / num - Math.sin(elapsedTime * 0.0003 + Math.PI * 2 * i / num)).multiply(new Vector3f(x, y, z)));\n            }\n        }\n\n        for (let i = 0; i < 3; i++) {\n            const modelViewMartrix = Matrix4f.constructTranslationMatrix(0, -0.0, -49).multiplyMatrix(\n\n                Matrix4f.constructZRotationMatrix(Math.PI * 0.17).multiplyMatrix(\n                    Matrix4f.constructYRotationMatrix(elapsedTime * 0.00015).multiplyMatrix(\n                        Matrix4f.constructXRotationMatrix(Math.PI * 2 / 3 * i + elapsedTime * 0.0006)))\n            );\n\n            const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n            points.forEach(element => {\n\n\n                const transformed = framebuffer.project(modelViewMartrix.multiply(element));\n\n                points2.push(transformed);\n            });\n\n            points2.sort((a, b) => {\n                return a.z - b.z;\n            });\n\n            points2.forEach(element => {\n                // let size = -(2.0 * 192 / (element.z));\n                const size = -(1.3 * 192 / (element.z));\n                if (element.z < -4)\n                    framebuffer.drawParticleNoDepth(\n                        Math.round(element.x - size / 2),\n                        Math.round(element.y - size / 2),\n                        Math.round(size), Math.round(size), texture, Interpolator.interpolate(-90, -55, element.z));\n            });\n        }\n    }\n\n\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { Utils } from '../../core/Utils';\n\n/**\n * Plane deformation\n *\n * 2D plane deformations using lookup tables was a great\n * way to get smooth animations of complex calculations\n * running on slower processors. These effects were very\n * common in the 90s demoscene.\n *\n * The idea was to take a texture and deform it using a\n * pre-calculated math reference table. Different formulas\n * gave different effects such as fake 3d tunnels, wormholes\n * and landscapes.\n *\n * https://www.iquilezles.org/www/articles/deform/deform.htm\n *\n */\n\nexport class PlaneDeformationScene {\n\n    private mLUT: Int32Array;\n    public texture: Texture;\n\n    constructor(\n        private effectStyle: number,\n        private texturePath: string\n    ) {\n    }\n\n    onInit() { }\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.texturePath, false).then(\n                (texture: Texture) => {\n                    this.texture = texture;\n                    this.createLUT(this.effectStyle, framebuffer.width, framebuffer.height, this.texture.width, this.texture.height);\n                }\n            ),\n        ]);\n\n    }\n\n    // fill math lookup table values with crazy values\n    public createLUT(effectStyle: number, effectWidth: number, effectHeight: number, textureWidth: number, textureHeight: number): Promise<any> {\n\n        // initializae lookup array\n        this.mLUT = new Int32Array(3 * effectWidth * effectHeight);\n\n        // increment placeholder\n        let k = 0;\n\n        // u and v are euclidean coordinates\n        let u = 0;\n        let v = 0\n        let bright = 0;\n\n        for (let j = 0; j < effectHeight; j++) {\n            const y = -1.00 + 2.00 * j / effectHeight;\n            for (let i = 0; i < effectWidth; i++) {\n                const x = -1.00 + 2.00 * i / effectWidth;\n                const d = Math.sqrt(x * x + y * y);\n                const a = Math.atan2(y, x);\n\n                const r = d;\n                switch (effectStyle) {\n                    case 1:   // stereographic projection / anamorphosis\n                        u = Math.cos(a) / d;\n                        v = Math.sin(a) / d;\n                        bright = -50 * (2 / (6 * r + 3 * x));\n                        break;\n                    case 2:  // hypnotic rainbow spiral\n                        v = Math.sin(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        u = Math.cos(a + Math.cos(3 * r)) / (Math.pow(r, .2));\n                        bright = 1;\n                        break;\n                    case 3:  // rotating tunnel\n                        v = 2 / (6 * r + 3 * x);\n                        u = a * 3 / Math.PI;\n                        bright = 25 * -v;\n                        break;\n                    case 4:  // wavy star-burst\n                        v = (-0.4 / r) + .1 * Math.sin(8 * a);\n                        u = .5 + .5 * a / Math.PI;\n                        bright = 0;\n                        break;\n                    case 5:  // hyper-space travel\n                        u = (0.02 * y + 0.03) * Math.cos(a * 3) / r;\n                        v = (0.02 * y + 0.03) * Math.sin(a * 3) / r;\n                        bright = 0;\n                        break;\n                    case 6:  // five point magnetic flare\n                        u = 1 / (r + 0.5 + 0.5 * Math.sin(5 * a));\n                        v = a * 3 / Math.PI;\n                        bright = 0;\n                        break;\n                    case 7:  // cloud like dream scroll\n                        u = 0.1 * x / (0.11 + r * 0.5);\n                        v = 0.1 * y / (0.11 + r * 0.5);\n                        bright = 0;\n                        break;\n                    case 8:  // floor and ceiling with fade to dark horizon\n                        u = x / Math.abs(y);\n                        v = 1 / Math.abs(y);\n                        bright = 40 * -v;\n                        break;\n                    case 9:  // hot magma liquid swirl\n                        u = 0.5 * (a) / Math.PI;\n                        v = Math.sin(2 * r);\n                        bright = 0;\n                        break;\n                    case 10:  // clockwise flush down the toilet\n                        v = Math.pow(r, 0.1);\n                        u = (1 * a / Math.PI) + r;\n                        bright = 0;\n                        break;\n                    case 11:  // 3D ball\n                        v = x * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        u = y * (3 - Math.sqrt(4 - 5 * r * r)) / (r * r + 1);\n                        bright = 7 * -18.7 * (x + y + r * r - (x + y - 1) * Math.sqrt(4 - 5 * r * r) / 3) / (r * r + 1);\n                        break;\n                    default:  // show texture with no deformation or lighting\n                        u = x;\n                        v = y;\n                        bright = 0;\n                        break;\n                }\n                this.mLUT[k++] = (textureWidth * u) & textureWidth - 1;\n                this.mLUT[k++] = (textureHeight * v) & textureHeight - 1;\n                this.mLUT[k++] = Utils.clamp(bright, -255, 255);\n            }\n        }\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // this.drawOldPlaneDeformationStar(framebuffer, time >> 3);\n        // this.drawOldPlaneDeformationFloor(framebuffer, time >> 3);\n        this.drawPlaneDeformation(framebuffer, time >> 3, time >> 3);\n    }\n\n    /**\n     * For every frame, go through every pixel and use the reference table (mLUT)\n     * to get which pixel of the texture it should draw at the current pixel.\n     *\n     * TODO:\n     * - Rotate effect via rotozoomer class\n     *   use drawOldPlaneDeformationStar to add another lookup layer [mLUT * 4]\n     *   use drawOldPlaneDeformationFloor to update createLUT(8) floor algorithm\n     *\n     */\n    drawPlaneDeformation(framebuffer: Framebuffer, elapsedTimeY: number, elapsedTimeX: number) {\n\n        for (let pixelCount = 0; pixelCount < framebuffer.framebuffer.length; pixelCount++) {\n            const o = (pixelCount << 1) + pixelCount; // equivalent to 3 * pixelCount\n            const u = this.mLUT[o + 0] + elapsedTimeX; // to look like its animating, add timeDisplacement\n            const v = this.mLUT[o + 1] + elapsedTimeY;\n            const adjustBrightness = this.mLUT[o + 2]; // fade out\n\n            // get the R,G,B values from texture\n            let currentPixel = this.texture.texture[this.texture.width * (v & this.texture.height - 1) + (u & this.texture.width - 1)];\n\n            // only apply brightness if it was calculated\n            if (adjustBrightness !== 0) {\n\n                // disassemble pixel using bit mask to remove color components for greater speed\n                let r = currentPixel & 0xFF;        // get red\n                let g = currentPixel >> 8 & 0xFF;   // get green\n                let b = currentPixel >> 16 & 0xFF;  // get blue\n\n                // make darker or brighter\n                r += adjustBrightness;\n                g += adjustBrightness;\n                b += adjustBrightness;\n\n                // constrain RGB to make sure they are within 0-255 color range\n                r = Utils.clamp(r, 0, 255);\n                g = Utils.clamp(g, 0, 255);\n                b = Utils.clamp(b, 0, 255);\n\n                // reassemble colors back into pixel\n                currentPixel = new Color(r, g, b, 255).toPackedFormat();\n            }\n\n            // put texture pixel on buffer screen\n            framebuffer.framebuffer[pixelCount] = currentPixel;\n        }\n    }\n\n    /**\n     *\n     * Previous Plane deformation without lookup tables for reference\n     *\n     * http://sol.gfxile.net/gp/ch17.html\n     * TODO:\n     * - better textures\n     * - precalc lookup tables\n     * - fadeout\n     * - substraction to create black holes\n     */\n    drawOldPlaneDeformationFloor(framebuffer: Framebuffer, elapsedTime: number) {\n        /*\n        mLUT(8)\n            u = x / Math.abs(y);\n            v = 1 / Math.abs(y);\n            bright = 10 * -v;\n        */\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            const ydist = (y - framebuffer.height / 2);\n            const v = (((1 / Math.abs(ydist / 100 * 0.02) + elapsedTime * 0.069) % 256) + 256) % 256;\n            const alpha = 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2));\n                const u = (((((xdist / framebuffer.width) / Math.abs(ydist / 100 * 0.02))) % 256) + 256) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n    drawOldPlaneDeformationStar(framebuffer: Framebuffer, elapsedTime: number) {\n        let i = 0;\n        for (let y = 0; y < framebuffer.height; y++) {\n            for (let x = 0; x < framebuffer.width; x++) {\n                const xdist = (x - (framebuffer.width / 2)) / (framebuffer.width / 2);\n                const ydist = (y - framebuffer.height / 2) / (framebuffer.height / 2);\n                const alpha = 1;// 1 - Math.min(1, (1 / Math.abs(ydist / 10)));\n                const a = Math.atan2(ydist, xdist) + elapsedTime * 0.0004;\n                const v = (a * 3 / Math.PI + elapsedTime * 0.0004) * 128 % 256;\n                const d = Math.sqrt(xdist * xdist + ydist * ydist);\n                const u = (1 / (d + 0.5 + 0.5 * Math.sin(5 * a)) * 32 + elapsedTime * 0.03) % 256;\n                const color1 = this.texture.texture[(u | 0) + (v | 0) * 256];\n                const r = (((color1 >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((color1 >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((color1 >> 16) & 0xff) * (alpha)) | 0;\n                framebuffer.framebuffer[i++] = r | g << 8 | b << 16 | 255 << 24;\n            }\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Color } from '../../core/Color';\n\nexport class PlasmaScene extends AbstractScene {\n\n    private GRADIENTLEN = 1500;\n\n    // swing/wave function parameters\n    private SWINGLEN = this.GRADIENTLEN * 3;\n    private SWINGMAX = this.GRADIENTLEN / 2 - 1;\n\n    // gradient & swing curve arrays\n    private colorGrad: Array<number>;\n    private swingCurve: Array<number>;\n\n    public init(): Promise<any> {\n        this.makeGradient(this.GRADIENTLEN);\n        this.makeSwingCurve(this.SWINGLEN, this.SWINGMAX);\n        return Promise.all([]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawPlasma(framebuffer, time);\n        // this.drawOldSchoolPlasma(framebuffer, Date.now());\n    }\n\n    // fill the given array with a nice swingin' curve\n    // three cos waves are layered together for that\n    // the wave \"wraps\" smoothly around\n    makeSwingCurve(arrlen: number, maxval: number) {\n        const factor1 = 2;\n        const factor2 = 3;\n        const factor3 = 6;\n\n        this.swingCurve = new Array<number>(this.SWINGLEN);\n\n        const halfmax = maxval / factor1;\n\n        for (let i = 0; i < arrlen; i++) {\n            const ni = i * (Math.PI * 2) / arrlen; // ni goes [0..TWO_PI] -> one complete cos wave\n            this.swingCurve[i] = Math.round(\n                Math.cos(ni * factor1) *\n                Math.cos(ni * factor2) *\n                Math.cos(ni * factor3) *\n                halfmax + halfmax);\n        }\n    }\n\n    // create a smooth, colorful gradient by cosinus curves in the RGB channels\n    makeGradient(arrlen: number) {\n        // random between 1 and 5\n        const rf = 2;\n        const gf = 4;\n        const bf = 4;\n\n        // random between 0 and gradient length\n        const rd = 818; // 0;\n        const gd = 1095; // arrlen / gf;\n        const bd = 1351; // arrlen / bf / 2;\n\n        this.colorGrad = new Array<number>(this.GRADIENTLEN);\n\n        // fill gradient array\n        for (let i = 0; i < arrlen; i++) {\n            const r = this.cos256(arrlen / rf, i + rd);\n            const g = this.cos256(arrlen / gf, i + gd);\n            const b = this.cos256(arrlen / bf, i + bd);\n            this.colorGrad[i] = new Color(r, g, b, 255).toPackedFormat();\n        }\n    }\n\n    // helper: get cosinus sample normalized to 0..255\n    private cos256(amplitude: number, x: number) {\n        return Math.trunc(Math.cos(x * (Math.PI * 2) / amplitude) * 127 + 127);\n    }\n\n    // helper: get a swing curve sample\n    private swing(i: number) {\n        return this.swingCurve[i % this.SWINGLEN];\n    }\n\n    // helper: get a gradient sample\n    private gradient(i: number) {\n        return this.colorGrad[i % this.GRADIENTLEN];\n    }\n\n    drawPlasma(framebuffer: Framebuffer, time: number) {\n        let i = 0;\n        const t = Math.trunc(time >> 3);\n        const swingT = this.swing(t);\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            const swingY = this.swing(y);\n            const swingYT = this.swing(y + t);\n            for (let x = 0; x < framebuffer.width; x++) {\n                // this is where the magic happens: map x, y, t around\n                // the swing curves and lookup a color from the gradient\n                // the \"formula\" was found by a lot of experimentation\n                framebuffer.framebuffer[i++] = this.gradient(this.swing(\n                    this.swing(x + swingT) + swingYT) +\n                    this.swing(this.swing(x + t) + swingY));\n            }\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Dodecahedron } from '../../geometrical-objects/Dodecahedron';\nimport { Pyramid } from '../../geometrical-objects/Pyramid';\nimport { Sphere } from '../../geometrical-objects/Sphere';\nimport { Matrix4f, Vector3f } from '../../math';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { Color } from '../../core/Color';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { LensFlare } from '../../special-effects/LensFlare';\n\n/**\n * TODO: extract lens into effect class\n */\nexport class RazorScene extends AbstractScene {\n\n    private texture10: Texture;\n    private texture11: Texture;\n    private texture13: Texture;\n    private dirt: Texture;\n    private noise: Texture;\n\n    private cube: Cube;\n    private dodecahedron: Dodecahedron;\n    private pyramid: Pyramid;\n    private icosahedron: Sphere; // Icosahedron;\n\n    private accumulationBuffer: Uint32Array;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        this.cube = new Cube();\n        this.dodecahedron = new Dodecahedron();\n        this.pyramid = new Pyramid();\n        this.icosahedron = new Sphere(6, 10);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/spark.png'), true).then(texture => this.texture10 = texture),\n            TextureUtils.load(require('./assets/ring.png'), true).then(texture => this.texture11 = texture),\n            TextureUtils.load(require('./assets/bokeh.png'), true).then(texture => this.texture13 = texture),\n            TextureUtils.load(require('./assets/dirt.png'), true).then(texture => this.dirt = texture),\n            TextureUtils.generateProceduralNoise().then(texture => this.noise = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.reproduceRazorScene(framebuffer, time * 0.0025, [\n            { tex: this.texture10, scale: 0.0, alpha: 1.0 },\n            { tex: this.texture11, scale: 2.3, alpha: 0.5 },\n            { tex: this.texture13, scale: 1.6, alpha: 0.25 },\n            { tex: this.texture13, scale: 0.7, alpha: 0.22 },\n            { tex: this.texture13, scale: -0.4, alpha: 0.22 },\n        ], this.dirt);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        // framebuffer.drawTexture(0, 0, texture3, 0.75);\n        framebuffer.drawScaledTextureClipBi(0, 0, framebuffer.width, framebuffer.height, texture3, .75);\n\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n        framebuffer.noise(time, this.noise, 0.04);\n    }\n\n    public reproduceRazorScene(framebuffer: Framebuffer, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        // camerea:\n        // http://graphicsrunner.blogspot.de/search/label/Water\n        framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24);\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f;\n\n        const camera = Matrix4f.constructTranslationMatrix(0, 0, -6.4 - 5 * (Math.sin(elapsedTime * 0.06) * 0.5 + 0.5)).multiplyMatrix(\n            Matrix4f.constructXRotationMatrix((Math.sin(elapsedTime * 0.08) * 0.5 + 0.5) * 0.5).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.1)));\n\n        let scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            modelViewMartrix);\n\n\n        let model = this.dodecahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        const yDisplacement = -1.5;\n        const distance = 2.8;\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.icosahedron.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        // TODO:  store Mesh inside cube instance and use cube.draw(framebuffer);\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.cube.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(modelViewMartrix);\n\n        model = this.pyramid.getMesh();\n        this.renderingPipeline.draw(framebuffer, model, modelViewMartrix);\n\n        /**\n         * SHADOWS\n         */\n        this.renderingPipeline.enableLighting(false);\n        this.renderingPipeline.setColor(Color.DARK_GRAY);\n\n        scale = 2.0;\n        modelViewMartrix = Matrix4f.constructYRotationMatrix(elapsedTime * 0.2).multiplyMatrix(Matrix4f.constructScaleMatrix(scale, scale, scale));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 1.0, 0).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(-elapsedTime * 0.2)));\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.dodecahedron.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.pyramid.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 0.5, -distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale * 0.5, scale * 2, scale * 0.5);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(-distance, yDisplacement + 1, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.cube.getMesh(), modelViewMartrix);\n\n        scale = 1.0;\n        modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale);\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(distance, yDisplacement + 1.0, distance).multiplyMatrix(modelViewMartrix);\n        modelViewMartrix = camera.multiplyMatrix(\n            Matrix4f.constructShadowMatrix().multiplyMatrix(modelViewMartrix));\n\n            this.renderingPipeline.draw(framebuffer, this.icosahedron.getMesh(), modelViewMartrix);\n\n        this.renderingPipeline.enableLighting(true);\n\n        const lensflareScreenSpace = framebuffer.project(camera.multiply(new Vector3f(12.0, 4.0, 0)));\n\n        LensFlare.drawLensFlare(framebuffer, lensflareScreenSpace, elapsedTime * 100, texture, dirt);\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class RotoZoomerScene extends AbstractScene {\n\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            /*TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),*/\n            TextureUtils.load(require('../../assets/xray.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawRotoZoomer(framebuffer, time);\n    }\n\n    drawRotoZoomer(framebuffer: Framebuffer, time: number) {\n        const scale = Math.sin(time * 0.0005) + 1.1;\n\n        const yStepX = Math.sin(time * 0.0003) * scale;\n        const yStepY = Math.cos(time * 0.0003) * scale;\n\n        const xStepX = yStepY;\n        const xStepY = -yStepX;\n\n        let texYCoord = Math.sin(time * 0.0002) * 512;\n        let texXCoord = Math.cos(time * 0.0002) * 512;\n\n        let texYCoordInner = 0;\n        let texXCoordInner = 0;\n        let framebufferPos = 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            texXCoordInner = texXCoord;\n            texYCoordInner = texYCoord;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.framebuffer[framebufferPos++] = this.logoTexture.texture[(texXCoordInner & 127) + (texYCoordInner & 127) * 128];\n\n                texXCoordInner += xStepX;\n                texYCoordInner += xStepY;\n            }\n\n            texXCoord += yStepX;\n            texYCoord += yStepY;\n        }\n    }\n\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class FontRenderer {\n\n    private fontTexture: Texture;\n    private charToIndex: Map<number, number>;\n\n    constructor(\n        private framebuffer: Framebuffer,\n        private width: number,\n        private height: number,\n        fonts: string,\n        private file: any) {\n        this.charToIndex = new Map<number, number>();\n\n        for (let x: number = 0; x < fonts.length; x++) {\n            this.addCharInex(fonts.charCodeAt(x), x);\n        }\n    }\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(this.file, true).then(\n                (texture: Texture) => this.fontTexture = texture\n            )\n        ]);\n    }\n\n    public draw(): void {\n        this.framebuffer.drawTextureRectFastAlpha(0, 0, 0, 0, 50, 50, this.fontTexture);\n    }\n\n    public drawText2(x: number, y: number, text: string): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        for (let i: number = 0; i < text.length; i++) {\n            const asciiCode: number = text.charCodeAt(i);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.framebuffer.drawTextureRectFastAlpha(xpos, y, tx, ty, this.width, this.height, this.fontTexture);\n            xpos += this.width;\n        }\n    }\n\n    public drawText(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine);\n            xpos += this.width;\n        }\n    }\n\n    public drawText3(framebuffer: Framebuffer, x: number, y: number, text: string, time: number, sine: boolean = true, points: Array<Vector3f>): void {\n        let xpos: number = x;\n        const xFonts: number = this.fontTexture.width / this.width;\n\n        const speed: number = 0.07;\n        const xOff: number = Math.floor(time * speed) % this.width;\n        const textOff: number = Math.floor((time * speed) / this.width) % text.length;\n        xpos -= xOff;\n        for (let i: number = 0; i < Math.floor(this.framebuffer.width / this.width + 1); i++) {\n            const asciiCode: number = text.charCodeAt((i + textOff) % text.length);\n            const index: number = this.charToIndex.has(asciiCode) ? this.charToIndex.get(asciiCode) : 0;\n            const tx: number = Math.floor(index % xFonts) * this.width;\n            const ty: number = Math.floor(index / xFonts) * this.height;\n            this.drawTextureRectFastAlpha3(framebuffer, xpos,\n                y, tx, ty, this.width, this.height, this.fontTexture, time, sine, points);\n            xpos += this.width;\n        }\n    }\n\n\n    public drawTextureRectFastAlpha3(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true, points: Array<Vector3f>): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        const speed: number = 0.07;\n        const xOff: number =(time * speed) % 1;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (((color & 0x00000ff)>>0) > 100) {\n\n                    let y = 0-h*1.2+4;\n                    let xpos=  (xs+w)*1.2-160-xOff*1.2;\n                    points.push(new Vector3f(\n                        xpos,\n                        Math.sin(xpos*0.06)*y+Math.sin(xpos*0.2)*1,\n                        Math.cos(xpos*0.06)*y+Math.cos(xpos*0.2)*1));\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    public drawTextureRectFastAlpha(framebuffer: Framebuffer, xs: number, ys: number, xt: number, yt: number,\n        width: number, height: number, texture: Texture, time: number, sine: boolean = true): void {\n        const startW: number = Math.max(0, 0 - xs);\n        const endW: number = Math.min(xs + width, framebuffer.width) - xs;\n        for (let w: number = startW; w < endW; w++) {\n\n            const yDisp: number = sine ? Math.round(Math.sin(time * 0.004 + (xs + w) * 0.013) * 30) : 0;\n            let texIndex: number = xt + w + yt * texture.width;\n            let frIndex: number = xs + w + (ys + yDisp) * framebuffer.width;\n\n            for (let h: number = 0; h < height; h++) {\n                const color: number = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    framebuffer.framebuffer[frIndex] = color;\n                }\n\n                texIndex += texture.width;\n                frIndex += this.framebuffer.width;\n            }\n\n        }\n\n    }\n\n    private addCharInex(char: number, index: number): void {\n        this.charToIndex.set(char, index);\n    }\n}\n","import { Color } from '../../core/Color';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Vector2f } from '../../math/Vector2f';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { FontRenderer } from './FontRenderer';\n\nexport class SineScrollerScene extends AbstractScene {\n\n    private texture2: Texture;\n    private startTime: number;\n    private fontRenderer: FontRenderer;\n    private fontRenderer2: FontRenderer;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.startTime = Date.now();\n\n        const fonts: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ@+# ' +\n            '0123456789' +\n            '!\\'()?-/.,';\n        this.fontRenderer = new FontRenderer(\n            framebuffer,\n            32, 34, fonts,\n            require('./assets/fraxionFont.png')\n        );\n\n        const fonts2: string =\n            'ABCDEFGHIJ' +\n            'KLMNOPQRST' +\n            'UVWXYZ 012' +\n            '3456789*:?' +\n            '!-(),\\'.+~<' +\n            '>>#// ';\n        this.fontRenderer2 = new FontRenderer(\n            framebuffer,\n            16, 18, fonts2,\n            require('./assets/anarchyFont.png')\n        );\n        /*\n                const fonts: string =\n                'ABCDEFGHIJ' +\n                'KLMNOPQRST' +\n                'UVWXYZ!?:;' +\n                '0123456789' +\n                '\"(),-.\\'@# ';\n                this.fontRenderer = new FontRenderer(\n                    framebuffer,\n                    32, 25, fonts,\n                    require('./assets/dragonsFont.png')\n                );*/\n        return Promise.all([\n            TextureUtils.load(require('../../assets/hoodlumLogo.png'), true).then(\n                (texture: Texture) => this.texture2 = texture\n            ),\n            this.fontRenderer.init(),\n            this.fontRenderer2.init()\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawStarField(framebuffer, time);\n\n        framebuffer.drawTexture(framebuffer.width/2 - this.texture2.width/2, 0, this.texture2, 1.0);\n\n        this.fontRenderer.drawText(framebuffer, 0, 102, ' # TEAM GENESIS # IS BACK IN 2018 WITH A NEW PC FIRST! \\'STAR WARS - EMPIRE AT WAR\\' DO YOU LIKE THIS?    ', time);\n        this.fontRenderer2.drawText(framebuffer, 0, framebuffer.height - 20,\n            '   * WE REALLY LOVE SCROLLERS * HOW ABOUT YOU? THIS PRODUCTION IS FROM HOODLUM' +\n            '~< LETS GO ON WITH THE GENERAL BLAH BLAH      ', time * 1.6, false);\n\n        // animated rainbow horizontal lines\n        const horizontalUnits = framebuffer.width / 16;\n        for (let i: number = 0; i < horizontalUnits; i++) {\n            const myTime = time * 0.003;\n            const waveSum = i / horizontalUnits * 0.6;\n            const red = (Math.cos(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const green = (Math.sin(Math.PI * waveSum / 0.5 + myTime) + 1.0) * 0.5 * 255;\n            const blue = (Math.sin(myTime) + 1.0) * 0.5 * 255;\n\n            const color: number = 255 << 24 | blue << 16 | green << 8 | red;\n            framebuffer.drawRect(i * 16, 68, 16, color);\n            framebuffer.drawRect(((horizontalUnits-1) - i) * 16, 168, 16, color);\n        }\n    }\n\n    public drawStarField(frambuffer: Framebuffer, elapsedTime: number): void {\n        const darkStarColor = 255 << 24 | 128 << 16 | 128 << 8 | 128;\n        const lightStarColor = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n        const backgroundColor = 255 << 24 | 0 << 16 | 0 << 8 | 0;\n\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(666);\n        const stars = new Array<Vector2f>();\n        const stars2 = new Array<Vector2f>();\n\n        for (let i = 0; i < 100; i++) {\n            stars.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        for (let i = 0; i < 60; i++) {\n            stars2.push(new Vector2f(rng.getFloat() * frambuffer.width, Math.round(rng.getFloat() * 100 + 68)));\n        }\n\n        frambuffer.clearColorBuffer(backgroundColor);\n        frambuffer.drawRect2(0, 68, frambuffer.width, 100, Color.DARK_BLUE.toPackedFormat());\n\n        for (let i = 0; i < 100; i++) {\n            frambuffer.drawPixel(((stars[i].x + elapsedTime * 0.02) | 0) % frambuffer.width, stars[i].y, darkStarColor);\n        }\n\n        for (let i = 0; i < 60; i++) {\n            frambuffer.drawPixel(((stars2[i].x + elapsedTime * 0.04) | 0) % frambuffer.width, stars2[i].y, lightStarColor);\n        }\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { TorusKnot } from '../../geometrical-objects/TorusKnot';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector4f } from '../../math/Vector4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Fog } from '../../shading/fog/Fog';\nimport { LinearFog } from '../../shading/fog/LinearFog';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport RandomNumberGenerator from '../../RandomNumberGenerator';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusKnotTunnelScene extends AbstractScene {\n\n    private noise: Texture;\n    private particleTexture: Texture;\n    private cocoon: Texture;\n    private torusKnot: TorusKnot = new TorusKnot(true);\n    private fog: Fog = new LinearFog(-50, -240, new Vector4f(0.67, 0.4, 0.5, 1.0));\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.renderingPipeline.setFog(this.fog);\n\n        return Promise.all([\n            TextureUtils.generateProceduralNoise().then((texture: Texture) => this.noise = texture),\n            TextureUtils.load(require('../../assets/cocoon.png'), false).then(\n                (texture: Texture) => this.cocoon = texture\n            ),\n            TextureUtils.generateProceduralParticleTexture2().then(\n                (texture: Texture) => this.particleTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.renderingPipeline.setCullFace(CullFace.FRONT);\n        this.torusTunnel(framebuffer, time * 0.019);\n        framebuffer.drawScaledTextureClipAdd(\n            framebuffer.width / 2 - this.cocoon.width / 2,\n            framebuffer.height / 2 - this.cocoon.height / 2,\n            this.cocoon.width, this.cocoon.height, this.cocoon, 0.67);\n\n        // framebuffer.noise(time, this.noise);\n        this.glitchScreen(framebuffer, time * 5, this.noise);\n    }\n\n    public glitchScreen(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noise: boolean = true): void {\n\n        const glitchFactor = (Math.sin(elapsedTime * 0.00002) * 0.9 + 0.1);\n        const rng = new RandomNumberGenerator();\n        rng.setSeed((elapsedTime / 250) | 0);\n        const texture2 = new Texture();\n        texture2.height = framebuffer.height;\n        texture2.width = framebuffer.width;\n        texture2.texture = framebuffer.framebuffer;\n\n\n        const blockWidth = 20;\n        const horizontalUnits = Math.floor(framebuffer.width / blockWidth);\n        const verticalUnits = Math.floor(framebuffer.height / blockWidth);\n\n        for (let x = 0; x < horizontalUnits; x++) {\n            for (let y = 0; y < verticalUnits; y++) {\n                if (rng.getFloat() > 0.25) {\n                    continue;\n                }\n\n                framebuffer.drawTextureRect(blockWidth * (horizontalUnits - x), blockWidth * ((horizontalUnits * rng.getFloat()) | 0), blockWidth * x, blockWidth * y, blockWidth, blockWidth, texture2.texture, texture2.width, 0.03 + 0.35 * glitchFactor);\n            }\n        }\n\n        if (noise) {\n            for (let x = 0; x < horizontalUnits; x++) {\n                for (let y = 0; y < verticalUnits; y++) {\n                    framebuffer.drawTextureRect(x * blockWidth, y * blockWidth, blockWidth * (Math.round(elapsedTime / 100 + x + y) % 12), 0, blockWidth, blockWidth, texture.texture, texture.width, 0.1 + 0.3 * glitchFactor);\n                }\n            }\n        }\n\n        framebuffer.fastFramebufferCopy(framebuffer.tmpGlitch, framebuffer.framebuffer);\n\n        // now distort the tmpGlitch buffer and render to framebuffer again\n\n        const rng2 = new RandomNumberGenerator();\n\n        for (let k = 0; k < 8; k++) {\n            let yStart = Math.round(rng.getFloat() * 180);\n            const size = 3 + Math.round(rng.getFloat() * 20);\n            rng2.setSeed((elapsedTime / 250) | 0);\n            const scale = rng2.getFloat() * glitchFactor;\n            const off = rng.getFloat() * glitchFactor;\n            for (let y = 0; y < size; y++) {\n                const offset = Math.abs(Math.round(off * 25) + Math.round(rng2.getFloat() * 3)\n                    + Math.round(Math.cos(y * 0.01 + elapsedTime * 0.002 + off) * scale * 5));\n\n                let index = yStart * framebuffer.width;\n                let glIndex = yStart * framebuffer.width + framebuffer.width - offset;\n\n                for (let i = 0; i < Math.max(0, offset); i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n\n                glIndex = yStart * framebuffer.width;\n                const count = framebuffer.width - offset;\n\n                for (let i = 0; i < count; i++) {\n                    framebuffer.framebuffer[index++] = framebuffer.tmpGlitch[glIndex++];\n                }\n                yStart++;\n            }\n        }\n    }\n\n    public torusTunnel(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        const scale = 1.0;\n        const lookAhead: number = 0.4;\n\n        const frame = this.torusFunction3(elapsedTime * 0.02);\n        const frame2 = this.torusFunction3(elapsedTime * 0.02 + lookAhead);\n\n        const tangent = frame2.sub(frame).normalize();\n        let up = frame.add(frame2).normalize();\n        const right = tangent.cross(up).normalize();\n        up = right.cross(tangent).normalize();\n\n        const translation = Matrix4f.constructIdentityMatrix();\n        // translation vector\n        translation.m14 = -frame.x;\n        translation.m24 = -frame.y;\n        translation.m34 = -frame.z;\n\n        const rotation = Matrix4f.constructIdentityMatrix();\n        // x vector\n        rotation.m11 = right.x;\n        rotation.m21 = right.y;\n        rotation.m31 = right.z;\n\n        // y vector\n        rotation.m12 = up.x;\n        rotation.m22 = up.y;\n        rotation.m32 = up.z;\n\n        // z vector\n        rotation.m13 = -tangent.x;\n        rotation.m23 = -tangent.y;\n        rotation.m33 = -tangent.z;\n\n        const finalMatrix = rotation.transpose().multiplyMatrix(translation);\n\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.035));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -10).multiplyMatrix(modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.04)));\n        modelViewMartrix = Matrix4f.constructZRotationMatrix(elapsedTime * 0.01).multiplyMatrix(finalMatrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torusKnot.getMesh(), modelViewMartrix);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2;\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Torus } from '../../geometrical-objects/Torus';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\nexport class TorusScene extends AbstractScene {\n\n    private razorLogo: Texture;\n    private torus: Torus = new Torus();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('./assets/razor1911.png'), true).then(\n                (texture: Texture) => this.razorLogo = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n\n        this.drawTitanEffect(framebuffer, time);\n        this.shadingTorus(framebuffer, time * 0.02);\n        framebuffer.drawTexture(framebuffer.width / 2 - this.razorLogo.width / 2, 0, this.razorLogo, 1.0);\n    }\n\n    public shadingTorus(framebuffer: Framebuffer, elapsedTime: number): void {\n        framebuffer.clearDepthBuffer();\n\n        let modelViewMartrix: Matrix4f = Matrix4f.constructYRotationMatrix(elapsedTime * 0.05);\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0, 0, -24).multiplyMatrix(modelViewMartrix);\n\n        this.renderingPipeline.draw(framebuffer, this.torus.getMesh(), modelViewMartrix);\n    }\n\n\n    private drawTitanEffect(framebuffer: Framebuffer, time: number) {\n        framebuffer.clear();\n        const horizontalNum = framebuffer.width / 20;\n        const verticalNum = framebuffer.height / 20;\n\n        for (let x = 0; x < horizontalNum; x++) {\n            for (let y = 0; y < verticalNum; y++) {\n\n                const scale = ((Math.sin(time * 0.004 + x * 0.7 + y * 0.4) + 1) / 2);\n                const size = Math.round(scale * 8 + 1) * 2;\n                const offset = (20 / 2 - size / 2) | 0;\n                const color = 255 << 24 | (85 * scale) << 16 | (55 * scale) << 8 | (55 * scale);\n                framebuffer.drawBox2(x * 20 + offset, y * 20 + offset, size, size, color);\n            }\n        }\n\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract twister into effect class\n */\nexport class TwisterScene extends AbstractScene {\n\n    private backgroundTexture: Texture;\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.backgroundTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.drawScaledTextureClipBi(\n            0,\n            0,\n            framebuffer.width, framebuffer.height, this.backgroundTexture, 1.0);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.backgroundTexture.texture);\n        this.draw(framebuffer, this.logoTexture, time);\n    }\n\n    private draw(framebuffer: Framebuffer, texture: Texture, time: number): void {\n        const a: number = time * 0.001;\n        for (let i: number = 10; i < framebuffer.height - 10; i++) {\n            const xoff = (Math.sin(a + i * 0.01) * 50) | 0;\n            const rot = Math.sin(a * 0.4 + i * 0.0021) * Math.PI * 2;\n            let scale = 42;\n            const x1 = (Math.sin(rot) * scale) | 0;\n            const x2 = (Math.sin(Math.PI * 2 / 4 + rot) * scale) | 0;\n            const x3 = (Math.sin(Math.PI * 2 / 4 * 2 + rot) * scale) | 0;\n            const x4 = (Math.sin(Math.PI * 2 / 4 * 3 + rot) * scale) | 0;\n\n            if (x2 > x1) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 1.5 + rot));\n                const dist = x2 - x1;\n                const xPos = x1 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x3 > x2) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 2.5 + rot));\n                const dist = x3 - x2;\n                const xPos = x2 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x4 > x3) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 3.5 + rot));\n                const dist = x4 - x3;\n                const xPos = x3 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x1 > x4) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 4.5 + rot));\n                const dist = x1 - x4;\n                const xPos = x4 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n        }\n    }\n\n    private drawSpan(\n        framebuffer: Framebuffer,\n        dist: number,\n        xpos: number,\n        ypos: number,\n        scale: number,\n        texture: Texture,\n        time: number): void {\n        let framebufferIndex = xpos + ypos * framebuffer.width;\n        let textureIndex = (((ypos - time * 0.029) | 0) & 0xff) * texture.width;\n        const textureForwardDifference = texture.width / dist;\n        const hightlight = Math.pow(scale, 11) * 115;\n\n        for (let j = 0; j < dist; j++) {\n            const color = texture.texture[textureIndex | 0];\n\n            const r = Math.min(((color >> 0 & 0xff) * scale) + hightlight, 255);\n            const g = Math.min(((color >> 8 & 0xff) * scale) + hightlight, 255);\n            const b = Math.min(((color >> 16 & 0xff) * scale) + hightlight, 255);\n\n            framebuffer.framebuffer[framebufferIndex] = r | g << 8 | b << 16 | 255 << 24;\n\n            framebufferIndex++;\n            textureIndex += textureForwardDifference;\n        }\n    }\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { TextureUtils, Texture } from '../../texture/index';\n\n/**\n * TODO: use cube mesh and draw using drawObject2\n */\nexport class VoxelBallsScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.YELLOW.toPackedFormat();\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private blurred: Texture;\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        framebuffer.setCullFace(CullFace.BACK);\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        this.renderTransparent(framebuffer, time);\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTextureFullscreen(texture3, 0.75);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n    public renderTransparent(framebuffer: Framebuffer, time: number): void {\n\n        framebuffer.clearDepthBuffer();\n\n        const xSteps = 5;\n        const xsteps = 5;\n        const zsteps = 5;\n        for (let x = 0; x < xSteps; x++) {\n            for (let y = 0; y < xsteps; y++) {\n                for (let z = 0; z < zsteps; z++) {\n                    let scale = (Math.sin(x * 0.3 + time * 0.0009) + 1.0) * 0.5 *\n                        (Math.sin(y * 0.4 + time * 0.002) + 1.0) * 0.5 *\n                        (Math.sin(z * 0.3 + time * 0.001) + 1.0) * 0.5;\n                    if (scale < 0.3) {\n                        // continue;\n                    }\n                    scale = 0.8;\n                    const mat =\n                        Matrix4f.constructTranslationMatrix(0, 0, -11).multiplyMatrix(\n                            Matrix4f.constructYRotationMatrix(time * 0.0003).multiplyMatrix(\n                                Matrix4f.constructXRotationMatrix(time * 0.0005).multiplyMatrix(\n                                    Matrix4f.constructZRotationMatrix(time * 0.0004).multiplyMatrix(\n                                        Matrix4f.constructTranslationMatrix(x - xSteps / 2 + 0.5, y - xsteps / 2 + 0.5, z - zsteps / 2 + 0.5)\n                                            .multiplyMatrix(\n                                                Matrix4f.constructScaleMatrix(scale, scale, scale)))))); // .multiplyMatrix(\n                    //       Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    //           Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n\n                    this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), mat);\n                }\n            }\n        }\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class Dodecahedron extends AbstractGeometricObject {\n\n    constructor() {\n\n        super();\n\n        // https://github.com/chiptune/lol3d/blob/master/index.html\n        const phi = (1 + Math.sqrt(5)) * 0.5;\n        const a = 1;\n        const b = 1 / phi;\n        const c = 2 - phi;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(c, 0, a), new Vector4f(-c, 0, a), new Vector4f(-b, b, b), new Vector4f(0, a, c),\n            new Vector4f(b, b, b), new Vector4f(b, -b, b), new Vector4f(0, -a, c), new Vector4f(-b, -b, b),\n            new Vector4f(c, 0, -a), new Vector4f(-c, 0, -a), new Vector4f(-b, -b, -b), new Vector4f(0, -a, -c),\n            new Vector4f(b, -b, -b), new Vector4f(b, b, -b), new Vector4f(0, a, -c), new Vector4f(-b, b, -b),\n            new Vector4f(1, c, 0), new Vector4f(-a, c, 0), new Vector4f(-1, -c, 0), new Vector4f(a, -c, 0)\n        ];\n\n        const index: Array<number> = [\n            0, 4, 1, 1, 3, 2, 1, 4, 3, 1, 7, 0,\n            0, 6, 5, 0, 7, 6, 8, 12, 9, 9, 11, 10,\n            9, 12, 11, 9, 15, 8, 8, 14, 13, 8, 15, 14,\n            14, 3, 13, 13, 4, 16, 13, 3, 4, 3, 14, 2,\n            2, 15, 17, 2, 14, 15, 11, 6, 10, 10, 7, 18,\n            10, 6, 7, 6, 11, 5, 5, 12, 19, 5, 11, 12,\n            16, 4, 19, 19, 0, 5, 19, 4, 0, 19, 12, 16,\n            16, 8, 13, 16, 12, 8, 17, 15, 18, 18, 9, 10,\n            18, 15, 9, 18, 7, 17, 17, 1, 2, 17, 7, 1\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Pyramid extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(0, a, 0),\n            new Vector4f(a, -a, -a),\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, a),\n            new Vector4f(-a, -a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 1, 2,\n            0, 3, 1,\n            0, 4, 3,\n            0, 2, 4\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Sphere extends AbstractGeometricObject {\n\n    public constructor(xSteps: number = 16, ySteps: number = 16) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = xSteps;\n        const STEPS2 = ySteps;\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    private sphereFunction(theta: number, phi: number): Vector4f {\n        return new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class TorusKnot extends AbstractGeometricObject {\n\n    public constructor(inverse: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 80;\n        const STEPS2 = 8;\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction3(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction3(i * 2 * Math.PI / STEPS + 0.1);\n\n            const tangent = frame2.sub(frame);\n            let up = frame.add(frame2).normalize();\n            const right = tangent.cross(up).normalize().mul(26.4);\n            up = right.cross(tangent).normalize().mul(26.4);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(pos.mul(1));\n            }\n        }\n\n        const index: Array<number> = [];\n\n\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length); // 5\n            }\n        }\n\n        this.buildMesh(points, index, inverse);\n    }\n\n    private torusFunction3(alpha: number): Vector4f {\n        const p = 2\n        const q = 3;\n        const r = 0.5 * (2 + Math.sin(q * alpha));\n        return new Vector4f(r * Math.cos(p * alpha),\n            r * Math.cos(q * alpha),\n            r * Math.sin(p * alpha)).mul(70);\n    }\n\n}\n","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n\n    public setRotationMatrix(x: number,y: number,z: number, alpha: number): void {\n        const c = Math.cos(Math.PI * 2 *alpha / 360 );\n        const s = Math.sin(Math.PI * 2 *alpha / 360 );\n        const vector = new Vector3f(x,y,z);\n        vector.normalize2();\n\n        this.m11 = (1.0 - c) * vector.x * vector.x + c;\n        this.m12 = (1.0 - c) * vector.x * vector.y - s * vector.z;\n        this.m13 = (1.0 - c) * vector.x * vector.z + s * vector.y;\n        this.m14 = 0.0;\n\n        this.m21 = (1.0 - c) * vector.x * vector.y + s * vector.z;\n        this.m22 = (1.0 - c) * vector.y * vector.y + c;\n        this.m23 = (1.0 - c) * vector.y * vector.z - s * vector.x;\n        this.m24 = 0.0;\n\n        this.m31 = (1.0 - c) * vector.x * vector.z - s * vector.y;\n        this.m32 = (1.0 - c) * vector.y * vector.z + s * vector.x;\n        this.m33 = (1.0 - c) * vector.z * vector.z + c;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { BlenderScene } from '../../blender/BlenderScene';\n\n/**\n * Load Wavefront OBJ file that was converted via obj2json utility.\n * to save the convertToMeshArray step\n * renamed to JSX file to load file at runtime\n */\nexport class BlenderLoader {\n\n    public static load(filename: string): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: string): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.json();\n        }).then((meshes: BlenderScene) => {\n            return BlenderJsonParser.getBlenderScene(meshes, false);\n        });\n    }\n\n    private constructor() {\n\n    }\n}\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Mesh } from '../../blender/mesh';\nimport { convertToMeshArray } from '../../blender/parseUtils';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class WavefrontLoader {\n\n    public static load(filename: any): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: any): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.getBlenderScene(meshes);\n        });\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) {\n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        if (this.cullMode == CullFace.DISABLED) {\n            return true;\n        }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n            if (this.cullMode == CullFace.DISABLED) {\n                return true;\n            }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Fog {\n\n    public abstract computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Fog } from './Fog';\n\nexport class LinearFog extends Fog {\n\n    private zStart: number;\n    private zEnd: number;\n    private fogColor: Vector4f;\n\n    public constructor(zStart: number, zEnd: number, fogColor: Vector4f) {\n        super();\n        this.zStart = zStart;\n        this.zEnd = zEnd;\n        this.fogColor = fogColor;\n    }\n\n    public computeVertexColor(color: Vector4f, vertex: Vector4f): Vector4f {\n        if (vertex.z >= this.zStart) {\n            return color;\n        } else if (vertex.z <= this.zEnd) {\n            return this.fogColor;\n        } else {\n            const f: number = (this.zEnd - vertex.z) / (this.zEnd - this.zStart);\n            return new Vector4f(\n                color.x * f + this.fogColor.x * (1 - f),\n                color.y * f + this.fogColor.y * (1 - f),\n                color.z * f + this.fogColor.z * (1 - f)\n            );\n        }\n    }\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export interface musicProperties {\n    timeSeconds: number;\n    timeMilliseconds: number;\n    sceneData: sceneData;\n}\n\n// scene variables | things you set through jsRocket\nexport interface sceneData {\n    effect: any;\n    transitionType: any;\n    transitionValue: any;\n    snare: any;\n    bass: any;\n}\n\n// Beats per minute of your demo tune\nexport const BPM = 125;\n\n// The resolution between two beats, four is usually fine,- eight adds a bit more finer control\nexport const ROWS_PER_BEAT = 6;\n\n// we calculate this now, so we can translate between rows and seconds later on\nexport const ROW_RATE = BPM / 60 * ROWS_PER_BEAT;\n","import './JSRocket';\nimport './cowbell/cowbell'\nimport './cowbell/audio_player'\nimport './cowbell/web_audio_player'\nimport './cowbell/openmpt/openmpt_player'\nimport {\n    musicProperties,\n    ROW_RATE,\n    sceneData\n} from './MusicProperties';\nexport class SoundManager {\n\n    public syncDevice;\n    public isPlaying = false;\n    public demoMode: boolean;\n    public row = 0;    // the current row we're on\n\n    //  container for audio values to be used by effects (time, bass, effect, transitions)\n    public musicProperties: musicProperties;\n    public sceneData: sceneData;\n    public audioElement: HTMLAudioElement;\n\n    public constructor() {\n\n        // Initialize JS Rocket\n        this.syncDevice = new JSRocket.SyncDevice();\n        this.syncDevice.connected = false;\n\n    }\n\n    /**\n     * Load audio files supported by cowbell\n     *\n     * @param {string} filename     audio file to load\n     * @returns {Promise<void>}     promise\n     */\n    public loadMusic(filename: string): Promise<void> {\n        return new Promise((resolve) => {\n\n            const fileExtension = filename.split('.').pop().toLowerCase();\n            let audioPlayer;\n\n            switch (fileExtension) {\n                case 'it':\n                case 'xm':\n                case 's3m':\n                case 'mod':\n                    audioPlayer = new Cowbell.Player.OpenMPT({\n                        'pathToLibOpenMPT': './openmpt/libopenmpt.js'\n                    });\n                    break;\n                case 'ogg':\n                case 'mp3':\n                default:\n                    audioPlayer = new Cowbell.Player.Audio();\n                    break;\n            }\n            const track = new audioPlayer.Track(filename);\n            this.audioElement = track.open();\n            resolve();\n        });\n    }\n\n    /**\n     * Load XML file for music syncronization for use with JS Rocket\n     *\n     * @param {string} filename      XML file to load\n     * @param {string} demoMode      use true for release mode (uses file) | false when using rocket editor\n     * @returns {Promise<void>}      promise\n     */\n    prepareSync(filename: string, demoMode: boolean): Promise<void> {\n        this.demoMode = demoMode;\n        return new Promise((resolve) => {\n            if (this.demoMode) {\n                this.syncDevice.setConfig({\n                    'rocketXML': filename\n                });\n                this.syncDevice.init('demo');\n\n            } else {\n                this.syncDevice.init();\n            }\n\n            // XML file from JS Rocket library was loaded and parsed, make sure your ogg is ready\n            this.syncDevice.on('ready', () => this.onSyncReady());\n\n            // [JS Rocket - Arrow keys] whenever you change the row, a value or interpolation mode this will get called\n            this.syncDevice.on('update', (newRow: number) => this.onSyncUpdate(newRow));\n\n            // [JS Rocket - Spacebar] in Rocket calls one of those\n            this.syncDevice.on('play', () => this.onPlay());\n            this.syncDevice.on('pause', () => this.onPause());\n            resolve()\n        });\n    }\n\n    onSyncReady() {\n        this.syncDevice.connected = true;\n\n        this.sceneData = {\n            effect: this.syncDevice.getTrack('effect'),\n            snare: this.syncDevice.getTrack('snare'),\n            bass: this.syncDevice.getTrack('bass'),\n            transitionType: this.syncDevice.getTrack('transitionType'),\n            transitionValue: this.syncDevice.getTrack('transitionValue')\n        }\n    }\n\n    // row is only given if you navigate, or change a value on the row in Rocket\n    // on interpolation change (hit [i]) no row value is sent, as the current there is the upper row of your block\n    onSyncUpdate(newRow: number) {\n        if (!isNaN(newRow)) {\n            this.row = newRow;\n        }\n        this.audioElement.currentTime = newRow / ROW_RATE;\n    }\n\n    updateMusic() {\n        // show message if rocket app is not running in background\n        if (!this.syncDevice.connected && !this.demoMode) {\n            return;\n        }\n\n        // update music properties\n        this.musicProperties = {\n            timeSeconds: (this.audioElement?.currentTime) || 0,\n            timeMilliseconds: (this.audioElement?.currentTime) * 1000,\n            sceneData: {\n                effect: this.sceneData.effect.getValue(this.row),\n                transitionType: this.sceneData.transitionType.getValue(this.row),\n                transitionValue: this.sceneData.transitionValue.getValue(this.row),\n                snare: this.sceneData.snare.getValue(this.row),\n                bass: this.sceneData.bass.getValue(this.row),\n            }\n        }\n\n        this.row = this.musicProperties.timeSeconds * ROW_RATE;\n\n        // update JS rocket\n        if (this.audioElement && this.audioElement.paused === false) {\n            // otherwise we may jump into a point in the audio where there's\n            // no timeframe, resulting in Rocket setting row 2 and we report\n            // row 1 back - thus Rocket spasming out\n\n            // this informs Rocket where we are\n            this.syncDevice.update(this.row);\n        }\n\n        // stop once timeline reaches end\n        if (Math.floor(this.audioElement.duration) === Math.floor(this.musicProperties.timeSeconds)) {\n            document.getElementById('ticker_stop').click();\n        }\n    }\n\n    onPlay() {\n        if (!this.isPlaying && this.audioElement) {\n            if (this.audioElement.currentTime) {\n                this.audioElement.currentTime = this.row / ROW_RATE;\n            }\n            this.isPlaying = true;\n            this.audioElement.play();\n        }\n        console.log('[onPlay]');\n    }\n\n    onPause() {\n        this.row = this.audioElement.currentTime * ROW_RATE;\n        if (!this.audioElement.paused && this.isPlaying) {\n            this.audioElement.pause();\n            this.isPlaying = false;\n        }\n        console.info('[onPause]');\n    }\n\n    /**\n     * find the prev/next effect and jump to it\n     *\n     * @param   {number} time       where we are in the audio timeline\n     * @param   {number} direction  direction to skip -1 goes backwards.  1 goes forward\n     */\n    public jump(time: number, direction: number, sceneLength: number) {\n        this.row = time * ROW_RATE;\n        const effectJump = Number(this.sceneData.effect.getValue(this.row).toFixed(1));\n        if (Math.trunc(Number(this.musicProperties.sceneData.effect)) !== Math.trunc(effectJump) && effectJump >= 1) {\n            // if running into transition effect 2.5..then keep searching and only land on whole numbers\n            if (parseInt(effectJump.toString(), 10) !== effectJump) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                this.seek(time);\n            }\n        } else {\n            if (time >= 0 && effectJump < sceneLength - 3) {\n                this.jump(time + (0.12 * direction), direction, sceneLength);\n            } else {\n                // go back to the beginning\n                this.seek(0);\n            }\n        }\n    }\n\n    /**\n     * Jumps to a point in the audio timeline in milliseconds\n     *\n     * @param  {number} time            time in milliseconds\n     */\n    public seek(time: number) {\n        this.audioElement.currentTime = time;\n        // update rocket editor position to new timeline location\n        if (!this.demoMode) {\n            this.syncDevice.update(this.audioElement.currentTime * ROW_RATE);\n        }\n    }\n\n    /**\n     * Turns music volume on or off\n     *\n     * @param  {HTMLElement} ref         volume icon to toggle\n     * @param  {boolean} isMuted         on or off\n     */\n    public toggleSound(ref: HTMLElement, isMuted: boolean) {\n        if (isMuted) {\n            ref.setAttribute('title', 'enable sound');\n            ref.classList.remove('fa-volume-up');\n            ref.classList.add('fa-volume-off');\n        } else {\n            ref.setAttribute('title', 'mute sound');\n            ref.classList.remove('fa-volume-off');\n            ref.classList.add('fa-volume-up');\n        }\n        this.audioElement.muted = isMuted;\n    }\n\n    /**\n     * Restore position of timeline & mute preferences on reloads\n     */\n    public initTimeline() {\n        // jump to last position on timeline for local development reloading\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const newLocal = this;\n        const jumpTo = Number(localStorage.getItem('lastTime'));\n\n        // poll for mod player since library does not use promises\n        if ((window as any).libopenmpt) {\n            (function poll() {\n                // check if mod was loaded then seek\n                if ((window as any).modulePtr) {\n\n                    // openmpt does not support volume control or muting\n                    document.getElementById('ticker_volume').style.display = 'none';\n                    newLocal.updateRange(newLocal.audioElement.duration);\n                    newLocal.seek(jumpTo);\n                    return;\n                }\n                setTimeout(poll, 150);\n            })();\n        } else {\n            newLocal.audioElement.onloadedmetadata = function () {\n                newLocal.updateRange(newLocal.audioElement.duration);\n            };\n            newLocal.seek(jumpTo);\n        }\n\n        // remember last sound preferences\n        const isMuted = localStorage.getItem('soundToggle') === 'true';\n        this.toggleSound(document.getElementById('ticker_volume'), isMuted);\n    }\n\n    /**\n     * Set timeline slider max range\n     *\n     * @param  {number} value         length time in seconds\n     */\n    private updateRange(value: number) {\n        (document.getElementById(\"timeline\") as HTMLInputElement).max = String(Math.floor(value) * 1000);\n    }\n\n    /*\n    // todo: add effect # markers to timeline\n    fetch(rocketData.default).then(response => response.text())\n        .then(str => new window.DOMParser().parseFromString(str, \"text/xml\"))\n        .then(data => {\n            const tracks: Element[] = Array.from(data.documentElement.getElementsByTagName(\"track\"));\n            tracks.forEach((element) => {\n                if (element.getAttribute(\"name\") === 'effect') {\n                    const keys: Element[] = Array.from(element.getElementsByTagName(\"key\"));\n                    keys.forEach((elementKey) => {\n                        const p = document.createElement(\"option\");\n                        const value = elementKey.getAttribute('row').valueOf();\n                        const label = elementKey.getAttribute('value').valueOf();\n\n                        // remap rows to a range between 0 and 1000\n                        const newValue = Utils.map(Number(label), 0, 1520, 0, 1000);\n\n                        p.value = value;\n                        p.label = label;\n                        // this.tickmarkRef.appendChild(p);\n                    })\n                }\n            });\n        });\n        */\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vector3f } from \"../math\";\nimport { Interpolator } from \"../math/Interpolator\";\nimport { Texture } from \"../texture\";\n\nexport class LensFlare {\n\n    public static drawLensFlare(framebuffer: Framebuffer, screenPos: Vector3f, elapsedTime: number, texture: Array<{ tex: Texture, scale: number, alpha: number }>, dirt: Texture): void {\n        const pos = screenPos;\n\n        if (pos.z < 0 &&\n            pos.x > 0 && pos.x < framebuffer.width &&\n            pos.y > 0 && pos.y < framebuffer.height &&\n            framebuffer.wBuffer[pos.x + (pos.y * framebuffer.width)] > (1 / pos.z)) {\n            if (!framebuffer.lensFlareVisible) {\n                framebuffer.lensFlareVisible = true;\n                framebuffer.lensFlareStart = elapsedTime;\n            }\n        } else {\n            if (framebuffer.lensFlareVisible) {\n                framebuffer.lensFlareVisible = false;\n                framebuffer.lensFlareEnd = elapsedTime;\n            }\n        }\n\n        let scale = Interpolator.interpolate(framebuffer.lensFlareStart, framebuffer.lensFlareStart + 100, elapsedTime);\n        if (framebuffer.lensFlareVisible !== true) {\n            scale *= (1 - Interpolator.interpolate(framebuffer.lensFlareEnd, framebuffer.lensFlareEnd + 100, elapsedTime));\n        }\n        const dir = new Vector3f(framebuffer.width / 2, framebuffer.height / 2, 0).sub(pos);\n\n        if (scale > 0) {\n            for (let i = 0; i < texture.length; i++) {\n                const temp = pos.add(dir.mul(texture[i].scale));\n                framebuffer.drawTexture(Math.round(temp.x) - texture[i].tex.width / 2, Math.round(temp.y) - texture[i].tex.height / 2, texture[i].tex, texture[i].alpha * scale);\n            }\n        }\n\n        // this.drawTextureRectAdd(0, 0, 0, 0, this.width, this.height, dirt, 0.03 + 0.15 * scale);\n        framebuffer.drawScaledTextureClipBi(0, 0, framebuffer.width, framebuffer.height, dirt, 0.15 + 0.20 * scale*0);\n    }\n\n}\n","export class Texture {\n\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        let x0y0: number;\n        let x1y0: number;\n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n\n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n\n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n\n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        const x0y0_a = x0y0 >> 24 & 0xff;\n        const x1y0_a = x1y0 >> 24 & 0xff;\n        const x0y1_a = x0y1 >> 24 & 0xff;\n        const x1y1_a = x1y1 >> 24 & 0xff;\n\n        const col1_a = x0y0_a * oneMinusXfrac + x1y0_a * xFrac;\n        const col2_a = x0y1_a * oneMinusXfrac + x1y1_a * xFrac;\n        const col_a = col1_a * oneMinusYfrac + (col2_a * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | col_a << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","export { Texture } from './Texture';\nexport { TextureUtils } from './TextureUtils';\n","(function (window) {\n\n    if (!window.JSRocket) {\n        window.JSRocket = {};\n    }\n    JSRocket.SyncData = function () {\n\n        \"use strict\";\n\n        var _track = [];\n\n        function getTrack(index) {\n            return _track[index];\n        }\n\n        function getIndexForName(name) {\n            for (var i = 0; i < _track.length; i++) {\n\n                if (_track[i].name === name) {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n\n        function getTrackLength() {\n            return _track.length;\n        }\n\n        function createIndex(varName) {\n            var track = new JSRocket.Track();\n            track.name = varName;\n\n            _track.push(track);\n        }\n\n        return {\n            getTrack: getTrack,\n            getIndexForName: getIndexForName,\n            getTrackLength: getTrackLength,\n            createIndex: createIndex\n        };\n    };\n    JSRocket.Track = function () {\n\n        \"use strict\";\n\n        var STEP = 0,\n            LINEAR = 1,\n            SMOOTH = 2,\n            RAMP = 3;\n\n        var data = [];\n\n        function findKeyIndex(keys, row) {\n            var lo = 0, hi = keys.length;\n            while (lo < hi) {\n                var mi = ((hi + lo) / 2) | 0;\n\n                if (keys[mi] < row) {\n                    lo = mi + 1;\n                } else if (keys[mi] > row) {\n                    hi = mi;\n                } else {\n                    return mi;\n                }\n            }\n            return lo - 1;\n        }\n\n        function getValue(row) {\n            var keys = Object.keys(data);\n\n            if (!keys.length) {\n                return 0.0;\n            }\n\n            var idx = findKeyIndex(keys, Math.floor(row));\n            if (idx < 0) {\n                return data[keys[0]].value;\n            }\n            if (idx > keys.length - 2) {\n                return data[keys[keys.length - 1]].value;\n            }\n\n            // lookup keys and values\n            var k0 = keys[idx], k1 = keys[idx + 1];\n            var a = data[k0].value;\n            var b = data[k1].value;\n\n            // interpolate\n            var t = (row - k0) / (k1 - k0);\n            switch (data[k0].interpolation) {\n                case 0:\n                    return a;\n                case 1:\n                    return a + (b - a) * t;\n                case 2:\n                    return a + (b - a) * t * t * (3 - 2 * t);\n                case 3:\n                    return a + (b - a) * Math.pow(t, 2.0);\n            }\n        }\n\n        function add(row, value, interpolation) {\n            data[row] = {\n                \"value\": value,\n                \"interpolation\": interpolation\n            };\n        }\n\n        function remove(row) {\n            delete data[row];\n        }\n\n        return {\n            getValue: getValue,\n            add: add,\n            remove: remove\n        };\n    };\n    JSRocket.SyncDevicePlayer = function (cfg) {\n\n        \"use strict\";\n\n        var _urlRequest,\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'error': function () {\n                }\n            };\n\n        function load(url) {\n\n            _urlRequest = new XMLHttpRequest();\n\n            if (_urlRequest === null) {\n                _eventHandler.error();\n                return;\n            }\n\n            _urlRequest.open('GET', url, true);\n            _urlRequest.onreadystatechange = urlRequestHandler;\n\n            _urlRequest.send();\n        }\n\n        function urlRequestHandler() {\n\n            if (_urlRequest.readyState === 4) {\n                if (_urlRequest.status < 300) {\n                    readXML(_urlRequest.responseText);\n                } else {\n                    _eventHandler.error();\n                }\n            }\n        }\n\n        function readXML(xmlString) {\n            var key,\n                t = 0, tLen, k = 0, kLen,\n                xml = (new DOMParser()).parseFromString(xmlString, 'text/xml'),\n                tracks = xml.getElementsByTagName('tracks');\n\n            //<tracks>\n            var trackList = tracks[0].getElementsByTagName('track');\n\n            for (t, tLen = trackList.length; t < tLen; t++) {\n\n                var track = getTrack(trackList[t].getAttribute('name')),\n                    keyList = trackList[t].getElementsByTagName('key');\n\n                for (k = 0, kLen = keyList.length; k < kLen; k++) {\n                    key = keyList[k];\n                    track.add(parseInt(key.getAttribute('row'), 10),\n                        parseFloat(key.getAttribute('value')),\n                        parseInt(key.getAttribute('interpolation'), 10));\n\n                }\n            }\n\n            _eventHandler.ready();\n        }\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        function nop() {\n\n        }\n\n        if (cfg.rocketXML === \"\" || cfg.rocketXML === undefined || cfg.rocketXML === undefined) {\n            throw (\"[jsRocket] rocketXML is not set, try _syncDevice.setConfig({'rocketXML':'url/To/RocketXML.rocket'})\");\n        } else {\n            load(cfg.rocketXML);\n        }\n\n        return {\n            load: load,\n            getTrack: getTrack,\n            update: nop,\n            on: setEvent\n        };\n    };\n    JSRocket.SyncDeviceClient = function (cfg) {\n\n        \"use strict\";\n\n        var CMD_SET_KEY = 0,\n            CMD_DELETE_KEY = 1,\n            CMD_GET_TRACK = 2,\n            CMD_SET_ROW = 3,\n            CMD_PAUSE = 4,\n            CMD_SAVE_TRACKS = 5;\n\n        var _ws = new WebSocket(cfg.socketURL),\n            _syncData = new JSRocket.SyncData(),\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                },\n                'save': function () {\n                }\n            };\n\n        function onOpen() {\n\n            _ws.binaryType = \"arraybuffer\";\n            _ws.send('hello, synctracker!');\n        }\n\n        function onMessage(e) {\n\n            var queue = (new Uint8Array(e.data)),\n                cmd = queue[0],\n                track, row, value, interpolation;\n\n            //Handshake\n            if (cmd === 104) {\n\n                _eventHandler.ready();\n\n                //PAUSE\n            } else if (CMD_PAUSE === cmd) {\n\n                if (queue[1] === 1) {\n                    _eventHandler.pause();\n                } else {\n                    _eventHandler.play();\n                }\n\n                //SET_ROW\n            } else if (CMD_SET_ROW === cmd) {\n\n                row = toInt(queue.subarray(1, 5));\n\n                _eventHandler.update(row);\n\n                //SET_KEY\n            } else if (CMD_SET_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                //value = Math.round(toFloat(queue.subarray(9, 13)) * 100) / 100; //round to what's seen in Rocket tracks\n                value = toFloat(queue.subarray(9, 13)); //use the values you see in Rocket statusbar\n\n                interpolation = toInt(queue.subarray(13, 14));\n                _syncData.getTrack(track).add(row, value, interpolation);\n\n                //DELETE\n            } else if (CMD_DELETE_KEY === cmd) {\n\n                track = toInt(queue.subarray(1, 5));\n                row = toInt(queue.subarray(5, 9));\n\n                _syncData.getTrack(track).remove(row);\n\n                //SAVE\n            } else if (CMD_SAVE_TRACKS === cmd) {\n                _eventHandler.save();\n            }\n        }\n\n        function onClose(e) {\n            console.warn(\">> connection closed\", e);\n        }\n\n        function onError(e) {\n            console.error(\">> connection error'd\", e);\n        }\n\n        _ws.onopen = onOpen;\n        _ws.onmessage = onMessage;\n        _ws.onclose = onClose;\n        _ws.onerror = onError;\n\n        function getTrack(name) {\n\n            var index = _syncData.getIndexForName(name);\n\n            if (index > -1) {\n                return _syncData.getTrack(index);\n            }\n\n            var utf8Name = encodeURIComponent(name).replace(/%([\\dA-F]{2})/g, function (m, c) {\n                return String.fromCharCode('0x' + c);\n            });\n            var message = [CMD_GET_TRACK,\n                (utf8Name.length >> 24) & 0xFF, (utf8Name.length >> 16) & 0xFF,\n                (utf8Name.length >> 8) & 0xFF, (utf8Name.length) & 0xFF];\n\n            for (var i = 0; i < utf8Name.length; i++) {\n                message.push(utf8Name.charCodeAt(i));\n            }\n\n            _ws.send(new Uint8Array(message).buffer);\n\n            _syncData.createIndex(name);\n            return _syncData.getTrack(_syncData.getTrackLength() - 1);\n        }\n\n        function setRow(row) {\n\n            var streamInt = [(row >> 24) & 0xFF,\n            (row >> 16) & 0xFF,\n            (row >> 8) & 0xFF,\n            (row) & 0xFF];\n\n            _ws.send(new Uint8Array([CMD_SET_ROW, streamInt[0], streamInt[1], streamInt[2], streamInt[3]]).buffer);\n        }\n\n        function toInt(arr) {\n\n            var i = 0,\n                view = new DataView(new ArrayBuffer(arr.length));\n\n            for (; i < arr.length; i++) {\n                view.setUint8(i, arr[i]);\n            }\n\n            if (view.byteLength === 1) {\n                return view.getInt8(0);\n            } else {\n                return view.getInt32(0);\n            }\n        }\n\n        function toFloat(arr) {\n            var view = new DataView(new ArrayBuffer(4));\n            view.setUint8(0, arr[0]);\n            view.setUint8(1, arr[1]);\n            view.setUint8(2, arr[2]);\n            view.setUint8(3, arr[3]);\n\n            return view.getFloat32(0);\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            getTrack: getTrack,\n            update: setRow,\n            on: setEvent\n        };\n    };\n\n    JSRocket.SyncDevice = function () {\n\n        \"use strict\";\n\n        var _connected = false,\n            _device,\n            _previousIntRow,\n            _config = {\n                \"socketURL\": \"ws://localhost:1339\",\n                \"rocketXML\": \"\"\n            },\n            _eventHandler = {\n                'ready': function () {\n                },\n                'update': function () {\n                },\n                'play': function () {\n                },\n                'pause': function () {\n                }\n            };\n\n        function init(mode) {\n            if (mode === \"demo\") {\n                _device = new JSRocket.SyncDevicePlayer(_config);\n            } else {\n                _device = new JSRocket.SyncDeviceClient(_config);\n            }\n\n            _device.on('ready', deviceReady);\n            _device.on('update', deviceUpdate);\n            _device.on('play', devicePlay);\n            _device.on('pause', devicePause);\n        }\n\n        function getConfig() {\n            return _config;\n        }\n\n        function setConfig(cfg) {\n            for (var option in cfg) {\n                if (cfg.hasOwnProperty(option)) {\n                    _config[option] = cfg[option];\n                }\n            }\n\n            return _config;\n        }\n\n        function deviceReady() {\n            _connected = true;\n            _eventHandler.ready();\n        }\n\n        function deviceUpdate(row) {\n            _eventHandler.update(row);\n        }\n\n        function devicePlay() {\n            _eventHandler.play();\n        }\n\n        function devicePause() {\n            _eventHandler.pause();\n        }\n\n        function getTrack(name) {\n            if (_connected) {\n                return _device.getTrack(name);\n            } else {\n                return null;\n            }\n        }\n\n        function update(row) {\n            //no need to update rocket on float rows\n            if (Math.floor(row) !== _previousIntRow) {\n                _previousIntRow = Math.floor(row);\n                _device.update(_previousIntRow);\n            }\n        }\n\n        function setEvent(evt, handler) {\n            _eventHandler[evt] = handler;\n        }\n\n        return {\n            init: init,\n            setConfig: setConfig,\n            getConfig: getConfig,\n            getTrack: getTrack,\n            update: update,\n            on: setEvent\n        };\n    };\n\n})(window);\n\n","/* Trivial player for formats that the browser supports natively through the <audio> element,\nsuch as MP3 and OGG */\n\nCowbell.Player.Audio = function() {\n\tthis.Track = function(url) {\n\t\tthis.open = function() {\n\t\t\tvar audio = document.createElement('audio');\n\t\t\taudio.src = url;\n\t\t\tdocument.body.appendChild(audio);\n\n\t\t\treturn audio;\n\t\t};\n\t};\n};\n","window.Cowbell = {\n\t'UI': {},\n\t'Player': {},\n\t'Common': {}\n};\n\nwindow.Cowbell.createPlayer = function(containerElement, opts) {\n\tif (!opts) opts = {};\n\n\tif (typeof(containerElement) == 'string') {\n\t\tcontainerElement = document.getElementById(containerElement);\n\t}\n\n\tvar uiConstructor = opts.ui || Cowbell.UI.Basic;\n\tvar ui = new uiConstructor(containerElement);\n\n\tif (opts.player) {\n\t\tvar player = new opts.player(opts.playerOpts);\n\n\t\tif (opts.url) {\n\t\t\tvar track = new player.Track(opts.url, opts.trackOpts);\n\t\t\tui.open(track);\n\t\t}\n\t}\n\n\treturn ui;\n};\n\nif (window.jQuery) {\n\twindow.jQuery.fn.cowbell = function(opts) {\n\t\tthis.each(function() {\n\t\t\tCowbell.createPlayer(this, opts);\n\t\t});\n\t};\n}\n","/* Player for module formats supported by libopenmpt */\n\n(function() {\n\tfunction OpenMPTGenerator(url, audioCtx, playerOpts, trackOpts) {\n\t\tvar modulePtr, leftBufferPtr, rightBufferPtr;\n\t\tvar maxFramesPerChunk = 4096;\n\t\tvar self = this;\n\t\tif (!playerOpts) playerOpts = {};\n\t\tif (!trackOpts) trackOpts = {};\n\n\t\tfunction initModule(data) {\n\t\t\tvar byteArray = new Int8Array(data);\n\t\t\tvar ptrToFile = libopenmpt._malloc(byteArray.byteLength);\n\t\t\tlibopenmpt.HEAPU8.set(byteArray, ptrToFile);\n\n\t\t\tmodulePtr = libopenmpt._openmpt_module_create_from_memory(ptrToFile, byteArray.byteLength, 0, 0, 0);\n            global.window.modulePtr = modulePtr;\n\t\t\tleftBufferPtr  = libopenmpt._malloc(4 * maxFramesPerChunk);\n\t\t\trightBufferPtr = libopenmpt._malloc(4 * maxFramesPerChunk);\n\n\t\t\tfunction asciiToStack(str) {\n\t\t\t\tvar stackStr = stackAlloc(str.length + 1);\n\t\t\t\twriteAsciiToMemory(str, stackStr);\n\t\t\t\treturn stackStr;\n\t\t\t}\n\t\t\tvar stack = stackSave();\n\t\t\tlibopenmpt._openmpt_module_ctl_set(modulePtr, asciiToStack('render.resampler.emulate_amiga'), asciiToStack('1')); // enable Amiga resampler\n\t\t\tlibopenmpt._openmpt_module_ctl_set(modulePtr, asciiToStack('render.resampler.emulate_amiga_type'), asciiToStack('a1200')); // set emulated Amiga model to A1200\n\t\t\tstackRestore(stack);\n\n\t\t\tself.duration = libopenmpt._openmpt_module_get_duration_seconds(modulePtr);\n\t\t}\n\n\t\tfunction ensureLibOpenMPT(onReady) {\n\t\t\tif (!playerOpts.pathToLibOpenMPT) {\n\t\t\t\tthrow \"pathToLibOpenMPT not specified\";\n\t\t\t}\n\n\t\t\tif (window.libopenmpt && window.libopenmpt._openmpt_module_create_from_memory) {\n\t\t\t\t/* libopenmpt already loaded */\n\t\t\t\tonReady();\n\t\t\t} else {\n\t\t\t\t/* load libopenmpt via <script> tag injection */\n\t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n\t\t\t\tvar script = document.createElement(\"script\");\n\t\t\t\tscript.src = playerOpts.pathToLibOpenMPT;\n\n\t\t\t\twindow.libopenmpt = {\n\t\t\t\t\tonRuntimeInitialized: function() {\n\t\t\t\t\t\tonReady();\n\t\t\t\t\t\thead.removeChild(script);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\thead.appendChild(script);\n\t\t\t}\n\t\t}\n\n\t\tthis.cleanup = function() {\n\t\t\tif (modulePtr) {\n\t\t\t\tlibopenmpt._openmpt_module_destroy(modulePtr);\n\t\t\t}\n\t\t\tif (leftBufferPtr) {\n\t\t\t\tlibopenmpt._free(leftBufferPtr);\n\t\t\t}\n\t\t\tif (rightBufferPtr) {\n\t\t\t\tlibopenmpt._free(rightBufferPtr);\n\t\t\t}\n\t\t};\n\n\t\tthis.load = function(onReady) {\n\t\t\tvar self = this;\n\t\t\tensureLibOpenMPT(function() {\n\t\t\t\tself.channelCount = 2;\n\n\t\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\t\trequest.addEventListener('error', function(e) {\n\t\t\t\t\tconsole.log('XHR error', e);\n\t\t\t\t});\n\n\t\t\t\trequest.addEventListener('load', function(e) {\n\t\t\t\t\tdata = request.response;\n\t\t\t\t\tinitModule(data);\n\t\t\t\t\tonReady();\n\t\t\t\t});\n\n\t\t\t\t/* trigger XHR */\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.responseType = \"arraybuffer\";\n\t\t\t\trequest.send();\n\t\t\t});\n\t\t};\n\n\t\tthis.generateAudio = function(outputBuffer) {\n\t\t\tvar outputL = outputBuffer.getChannelData(0);\n\t\t\tvar outputR = outputBuffer.getChannelData(1);\n\t\t\tvar framesToRender = outputBuffer.length;\n\n\t\t\tvar framesRendered = 0;\n\t\t\tvar ended = false;\n\t\t\twhile (framesToRender > 0) {\n\t\t\t\tvar framesPerChunk = Math.min(framesToRender, maxFramesPerChunk);\n\t\t\t\tvar actualFramesPerChunk = libopenmpt._openmpt_module_read_float_stereo(modulePtr, audioCtx.sampleRate, framesPerChunk, leftBufferPtr, rightBufferPtr);\n\t\t\t\tvar rawAudioLeft = libopenmpt.HEAPF32.subarray(leftBufferPtr / 4, leftBufferPtr / 4 + actualFramesPerChunk);\n\t\t\t\tvar rawAudioRight = libopenmpt.HEAPF32.subarray(rightBufferPtr / 4, rightBufferPtr / 4 + actualFramesPerChunk);\n\t\t\t\tfor (var i = 0; i < actualFramesPerChunk; ++i) {\n\t\t\t\t\toutputL[framesRendered + i] = rawAudioLeft[i];\n\t\t\t\t\toutputR[framesRendered + i] = rawAudioRight[i];\n\t\t\t\t}\n\t\t\t\tframesToRender -= actualFramesPerChunk;\n\t\t\t\tframesRendered += actualFramesPerChunk;\n\t\t\t\tif (actualFramesPerChunk < framesPerChunk) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn framesRendered;\n\t\t};\n\n\t\tthis.seekable = true;\n\n\t\tthis.seek = function(position) {\n\t\t\tlibopenmpt._openmpt_module_set_position_seconds(modulePtr, position);\n\t\t};\n\n\t\tthis.reset = function() {\n\t\t\tthis.seek(0);\n\t\t}\n\t}\n\tCowbell.Player.OpenMPT = function(opts) {\n\t\treturn new Cowbell.Common.WebAudioPlayer(OpenMPTGenerator, opts);\n\t};\n})();\n","/*\nWrapper to allow Web Audio createScriptProcessor-based player routines to expose\na subset of the HTML5 Media Element API.\n\nThis wrapper handles the details of buffering, pausing, and keeping track of current play time.\nInner routines only need to implement a simple 'generator' API consisting of filling a buffer\nwith audio data, and seeking to a specified time.\n*/\n\n(function () {\n    var audioCtx;\n    Cowbell.Common.WebAudioPlayer = function (generatorConstructor, playerOpts) {\n        this.Track = function (url, trackOpts) {\n            var generator;\n\n            this.open = function () {\n                var self = {};\n\n                if (!audioCtx) {\n                    var AudioContext = window.AudioContext || window.webkitAudioContext;\n                    audioCtx = new AudioContext({\n                        latencyHint: \"playback\",\n                        sampleRate: 22050\n                      });\n                }\n\n                var BUFFER_SIZE = 4096;\n\n                self.HAVE_NOTHING = 0;\n                self.HAVE_METADATA = 1;\n                self.HAVE_CURRENT_DATA = 2;\n                self.HAVE_FUTURE_DATA = 3;\n                self.HAVE_ENOUGH_DATA = 4;\n                self.readyState = self.HAVE_NOTHING;\n\n                generator = new generatorConstructor(url, audioCtx, playerOpts, trackOpts);\n                var generatorIsReady = false;\n                var playWasRequestedBeforeReady = false;\n                var scriptNode;\n\n                var hasStartedProcessing = false;\n                var playFromTime = 0;\n                var playStartTimestamp;\n                self.paused = true;\n\n                generator.load(function () {\n                    generatorIsReady = true;\n                    self.readyState = self.HAVE_ENOUGH_DATA;\n                    self.duration = generator.duration;\n                    if (generator.seekable) {\n                        self.seekable = {\n                            'length': 1,\n                            'start': function (i) {\n                                if (i !== 0) throw \"Out of range\";\n                                return 0;\n                            },\n                            'end': function (i) {\n                                if (i !== 0) throw \"Out of range\";\n                                return generator.duration;\n                            }\n                        };\n                    } else {\n                        self.seekable = {\n                            'length': 0,\n                            'start': function (i) {\n                                throw \"Out of range\";\n                            },\n                            'end': function (i) {\n                                throw \"Out of range\";\n                            }\n                        };\n                    }\n                    seek(0);\n                    if (self.onloadedmetadata) self.onloadedmetadata();\n                    if (playWasRequestedBeforeReady) self.play();\n                });\n\n                function seek(newTime) {\n                    if (scriptNode) scriptNode.disconnect(0);\n                    if (newTime > 0) {\n                        generator.seek(newTime);\n                    } else {\n                        generator.reset();\n                    }\n                    playFromTime = newTime;\n                    hasStartedProcessing = false;\n                    scriptNode = audioCtx.createScriptProcessor(BUFFER_SIZE, 0, generator.channelCount);\n                    scriptNode.onaudioprocess = generateAudio;\n                    if (!self.paused) {\n                        self.paused = true;\n                        self.play();\n                    }\n                }\n\n                function generateAudio(event) {\n                    if (!hasStartedProcessing) {\n                        playStartTimestamp = event.playbackTime;\n                        hasStartedProcessing = true;\n                    }\n\n                    var generatedLength = generator.generateAudio(event.outputBuffer);\n\n                    if (generatedLength < event.outputBuffer.length) {\n                        /* generate silence for the remainder of the buffer */\n                        for (var chan = 0; chan < event.outputBuffer.numberOfChannels; chan++) {\n                            var channelData = event.outputBuffer.getChannelData(chan);\n                            for (var i = generatedLength; i < event.outputBuffer.length; i++) {\n                                channelData[i] = 0;\n                            }\n                        }\n\n                        if (self.currentTime > self.duration) {\n                            /* we've finished playing (not just generating) the audio */\n                            self.pause();\n                            if (self.onended) self.onended();\n                            seek(0);\n                        }\n                    }\n\n                    if (self.ontimeupdate) self.ontimeupdate();\n                }\n\n                self.play = function () {\n                    if (!generatorIsReady) {\n                        playWasRequestedBeforeReady = true;\n                        return;\n                    }\n                    if (self.paused) {\n                        scriptNode.connect(audioCtx.destination);\n                        self.paused = false;\n                        // If an AudioContext is created prior to the document receiving a user gesture, \n                        // it will be created in the \"suspended\" state, and you will need to call resume() \n                        // after a user gesture is received.\n                        if (audioCtx.state === 'suspended') { audioCtx.resume() };\n                        if (self.onplay) self.onplay();\n\n                        if (hasStartedProcessing) {\n                            playStartTimestamp = audioCtx.currentTime;\n                            playFromTime = pausedAtTrackTime;\n                        }\n                    }\n                };\n\n                self.pause = function () {\n                    if (!self.paused) {\n                        pausedAtTimestamp = audioCtx.currentTime;\n                        pausedAtTrackTime = self.currentTime;\n\n                        scriptNode.disconnect(0);\n                        self.paused = true;\n                        if (self.onpause) self.onpause();\n                    }\n                };\n\n\n                /*\n                hasStartedProcessing = false && self.paused = true  =>  initial state\n                hasStartedProcessing = false && self.paused = false  =>  the instant we just called play()\n                hasStartedProcessing = true && self.paused = false  =>\n                    ready to play if currentTime < playStartTimestamp; playing if currentTime >= playStartTimestamp\n                hasStartedProcessing = true && self.paused = true  => paused\n                */\n\n                self.__defineGetter__('currentTime', function () {\n                    if (!hasStartedProcessing) return playFromTime;\n                    if (self.paused) return pausedAtTrackTime;\n                    if (audioCtx.currentTime < playStartTimestamp) return playFromTime;\n                    return playFromTime + audioCtx.currentTime - playStartTimestamp;\n                });\n\n                self.__defineSetter__('currentTime', function (newTime) {\n                    if (generator.seekable || newTime === 0) {\n                        seek(newTime);\n                    }\n                });\n\n                return self;\n            };\n            this.close = function () {\n                if (generator && generator.cleanup) {\n                    generator.cleanup();\n                }\n            };\n        };\n    };\n})();\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.nc = undefined;","import { Canvas } from '../../Canvas';\nimport { DemoScene } from './DemoScene';\nimport './../../demo-style.css';\n\nclass Application {\n\n    // HD Resolution 1920 x 1080\n    public static readonly CANVAS_WIDTH = 1920 / 5;\n    public static readonly CANVAS_HEIGHT = 1080 / 5;\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(Application.CANVAS_WIDTH, Application.CANVAS_HEIGHT, new DemoScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","f","e","a","c","appendChild","dom","u","d","children","style","display","l","document","createElement","cssText","addEventListener","preventDefault","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","v","m","n","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","getTarget","Error","element","attributes","styleElement","nonce","setAttribute","apply","parentNode","removeChild","removeStyleElement","styleSheet","firstChild","createTextNode","scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","event","FullscreenUtils","toggleFullscreen","then","onInit","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","set","clear","color","Color","BLACK","toPackedFormat","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","inverseAlpha","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","floor","roundedY","percent","abs","drawPixelAliased","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","theta","phi","Vector4f","seed","back","down","front","left","right","up","Promise","all","TextureUtils","load","setClamp","draw","mv","setFramebuffer","drawSkyBox","getRotation","rotation","sclae","textures","skyBoxSideModel","skyPoints","uv","TextureCoordinate","faces","vertices","setModelViewMatrix","position","projection","keyFrames","setKeyFrames","getViewMatrix","first","zero","second","third","fraction","Utils","CubicInterpolate","look","EulerAngleCamera","blenderScene","invert","object","normals","normalize","n1","n2","n3","transformedNormals","transformedPoints","file","disp","coords","ComputationalGeometryUtils","computeBoundingSphere","normals2","boundingSphere","name","json","currentObject","normalCount","vertexCount","uvCount","normalOffset","vertexOffset","uvOffset","split","line","startsWith","Mesh","console","error","Vector","Number","parseFloat","TexCoord","Face","drawScaledTextureClip","frame","filename","fetch","response","parse","cameraPath","CameraPath","keys","myFrame","CameraFrame","location","frames","CameraKeyFrame","rx","ry","rz","constructZRotationMatrix","translation","getPosition","sub","num","_start","_end","_length","isEmpty","insertStart","node","next","previous","insertEnd","currentNode","deleteStart","deleteEnd","delete","getNode","toArray","array","_data","_next","_previous","input","value","istart","istop","ostart","ostop","random","srcPosition","dst","dstPosition","slice","prototype","fade","lerp","grad","hash","permutation","X","Y","Z","A","AA","AB","B","BA","BB","y0","y2","y3","mu","mu2","a0","AbstractCube","AbstractScene","blurred","accumulationBuffer","renderingPipeline","GouraudShadingRenderingPipeline","BlenderLoader","mesh","generateProceduralNoise","drawBlenderScene2","texture3","model","BakedLighting","skyBox","baked","blenderObj8","SkyBox","loadWithTexture","drawBlenderScene7","drawMeshArray","BlenderCameraScene","texture4","fpsStartTime","fpsCount","fps","meshes","path","light1","light2","cameraAnimator","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","setLights","WavefrontLoader","CameraLoader","BlenderCameraAnimator","computeFps","currentTime","timeInput","BlockFade","ledTexture","transitionFramebufferTo","transitionCircle","transitionWipe","croud","prevMask","curMask","diff","noiseMask","croudMask","particleArray","c3","drawCircle","initDissolve","textureBackground","createCroud","isBackground","bias","xbase","ybase","xnoise","ynoise","pn","PerlinNoise","curBias","_gray","dissolve","renderBuffer","renderBuffer2","particle","Particle","_color","it","addColor","putpixel","x0","radius","blockFade","transition","transitionSceneFrom","transitionSceneTo","transitionMethod","transitionValue","trunc","TransitionMethods","BLOCKFADE","CROSSFADE","crossFade","DISSOLVE","FADEIN","fadeIn","FADEOUT","fadeOut","WIPE_LEFT","crossFadeImage","CIRCLE","pixelArray","pixelArrayWidth","blockWidth","horizontalUnits","verticalUnits","fadeArray","blend","transitionImage","clamp","startColor","endColor","renderScanlines","shiftAmount","offRed","offGreen","offBlue","strips","verticalPosition","imagePixelR","imagePixelG","imagePixelB","_x","_y","dx","dy","TTL","isLiving","CubeScene","cubeMesh","Cube","fairlight","renderCube","getMesh","getModelViewMatrix","renderBackground","DemoScene","soundManager","canvasRecorder","sceneList","nodeInstance","stats","canvasRef","timelineRef","sceneRef","timeRef","SoundManager","DoublyLinkedList","initControls","allProgress","loadMusic","prepareSync","plug","initScene","outputX","args","constructorName","Object","newNode","DLNode","CanvasRecorder","initTimeline","initStats","tickerPlayRef","tickerStopRef","tickerNextRef","tickerBackRef","tickerRecordRef","tickerScreenshotRef","tickerVolumeRef","onPause","seek","classList","recording","saveVideo","onPlay","recordVideo","isPlaying","toggleSound","audioElement","muted","localStorage","setItem","String","date","fileName","toISOString","toTimeString","replace","image","toDataURL","anchor","click","jump","musicProperties","timeSeconds","directionToScroll","deltaY","stopPropagation","passive","key","promises","progressCallback","Stats","statsObj","body","updateMusic","sceneData","effect","transitionType","timeMilliseconds","drawStats","syncDevice","connected","demoMode","innerText","toFixed","canvasRecordingOptions","audioTrack","getType","ext","fileExtension","includes","pop","createCanvasRecorder","link","frameRate","download","recorderOptions","mimeType","audioBitsPerSecond","videoBitsPerSecond","chunks","stream","captureStream","recorder","MediaRecorder","ondataavailable","onstop","blob","Blob","type","url","URL","createObjectURL","href","MouseEvent","dispatchEvent","setTimeout","revokeObjectURL","timeslice","stop","dispose","info","canvasObj","PlaneDeformationFloorScene","PlaneDeformationScene","MetalHeadzScene","DofBallsScene","TorusKnotTunnelScene","GearsScene","ParticleStreamsScene","HoodlumScene","TwisterScene","RazorScene","logo","SineScrollerScene","background","pizza","PlasmaScene","TorusScene","DistortedSphereScene","renderTransparent","RotoZoomerScene","VoxelBallsScene","LedPlasmaScene","heightmapSphere","env","createSphereDistplaced","shadingSphereEnvDisp2","createSphere","pointsA","divideSphere","point","find","findPoint","idx","indexOf","steps","vn1","vn2","vn3","newPoints","rot","norm","norm2","cross","sub2","cross2","add2","normalize2","normalMatrix","computeNormalMatrix","multiplyHomArr","vertex1","Vertex","vertex2","vertex3","vertexArray","clipConvexPolygon","drawTriangleDDA","particleTexture2","drawParticleTorus","computeDepthBlur","nearPlane","focalPlane","farPlane","depth","noClear","spriteNum","gearsMesh","FRONT","drawBlenderScene4","factor","dampFactor","lab2","spaceLabMesh","hoodlumLogoMesh","createProceduralTexture3","drawBlenderScene9","scale2","resolve","led","lineDirection","radialWaveCenter","difference","directionalWave","intensity","metalheadz","texture11","texture13","dirt","blenderObjMetal","computeCameraMovement","lensflareScreenSpace","LensFlare","drawLensFlare","generateProceduralParticleTexture","radius2","effectStyle","texturePath","mLUT","createLUT","effectWidth","effectHeight","textureWidth","textureHeight","Int32Array","bright","pow","elapsedTimeY","elapsedTimeX","pixelCount","o","adjustBrightness","currentPixel","drawOldPlaneDeformationFloor","drawOldPlaneDeformationStar","GRADIENTLEN","SWINGLEN","SWINGMAX","colorGrad","swingCurve","makeGradient","makeSwingCurve","drawPlasma","arrlen","maxval","halfmax","ni","cos256","amplitude","swing","gradient","swingT","swingY","swingYT","texture10","cube","dodecahedron","pyramid","icosahedron","Dodecahedron","Pyramid","Sphere","reproduceRazorScene","distance","yDisplacement","enableLighting","setColor","DARK_GRAY","constructShadowMatrix","logoTexture","drawRotoZoomer","yStepX","yStepY","xStepX","xStepY","texYCoord","texXCoord","texYCoordInner","texXCoordInner","framebufferPos","fontTexture","charToIndex","fonts","Map","addCharInex","drawText2","xFonts","asciiCode","has","get","sine","textOff","drawText3","drawTextureRectFastAlpha3","startW","endW","yDisp","char","texture2","fontRenderer","fontRenderer2","FontRenderer","drawStarField","myTime","waveSum","red","green","frambuffer","stars","stars2","DARK_BLUE","particleTexture","cocoon","torusKnot","TorusKnot","fog","LinearFog","setFog","generateProceduralParticleTexture2","torusTunnel","glitchScreen","glitchFactor","rng2","off","glIndex","torusFunction3","frame2","tangent","constructIdentityMatrix","m14","m24","m34","m11","m21","m31","m12","m22","m32","m13","m23","m33","finalMatrix","transpose","razorLogo","drawTitanEffect","shadingTorus","horizontalNum","verticalNum","backgroundTexture","x2","x3","x4","xPos","drawSpan","ypos","textureForwardDifference","hightlight","YELLOW","mat","xSteps","xsteps","zsteps","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","AbstractGeometricObject","super","ySteps","STEPS","sphereFunction","center","current","xScale","yScale","zScale","vector","m41","m42","m43","m44","setIdentityMatrix","inverseTranslation","scale1","scale3","inverseRotation","getInverseRotation","planePoint","planeNormal","lightPosition","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","setRotationMatrix","s","multiply2","matrix2","multiplyHomArr2","multiplyArr","isInsidePositiveHalfSpace","getNormal","getDistance","getTran","perp","vec","scal","reci","mult","vec1","vec2","componentWiseMul","BlenderJsonParser","getBlenderScene","convertToMeshArray","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","colorSlope","setup","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","sign","wDelta","setAlpha","isInFrontOfNearPlane","DISABLED","isTriangleCCW2","v4","AbstractRenderingPipeline","lights","material","lighting","clipper","projectedVertices","SutherlandHodgman2DClipper","Material","ambientColor","diffuseColor","specularColor","shininess","enable","setMaterial","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","S","projected","late","clippedPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","Fog","zStart","zEnd","fogColor","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","Light","emissiveColor","BPM","ROWS_PER_BEAT","ROW_RATE","row","JSRocket","SyncDevice","audioPlayer","toLowerCase","Cowbell","Player","OpenMPT","Audio","track","Track","open","setConfig","on","onSyncReady","newRow","onSyncUpdate","getTrack","snare","bass","isNaN","getValue","paused","duration","play","log","pause","direction","sceneLength","effectJump","parseInt","ref","isMuted","newLocal","jumpTo","getItem","libopenmpt","poll","modulePtr","updateRange","onloadedmetadata","screenPos","dir","maxWidth","maxHeight","getPixel","getBilinearFilteredPixel","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","transparency","Image","onload","onerror","withAlpha","conv","SyncData","_track","getIndexForName","getTrackLength","createIndex","varName","lo","hi","mi","findKeyIndex","k0","k1","interpolation","SyncDevicePlayer","cfg","_urlRequest","_syncData","_eventHandler","XMLHttpRequest","onreadystatechange","urlRequestHandler","send","readyState","status","xmlString","tLen","kLen","trackList","DOMParser","parseFromString","getElementsByTagName","keyList","ready","readXML","responseText","rocketXML","evt","handler","SyncDeviceClient","_ws","WebSocket","socketURL","toInt","arr","view","DataView","setUint8","byteLength","getInt8","getInt32","onopen","binaryType","onmessage","queue","Uint8Array","cmd","subarray","getFloat32","save","onclose","warn","utf8Name","fromCharCode","message","buffer","streamInt","_device","_previousIntRow","_connected","_config","deviceReady","deviceUpdate","devicePlay","devicePause","mode","option","hasOwnProperty","getConfig","audio","createPlayer","containerElement","opts","ui","UI","Basic","player","playerOpts","trackOpts","jQuery","fn","cowbell","each","OpenMPTGenerator","audioCtx","leftBufferPtr","rightBufferPtr","initModule","byteArray","Int8Array","ptrToFile","_malloc","asciiToStack","str","stackStr","stackAlloc","writeAsciiToMemory","HEAPU8","_openmpt_module_create_from_memory","stack","stackSave","_openmpt_module_ctl_set","stackRestore","_openmpt_module_get_duration_seconds","cleanup","_openmpt_module_destroy","_free","onReady","pathToLibOpenMPT","script","onRuntimeInitialized","ensureLibOpenMPT","channelCount","request","responseType","generateAudio","outputBuffer","outputL","getChannelData","outputR","framesToRender","framesRendered","framesPerChunk","actualFramesPerChunk","_openmpt_module_read_float_stereo","sampleRate","rawAudioLeft","HEAPF32","rawAudioRight","seekable","_openmpt_module_set_position_seconds","reset","Common","WebAudioPlayer","generatorConstructor","generator","AudioContext","webkitAudioContext","latencyHint","BUFFER_SIZE","HAVE_NOTHING","HAVE_METADATA","HAVE_CURRENT_DATA","HAVE_FUTURE_DATA","HAVE_ENOUGH_DATA","scriptNode","playStartTimestamp","generatorIsReady","playWasRequestedBeforeReady","hasStartedProcessing","playFromTime","newTime","disconnect","createScriptProcessor","onaudioprocess","playbackTime","generatedLength","chan","numberOfChannels","channelData","onended","ontimeupdate","connect","destination","state","resume","onplay","pausedAtTrackTime","pausedAtTimestamp","onpause","__defineGetter__","__defineSetter__","close","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","getter","__esModule","definition","defineProperty","enumerable","globalThis","Function","prop","Symbol","toStringTag","scriptUrl","importScripts","currentScript","scripts","nc","Application","Canvas","CANVAS_WIDTH","CANVAS_HEIGHT","main"],"sourceRoot":""}