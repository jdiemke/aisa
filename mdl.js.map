{"version":3,"file":"mdl.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blender/BlenderJsonParser.ts","webpack://aisa/./src/blender/face.ts","webpack://aisa/./src/blender/mesh.ts","webpack://aisa/./src/blender/parseUtils.ts","webpack://aisa/./src/blender/tex-coord.ts","webpack://aisa/./src/blender/vector.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/mdl/Md2ModelScene.ts","webpack://aisa/./src/examples/mdl/ModelViewMatrix.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Geometry.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Sphere.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/model/md2/InvalidFileFormatException.ts","webpack://aisa/./src/model/md2/StreamReader.ts","webpack://aisa/./src/model/mdl/MDLHeader.ts","webpack://aisa/./src/model/mdl/MDLLoader.ts","webpack://aisa/./src/model/mdl/MDLModel.ts","webpack://aisa/./src/model/mdl/MDLSkin.ts","webpack://aisa/./src/model/mdl/MDLTexCoord.ts","webpack://aisa/./src/model/wavefront-obj/WavefrontLoader.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/./src/texture/TextureUtils.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/global","webpack://aisa/webpack/runtime/publicPath","webpack://aisa/./src/examples/mdl/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n        \n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n        \n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n        \n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { FlatShadedFace } from '../geometrical-objects/FlatShadedFace';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { BlenderScene } from './BlenderScene';\nimport { Face } from './face';\nimport { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexturedMesh } from '../rendering-pipelines/TexturedMesh';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { ComputationalGeometryUtils } from '../math/Geometry';\nimport { TexCoord } from './tex-coord';\n\nexport class BlenderJsonParser {\n\n    public static parse(blenderScene: BlenderScene, invert: boolean = false): Array<FlatshadedMesh> {\n        const scene: Array<FlatshadedMesh> = [];\n\n        blenderScene.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n\n            object.vertices.forEach((v: Vector) => {\n                points.push(new Vector4f(v.x, v.y, v.z).mul(1));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(\n                    invert ? new Vector4f(v.x, v.y, v.z).normalize().mul(-1) : new Vector4f(v.x, v.y, v.z).normalize()\n                );\n            });\n\n            const faces: Array<FlatShadedFace> = [];\n            object.faces.forEach((f: Face) => {\n                faces.push({\n                    n1: f.normals[0],\n                    n2: f.normals[1],\n                    n3: f.normals[2],\n                    v1: f.vertices[0],\n                    v2: f.vertices[1],\n                    v3: f.vertices[2],\n                });\n            });\n\n            const obj: FlatshadedMesh = {\n                faces,\n                normals,\n                points,\n                transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            };\n\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n    public static getBlenderScene(\n        file: BlenderScene, disp: boolean = true): Array<TexturedMesh> {\n        const scene: Array<TexturedMesh> = [];\n\n        file.forEach((object: Mesh) => {\n            const points: Array<Vector4f> = new Array<Vector4f>();\n            const normals: Array<Vector4f> = new Array<Vector4f>();\n            let coords: Array<TextureCoordinate>;\n\n            if (object.uv) {\n                coords = [];\n                object.uv.forEach((v: TexCoord) => {\n                    const uv: TextureCoordinate = new TextureCoordinate();\n                    uv.u = v.u;\n                    uv.v = 1.0 - v.v;\n                    coords.push(uv);\n                });\n            }\n\n            object.vertices.forEach((v: Vector) => {\n                // some transformation in order for the vertices to be in worldspace\n                if (disp)\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2).add(new Vector4f(0, -2.7, 0, 0)));\n                else\n                    points.push(new Vector4f(v.x, v.y, v.z).mul(2));\n            });\n\n            object.normals.forEach((v: Vector) => {\n                normals.push(new Vector4f(v.x, v.y, v.z));\n            });\n\n            const sphere = new ComputationalGeometryUtils().computeBoundingSphere(points);\n            sphere.getCenter().w = 1;\n\n            // Create class for objects\n            const obj = {\n                points,\n                normals,\n                uv: coords,           // NO!!!\n                faces: object.faces, // NOO!!!\n                points2: points.map(() => new Vector4f(0, 0, 0, 0)),\n                normals2: normals.map(() => new Vector4f(0, 0, 0, 0)),\n                boundingSphere: sphere, // NO!!!\n                name: object.name /// NO!\n            };\n            scene.push(obj);\n        });\n\n        return scene;\n    }\n\n}\n","export class Face {\n    public vertices: Array<number>;\n    public normals: Array<number>;\n    public uv: Array<number>;\n}\n","import { Face } from './face';\nimport { TexCoord } from './tex-coord';\nimport { Vector } from './vector';\n\nexport class Mesh {\n\n    public name: string;\n    public vertices: Array<Vector>;\n    public normals: Array<Vector>;\n    public uv: Array<TexCoord>;\n    public faces: Array<Face>;\n\n}\n","import { Mesh } from './mesh';\nimport { Vector } from './vector';\nimport { TexCoord } from './tex-coord';\nimport { Face } from './face';\n\nexport function convertToMeshArray(data: string): Array<Mesh> {\n    const json: Array<Mesh> = new Array<Mesh>();\n\n    let currentObject: Mesh = null;\n\n    let normalCount: number = 0;\n    let vertexCount: number = 0;\n    let uvCount: number = 0;\n    let normalOffset: number = 0;\n    let vertexOffset: number = 0;\n    let uvOffset: number = 0;\n\n    data.toString().split('\\n').forEach((line: string) => {\n\n        if (line.startsWith('o ')) {\n            const coords: Array<string> = line.split(' ');\n\n            currentObject = new Mesh();\n            currentObject.name = coords[1];\n            currentObject.normals = [];\n            currentObject.vertices = [];\n            currentObject.faces = [];\n            currentObject.uv = []; // OPTIONAL\n\n            json.push(currentObject);\n            normalOffset = normalCount;\n            vertexOffset = vertexCount;\n            uvOffset = uvCount;\n        }\n\n        if (currentObject === null &&\n            (line.startsWith('v ') ||\n                line.startsWith('vn ') ||\n                line.startsWith('vt '))) {\n            console.error('Error: OBJ file does not contain Objects.');\n            throw Error();\n        }\n\n        if (line.startsWith('v ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const vertex: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.vertices.push(vertex);\n            vertexCount++;\n        }\n\n        if (line.startsWith('vn ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const normal: Vector = new Vector(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2]),\n                Number.parseFloat(coords[3])\n            );\n\n            currentObject.normals.push(normal);\n            normalCount++;\n        }\n\n        if (line.startsWith('vt ')) { // OPTIONAL\n            const coords: Array<string> = line.split(' ');\n\n            const uv: TexCoord = new TexCoord(\n                Number.parseFloat(coords[1]),\n                Number.parseFloat(coords[2])\n            );\n\n            currentObject.uv.push(uv);\n            uvCount++;\n        }\n\n        if (line.startsWith('f ')) {\n            const coords: Array<string> = line.split(' ');\n\n            const face: Face = new Face();\n            face.vertices = [];\n            face.normals = [];\n            face.uv = [];\n\n            // vertex indices\n            face.vertices.push(Number(coords[1].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[2].split('/')[0]) - 1 - vertexOffset);\n            face.vertices.push(Number(coords[3].split('/')[0]) - 1 - vertexOffset);\n\n            // uv indices OPTIONAL!\n            face.uv.push(Number(coords[1].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[2].split('/')[1]) - 1 - uvOffset);\n            face.uv.push(Number(coords[3].split('/')[1]) - 1 - uvOffset);\n\n            // normal indices\n            face.normals.push(Number(coords[1].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[2].split('/')[2]) - 1 - normalOffset);\n            face.normals.push(Number(coords[3].split('/')[2]) - 1 - normalOffset);\n\n            currentObject.faces.push(face);\n        }\n    });\n\n    return json;\n}\n","\nexport class TexCoord {\n\n    public u: number;\n    public v: number;\n\n    public constructor(u: number, v: number) {\n        this.u = u;\n        this.v = v;\n    }\n\n}\n","export class Vector {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor(x: number, y: number, z: number) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { MDLLoader } from '../../model/mdl/MDLLoader';\nimport { MDLModel } from '../../model/mdl/MDLModel';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\nimport { ModelViewMatrix } from './ModelViewMatrix';\nimport { WavefrontLoader } from '../../model/wavefront-obj/WavefrontLoader';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\n\n/**\n * http://tfc.duke.free.fr/coding/mdl-specs-en.html\n * http://tfc.duke.free.fr/coding/md2-specs-en.html\n * https://github.com/mrdoob/three.js/tree/dev/examples/models/md2/ogro\n * http://tfc.duke.free.fr/old/models/md2.htm\n */\nexport class Md2ModelScene extends AbstractScene {\n\n    private static readonly CLEAR_COLOR: number = Color.SLATE_GRAY.toPackedFormat();\n\n    private ogroTexture: Texture;\n    private texture4: Texture;\n    private mdl: MDLModel;\n    private startTime: number;\n\n    private modelViewMatrix: ModelViewMatrix = new ModelViewMatrix();\n\n    private fpsStartTime: number = Date.now();\n    private fpsCount: number = 0;\n    private fps: number = 0;\n\n    private meshes: Array<FlatshadedMesh>;\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n        this.startTime = Date.now();\n        return Promise.all([\n            TextureUtils.load(require('../../assets/md2/texture2.jpg'), false).then(\n                (texture: Texture) => this.ogroTexture = texture\n            ),\n            MDLLoader.load(require('../../assets/mdl/gijoe.mdl')).then(\n                (mesh: MDLModel) => this.mdl = mesh\n            ),\n            WavefrontLoader.load(require('../../assets/dragon.obj')).then(\n                (value: Array<FlatshadedMesh>) => this.meshes = value\n            ),\n            TextureUtils.load(require('../../assets/font.png'), true).then(\n                (texture: Texture) => this.texture4 = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer): void {\n        const currentTime: number = Date.now();\n\n        if (currentTime > this.fpsStartTime + 1000) {\n            this.fpsStartTime = currentTime;\n            this.fps = this.fpsCount;\n            this.fpsCount = 0;\n        }\n        this.fpsCount++;\n\n        const time: number = Date.now() - this.startTime;\n\n        framebuffer.clearColorBuffer(Md2ModelScene.CLEAR_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        this.computeCameraMovement(time * 0.6);\n\n        framebuffer.setTexture(this.ogroTexture);\n        this.renderingPipeline.draw(framebuffer, this.meshes[0], this.modelViewMatrix.getMatrix());\n\n        framebuffer.drawText(8, 8, 'FPS: ' + this.fps.toString(), this.texture4);\n        framebuffer.drawText(8, 16, 'FACES: ' + this.meshes[0].faces.length, this.texture4);\n    }\n\n    private computeCameraMovement(elapsedTime: number): void {\n        this.modelViewMatrix.setIdentity();\n        this.modelViewMatrix.trans(0, 0, -2.7);\n        this.modelViewMatrix.yRotate(-elapsedTime * 0.002);\n        this.modelViewMatrix.xRotate(-elapsedTime * 0.001);\n    }\n\n}\n","import { Matrix4f } from '../../math/index';\n\n/**\n * The primary purpose of the model view matrix class is to reduce\n * the instanciation of temporary matrix classes by reusing existing instances.\n */\nexport class ModelViewMatrix {\n\n    private currtentMatrix: Matrix4f;\n    private tempMatrix: Matrix4f;\n    private temp: Matrix4f;\n    private transformation: Matrix4f;\n\n    public constructor() {\n        this.currtentMatrix = new Matrix4f();\n        this.tempMatrix = new Matrix4f();\n        this.temp = new Matrix4f();\n        this.transformation = new Matrix4f();\n    }\n\n    public getMatrix(): Matrix4f {\n        return this.currtentMatrix;\n    }\n\n    public setIdentity(): void {\n        this.currtentMatrix.setIdentityMatrix();\n    }\n\n    public trans(x: number, y: number, z: number): void {\n        this.transformation.setTranslationMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public xRotate(x: number): void {\n        this.transformation.setXRotationMatrix(x);\n        this.applyMat();\n    }\n    public yRotate(x: number): void {\n        this.transformation.setYRotationMatrix(x);\n        this.applyMat();\n    }\n\n    private applyMat(): void {\n\n        this.tempMatrix.multiply2(this.currtentMatrix, this.transformation);\n        // switch back and front\n        this.temp = this.currtentMatrix;\n        this.currtentMatrix = this.tempMatrix;\n        this.tempMatrix = this.temp;\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","import { Vector4f } from './index';\nimport { Sphere } from './Sphere';\n\nexport class ComputationalGeometryUtils {\n\n    public computeBoundingSphere(vertices: Array<Vector4f>): Sphere {\n\n        if (vertices.length === 0) {\n            throw new Error('More than one vertex required.');\n        }\n\n        if (vertices.length === 1) {\n            return new Sphere(vertices[0], 0);\n        }\n\n        let center = new Vector4f(0, 0, 0, 0);\n        let radius = 0;\n\n        vertices.forEach(point => {\n            center = center.add(new Vector4f(point.x, point.y, point.z, 0.0));\n        });\n\n        center = center.mul(1.0 / vertices.length);\n\n        vertices.forEach(point => {\n            radius = Math.max(radius, center.sub(point).length());\n        });\n\n        return new Sphere(center, radius);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","import { BoundingVolume } from './BoundingVolume';\nimport { Vector4f } from './index';\nimport { Matrix4f } from './Matrix4f';\nimport { Plane } from './Plane';\n\nexport class Sphere implements BoundingVolume {\n\n    private center: Vector4f;\n    private radius: number;\n\n    public constructor(position: Vector4f, radius: number) {\n        this.center = position;\n        this.radius = radius;\n    }\n\n    /**\n     *\n     * @param {Plane} plane\n     * @returns {boolean}\n     * @memberof Sphere\n     */\n    public isInsidePositiveHalfSpace(plane: Plane): boolean {\n        return plane.getNormal().dot(this.center) - plane.getDistance() > - this.radius;\n    }\n\n    public getTran(mat: Matrix4f): Vector4f {\n        return mat.multiplyHom(this.center);\n    }\n\n    public getRadius(): number {\n        return this.radius;\n    }\n\n    public getCenter(): Vector4f {\n        return this.center;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","export class InvalidFileFormatException {\n\n    constructor(private message: string) {\n\n    }\n\n}\n","export class StreamReader {\n\n    private position: number;\n    private dataView: DataView;\n\n    constructor(arrayBuffer: ArrayBuffer, offset: number = 0) {\n        this.dataView = new DataView(arrayBuffer, offset);\n        this.position = 0;\n    }\n\n    public readInt(): number {\n        const value: number = this.dataView.getInt32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readFloat(): number {\n        const value: number = this.dataView.getFloat32(this.position, true);\n        this.position += 4;\n        return value;\n    }\n\n    public readUnsignedInt8(): number {\n        const value: number = this.dataView.getUint8(this.position);\n        this.position += 1;\n        return value;\n    }\n\n    public readSignedShort(): number {\n        const value: number = this.dataView.getInt16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n    public readUnsigbnedShort(): number {\n        const value: number = this.dataView.getUint16(this.position, true);\n        this.position += 2;\n        return value;\n    }\n\n}\n","import { Vector3f } from '../../math/index';\nimport { InvalidFileFormatException } from './../md2/InvalidFileFormatException';\nimport { StreamReader } from './../md2/StreamReader';\n\nexport class MDLHeader {\n\n    private static readonly IDPO: number = 1330660425;\n    private static readonly VERSION: number = 6;\n\n    public ident: number;\n    public version: number;\n\n    public scale: Vector3f;\n    public translate: Vector3f;\n\n    public boundingRadius: number;\n\n    public eyePosition: Vector3f;\n    public numberOfSkins: number;\n    public skinWidth: number;\n    public skinHeight: number;\n    public numberOfVertices: number;\n    public numberOfTriangles: number;\n    public numberOfFrames: number;\n\n    public syncType: number;\n    public flags: number;\n    public size: number;\n\n    public constructor(arrayBuffer: ArrayBuffer, stream: StreamReader) {\n\n        if (!this.isValidMD2File(arrayBuffer)) {\n            throw new InvalidFileFormatException('Not a valid MD2 file.');\n        }\n\n        this.ident = stream.readInt();\n        this.version = stream.readInt();\n\n        this.scale = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n\n        this.translate = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n\n        this.boundingRadius = stream.readFloat();\n\n        this.eyePosition = new Vector3f(\n            stream.readFloat(),\n            stream.readFloat(),\n            stream.readFloat()\n        );\n\n        this.numberOfSkins = stream.readInt();\n        this.skinWidth = stream.readInt();\n        this.skinHeight = stream.readInt();\n        this.numberOfVertices = stream.readInt();\n        this.numberOfTriangles = stream.readInt();\n        this.numberOfFrames = stream.readInt();\n        this.syncType = stream.readInt();\n        this.flags = stream.readInt();\n        this.size = stream.readFloat();\n\n        console.log(this.toString());\n    }\n\n    public toString(): string {\n        return JSON.stringify(this, null, 2);\n    }\n\n    private isValidMD2File(arrayBuffer: ArrayBuffer): boolean {\n        const dataView: DataView = new DataView(arrayBuffer, 0);\n\n        const magicNumber: number = dataView.getInt32(0, true);\n        const version: number = dataView.getInt32(4, true);\n\n        return magicNumber === MDLHeader.IDPO && version === MDLHeader.VERSION;\n    }\n\n}\n","import { StreamReader } from '../md2/StreamReader';\nimport { MDLHeader } from './MDLHeader';\nimport { MDLModel } from './MDLModel';\nimport { MDLSkin } from './MDLSkin';\nimport { MDLTexCoord } from './MDLTexCoord';\n\n/**\n * http://tfc.duke.free.fr/coding/mdl-specs-en.html\n * http://www.gamers.org/dEngine/quake/spec/quake-spec34/qkspec_5.htm\n * http://www.gamers.org/dEngine/quake/spec/quake-spec32.html#CMDLF\n */\nexport class MDLLoader {\n\n    public static load(filename: string): Promise<MDLModel> {\n        return fetch(filename).then((response: Response) => {\n            return response.arrayBuffer();\n        }).then((arrayBuffer: ArrayBuffer) => {\n            try {\n                return MDLLoader.parse(arrayBuffer);\n            } catch (ex) {\n                console.error(ex.message);\n            }\n        });\n    }\n\n    private static parse(arrayBuffer: ArrayBuffer): MDLModel {\n        const stream: StreamReader = new StreamReader(arrayBuffer);\n        const header: MDLHeader = MDLLoader.getHeader(arrayBuffer, stream);\n\n        console.log('num skins: ' + header.numberOfSkins);\n\n        const skins: Array<MDLSkin> = new Array<MDLSkin>();\n        for (let i: number = 0; i < header.numberOfSkins; i++) {\n            skins.push(new MDLSkin(stream, header));\n        }\n        console.log(skins);\n        const coords: Array<MDLTexCoord> = new Array<MDLTexCoord>();\n        for (let i: number = 0; i < header.numberOfVertices; i++) {\n            coords.push(new MDLTexCoord(stream));\n        }\n\n        console.log(coords);\n        /*\n      fread (mdl->texcoords, sizeof (struct mdl_texcoord_t),\n      mdl->header.num_verts, fp);\n    fread (mdl->triangles, sizeof (struct mdl_triangle_t),\n      mdl->header.num_tris, fp);\n      */\n\n        return new MDLModel();\n    }\n\n    private static getHeader(arrayBuffer: ArrayBuffer, stream: StreamReader): MDLHeader {\n        return new MDLHeader(arrayBuffer, stream);\n    }\n\n    private constructor() {\n\n    }\n\n}\n","export class MDLModel {\n\n}\n","import { Texture } from '../../texture/index';\nimport { StreamReader } from '../md2/StreamReader';\nimport { MDLHeader } from './MDLHeader';\n\nexport class MDLSkin {\n\n    public group: number;\n    public texture: Texture;\n\n    constructor(stream: StreamReader, header: MDLHeader) {\n        this.group = stream.readInt();\n\n        for (let i: number = 0; i < header.skinWidth * header.skinHeight; i++) {\n            stream.readUnsignedInt8();\n        }\n    }\n\n}\n","import { StreamReader } from '../md2/StreamReader';\n\nexport class MDLTexCoord {\n\n    public onseam: number;\n    public s: number;\n    public t: number;\n\n    constructor(stream: StreamReader) {\n        this.onseam = stream.readInt();\n        this.s = stream.readInt();\n        this.t = stream.readInt();\n    }\n}\n","import { BlenderJsonParser } from '../../blender/BlenderJsonParser';\nimport { Mesh } from '../../blender/mesh';\nimport { convertToMeshArray } from '../../blender/parseUtils';\nimport { FlatshadedMesh } from '../../geometrical-objects/FlatshadedMesh';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\n\nexport class WavefrontLoader {\n\n    public static load(filename: any): Promise<Array<FlatshadedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.parse(meshes);\n        });\n    }\n\n    public static loadWithTexture(filename: any): Promise<Array<TexturedMesh>> {\n        return fetch(filename).then((response: Response) => {\n            return response.text();\n        }).then((text: string): Array<Mesh> => {\n            return convertToMeshArray(text);\n        }).then((meshes: Array<Mesh>) => {\n            return BlenderJsonParser.getBlenderScene(meshes);\n        });\n    }\n\n    private constructor() {\n\n    }\n\n}\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","import RandomNumberGenerator from '../RandomNumberGenerator';\nimport { Texture } from './Texture';\n\nexport class TextureUtils {\n\n    public static generateProceduralNoise(): Promise<Texture> {\n        return new Promise<Texture>((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let i: number = 0; i < 256 * 256; i++) {\n                const scale: number = rng.getFloat();\n                texture.texture[i] = 200 * scale | 255 * scale << 8 | 205 * scale << 16 | 255 << 24;\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture(): Promise<Texture> {\n        return new Promise((resolve: (value?: Texture) => void): void => {\n            const texture: Texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng: RandomNumberGenerator = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y: number = 0; y < 256; y++) {\n                for (let x: number = 0; x < 256; x++) {\n                    const dx: number = 127 - x;\n                    const dy: number = 127 - y;\n                    const r: number = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c: number = 1 - r;\n                    c = c * c * c;\n                    if (r > 1) {\n                        c = 0;\n                    }\n                    c = Math.min(1, c * 2.9);\n\n                    texture.texture[x + y * 256] = 235 | 255 << 8 | 235 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static generateProceduralParticleTexture2(): Promise<Texture> {\n        return new Promise((resolve) => {\n            const texture = new Texture();\n            texture.texture = new Uint32Array(256 * 256);\n\n            const rng = new RandomNumberGenerator();\n            rng.setSeed(100);\n\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    const dx = 127 - x;\n                    const dy = 127 - y;\n                    const r = Math.sqrt(dx * dx + dy * dy) / 127;\n                    let c = 1 - r;\n                    c = c * c;\n                    if (r > 1) { c = 0; }\n                    c = Math.min(1, c * 40);\n                    texture.texture[x + y * 256] = 255 | 205 << 8 | 255 << 16 | (c * 255) << 24;\n                }\n            }\n\n            texture.width = 256;\n            texture.height = 256;\n            resolve(texture);\n        });\n    }\n\n    public static load(filename: any, transparency: boolean): Promise<Texture> {\n        return new Promise<Texture>((resolve: (texture?: Texture) => void): void => {\n            const image: HTMLImageElement = new Image();\n            image.onload = (): void => {\n                const texture: Texture = new Texture();\n                texture.texture = this.getImageData(image, transparency);\n                texture.width = image.width;\n                texture.height = image.height;\n                resolve(texture);\n            };\n            image.onerror = (): void => resolve();\n            image.src = filename;\n        });\n    }\n\n    private static getImageData(image: HTMLImageElement, withAlpha: boolean = false): Uint32Array {\n        const canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context: CanvasRenderingContext2D = canvas.getContext('2d');\n        context.drawImage(image, 0, 0);\n        const data: Uint8ClampedArray = context.getImageData(0, 0, image.width, image.height).data;\n        const conv: Uint32Array = new Uint32Array(data.length / 4);\n        let c: number = 0;\n        for (let i: number = 0; i < data.length; i += 4) {\n            if (withAlpha) {\n                conv[c] = (data[i + 3] << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            } else {\n                conv[c] = (255 << 24) | (data[i + 2] << 16) | (data[i + 1] << 8) | data[i + 0];\n            }\n\n            c++;\n        }\n        return conv;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import { Canvas } from '../../Canvas';\nimport { Md2ModelScene } from './Md2ModelScene';\n\nclass Application {\n\n    public main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new Md2ModelScene());\n        canvas.init();\n    }\n\n}\n\nnew Application().main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","blenderScene","invert","object","normals","vertices","normalize","faces","f","n1","n2","n3","obj","transformedNormals","map","transformedPoints","file","disp","coords","uv","ComputationalGeometryUtils","computeBoundingSphere","normals2","boundingSphere","name","json","currentObject","normalCount","vertexCount","uvCount","normalOffset","vertexOffset","uvOffset","toString","split","line","startsWith","Mesh","console","error","Error","Vector","Number","parseFloat","TexCoord","Face","drawScaledTextureClip","sub","num","Md2ModelScene","AbstractScene","SLATE_GRAY","ogroTexture","texture4","mdl","modelViewMatrix","ModelViewMatrix","fpsStartTime","fpsCount","fps","meshes","renderingPipeline","GouraudShadingRenderingPipeline","Promise","all","TextureUtils","load","MDLLoader","mesh","WavefrontLoader","value","currentTime","CLEAR_COLOR","computeCameraMovement","draw","getMatrix","setIdentity","trans","yRotate","xRotate","currtentMatrix","tempMatrix","temp","transformation","setIdentityMatrix","setTranslationMatrix","applyMat","setXRotationMatrix","setYRotationMatrix","multiply2","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","inverse","buildMesh","cross","getMesh","AbstractGeometricObject","super","frame","frame2","up","right","Sphere","center","radius","point","current","y2","mu","mu2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","vector","m14","m24","m34","m41","m42","m43","m44","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setScaleMatrix","sx","sy","sz","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","isInsidePositiveHalfSpace","getNormal","getDistance","getTran","mat","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","message","dataView","DataView","readInt","getInt32","readFloat","getFloat32","readUnsignedInt8","getUint8","readSignedShort","getInt16","readUnsigbnedShort","getUint16","MDLHeader","ident","version","translate","boundingRadius","eyePosition","numberOfSkins","skinWidth","skinHeight","numberOfVertices","numberOfTriangles","numberOfFrames","syncType","flags","stream","isValidMD2File","InvalidFileFormatException","log","JSON","stringify","magicNumber","IDPO","VERSION","filename","fetch","response","parse","ex","StreamReader","header","getHeader","skins","MDLSkin","MDLTexCoord","MDLModel","group","onseam","s","t","convertToMeshArray","BlenderJsonParser","getBlenderScene","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","distance","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setFog","setLights","enableLighting","enable","setMaterial","setColor","drawMeshArray","model","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","resolve","c","transparency","image","Image","onload","onerror","withAlpha","drawImage","conv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","globalThis","Function","e","window","scriptUrl","importScripts","location","currentScript","scripts","getElementsByTagName","replace","main","Canvas"],"sourceRoot":""}