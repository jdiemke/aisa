{"version":3,"file":"6435.js","mappings":"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","sources":["webpack://aisa/./src/examples/twister/TwisterScene.ts","webpack://aisa/./src/examples/demo/parts/Scene18.ts"],"sourcesContent":["import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\n/**\n * TODO: extract twister into effect class\n */\nexport class TwisterScene extends AbstractScene {\n\n    private backgroundTexture: Texture;\n    private logoTexture: Texture;\n\n    public init(): Promise<any> {\n        return Promise.all([\n            TextureUtils.load(require('../../assets/atlantis.png'), false).then(\n                (texture: Texture) => this.backgroundTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/logo.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.drawScaledTextureClipBi(\n            0,\n            0,\n            framebuffer.width, framebuffer.height, this.backgroundTexture, 1.0);\n\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.backgroundTexture.texture);\n        this.draw(framebuffer, this.logoTexture, time);\n    }\n\n    private draw(framebuffer: Framebuffer, texture: Texture, time: number): void {\n        const a: number = time * 0.001;\n        for (let i: number = 10; i < framebuffer.height - 10; i++) {\n            const xoff = (Math.sin(a + i * 0.01) * 50) | 0;\n            const rot = Math.sin(a * 0.4 + i * 0.0021) * Math.PI * 2;\n            let scale = 42;\n            const x1 = (Math.sin(rot) * scale) | 0;\n            const x2 = (Math.sin(Math.PI * 2 / 4 + rot) * scale) | 0;\n            const x3 = (Math.sin(Math.PI * 2 / 4 * 2 + rot) * scale) | 0;\n            const x4 = (Math.sin(Math.PI * 2 / 4 * 3 + rot) * scale) | 0;\n\n            if (x2 > x1) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 1.5 + rot));\n                const dist = x2 - x1;\n                const xPos = x1 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x3 > x2) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 2.5 + rot));\n                const dist = x3 - x2;\n                const xPos = x2 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x4 > x3) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 3.5 + rot));\n                const dist = x4 - x3;\n                const xPos = x3 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n\n            if (x1 > x4) {\n                scale = Math.max(0, Math.sin(Math.PI * 2 / 4 * 4.5 + rot));\n                const dist = x1 - x4;\n                const xPos = x4 + 120 + xoff;\n                this.drawSpan(framebuffer, dist, xPos, i, scale, texture, time);\n            }\n        }\n    }\n\n    private drawSpan(\n        framebuffer: Framebuffer,\n        dist: number,\n        xpos: number,\n        ypos: number,\n        scale: number,\n        texture: Texture,\n        time: number): void {\n        let framebufferIndex = xpos + ypos * framebuffer.width;\n        let textureIndex = (((ypos - time * 0.029) | 0) & 0xff) * texture.width;\n        const textureForwardDifference = texture.width / dist;\n        const hightlight = Math.pow(scale, 11) * 115;\n\n        for (let j = 0; j < dist; j++) {\n            const color = texture.texture[textureIndex | 0];\n\n            const r = Math.min(((color >> 0 & 0xff) * scale) + hightlight, 255);\n            const g = Math.min(((color >> 8 & 0xff) * scale) + hightlight, 255);\n            const b = Math.min(((color >> 16 & 0xff) * scale) + hightlight, 255);\n\n            framebuffer.framebuffer[framebufferIndex] = r | g << 8 | b << 16 | 255 << 24;\n\n            framebufferIndex++;\n            textureIndex += textureForwardDifference;\n        }\n    }\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { TwisterScene } from '../../twister/TwisterScene';\n\nexport class Scene18 {\n    private TwisterScene: TwisterScene;\n    public init(): Promise<any> {\n\n        this.TwisterScene = new TwisterScene();\n\n        return Promise.all([\n            this.TwisterScene.init(),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.TwisterScene.render(framebuffer, time);\n    }\n\n}"],"names":["TwisterScene","AbstractScene","backgroundTexture","logoTexture","init","Promise","all","TextureUtils","load","then","texture","this","render","framebuffer","time","drawScaledTextureClipBi","width","height","draw","a","i","xoff","Math","sin","rot","PI","scale","x1","x2","x3","x4","max","dist","xPos","drawSpan","xpos","ypos","framebufferIndex","textureIndex","textureForwardDifference","hightlight","pow","j","color","r","min","g","b","Scene18"],"sourceRoot":""}