{"version":3,"file":"2178.js","mappings":"8KAOO,MAAMA,UAAsBC,EAAA,EAEvBC,QACAC,iBACAC,MAEAC,mBAED,IAAAC,CAAKC,GAER,OADAC,KAAKH,mBAAqB,IAAII,YAAYF,EAAYG,MAAQH,EAAYI,QACnEC,QAAQC,IAAI,CACfC,EAAA,EAAaC,KAAK,EAAQ,OAAuC,GAAOC,MACnEC,GAAqBT,KAAKN,QAAUe,IAEzCH,EAAA,EAAaC,KAAK,EAAQ,OAAgC,GAAMC,MAC3DC,GAAqBT,KAAKL,iBAAmBc,IAElDH,EAAA,EAAaI,0BAA0BF,MAClCC,GAAqBT,KAAKJ,MAAQa,KAG/C,CAEO,MAAAE,CAAOZ,EAA0Ba,GAEpCb,EAAYc,wBAAwB,EAAE,EAAEd,EAAYG,MAAOH,EAAYI,OAAQH,KAAKN,QAAS,GAC7FM,KAAKc,kBAAkBf,EAAaa,EAAMZ,KAAKL,kBAAkB,GAEjE,MAAMoB,EAAoB,IAAIC,EAAA,EAAQhB,KAAKH,mBAAoBE,EAAYG,MAAOH,EAAYI,QAC9FJ,EAAYkB,YAAY,EAAG,EAAGF,EAAU,IACxChB,EAAYmB,oBAAoBlB,KAAKH,mBAAoBE,EAAYA,aAErEA,EAAYH,MAAMgB,EAAMZ,KAAKJ,MACjC,CAEO,gBAAAuB,CACHC,EACAC,EACAC,EAAkBC,GAElB,IAAIC,EAOJ,OAJIA,EADAD,EAAQF,GACHE,EAAQF,IAAeD,EAAYC,IAEnCE,EAAQF,IAAeC,EAAWD,GAEpCI,KAAKC,IAAIF,EAAG,EACvB,CAEO,iBAAAV,CAAkBf,EAA0B4B,EAAqBlB,EAAkBmB,GAAmB,GACpGA,GAAW7B,EAAY8B,kBAAiB,UAC7C9B,EAAY+B,mBAEZ,MAAMC,EAA0B,IAAIC,MAIpC,IAAK,IAAIC,EAAI,EAAGA,EAHJ,GAGaA,IAAK,CAC1B,MAAMC,EAHG,IAGQT,KAAKU,IAAK,EAAMV,KAAKW,GAAK,EAJnC,GAIgD,IAAoB,MAAdT,GACxDU,EAAsB,IAAjBJ,EAAIK,IACTC,EALG,IAKQd,KAAKe,IAAK,EAAMf,KAAKW,GAAK,EANnC,GAMgD,IAAoB,MAAdT,GAE9DI,EAAOU,KAAK,IAAIC,EAAA,EAASR,EAAGG,EAAGE,G,CAGnC,MAAMI,EAA6BC,EAAA,EAASC,2BAA2B,EAAG,GAAI,IACzEC,eAAeF,EAAA,EAASG,yBAAuC,KAAdpB,GAC7CmB,eAAeF,EAAA,EAASI,yBAAuC,KAAdrB,KAEpDsB,EAA2B,IAAIjB,MAAgBD,EAAOmB,QAE5DnB,EAAOoB,SAASC,IACZH,EAAQR,KAAK1C,EAAYsD,QAAQV,EAAiBW,SAASF,IAAU,IAGzEH,EAAQM,MAAK,CAACC,EAAaC,IAAgBD,EAAEjB,EAAIkB,EAAElB,IAEnDU,EAAQE,SAASC,IACb,MAAMM,GAAiB,MAAaN,EAAS,EACvCO,EAAoBlC,KAAKmC,MAAsD,GAAhD5D,KAAKmB,iBAAiB,GAAI,IAAK,GAAIiC,EAAQb,IAEhFxC,EAAY8D,iBACRT,EAAQlB,EAAIwB,EAAO,EACnBN,EAAQf,EAAIqB,EAAO,EACnBA,EAAMA,EAAMjD,EAAS,EAAI2C,EAAQb,EAAG,EAAKoB,EAAW,IACvD,GAET,EC5FG,MAAMG,EACDtE,cACD,IAAAM,CAAKC,GAIR,OAFAC,KAAKR,cAAgB,IAAIA,EAElBY,QAAQC,IAAI,CACfL,KAAKR,cAAcM,KAAKC,IAEhC,CAEO,MAAAY,CAAOZ,EAA0Ba,GACpCZ,KAAKR,cAAcmB,OAAOZ,EAAaa,EAC3C,E","sources":["webpack://aisa/./src/examples/dof-balls/DofBallsScene.ts","webpack://aisa/./src/examples/demo/parts/Scene12.ts"],"sourcesContent":["import { Framebuffer } from '../../Framebuffer';\nimport { Matrix4f } from '../../math/Matrix4f';\nimport { Vector3f } from '../../math/Vector3f';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture/Texture';\nimport { TextureUtils } from '../../texture/TextureUtils';\n\nexport class DofBallsScene extends AbstractScene {\n\n    private blurred: Texture;\n    private particleTexture2: Texture;\n    private noise: Texture;\n\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n        return Promise.all([\n            TextureUtils.load(require('../../assets/blurredBackground.png'), false).then(\n                (texture: Texture) => this.blurred = texture\n            ),\n            TextureUtils.load(require('../../assets/spriteBlur.png'), true).then(\n                (texture: Texture) => this.particleTexture2 = texture\n            ),\n            TextureUtils.generateProceduralNoise().then(\n                (texture: Texture) => this.noise = texture\n            )\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.blurred.texture);\n        framebuffer.drawScaledTextureClipBi(0,0,framebuffer.width, framebuffer.height, this.blurred, 1.0);\n        this.drawParticleTorus(framebuffer, time, this.particleTexture2, true);\n\n        const texture3: Texture = new Texture(this.accumulationBuffer, framebuffer.width, framebuffer.height);\n        framebuffer.drawTexture(0, 0, texture3, 0.60);\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n\n        framebuffer.noise(time, this.noise);\n    }\n\n    public computeDepthBlur(\n        nearPlane: number,\n        focalPlane: number,\n        farPlane: number, depth: number): number {\n\n        let f: number;\n\n        if (depth > focalPlane) {\n            f = (depth - focalPlane) / (nearPlane - focalPlane);\n        } else {\n            f = (depth - focalPlane) / (farPlane - focalPlane);\n        }\n        return Math.min(f, 1.0);\n    }\n\n    public drawParticleTorus(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, noClear: boolean = false) {\n        if (!noClear) { framebuffer.clearColorBuffer(72 | 56 << 8 | 48 << 16 | 255 << 24); }\n        framebuffer.clearDepthBuffer();\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const num = 50;\n        const radi = 5.2;\n\n        for (let i = 0; i < num; i++) {\n            const x = radi * Math.cos(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n            const y = (i - num * 0.5) * 0.4;\n            const z = radi * Math.sin(((i) * Math.PI * 2 / (num)) * 3.7 + elapsedTime * 0.0016);\n\n            points.push(new Vector3f(x, y, z));\n        }\n\n        const modelViewMartrix: Matrix4f = Matrix4f.constructTranslationMatrix(0, 0, -12)\n            .multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.0004)\n                .multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.0004)));\n\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n\n        points.forEach((element: Vector3f) => {\n            points2.push(framebuffer.project(modelViewMartrix.multiply(element)));\n        });\n\n        points2.sort((a: Vector3f, b: Vector3f) => a.z - b.z);\n\n        points2.forEach((element: Vector3f) => {\n            const size: number = -(2.9 * 292 / (element.z));\n            const spriteNum: number = Math.round(this.computeDepthBlur(0, -15, -70, element.z) * 13);\n\n            framebuffer.drawParticle2Sub(\n                element.x - size / 2,\n                element.y - size / 2,\n                size, size, texture, 1 / element.z, 1.0, spriteNum, 128\n            );\n        });\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { DofBallsScene } from '../../dof-balls/DofBallsScene';\n\nexport class Scene12 {\n    private DofBallsScene: DofBallsScene;\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.DofBallsScene = new DofBallsScene();\n\n        return Promise.all([\n            this.DofBallsScene.init(framebuffer),\n        ])\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.DofBallsScene.render(framebuffer, time);\n    }\n\n}"],"names":["DofBallsScene","AbstractScene","blurred","particleTexture2","noise","accumulationBuffer","init","framebuffer","this","Uint32Array","width","height","Promise","all","TextureUtils","load","then","texture","generateProceduralNoise","render","time","drawScaledTextureClipBi","drawParticleTorus","texture3","Texture","drawTexture","fastFramebufferCopy","computeDepthBlur","nearPlane","focalPlane","farPlane","depth","f","Math","min","elapsedTime","noClear","clearColorBuffer","clearDepthBuffer","points","Array","i","x","cos","PI","y","num","z","sin","push","Vector3f","modelViewMartrix","Matrix4f","constructTranslationMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","points2","length","forEach","element","project","multiply","sort","a","b","size","spriteNum","round","drawParticle2Sub","Scene12"],"sourceRoot":""}