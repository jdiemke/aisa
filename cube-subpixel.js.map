{"version":3,"file":"cube-subpixel.js","mappings":"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","sources":["webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/cube-subpixel/SubPixelCubeScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/SubPixelTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/SubPixelRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/./src/examples/cube-subpixel/Application.ts"],"sourcesContent":["import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height - 1), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width - 1), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n    /*\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            let index: Array<number> = [\n            ];\n\n            let points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            let scale = 0.8;\n\n            let modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            let points2: Array<Vector3f> = new Array<Vector3f>();\n\n            let xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            let zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                let transformed = modelViewMartrix.multiply(element);\n\n                let x = transformed.x + xOff;\n                let y = transformed.y;\n                let z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                let scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                let color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n    */\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f;\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { SubPixelRenderingPipeline } from '../../rendering-pipelines/SubPixelRenderingPipeline';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\nexport class SubPixelCubeScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.BLACK.toPackedFormat();\n    private subPixelRenderingPipeline: SubPixelRenderingPipeline;\n    private gouraudRenderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        return Promise.all([\n            this.subPixelRenderingPipeline = new SubPixelRenderingPipeline(framebuffer),\n            this.subPixelRenderingPipeline.setCullFace(CullFace.BACK),\n\n            this.gouraudRenderingPipeline = new GouraudShadingRenderingPipeline(framebuffer),\n            this.gouraudRenderingPipeline.setCullFace(CullFace.BACK),\n        ]);\n\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // rotate slowly to showcase\n        const elapsedTime: number = time * 0.001;\n        framebuffer.clearColorBuffer(SubPixelCubeScene.BACKGROUND_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        // compare subpixel to gourad\n        this.subPixelRenderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime,-3));\n        this.gouraudRenderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime,3));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.subPixelRenderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime,5));\n    }\n\n    private getModelViewMatrix(elapsedTime: number, xShift: number): Matrix4f {\n        const scale: number = 3.2;\n\n        return Matrix4f.constructTranslationMatrix(xShift, 0, -12).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class SubPixelTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    // create depth buffer\n    // use Uint16 because we only need a little precision and we save 2 bytes per pixel this way\n    private depthBuffer;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n        this.depthBuffer = new Uint16Array(this.framebuffer.width * this.framebuffer.height)\n        // add some properties and methods to make using this easier\n        this.depthBuffer.width = this.framebuffer.width;\n        this.depthBuffer.height = this.framebuffer.height;\n        this.depthBuffer.clear = function () { this.fill(65535); };\n        this.depthBuffer.getDepth = function (x, y) { return this[y * this.width + x] / 65535.0; };\n        this.depthBuffer.setDepth = function (x, y, v) { this[y * this.width + x] = (v * 65535) | 0; };\n        this.depthBuffer.testDepth = function (x, y, v) {\n            const value = (v * 65535) | 0;\n            if (value < 0 || value > 65535) {\n                return false;\n            }\n            const index = y * this.width + x;\n            if (value < this[index]) {\n                this[index] = value;\n                return true;\n            }\n            return false;\n        };\n        this.depthBuffer.clear();\n    }\n\n    // returns true if vertices are in counterclockwise order\n    isCcw(v0, v1, v2) {\n        return (v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x) >= 0;\n    }\n\n    cross(a, b, c) {\n        return (b.x - a.x) * -(c.y - a.y) - -(b.y - a.y) * (c.x - a.x);\n    }\n\n    // https://kitsunegames.com/assets/software-3d-rendering-in-javascript-pt2/result/\n    public fillTriangle(framebuffer: Framebuffer, v0: Vertex, v1: Vertex, v2: Vertex) {\n\n        if (this.isCcw(v0.projection, v1.projection, v2.projection)) {\n            return;\n        }\n\n        const minX = Math.floor(Math.min(v0.projection.x, v1.projection.x, v2.projection.x));\n        const maxX = Math.ceil(Math.max(v0.projection.x, v1.projection.x, v2.projection.x));\n        const minY = Math.floor(Math.min(v0.projection.y, v1.projection.y, v2.projection.y));\n        const maxY = Math.ceil(Math.max(v0.projection.y, v1.projection.y, v2.projection.y));\n\n        // precalculate the area of the parallelogram defined by our triangle\n        const area = this.cross(v0.projection, v1.projection, v2.projection);\n\n        // calculate edges\n        const edge0 = { x: v2.projection.x - v1.projection.x, y: v2.projection.y - v1.projection.y };\n        const edge1 = { x: v0.projection.x - v2.projection.x, y: v0.projection.y - v2.projection.y };\n        const edge2 = { x: v1.projection.x - v0.projection.x, y: v1.projection.y - v0.projection.y };\n\n        // calculate which edges are right edges so we can easily skip them\n        // right edges go up, or (bottom edges) are horizontal edges that go right\n        const edgeRight0 = edge0.y < 0 || (edge0.y === 0 && edge0.x > 0);\n        const edgeRight1 = edge1.y < 0 || (edge1.y === 0 && edge0.x > 0);\n        const edgeRight2 = edge2.y < 0 || (edge2.y === 0 && edge0.x > 0);\n\n        // p is our 2D pixel location point\n        const p = { x: null, y: null };\n\n        // fragment is the resulting pixel with all the vertex attributes interpolated\n        const fragment = {\n            r: undefined,\n            g: undefined,\n            b: undefined,\n            a: undefined,\n            z: 0\n        };\n\n        for (let y = minY; y < maxY; y += .5) {\n            for (let x = minX; x < maxX; x += .5) {\n                // sample from the center of the pixel, not the top-left corner\n                p.x = x + 0.5; p.y = y + .5;\n\n                // calculate vertex weights\n                // should divide these by area, but we do that later\n                // so we divide once, not three times\n                const w0 = this.cross(v1.projection, v2.projection, p);\n                const w1 = this.cross(v2.projection, v0.projection, p);\n                const w2 = this.cross(v0.projection, v1.projection, p);\n\n                // if the point is not inside our polygon, skip fragment\n                if (w0 < 0 || w1 < 0 || w2 < 0) {\n                    continue;\n                }\n\n                // if this is a right or bottom edge, skip fragment (top-left rule):\n                if ((w0 === 0 && edgeRight0) || (w1 === 0 && edgeRight1) || (w2 === 0 && edgeRight2)) {\n                    continue;\n                }\n\n                // interpolate our vertices\n                fragment.r = (w0 * v0.color.r + w1 * v1.color.r + w2 * v2.color.r) / area;\n                fragment.g = (w0 * v0.color.g + w1 * v1.color.g + w2 * v2.color.g) / area;\n                fragment.b = (w0 * v0.color.b + w1 * v1.color.b + w2 * v2.color.b) / area;\n                fragment.a = (w0 * v0.projection.x + w1 * v1.projection.x + w2 * v2.projection.x) / area;\n                fragment.z = (w0 * v0.projection.z + w1 * v1.projection.z + w2 * v2.projection.z) / area;\n\n                const fragColor = new Color(\n                    fragment.r, fragment.g, fragment.b, fragment.a\n                )\n\n                // this can be optimized to only draw aliased pixels on the edges\n\n                // if (this.depthBuffer.testDepth(x, y, fragment.z)) {\n                framebuffer.drawPixelAntiAliasedSpacial(x, y, fragColor.toPackedFormat());\n                // }\n\n            }\n        }\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n        this.fillTriangle(framebuffer, p1, p2, p3);\n        // this.drawTriangleDDAOriginal(framebuffer, p1, p2, p3);\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    \n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) { \n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    const u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    const v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    const color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\nimport { Vector4f } from '../math/Vector4f';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SubPixelTriangleRasterizer } from '../rasterizer/SubPixelTriangleRasterizer';\n\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\n\n/**\n * TODO:\n * fix backface occlusion / add z-clipping\n */\nexport class SubPixelRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new SubPixelTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            ((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            ((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = ((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = ((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(arg0: boolean) {\n        this.sphereMapping = arg0;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection2(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection2(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            output[j].projection = this.project(output[j].position);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n \n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n        \n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n   \n        let x0y0: number;\n        let x1y0: number; \n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n        \n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n        \n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n        \n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | 255 << 24;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { Canvas } from '../../Canvas';\nimport { SubPixelCubeScene } from './SubPixelCubeScene';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new SubPixelCubeScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","this","document","createElement","id","style","cssText","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","element","appendChild","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","precompute","data","set","clear","color","Color","BLACK","toPackedFormat","count","i","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","index","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","length","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","k","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","push","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","forEach","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","cos","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","SubPixelCubeScene","AbstractScene","subPixelRenderingPipeline","gouraudRenderingPipeline","cubeMesh","Cube","Promise","all","SubPixelRenderingPipeline","GouraudShadingRenderingPipeline","BACKGROUND_COLOR","draw","getMesh","getModelViewMatrix","renderBackground","xShift","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","css","setAttribute","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","cross","normalize","faces","n1","n2","n3","transformedPoints","map","transformedNormals","AbstractGeometricObject","super","invert","frame","frame2","up","right","current","y2","mu","mu2","Matrix3f","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","result","multiply","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","normalize2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","distance","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","SubPixelTriangleRasterizer","depthBuffer","Uint16Array","getDepth","setDepth","testDepth","value","isCcw","v0","c","fillTriangle","minX","maxX","minY","maxY","area","edge0","edge1","edge2","edgeRight0","edgeRight1","edgeRight2","fragment","undefined","w0","w1","w2","fragColor","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","mat","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setFog","setLights","enableLighting","enable","setMaterial","setColor","drawMeshArray","meshes","model","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","point","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","arg0","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","normals2","vertices","uv","computeNearPlaneIntersection2","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","Canvas","main"],"sourceRoot":""}