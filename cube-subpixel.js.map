{"version":3,"file":"cube-subpixel.js","mappings":"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","sources":["webpack://aisa/./src/default-style.css","webpack://aisa/./node_modules/css-loader/dist/runtime/api.js","webpack://aisa/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://aisa/./src/default-style.css?9c7b","webpack://aisa/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://aisa/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://aisa/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://aisa/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://aisa/./src/Canvas.ts","webpack://aisa/./src/CullFace.ts","webpack://aisa/./src/Framebuffer.ts","webpack://aisa/./src/RandomNumberGenerator.ts","webpack://aisa/./src/TextureCoordinate.ts","webpack://aisa/./src/Vertex.ts","webpack://aisa/./src/blitter/ScaleClipBlitter.ts","webpack://aisa/./src/core/Color.ts","webpack://aisa/./src/examples/cube-subpixel/SubPixelCubeScene.ts","webpack://aisa/./src/fullscreen/FullscreenUtils.ts","webpack://aisa/./src/geometrical-objects/AbstractGeometricObject.ts","webpack://aisa/./src/geometrical-objects/Cube.ts","webpack://aisa/./src/geometrical-objects/Torus.ts","webpack://aisa/./src/math/Interpolator.ts","webpack://aisa/./src/math/Matrix3.ts","webpack://aisa/./src/math/Matrix4f.ts","webpack://aisa/./src/math/Vector2f.ts","webpack://aisa/./src/math/Vector3f.ts","webpack://aisa/./src/math/Vector4f.ts","webpack://aisa/./src/math/index.ts","webpack://aisa/./src/rasterizer/AbstractScanlineTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/AbstractTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/ColorInterpolator.ts","webpack://aisa/./src/rasterizer/FlatShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/GouraudShadingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/SlopeInterpolator.ts","webpack://aisa/./src/rasterizer/SubPixelTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedAlphaBlendingTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/TexturedTriangleRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizer.ts","webpack://aisa/./src/rasterizer/line/LineRasterizerNoZ.ts","webpack://aisa/./src/rendering-pipelines/AbstractRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/GouraudShadingRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/SubPixelRenderingPipeline.ts","webpack://aisa/./src/rendering-pipelines/TexturingRenderingPipeline.ts","webpack://aisa/./src/scenes/AbstractScene.ts","webpack://aisa/./src/screen-space-clipping/AbstractClipEdge.ts","webpack://aisa/./src/screen-space-clipping/BottomClipEdge.ts","webpack://aisa/./src/screen-space-clipping/CohenSutherlandLineClipper.ts","webpack://aisa/./src/screen-space-clipping/LeftClipEdge.ts","webpack://aisa/./src/screen-space-clipping/RightClipEdge.ts","webpack://aisa/./src/screen-space-clipping/SutherlandHodgman2DClipper.ts","webpack://aisa/./src/screen-space-clipping/TopClipEdge.ts","webpack://aisa/./src/shading/illumination-models/PhongLighting.ts","webpack://aisa/./src/shading/light/Light.ts","webpack://aisa/./src/shading/light/PointLight.ts","webpack://aisa/./src/shading/material/Material.ts","webpack://aisa/./src/texture/Texture.ts","webpack://aisa/webpack/bootstrap","webpack://aisa/webpack/runtime/compat get default export","webpack://aisa/webpack/runtime/define property getters","webpack://aisa/webpack/runtime/hasOwnProperty shorthand","webpack://aisa/webpack/runtime/make namespace object","webpack://aisa/webpack/runtime/nonce","webpack://aisa/./src/examples/cube-subpixel/Application.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n    background-color: #000;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/default-style.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,sBAAsB;AAC1B\",\"sourcesContent\":[\"body {\\n    background-color: #000;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./default-style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","import { Framebuffer } from './Framebuffer';\nimport { FullscreenUtils } from './fullscreen/FullscreenUtils';\nimport { AbstractScene } from './scenes/AbstractScene';\n\nexport class Canvas {\n\n    public framebuffer: Framebuffer;\n    private canvas: HTMLCanvasElement;\n    private context: CanvasRenderingContext2D;\n    private startTime: number;\n    private boundRenderLoop: FrameRequestCallback;\n\n    constructor(width: number, height: number, private scene: AbstractScene) {\n        this.canvas = document.createElement('canvas');\n\n        this.canvas.width = width;\n        this.canvas.height = height;\n        this.canvas.id = 'aisa-canvas';\n\n        this.canvas.style.cssText = 'image-rendering: optimizeSpeed;' + // FireFox < 6.0\n            'image-rendering: -moz-crisp-edges;' + // FireFox\n            'image-rendering: -o-crisp-edges;' +  // Opera\n            'image-rendering: -webkit-crisp-edges;' + // Chrome\n            'image-rendering: crisp-edges;' + // Chrome\n            'image-rendering: -webkit-optimize-contrast;' + // Safari\n            'image-rendering: pixelated; ' + // Future browsers\n            '-ms-interpolation-mode: nearest-neighbor;'; // IE\n\n        this.canvas.style.width = `${width * 2}px`;\n        this.canvas.style.height = `${height * 2}px`;\n\n        this.context = this.canvas.getContext('2d');\n\n        // FIXME: make this cross browser compatible!\n        (this.context as any).oImageSmoothingEnabled = false;\n        this.context.imageSmoothingEnabled = false;\n        (this.context as any).webkitImageSmoothingEnabled = false;\n\n        this.framebuffer = new Framebuffer(width, height);\n        this.boundRenderLoop = this.renderLoop.bind(this);\n    }\n\n    public init(): void {\n        // add canvas element to target element\n        this.appendTo(document.getElementById('aisa'));\n\n        // Add fullscreen toggle on click\n        this.canvas.addEventListener('click', (event: MouseEvent) => {\n            event.preventDefault();\n            FullscreenUtils.toggleFullscreen(this.canvas);\n        });\n\n        // Init scene and start rendering\n        this.scene.init(this.framebuffer).then(\n            () => {\n                this.scene.onInit();\n                this.startTime = Date.now();\n                this.renderLoop();\n            }\n        );\n    }\n\n    public renderLoop(): void {\n        this.scene.render(this.framebuffer, Date.now() - this.startTime);\n        this.flipBackbuffer();\n        requestAnimationFrame(this.boundRenderLoop);\n    }\n\n    public flipBackbuffer(): void {\n        this.context.putImageData(this.framebuffer.getImageData(), 0, 0);\n    }\n\n    public appendTo(element: HTMLElement): void {\n        element.appendChild(this.canvas);\n    }\n\n}\n","export enum CullFace {\n    FRONT = 0,\n    BACK = 1,\n    DISABLED\n}\n","\nimport { ScaleClipBlitter } from './blitter/ScaleClipBlitter';\nimport { ControllableCamera } from './camera';\nimport { Color } from './core/Color';\nimport { CullFace } from './CullFace';\nimport { Torus } from './geometrical-objects/Torus';\nimport { Matrix3f, Matrix4f, Vector2f, Vector3f, Vector4f } from './math';\nimport { Interpolator } from './math/Interpolator';\nimport { Sphere } from './math/Sphere';\nimport RandomNumberGenerator from './RandomNumberGenerator';\nimport { FlatShadingTriangleRasterizer } from './rasterizer/FlatShadingTriangleRasterizer';\nimport { LineRasterizerDda } from './rasterizer/line/LineRasterizer';\nimport { LineRasterizerNoZ } from './rasterizer/line/LineRasterizerNoZ';\nimport { TexturedTriangleRasterizer } from './rasterizer/TexturedTriangleRasterizer';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractClipEdge } from './screen-space-clipping/AbstractClipEdge';\nimport { BottomClipEdge } from './screen-space-clipping/BottomClipEdge';\nimport { CohenSutherlandLineClipper } from './screen-space-clipping/CohenSutherlandLineClipper';\nimport { LeftClipEdge } from './screen-space-clipping/LeftClipEdge';\nimport { RightClipEdge } from './screen-space-clipping/RightClipEdge';\nimport { TopClipEdge } from './screen-space-clipping/TopClipEdge';\nimport { Texture } from './texture/Texture';\nimport { TextureCoordinate } from './TextureCoordinate';\nimport { Vertex } from './Vertex';\n\n/*\nimport { FlatShadingRenderingPipeline } from './rendering-pipelines/FlatShadingRenderingPipeline';\nimport { TexturingRenderingPipeline } from './rendering-pipelines/TexturingRenderingPipeline';\nimport { BlenderJsonParser } from './blender/BlenderJsonParser';\nimport { Material } from './shading/material/Material';\nimport { PointLight } from './shading/light/PointLight';\n*/\n\n\n// let labJson2 = <any>require('./assets/lab2.json');\n// let bakedJson = <any>require('./assets/abstract.json');\n\nexport class Framebuffer {\n\n    public static PIXEL_SIZE_IN_BYTES = 4;\n\n    public minWindow: Vector2f;\n    public maxWindow: Vector2f;\n\n\n    public framebuffer: Uint32Array;\n    public wBuffer: Float32Array;\n\n    public cullMode: CullFace = CullFace.BACK;\n\n    public camera: ControllableCamera;\n    public bob: Texture;\n    public triangleRasterizer = new FlatShadingTriangleRasterizer(this);\n    public texturedTriangleRasterizer = new TexturedTriangleRasterizer(this);\n\n    public scaleClipBlitter = new ScaleClipBlitter(this);\n    // public renderingPipeline: FlatShadingRenderingPipeline;\n     public texturedRenderingPipeline: TexturingRenderingPipeline;\n    public lineRasterizer = new LineRasterizerDda(this);\n    public lineRasterizerNo = new LineRasterizerNoZ(this);\n    public tmpGlitch: Uint32Array;\n\n    public lensFlareVisible: boolean = false;\n    public lensFlareStart = 0;\n    public lensFlareEnd = 0;\n\n    public width: number;\n    public height: number;\n    private imageData: ImageData;\n    private unsignedIntArray: Uint8ClampedArray;\n\n    private torus = new Torus();\n\n    private plane: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private cylinder2: {\n        points: Vector4f[];\n        points2: Vector4f[];\n        normals: Vector4f[];\n        normals2: Vector4f[];\n        index:Array<number>;\n    };\n\n    private linerClipper = new CohenSutherlandLineClipper(this);\n    public clipRegion = Array<AbstractClipEdge>();\n    private texture = new Texture();\n\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n\n        this.imageData = new ImageData(width, height);\n        this.wBuffer = new Float32Array(width * height);\n        const arrayBuffer = new ArrayBuffer(this.width * this.height * Framebuffer.PIXEL_SIZE_IN_BYTES);\n        this.unsignedIntArray = new Uint8ClampedArray(arrayBuffer);\n        this.framebuffer = new Uint32Array(arrayBuffer);\n        this.tmpGlitch = new Uint32Array(width * height);\n        // this.renderingPipeline = new FlatShadingRenderingPipeline(this);\n     this.texturedRenderingPipeline = new TexturingRenderingPipeline(this);\n        this.minWindow = new Vector2f(0, 0);\n        this.maxWindow = new Vector2f(width - 1, height - 1);\n\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(this),\n            new LeftClipEdge(this),\n            new BottomClipEdge(this),\n            new TopClipEdge(this)\n        );\n    }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setTexture(texture: Texture): void {\n        this.bob = texture;\n    }\n\n    /*\n    public precompute(texture: Texture): void {\n        // this.blengetBlenderScene(hoodlumJson, false);\n\n         //this.cylinder = this.createCylinder();\n\n        // this.sphereDisp = this.createSphereDistplaced(texture);\n    }\n    */\n\n    public getImageData(): ImageData {\n        this.imageData.data.set(this.unsignedIntArray);\n        return this.imageData;\n    }\n\n    public clear() {\n        const color: number = Color.BLACK.toPackedFormat();\n        const count: number = this.width * this.height;\n        for (let i = 0; i < count; i++) {\n            this.framebuffer[i] = color;\n        }\n    }\n\n    public clearColorBuffer(color: number) {\n        this.framebuffer.fill(color);\n    }\n\n    public drawPixel(x: number, y: number, color: number) {\n        this.framebuffer[x + y * this.width] = color;\n\n    }\n    public drawPixel4(x: number, y: number, color: number, alpha: number) {\n        const index: number = x + y * this.width;\n        const inverseAlpha = 1 - alpha;\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n        this.framebuffer[x + y * this.width] = r | (g << 8) | (b << 16) | (255 << 24);\n\n    }\n\n    public drawPixel3(x: number, y: number, color: number, alpha2: number) {\n\n        const index: number = x + y * this.width;\n        const alpha = ((color >> 24) & 0xff) / 255 * alpha2;\n        const inverseAlpha = 1 - alpha;\n\n        const r = (((this.framebuffer[index] >> 0) & 0xff) * (inverseAlpha)\n            + ((color >> 0) & 0xff) * (alpha)) | 0;\n        const g = (((this.framebuffer[index] >> 8) & 0xff) * (inverseAlpha) +\n            ((color >> 8) & 0xff) * (alpha)) | 0;\n        const b = (((this.framebuffer[index] >> 16) & 0xff) * (inverseAlpha) +\n            ((color >> 16) & 0xff) * (alpha)) | 0;\n\n        this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background\n     *\n     * @param  {x} number                 this can be a float\n     * @param  {y} number                 this can be a float\n     * @param  {color} number             color to blend into framebuffer\n     */\n    drawPixelAntiAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.floor(x);\n        const roundedY = Math.floor(y);\n        const percentX = 1 - Math.abs(x - roundedX);\n        const percentY = 1 - Math.abs(y - roundedY);\n        const percent = percentX * percentY;\n        this.drawPixel3(roundedX, roundedY, color, percent);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * to the framebuffer background\n     */\n    drawPixelAliased(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        const roundedX = Math.round(x);\n        const roundedY = Math.round(y)\n        this.drawPixel(roundedX, roundedY, color);\n    }\n\n    /**\n     * Renders a pixel using fractional x,y coordinates\n     * blended with the framebuffer background in a 4x4 matrix\n     * https://en.wikipedia.org/wiki/Spatial_anti-aliasing\n     */\n    drawPixelAntiAliasedSpacial(x: number, y: number, color: number) {\n        if ((x < 0 || x >= this.width) || (y < 0 || y >= this.height)) return;\n        for (let roundedX = Math.floor(x); roundedX <= Math.ceil(x); roundedX++) {\n            for (let roundedY = Math.floor(y); roundedY <= Math.ceil(y); roundedY++) {\n                const percentX = 1 - Math.abs(x - roundedX);\n                const percentY = 1 - Math.abs(y - roundedY);\n                const percent = percentX * percentY;\n                this.drawPixel4(roundedX, roundedY, color, percent);\n            }\n        }\n    }\n\n    public readPixel(x: number, y: number): number {\n        return this.framebuffer[x + y * this.width];\n    }\n\n    public drawRect(x, y, width, color) {\n        let start = x + y * this.width;\n\n        for (let i = 0; i < width; i++) {\n            this.framebuffer[start++] = color;\n        }\n    }\n\n    public drawRect2(x: number, y: number, width: number, height: number, color: number) {\n        let start = x + y * this.width;\n        for (let j = 0; j < height; j++) {\n            for (let i = 0; i < width; i++) {\n\n                this.framebuffer[start++] = color;\n\n            }\n            start += this.width - width;\n        }\n    }\n\n    public drawText(x: number, y: number, text: string, texture: Texture): void {\n        let xpos = x;\n        const firstIndex = ' '.charCodeAt(0);\n        for (let i = 0; i < text.length; i++) {\n            const index = text.charCodeAt(i) - firstIndex;\n            const tx = Math.floor(index % 32) * 8;\n            const ty = Math.floor(index / 32) * 8;\n            this.drawTextureRectFastAlpha(xpos, y, tx, ty, 8, 8, texture);\n            xpos += 8;\n        }\n    }\n\n    public addReflections() {\n        const start = 150;\n        for (let i = 0; i < 50; i++) {\n            for (let x = 0; x < this.width; x++) {\n                this.framebuffer[(start + i) * this.width + x] = this.framebuffer[(start - i * 3 - 1) * this.width + x +\n                    Interpolator.interpolate(0, 50, i) * (Math.sin(Date.now() * 0.002 + i * 0.2) * 14) | 0];\n            }\n        }\n    }\n\n    public drawTextureRect2(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        for (let w = 0; w < width; w++) {\n            for (let h = 0; h < height; h++) {\n                const texIndex = (xt + w) + ((yt + h) * texture.width);\n                const frIndex = (xs + w) + ((ys + h) * this.width);\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (((this.framebuffer[frIndex] >> 0) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 0) & 0xff) * (alpha)) | 0;\n                const g = (((this.framebuffer[frIndex] >> 8) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 8) & 0xff) * (alpha)) | 0;\n                const b = (((this.framebuffer[frIndex] >> 16) & 0xff) * (inverseAlpha) + ((texture.texture[texIndex] >> 16) & 0xff) * (alpha)) | 0;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            }\n        }\n    }\n\n    public drawTextureRectFastAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const color = texture.texture[texIndex];\n                if (color & 0xff000000) {\n                    this.framebuffer[frIndex] = color;\n                }\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n\n    public drawTextureColorized(x: number, y: number, texture: Texture, color: Color): void {\n\n        let frIndex = x + y * this.width;\n        let texIndex = 0;\n\n        for (let h = 0; h < texture.height; h++) {\n            for (let w = 0; w < texture.width; w++) {\n                const txPixel = texture.texture[texIndex];\n\n\n                const r = (txPixel >> 0 & 0xff) * color.r / 255;\n                const g = (txPixel >> 8 & 0xff) * color.g / 255;\n                const b = (txPixel >> 16 & 0xff) * color.b / 255;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                texIndex++;\n                frIndex++;\n            }\n\n            frIndex += this.width - texture.width;\n        }\n    }\n\n    public drawTextureRectNoAlpha(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                this.framebuffer[frIndex] = texture.texture[texIndex];\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    /**\n     * Transitions from one pixel to another using alpha\n     *\n     * @param  {number} c1\n     * @param  {number} c2\n     * @param  {number} alpha number ranging from 0-255\n     * @return {number}     color blended difference between c1 and c2\n     */\n    public static blend(c1: number, c2: number, nAlpha: number): number {\n\n        if (0 === nAlpha) {\n            return c1;\n        }\n\n        if (255 === nAlpha) {\n            return c2;\n        }\n\n        const nInvAlpha: number = 255 - nAlpha;\n\n        const r1: number = (c1 & 0x00FF0000) >> 16;\n        const r2: number = (c2 & 0x00FF0000) >> 16;\n        const r: number = (r2 * nAlpha + r1 * nInvAlpha) >> 8;\n\n        const g1: number = (c1 & 0x0000FF00) >> 8;\n        const g2: number = (c2 & 0x0000FF00) >> 8;\n        const g: number = (g2 * nAlpha + g1 * nInvAlpha) >> 8;\n\n        const b1: number = (c1 & 0x000000FF);\n        const b2: number = (c2 & 0x000000FF);\n        const b: number = (b2 * nAlpha + b1 * nInvAlpha) >> 8;\n\n        return 0xff000000 | r << 16 | g << 8 | b;\n    }\n\n\n    public static addColor(c1: number, c2: number) {\n        //int a1 = (c1 >> 24) & 0xff;\n        const r1 = (c1 >> 16) & 0xFF;\n        const g1 = (c1 >>  8) & 0xFF;\n        const b1 =  c1        & 0xFF;\n\n        const r2 = (c2 >> 16) & 0xFF;\n        const g2 = (c2 >>  8) & 0xFF;\n        const b2 =  c2        & 0xFF;\n\n        const r = r1 + r2 < 0xFF ? r1 + r2 : 0xFF;\n        const g = g1 + g2 < 0xFF ? g1 + g2 : 0xFF;\n        const b = b1 + b2 < 0xFF ? b1 + b2 : 0xFF;\n\n        return (0xFF << 24 | r << 16 | g << 8 | b);\n      }\n\n    public drawTextureRect(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Uint32Array, pixelWidth: number, alpha2: number): void {\n        let texIndex = xt + yt * pixelWidth;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n                const inverseAlpha = 1 - alpha;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture[texIndex];\n\n                const r = (fbPixel >> 0 & 0xff) * inverseAlpha + (txPixel >> 0 & 0xff) * alpha;\n                const g = (fbPixel >> 8 & 0xff) * inverseAlpha + (txPixel >> 8 & 0xff) * alpha;\n                const b = (fbPixel >> 16 & 0xff) * inverseAlpha + (txPixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += pixelWidth - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public drawTextureRectAdd(xs: number, ys: number, xt: number, yt: number, width: number, height: number, texture: Texture, alpha2: number): void {\n        let texIndex = xt + yt * texture.width;\n        let frIndex = xs + ys * this.width;\n\n        for (let h = 0; h < height; h++) {\n            for (let w = 0; w < width; w++) {\n                const alpha = ((texture.texture[texIndex] >> 24) & 0xff) / 255 * alpha2;\n\n                const fbPixel = this.framebuffer[frIndex];\n                const txPixel = texture.texture[texIndex];\n\n                const r = Math.min(255, (fbPixel >> 0 & 0xff) + (txPixel >> 0 & 0xff) * alpha);\n                const g = Math.min(255, (fbPixel >> 8 & 0xff) + (txPixel >> 8 & 0xff) * alpha);\n                const b = Math.min(255, (fbPixel >> 16 & 0xff) + (txPixel >> 16 & 0xff) * alpha);\n\n                this.framebuffer[frIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                texIndex++;\n                frIndex++;\n            }\n            texIndex += texture.width - width;\n            frIndex += this.width - width;\n        }\n    }\n\n    public pixelate() {\n        const xoff = 200;\n        const yoff = 50;\n\n        for (let x = 0; x < 10; x++) {\n            for (let y = 0; y < 10; y++) {\n                this.drawBox2(x * 10 + xoff, y * 10 + yoff, 10, 10, this.readPixel(x * 10 + xoff, y * 10 + yoff));\n            }\n        }\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff + 20 * 5, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff, yoff, -0.3), new Vector3f(xoff, yoff + 20 * 5, -0.3), 0xffffffff);\n        this.drawLineDDA(new Vector3f(xoff + 20 * 5, yoff, -0.3), new Vector3f(xoff + 20 * 5, yoff + 20 * 5, -0.3), 0xffffffff);\n    }\n\n    public fastFramebufferCopyOffset(src: Uint32Array, dest: Uint32Array, offset = 0) {\n        let i = this.width * this.height / 32 + 1;\n        let k = this.width * this.height;\n        let l = this.width * (this.height - offset);\n        while (--i) {\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n            src[--k] = dest[--l]; src[--k] = dest[--l];\n        }\n    }\n\n    // 6 times faster than the slow method that clips and does alpha blending\n    public fastFramebufferCopy(dest: Uint32Array, src: Uint32Array) {\n        dest.set(src);\n    }\n\n    public noise(elapsedTime: number, texture: Texture, scale: number = 0.07): void {\n        const rng = new RandomNumberGenerator();\n        rng.setSeed(elapsedTime);\n        for (let y = 0; y < this.height; y++) {\n            this.drawTextureRect(0, y, Math.floor(rng.getFloat() * (texture.texture.length - this.width)), 0, this.width, 1, texture.texture, texture.width, scale);\n        }\n    }\n\n    public drawTexturedBillboard(xp: number, yp: number, width: number, height: number, texture: Texture, z: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) + (texture.texture[textureIndex] >> 0 & 0xff);\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) + (texture.texture[textureIndex] >> 8 & 0xff);\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) + (texture.texture[textureIndex] >> 16 & 0xff);\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += yStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number): void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n        let xTextureStart: number;\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticle2Sub(\n        xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number,\n        imgNum: number = 0, spritH: number, rr:number=1,gg:number=1,bb:number=1) : void {\n        const xStep = texture.width / width;\n        const yStep = spritH / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - (this.height), 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - (this.height - 1), 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = Math.ceil((width + xp) - Math.max(xp + width - (this.width), 0));\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = Math.ceil(width - Math.max(xp + width - (this.width - 1), 0));\n        }\n\n        const sub: number = Math.ceil(xp) - xp;\n        const suby: number = Math.ceil(yp) - yp;\n        xTextureStart += sub * xStep;\n        yy += suby * yStep;\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = Math.ceil(xStart) + Math.ceil(yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n\n                    const textureIndex = Math.min(Math.round(xx) | 0, texture.width - 1) +\n                        Math.min(Math.round(yy) | 0, spritH - 1) * texture.width +\n                        spritH * texture.width * imgNum;\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                    const inverseAlpha = 1 - alpha;\n                    const framebufferPixel = this.framebuffer[index2];\n                    const texturePixel = texture.texture[textureIndex];\n                    const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha*rr;\n                    const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha*gg;\n                    const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha*bb;\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawParticleNoDepth(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > this.height - 1 ||\n            xp + width < 0 ||\n            xp > this.width - 1) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawSoftParticle(xp: number, yp: number, width: number, height: number, texture: Texture, z: number, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                if (this.wBuffer[index2] > z) {\n                    // float scale = 0.2f;\n                    // float fade = clamp((depthMapDepth.x-depth)*scale, 0.0, 1.0);\n                    const zDist = Math.min(Math.max(((1 / z - 1 / this.wBuffer[index2])), 0.0), 1.0);\n                    // this.wBuffer[index2] = z;\n                    const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                    const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale * zDist;\n                    const inverseAlpha = 1 - alpha;\n\n                    const r = (this.framebuffer[index2] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer[index2] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer[index2] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                    this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawFog(color: Color, fogScale: number, fogOffset: number): void {\n        const videoMemorySize: number = this.width * this.height;\n        const wBufferScale: number = -fogScale;\n\n        for (let index: number = 0; index < videoMemorySize; index++) {\n            const alpha = Math.max(Math.min(wBufferScale * (1 / this.wBuffer[index] + fogOffset), 1.0), 0.0);\n            const inverseAlpha = 1.0 - alpha;\n\n            const r = (this.framebuffer[index] >> 0 & 0xff) * inverseAlpha + color.r * alpha;\n            const g = (this.framebuffer[index] >> 8 & 0xff) * inverseAlpha + color.g * alpha;\n            const b = (this.framebuffer[index] >> 16 & 0xff) * inverseAlpha + color.b * alpha;\n\n            this.framebuffer[index] = r | (g << 8) | (b << 16) | (255 << 24);\n        }\n    }\n\n    public drawScaledTextureClipBi(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = //Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const alpha = 255 * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipBiAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                // let textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n                const color = texture.getBilinearFilteredPixel2(xx, yy);\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = color;\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alphaBlend, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alphaBlend, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alphaBlend, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawScaledTextureClipAdd(xp: number, yp: number, width: number, height: number, texture: Texture, alpha: number = 1.0): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.width, 0);\n        }\n\n        let index2 = (xStart) + (yStart) * this.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const textureIndex = Math.min(xx | 0, texture.width - 1) + Math.min(yy | 0, texture.height - 1) * texture.width;\n\n                const framebufferPixel = this.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = Math.min((framebufferPixel >> 0 & 0xff) + (texturePixel >> 0 & 0xff) * alpha, 255);\n                const g = Math.min((framebufferPixel >> 8 & 0xff) + (texturePixel >> 8 & 0xff) * alpha, 255);\n                const b = Math.min((framebufferPixel >> 16 & 0xff) + (texturePixel >> 16 & 0xff) * alpha, 255);\n\n                this.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.width;\n        }\n    }\n\n    public drawTexture(x: number, y: number, texture: Texture, alpha2: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        for (let yHeight: number = 0; yHeight < height; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureFullscreen(texture: Texture, alpha2: number) {\n\n        let framebufferIndex: number = 0;\n        const inverseAlpha = 1 - alpha2;\n        for (let y: number = 0; y < this.width * this.height; y++) {\n\n            const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 0 & 0xff) * alpha2;\n            const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 8 & 0xff) * alpha2;\n            const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[framebufferIndex] >> 16 & 0xff) * alpha2;\n\n            this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n            framebufferIndex++;\n        }\n    }\n\n    public drawTexture3(x: number, y: number, texture: Texture, alpha2: number, time: number) {\n        const SCREEN_WIDTH = this.width;\n        const SCREEN_HEIGHT = this.height;\n\n        let framebufferIndex: number = Math.max(x, 0) + Math.max(y, 0) * this.width;\n        let textureIndex: number = Math.max(0, 0 - x) + Math.max(0, 0 - y) * texture.width;\n\n        const width: number = Math.min(texture.width, SCREEN_WIDTH - x) - Math.max(0, 0 - x);\n        const height: number = Math.min(texture.height, SCREEN_HEIGHT - y) - Math.max(0, 0 - y);\n\n        const textureRowOffset = texture.width - width;\n        const framebufferRowOffset = this.width - width;\n\n        const div = 1 / 255 * alpha2;\n\n        const mHeight = Math.floor(height * Math.max(Math.min(1, time), 0));\n\n        for (let yHeight: number = 0; yHeight < mHeight; yHeight++) {\n            for (let xWidth: number = 0; xWidth < width; xWidth++) {\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * div;\n                const inverseAlpha = 1 - alpha;\n\n                const r = (this.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 0 & 0xff) * alpha;\n                const g = (this.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 8 & 0xff) * alpha;\n                const b = (this.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (texture.texture[textureIndex] >> 16 & 0xff) * alpha;\n\n                this.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            textureIndex += textureRowOffset;\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n    public drawTextureNoClipAlpha(x: number, y: number, texture: Texture): void {\n        let framebufferIndex: number = x + y * this.width;\n        let textureIndex: number = 0;\n\n        const framebufferRowOffset = this.width - texture.width;\n\n        for (let yHeight = 0; yHeight < texture.height; yHeight++) {\n            for (let xWidth = 0; xWidth < texture.width; xWidth++) {\n                const color = texture.texture[textureIndex];\n\n                if (color & 0xff000000) {\n                    this.framebuffer[framebufferIndex] = color;\n                }\n\n                framebufferIndex++;\n                textureIndex++;\n            }\n\n            framebufferIndex += framebufferRowOffset;\n        }\n    }\n\n     // https://math.stackexchange.com/questions/859454/maximum-number-of-vertices-in-intersection-of-triangle-with-box/\n     public nearPlaneClipping(t1: Vector3f, t2: Vector3f, color: number): void {\n        const NEAR_PLANE_Z = -1.7;\n\n        if (t1.z < NEAR_PLANE_Z && t2.z < NEAR_PLANE_Z) {\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t2), color);\n        } else if (t1.z > NEAR_PLANE_Z && t2.z > NEAR_PLANE_Z) {\n            return;\n        } else if (t1.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t1.z) / (t2.z - t1.z);\n            const t3 = new Vector3f(ratio * (t2.x - t1.x) + t1.x, ratio * (t2.y - t1.y) + t1.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t1), this.project(t3), color);\n        } else if (t2.z < NEAR_PLANE_Z) {\n            const ratio = (NEAR_PLANE_Z - t2.z) / (t1.z - t2.z);\n            const t3 = new Vector3f(ratio * (t1.x - t2.x) + t2.x, ratio * (t1.y - t2.y) + t2.y, NEAR_PLANE_Z);\n            this.linerClipper.cohenSutherlandLineClipper(this.project(t2), this.project(t3), color);\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector3f {\n        return new Vector3f(Math.round((this.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z);\n    }\n\n    public clearDepthBuffer(): void {\n        this.wBuffer.fill(-1 / 900);\n    }\n\n    public drawBox() {\n        const height = this.maxWindow.y - this.minWindow.y + 1;\n        const width = this.maxWindow.x - this.minWindow.x + 1;\n        let index = this.minWindow.y * this.width + this.minWindow.x;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(255 << 24 | 55 << 16 | 55 << 8 | 55, index, index + width);\n            index += this.width;\n        }\n    }\n\n    public drawBox2(x1: number, y1: number, width: number, height: number, color: number) {\n\n        let index = y1 * this.width + x1;\n        for (let i = 0; i < height; i++) {\n            this.framebuffer.fill(color, index, index + width);\n            index += this.width;\n        }\n    }\n\n    // TODO: implement subpixel accuracy\n    // https://github.com/specht/cruiser\n    public wireFrameSphereClipping(elapsedTime: number): void {\n\n        this.wBuffer.fill(100);\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 16;\n        const STEPS2 = 16;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n                points.push(this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        // Create MV Matrix\n        const scale = 10.8 + 5 * (Math.sin(elapsedTime * 0.16) + 1) / 2;\n        let modelViewMartrix = Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(Matrix4f.constructYRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = modelViewMartrix.multiplyMatrix(Matrix4f.constructXRotationMatrix(elapsedTime * 0.08));\n        modelViewMartrix = Matrix4f.constructTranslationMatrix(0 + 20 * Math.sin(elapsedTime * 0.04), 5 * Math.sin(elapsedTime * 0.06), -22).multiplyMatrix(modelViewMartrix);\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n\n            const x = transformed.x;\n            const y = transformed.y;\n            const z = transformed.z;\n\n            const xx = (this.width * 0.5) + (x / (-z * 0.0078));\n            const yy = (this.height * 0.5) + (y / (-z * 0.0078));\n\n            points2.push(new Vector3f(xx, yy, z));\n        }\n\n        // draw clip region\n        const colred = 255 << 24 | 230 << 16 | this.height << 16 | this.height;\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.maxWindow.y + 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.minWindow.y - 1, 0), new Vector3f(this.maxWindow.x + 1, this.minWindow.y - 1, 0), colred);\n        this.drawLineDDA(new Vector3f(this.minWindow.x - 1, this.maxWindow.y + 1, 0), new Vector3f(this.maxWindow.x + 2, this.maxWindow.y + 1, 0), colred);\n\n        this.drawBox();\n\n        for (let i = 0; i < index.length; i += 3) {\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            const colLine = 255 << 24 | 255 << 16 | 255 << 8 | 255;\n            if (this.isTriangleCCW(v1, v2, v3)) {\n                this.linerClipper.cohenSutherlandLineClipper(v1, v2, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v1, v3, colLine);\n                this.linerClipper.cohenSutherlandLineClipper(v3, v2, colLine);\n            }\n        }\n    }\n\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n        public wireFrameTerrain(elapsedTime: number, heightmap: Texture): void {\n\n            this.clearDepthBuffer();\n\n            const index: Array<number> = [\n            ];\n\n            const points: Array<Vector3f> = [];\n            for (let y = 0; y < 256; y++) {\n                for (let x = 0; x < 256; x++) {\n                    points.push(new Vector3f((x - 128) * 20.0, (heightmap.texture[x + y * 256] & 0x000000ff) * 128 / 256 - 70, (y - 128) * 20.0));\n                }\n            }\n\n            for (let y = 0; y < 256; y += 1) {\n                for (let x = 0; x < 256 - 1; x += 1) {\n                    index.push(0 + x + (y * 256));\n                    index.push(1 + x + (y * 256));\n                }\n            }\n\n            for (let x = 0; x < 256; x += 1) {\n                for (let y = 0; y < 256 - 1; y += 1) {\n\n                    index.push(x + ((y + 0) * 256));\n                    index.push(x + ((y + 1) * 256));\n                }\n            }\n\n            const modelViewMartrix = Matrix3f.constructYRotationMatrix(elapsedTime * 0.003);\n\n            const points2: Array<Vector3f> = new Array<Vector3f>();\n\n            const xOff = + Math.cos(elapsedTime * 0.000001) * 128 * 20;\n            const zOff = Math.sin(elapsedTime * 0.000001) * 128 * 20;\n            points.forEach(element => {\n                const transformed = modelViewMartrix.multiply(element);\n\n                const x = transformed.x + xOff;\n                const y = transformed.y;\n                const z = transformed.z + zOff; // TODO: use translation matrix!\n\n                points2.push(new Vector3f(x, y, z));\n            });\n\n            for (let i = 0; i < index.length; i += 2) {\n                const scale = (1 - Math.min(255, -points2[index[i]].z * 0.9) / 255);\n                const color = (255 * scale) << 8 | 100 * scale | (this.height * scale) << 16 | 255 << 24;\n                this.nearPlaneClipping(points2[index[i]], points2[index[i + 1]], color);\n            }\n        }\n\n    public drawBoundingSphere(sphere: Sphere, matrix: Matrix4f, color: number): void {\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 8;\n        const STEPS2 = 8;\n\n        // TODO: move into setup method\n        for (let i = 0; i <= STEPS; i++) {\n            for (let r = 0; r < STEPS2; r++) {\n\n                const pos = this.sphereFunction2(-i * Math.PI / STEPS - Math.PI / 2, -r * 2 * Math.PI / STEPS2).mul(sphere.getRadius() + 0.01).add(sphere.getCenter());\n                pos.w = 1;\n\n                points.push(pos);\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2)); // 2\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 1\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2)); // 4\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2)); // 3\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2)); // 5\n            }\n        }\n\n        const modelViewMartrix = matrix;\n\n        const points2: Array<Vector3f> = new Array<Vector3f>();\n\n        for (let p = 0; p < points.length; p++) {\n            const transformed = modelViewMartrix.multiplyHom(points[p]);\n            points2.push(new Vector3f(transformed.x, transformed.y, transformed.z));\n        }\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            const v1 = points2[index[i]];\n            const v2 = points2[index[i + 1]];\n            const v3 = points2[index[i + 2]];\n\n            this.nearPlaneClipping(v1, v2, color);\n            this.nearPlaneClipping(v1, v3, color);\n            this.nearPlaneClipping(v3, v2, color);\n\n        }\n    }\n    public drawPlanedeformationTunnelAnim(elapsedTime: number, texture: Texture) {\n\n        let i = 0;\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const xdist = (x - this.width / 2);\n                const ydist = (y - this.height / 2);\n                const dist = 256 * 0.2 / Math.max(1.0, Math.sqrt(xdist * xdist + ydist * ydist));\n                const dist2 = dist + elapsedTime * 0.002;\n                const angle = (Math.atan2(xdist, ydist) / Math.PI + 1.0) * 16 + elapsedTime * 0.00069;\n\n                const color1 = texture.texture[(dist2 & 0x1f) + (angle & 0x1f) * 32];\n                // darkening can be done with alpha blended texture\n                const scale = 1 - Interpolator.cosineInterpolate(1.0, 6.0, dist);\n                const r = ((color1 >> 0) & 0xff) * scale;\n                const g = ((color1 >> 8) & 0xff) * scale;\n                const b = ((color1 >> 16) & 0xff) * scale;\n                const final = r | g << 8 | b << 16;\n\n                this.framebuffer[i++] = final;\n            }\n        }\n    }\n\n\n    public drawScreenBounds(framebuffer: Framebuffer): void {\n        const color: number = Color.WHITE.toPackedFormat();\n        const width: number = this.width / 2;\n        const height: number = this.height / 2;\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2, 0),\n            new Vector3f(width / 2, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2 + width, height / 2, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n\n        framebuffer.drawLineDDANoZ(\n            new Vector3f(width / 2, height / 2 + height, 0),\n            new Vector3f(width / 2 + width, height / 2 + height, -100),\n            color\n        );\n    }\n\n    public drawParticleStreams(framebuffer: Framebuffer, elapsedTime: number, texture: Texture, light: Vector3f) {\n\n        const points: Array<Vector3f> = new Array<Vector3f>();\n        const points2: Array<Vector3f> = new Array<Vector3f>(points.length);\n        const transformed = framebuffer.project(light);\n\n        points2.push(transformed);\n        points2.sort((a, b) => {\n            return a.z - b.z;\n        });\n\n        points2.forEach(element => {\n            // let size = -(2.0 * 192 / (element.z));\n            const size = -(80.3 * 192 / (element.z));\n\n            framebuffer.drawParticle2(\n                Math.round(element.x - size / 2),\n                Math.round(element.y - size / 2),\n                Math.round(size), Math.round(size), texture, 1 / element.z, 1.0, 0, 200);\n        });\n\n    }\n\n    public drawPlaneDeformation(elapsedTime: number, texture: Texture): void {\n        // optimize\n        // power of two modulo with &\n        // this.framebuffer.clearColor(new Color());\n        // precompute LUD + render to half size backbuffer\n        const IMG_WIDTH = texture.width;\n        const IMG_HEIGHT = texture.height;\n\n        let framebufferIndex = 0;\n\n        for (let y = 0; y < this.height; y++) {\n            const yy = (-1.00 + 2.00 * y / this.height);\n\n            for (let x = 0; x < this.width; x++) {\n\n                const xx = (-1.00 + 2.00 * x / this.width);\n\n                // magic formulas here\n                const u = ((xx / Math.abs(yy)) * IMG_WIDTH * 0.05) | 0;\n                const v = (1.0 / Math.abs(yy) * IMG_HEIGHT * 0.05 + elapsedTime * 0.008) | 0;\n\n                const scale = 1 - Math.max(Math.min(1 / Math.abs(yy) * 0.2, 1), 0);\n                let color = texture.texture[(u & 0xff) + (v & 0xff) * IMG_WIDTH];\n                const r = ((color >> 0) & 0xff) * scale;\n                const g = ((color >> 8) & 0xff) * scale;\n                const b = ((color >> 16) & 0xff) * scale;\n                color = (255 << 24) | (b << 16) | (g << 8) | (r << 0);\n\n                this.framebuffer[framebufferIndex++] = color;\n            }\n        }\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n    public fakeSphere(normal: Vector4f, vertex: Vertex): void {\n        // https://www.mvps.org/directx/articles/spheremap.htm\n        // vertex.textureCoordinate.u = 0.5 + normal.x * 0.5;\n        // vertex.textureCoordinate.v = 0.5 - normal.y * 0.5;\n        vertex.textureCoordinate.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        vertex.textureCoordinate.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public fakeSphere2(normal: Vector3f, tex: TextureCoordinate): void {\n        tex.u = 0.5 + Math.asin(normal.x) / Math.PI;\n        tex.v = 0.5 - Math.asin(normal.y) / Math.PI;\n    }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizer.drawLineDDA(start, end, color);\n    }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        this.lineRasterizerNo.drawLineDDANoZ(start, end, color);\n    }\n\n    private sphereFunction2(theta: number, phi: number): Vector4f {\n        const pos = new Vector4f(Math.cos(theta) * Math.cos(phi),\n            Math.cos(theta) * Math.sin(phi),\n            Math.sin(theta), 1.0);\n\n        return pos;\n    }\n\n}\n","export default class RandomNumberGenerator {\n\n    private seed: number;\n\n    public constructor() {\n        this.seed = 6;\n    }\n\n    public getFloat(): number {\n        this.seed = (this.seed * 9301 + 49297) % 233280;\n        return this.seed / 233280;\n    }\n\n    public setSeed(seed: number): void {\n        this.seed = seed;\n    }\n\n}\n","export class TextureCoordinate {\n    public u: number;\n    public v: number;\n\n    constructor(u?: number, v?: number) {\n        this.u = u;\n        this.v = v;\n    }\n}\n","import { Color } from './core/Color';\nimport { Vector4f } from './math/index';\nimport { TextureCoordinate } from './TextureCoordinate';\n\nexport class Vertex {\n    public position: Vector4f;\n    public projection: Vector4f = new Vector4f(0,0,0);\n    public normal: Vector4f;\n    public color: Color;\n    public textureCoordinate: TextureCoordinate = new TextureCoordinate();\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Texture } from '../texture/Texture';\n\nexport class ScaleClipBlitter {\n\n    constructor(private framebuffer: Framebuffer) {\n\n    }\n\n    public drawScaledTextureClip(xp: number, yp: number, width: number, height: number, texture: Texture, alphaBlend: number): void {\n        const xStep = texture.width / width;\n        const yStep = texture.height / height;\n        let xx = 0;\n        let yy = 0;\n\n        let newHeight: number;\n        let newWidth: number;\n        let yStart: number;\n        let xStart: number;\n\n        if (yp + height < 0 ||\n            yp > (this.framebuffer.height - 1) ||\n            xp + width < 0 ||\n            xp > (this.framebuffer.width - 1)) {\n            return;\n        }\n\n        if (yp < 0) {\n            yy = yStep * -yp;\n            newHeight = (height + yp) - Math.max(yp + height - this.framebuffer.height, 0);\n            yStart = 0;\n        } else {\n            yStart = yp;\n            newHeight = height - Math.max(yp + height - this.framebuffer.height, 0);\n        }\n\n        let xTextureStart: number;\n\n        if (xp < 0) {\n            xTextureStart = xx = xStep * -xp;\n            newWidth = (width + xp) - Math.max(xp + width - this.framebuffer.width, 0);\n            xStart = 0;\n        } else {\n            xTextureStart = 0;\n            xStart = xp;\n            newWidth = width - Math.max(xp + width - this.framebuffer.width, 0);\n        }\n\n        const alphaScale = 1 / 255 * alphaBlend;\n        let index2 = (xStart) + (yStart) * this.framebuffer.width;\n        for (let y = 0; y < newHeight; y++) {\n            for (let x = 0; x < newWidth; x++) {\n                const xxInt = xx | 0;\n                const yyInt = yy | 0;\n                const textureIndex = xxInt + yyInt * texture.width;\n                // (xxInt > texture.width - 1 ? texture.width - 1 : xxInt) +\n                // (yyInt > texture.height - 1 ? texture.height - 1 : yyInt) * texture.width;\n\n                const alpha = (texture.texture[textureIndex] >> 24 & 0xff) * alphaScale;\n                const inverseAlpha = 1 - alpha;\n\n                const framebufferPixel = this.framebuffer.framebuffer[index2];\n                const texturePixel = texture.texture[textureIndex];\n\n                const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                this.framebuffer.framebuffer[index2] = r | (g << 8) | (b << 16) | (255 << 24);\n                xx += xStep;\n                index2++;\n            }\n            yy += yStep;\n            xx = xTextureStart;\n            index2 += -newWidth + this.framebuffer.width;\n        }\n    }\n\n}\n","/**\n * Color\n *\n * @export\n * @class Color\n * @see https://www.rapidtables.com/web/color/RGB_Color.html\n * @author Johannes Diemke\n */\nexport class Color {\n\n    public static readonly BLACK: Color = new Color(0, 0, 0, 255);\n    public static readonly WHITE: Color = new Color(255, 255, 255, 255);\n    public static readonly RED: Color = new Color(255, 0, 0, 255);\n    public static readonly GREEN: Color = new Color(0, 255, 0, 255);\n    public static readonly LIME: Color = new Color(0, 255, 0, 255);\n    public static readonly BLUE: Color = new Color(0, 0, 255, 255);\n    public static readonly DARK_BLUE: Color = new Color(0, 0, 64, 255);\n    public static readonly YELLOW: Color = new Color(255, 255, 0, 255);\n    public static readonly CYAN: Color = new Color(0, 255, 255, 255);\n    public static readonly MAGENTA: Color = new Color(255, 0, 255, 255);\n    public static readonly SLATE_GRAY: Color = new Color(112, 128, 144, 255);\n    public static readonly DARK_GRAY: Color = new Color(19, 19, 20, 255);\n    public static readonly ORANGE: Color = new Color(255, 160, 122);\n\n    constructor(public r: number = 0, public g: number = 0, public b: number = 0, public a: number = 255) {\n    }\n\n    public toPackedFormat(): number {\n        return this.r | this.g << 8 | this.b << 16 | this.a << 24;\n    }\n\n    public sub(color: Color): Color {\n        return new Color(this.r - color.r, this.g - color.g, this.b - color.b, 255);\n    }\n\n    public add(color: Color): Color {\n        return new Color(this.r + color.r, this.g + color.g, this.b + color.b, 255);\n    }\n\n    public div(num: number): Color {\n        return new Color(this.r / num, this.g / num, this.b / num, 255);\n    }\n\n    public mul(num: number): Color {\n        return new Color(this.r * num, this.g * num, this.b * num, 255);\n    }\n\n}\n","import { Color } from '../../core/Color';\nimport { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { SubPixelRenderingPipeline } from '../../rendering-pipelines/SubPixelRenderingPipeline';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\n\nexport class SubPixelCubeScene extends AbstractScene {\n\n    private static BACKGROUND_COLOR: number = Color.BLACK.toPackedFormat();\n    private subPixelRenderingPipeline: SubPixelRenderingPipeline;\n    private gouraudRenderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        return Promise.all([\n            this.subPixelRenderingPipeline = new SubPixelRenderingPipeline(framebuffer),\n            this.subPixelRenderingPipeline.setCullFace(CullFace.BACK),\n\n            this.gouraudRenderingPipeline = new GouraudShadingRenderingPipeline(framebuffer),\n            this.gouraudRenderingPipeline.setCullFace(CullFace.BACK),\n        ]);\n\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        // rotate slowly to showcase\n        const elapsedTime: number = time * 0.001;\n        framebuffer.clearColorBuffer(SubPixelCubeScene.BACKGROUND_COLOR);\n        framebuffer.clearDepthBuffer();\n\n        // compare subpixel to gourad\n        this.subPixelRenderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime,-3));\n        this.gouraudRenderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime,3));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.subPixelRenderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime,5));\n    }\n\n    private getModelViewMatrix(elapsedTime: number, xShift: number): Matrix4f {\n        const scale: number = 3.2;\n\n        return Matrix4f.constructTranslationMatrix(xShift, 0, -12).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.05)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","export class FullscreenUtils {\n\n    public static toggleFullscreen(element: Element): void {\n        if (!this.fullscreen) {\n            FullscreenUtils.enterFullscreen(element);\n            this.fullscreen = true;\n            this.setStyle(element, 'cursor: none');\n        } else {\n            FullscreenUtils.exitFullscreen();\n            this.fullscreen = false;\n            this.setStyle(element, 'cursor: zoom-in');\n        }\n    }\n\n    private static setStyle(el, css) {\n        el.setAttribute('style', el.getAttribute('style') + ';' + css);\n    }\n\n    public static enterFullscreen(element: Element): void {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        } else if (element.webkitRequestFullScreen) {\n            element.webkitRequestFullScreen();\n        }\n    }\n\n    public static exitFullscreen(): void {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n    private static fullscreen: boolean = false;\n\n}\n","import { Vector4f } from '../math/index';\nimport { FlatShadedFace } from './FlatShadedFace';\nimport { FlatshadedMesh } from './FlatshadedMesh';\n\nexport class AbstractGeometricObject {\n\n    protected mesh: FlatshadedMesh;\n    protected inverse: boolean;\n\n    protected buildMesh(points: Array<Vector4f>, index: Array<number>, inverse: boolean = false): void {\n        this.inverse = inverse;\n        const normals: Array<Vector4f> = new Array<Vector4f>();\n\n        // todo use index array for normals to have less normal objects\n        // compute normal and check wheter the normal already exists. then reuse inded\n        // maybe have a similarity faktor to reuse similar normals\n        for (let i = 0; i < index.length; i += 3) {\n            const normal = points[index[i + 1]].sub(points[index[i]]).cross(points[index[i + 2]].sub(points[index[i]]));\n            normals.push(this.inverse ? normal.normalize().mul(-1) : normal.normalize()); // normalize?\n        }\n\n\n        const faces: Array<FlatShadedFace> = new Array<FlatShadedFace>();\n\n        for (let i = 0; i < index.length; i += 3) {\n\n            faces.push({\n                n1: i / 3,\n                n2: i / 3,\n                n3: i / 3,\n                v1: index[0 + i],\n                v2: index[1 + i],\n                v3: index[2 + i],\n            });\n        }\n\n        // Create class for objects\n        this.mesh = {\n            points,\n            normals,\n            faces,\n            transformedPoints: points.map(() => new Vector4f(0, 0, 0, 0)),\n            transformedNormals: normals.map(() => new Vector4f(0, 0, 0, 0))\n        };\n    }\n\n    public getMesh(): FlatshadedMesh {\n        return this.mesh;\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class Torus extends AbstractGeometricObject {\n\n    public constructor(invert: boolean = false) {\n        super();\n\n        const points: Array<Vector4f> = [];\n\n        const STEPS = 15;\n        const STEPS2 = 12;\n        // find a better solution for inversion\n        // maybe configuration by constructor of base class and construction of geometry\n        // in template method pattern method\n        this.inverse = invert;\n\n        for (let i = 0; i < STEPS; i++) {\n            const frame = this.torusFunction(i * 2 * Math.PI / STEPS);\n            const frame2 = this.torusFunction(i * 2 * Math.PI / STEPS + 0.1);\n            const up = new Vector3f(0.0, 4.0, 0);\n            const right = frame2.sub(frame).cross(up);\n\n            for (let r = 0; r < STEPS2; r++) {\n                const pos = up.mul(Math.sin(r * 2 * Math.PI / STEPS2)).add(right.mul(Math.cos(r * 2 * Math.PI / STEPS2))).add(frame);\n                points.push(new Vector4f(pos.x, pos.y, pos.z, 1.0));\n            }\n        }\n\n        const index: Array<number> = [];\n\n        for (let j = 0; j < STEPS; j++) {\n            for (let i = 0; i < STEPS2; i++) {\n                index.push(((STEPS2 * j) + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (0 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + STEPS2 + (1 + i) % STEPS2) % points.length);\n                index.push(((STEPS2 * j) + (0 + i) % STEPS2) % points.length);\n            }\n        }\n\n        this.buildMesh(points, index);\n    }\n\n    public torusFunction(alpha: number): Vector3f {\n        return new Vector3f(Math.sin(alpha) * 10, 0, Math.cos(alpha) * 10);\n    }\n\n}\n","export class Interpolator {\n\n    public static interpolate(start: number, end: number, current: number): number {\n        if (current <= start) {\n            return 0;\n        }\n        if (current >= end) {\n            return 1;\n        }\n        return (current - start) / (end - start);\n    }\n\n    public static cosineInterpolate(y1: number, y2: number, mu: number): number {\n        if (mu <= y1) { return 0; }\n        if (mu >= y2) { return 1; }\n        const mu2 = (mu - y1) / (y2 - y1);\n        return (1 - Math.cos(mu2 * Math.PI)) / 2;\n    }\n\n}\n","import { Vector3f } from './Vector3f';\n\nexport class Matrix3f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n\n    static constructXRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = cos;\n        matrix.m23 = -sin;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = sin;\n        matrix.m33 = cos;\n\n        return matrix;\n    }\n\n    static constructYRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(angle);\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = -Math.sin(angle);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(angle);\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(angle: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = Math.cos(angle);\n        matrix.m12 = -Math.sin(angle);\n        matrix.m13 = 0.0;\n\n        matrix.m21 = Math.sin(angle);\n        matrix.m22 = Math.cos(angle);\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(xScale: number, yScale: number, zScale: number) {\n        const matrix = new Matrix3f();\n\n        matrix.m11 = xScale;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = yScale;\n        matrix.m23 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = zScale;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix3f): Matrix3f {\n        const result = new Matrix3f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33;\n\n        return result;\n\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z);\n    }\n}","/**\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_introduction.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_00_research.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_01_pipeline.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_02_transformations.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_03_projections.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_04_lighting.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_05_rasterization.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_06_texturing.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_07_shadows.pdf\n * https://cg.informatik.uni-freiburg.de/course_notes/graphics_08_transparencyReflection.pdf\n * https://cg.informatik.uni-freiburg.de/teaching.htm\n * @author Johannes Diemke\n * @since 2017-05-07\n */\n\nimport { Vector3f } from './Vector3f';\nimport { Vector4f } from './Vector4f';\n\nexport class Matrix4f {\n\n    public m11: number;\n    public m12: number;\n    public m13: number;\n    public m14: number;\n\n    public m21: number;\n    public m22: number;\n    public m23: number;\n    public m24: number;\n\n    public m31: number;\n    public m32: number;\n    public m33: number;\n    public m34: number;\n\n    public m41: number;\n    public m42: number;\n    public m43: number;\n    public m44: number;\n\n    static constructIdentityMatrix(): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n\n    public setIdentityMatrix(): void {\n\n\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public transpose(): Matrix4f {\n        const transpose: Matrix4f = new Matrix4f();\n\n        transpose.m11 = this.m11;\n        transpose.m12 = this.m21;\n        transpose.m13 = this.m31;\n        transpose.m14 = this.m41;\n\n        transpose.m21 = this.m12;\n        transpose.m22 = this.m22;\n        transpose.m23 = this.m32;\n        transpose.m24 = this.m42;\n\n        transpose.m31 = this.m13;\n        transpose.m32 = this.m23;\n        transpose.m33 = this.m33;\n        transpose.m34 = this.m43;\n\n        transpose.m41 = this.m14;\n        transpose.m42 = this.m24;\n        transpose.m43 = this.m34;\n        transpose.m44 = this.m44;\n\n        return transpose;\n    }\n\n    public computeNormalMatrix(): Matrix4f {\n        // http://www.lighthouse3d.com/tutorials/glsl-12-tutorial/the-normal-matrix/\n        // https://www.gamedev.net/forums/topic/443040-inverse-of-modelview-matrix/\n        // https://computergraphics.stackexchange.com/questions/1502/why-is-the-transposed-inverse-of-the-model-view-matrix-used-to-transform-the-nor\n        return this.inverse().transpose();\n    }\n\n    public inverse(): Matrix4f {\n        // Inverse hack\n        // - only works when the MV matrix only contains\n        // translation and rotation and scaling that is the same in all directions\n\n        const inverseTranslation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseTranslation.m14 = -this.m14;\n        inverseTranslation.m24 = -this.m24;\n        inverseTranslation.m34 = -this.m34;\n\n        const scale1 = 1.0 / Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12 + this.m13 * this.m13);\n        const scale2 = 1.0 / Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22 + this.m23 * this.m23);\n        const scale3 = 1.0 / Math.sqrt(this.m31 * this.m31 + this.m32 * this.m32 + this.m33 * this.m33);\n        const inverseRotation: Matrix4f = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale1;\n        inverseRotation.m21 = this.m12 * scale1;\n        inverseRotation.m31 = this.m13 * scale1;\n\n        inverseRotation.m12 = this.m21 * scale2;\n        inverseRotation.m22 = this.m22 * scale2;\n        inverseRotation.m32 = this.m23 * scale2;\n\n        inverseRotation.m13 = this.m31 * scale3;\n        inverseRotation.m23 = this.m32 * scale3;\n        inverseRotation.m33 = this.m33 * scale3;\n\n        return inverseRotation.multiplyMatrix(inverseTranslation);\n    }\n\n    public getInverseRotation(): Matrix4f {\n        const scale = 1.0;\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11 * scale;\n        inverseRotation.m21 = this.m12 * scale;\n        inverseRotation.m31 = this.m13 * scale;\n\n        inverseRotation.m12 = this.m21 * scale;\n        inverseRotation.m22 = this.m22 * scale;\n        inverseRotation.m32 = this.m23 * scale;\n\n        inverseRotation.m13 = this.m31 * scale;\n        inverseRotation.m23 = this.m32 * scale;\n        inverseRotation.m33 = this.m33 * scale;\n\n        return inverseRotation;\n    }\n\n    public getRotation(): Matrix4f {\n\n        const inverseRotation = Matrix4f.constructIdentityMatrix();\n        inverseRotation.m11 = this.m11;\n        inverseRotation.m21 = this.m21;\n        inverseRotation.m31 = this.m31;\n\n        inverseRotation.m12 = this.m12;\n        inverseRotation.m22 = this.m22;\n        inverseRotation.m32 = this.m32;\n\n        inverseRotation.m13 = this.m13;\n        inverseRotation.m23 = this.m23;\n        inverseRotation.m33 = this.m33;\n\n        return inverseRotation;\n    }\n\n    static constructShadowMatrix(): Matrix4f {\n        const planePoint: Vector3f = new Vector3f(0, -1.5, 0);\n        const planeNormal: Vector3f = new Vector3f(0, 1, 0);\n        const lightPosition: Vector3f = new Vector3f(0, 11, 0);\n\n        const d = -planePoint.dot(planeNormal);\n        const NdotL = planeNormal.x * lightPosition.x +\n            planeNormal.y * lightPosition.y +\n            planeNormal.z * lightPosition.z;\n\n        const shadowMatrix: Matrix4f = new Matrix4f();\n\n        shadowMatrix.m11 = NdotL + d - lightPosition.x * planeNormal.x;\n        shadowMatrix.m12 = - lightPosition.x * planeNormal.y;\n        shadowMatrix.m13 = - lightPosition.x * planeNormal.z;\n        shadowMatrix.m14 = - lightPosition.x * d;\n\n        shadowMatrix.m21 = - lightPosition.y * planeNormal.x;\n        shadowMatrix.m22 = NdotL + d - lightPosition.y * planeNormal.y;\n        shadowMatrix.m23 = - lightPosition.y * planeNormal.z;\n        shadowMatrix.m24 = - lightPosition.y * d;\n\n        shadowMatrix.m31 = - lightPosition.z * planeNormal.x;\n        shadowMatrix.m32 = - lightPosition.z * planeNormal.y;\n        shadowMatrix.m33 = NdotL + d - lightPosition.z * planeNormal.z;\n        shadowMatrix.m34 = - lightPosition.z * d;\n\n        shadowMatrix.m41 = - planeNormal.x;\n        shadowMatrix.m42 = - planeNormal.y;\n        shadowMatrix.m43 = - planeNormal.z;\n        shadowMatrix.m44 = NdotL;\n\n        return shadowMatrix;\n\n    }\n\n    static constructTranslationMatrix(tx: number, ty: number, tz: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = tx;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = ty;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = tz;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setTranslationMatrix(tx: number, ty: number, tz: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = tx;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = ty;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = tz;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructXRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = 1.0;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = -Math.sin(alpha);\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = Math.sin(alpha);\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public setXRotationMatrix(alpha: number): void {\n        this.m11 = 1.0;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = Math.cos(alpha);\n        this.m23 = -Math.sin(alpha);\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = Math.sin(alpha);\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setZRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = -Math.sin(alpha);\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = Math.sin(alpha);\n        this.m22 = Math.cos(alpha);\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = 1.0;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setScaleMatrix(sx: number, sy: number, sz: number): void {\n        this.m11 = sx;\n        this.m12 = 0.0;\n        this.m13 = 0.0;\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = sy;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = 0.0;\n        this.m32 = 0.0;\n        this.m33 = sz;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    public setYRotationMatrix(alpha: number): void {\n        this.m11 = Math.cos(alpha);\n        this.m12 = 0.0;\n        this.m13 = Math.sin(alpha);\n        this.m14 = 0.0;\n\n        this.m21 = 0.0;\n        this.m22 = 1.0;\n        this.m23 = 0.0;\n        this.m24 = 0.0;\n\n        this.m31 = -Math.sin(alpha);\n        this.m32 = 0.0;\n        this.m33 = Math.cos(alpha);\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n\n    public setRotationMatrix(x: number,y: number,z: number, alpha: number): void {\n        const c = Math.cos(Math.PI * 2 *alpha / 360 );\n        const s = Math.sin(Math.PI * 2 *alpha / 360 );\n        const vector = new Vector3f(x,y,z);\n        vector.normalize2();\n\n        this.m11 = (1.0 - c) * vector.x * vector.x + c;\n        this.m12 = (1.0 - c) * vector.x * vector.y - s * vector.z;\n        this.m13 = (1.0 - c) * vector.x * vector.z + s * vector.y;\n        this.m14 = 0.0;\n\n        this.m21 = (1.0 - c) * vector.x * vector.y + s * vector.z;\n        this.m22 = (1.0 - c) * vector.y * vector.y + c;\n        this.m23 = (1.0 - c) * vector.y * vector.z - s * vector.x;\n        this.m24 = 0.0;\n\n        this.m31 = (1.0 - c) * vector.x * vector.z - s * vector.y;\n        this.m32 = (1.0 - c) * vector.y * vector.z + s * vector.x;\n        this.m33 = (1.0 - c) * vector.z * vector.z + c;\n        this.m34 = 0.0;\n\n        this.m41 = 0.0;\n        this.m42 = 0.0;\n        this.m43 = 0.0;\n        this.m44 = 1.0;\n    }\n\n    static constructYRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = 0.0;\n        matrix.m13 = Math.sin(alpha);\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = 1.0;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = -Math.sin(alpha);\n        matrix.m32 = 0.0;\n        matrix.m33 = Math.cos(alpha);\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructZRotationMatrix(alpha: number): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = Math.cos(alpha);\n        matrix.m12 = -Math.sin(alpha);\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = Math.sin(alpha);\n        matrix.m22 = Math.cos(alpha);\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = 1.0;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    static constructScaleMatrix(sx: number, sy: number = sx, sz: number = sy): Matrix4f {\n        const matrix: Matrix4f = new Matrix4f();\n\n        matrix.m11 = sx;\n        matrix.m12 = 0.0;\n        matrix.m13 = 0.0;\n        matrix.m14 = 0.0;\n\n        matrix.m21 = 0.0;\n        matrix.m22 = sy;\n        matrix.m23 = 0.0;\n        matrix.m24 = 0.0;\n\n        matrix.m31 = 0.0;\n        matrix.m32 = 0.0;\n        matrix.m33 = sz;\n        matrix.m34 = 0.0;\n\n        matrix.m41 = 0.0;\n        matrix.m42 = 0.0;\n        matrix.m43 = 0.0;\n        matrix.m44 = 1.0;\n\n        return matrix;\n    }\n\n    public multiplyMatrix(matrix: Matrix4f): Matrix4f {\n        const result = new Matrix4f();\n\n        result.m11 = this.m11 * matrix.m11 + this.m12 * matrix.m21 + this.m13 * matrix.m31 + this.m14 * matrix.m41;\n        result.m21 = this.m21 * matrix.m11 + this.m22 * matrix.m21 + this.m23 * matrix.m31 + this.m24 * matrix.m41;\n        result.m31 = this.m31 * matrix.m11 + this.m32 * matrix.m21 + this.m33 * matrix.m31 + this.m34 * matrix.m41;\n        result.m41 = this.m41 * matrix.m11 + this.m42 * matrix.m21 + this.m43 * matrix.m31 + this.m44 * matrix.m41;\n\n        result.m12 = this.m11 * matrix.m12 + this.m12 * matrix.m22 + this.m13 * matrix.m32 + this.m14 * matrix.m42;\n        result.m22 = this.m21 * matrix.m12 + this.m22 * matrix.m22 + this.m23 * matrix.m32 + this.m24 * matrix.m42;\n        result.m32 = this.m31 * matrix.m12 + this.m32 * matrix.m22 + this.m33 * matrix.m32 + this.m34 * matrix.m42;\n        result.m42 = this.m41 * matrix.m12 + this.m42 * matrix.m22 + this.m43 * matrix.m32 + this.m44 * matrix.m42;\n\n        result.m13 = this.m11 * matrix.m13 + this.m12 * matrix.m23 + this.m13 * matrix.m33 + this.m14 * matrix.m43;\n        result.m23 = this.m21 * matrix.m13 + this.m22 * matrix.m23 + this.m23 * matrix.m33 + this.m24 * matrix.m43;\n        result.m33 = this.m31 * matrix.m13 + this.m32 * matrix.m23 + this.m33 * matrix.m33 + this.m34 * matrix.m43;\n        result.m43 = this.m41 * matrix.m13 + this.m42 * matrix.m23 + this.m43 * matrix.m33 + this.m44 * matrix.m43;\n\n        result.m14 = this.m11 * matrix.m14 + this.m12 * matrix.m24 + this.m13 * matrix.m34 + this.m14 * matrix.m44;\n        result.m24 = this.m21 * matrix.m14 + this.m22 * matrix.m24 + this.m23 * matrix.m34 + this.m24 * matrix.m44;\n        result.m34 = this.m31 * matrix.m14 + this.m32 * matrix.m24 + this.m33 * matrix.m34 + this.m34 * matrix.m44;\n        result.m44 = this.m41 * matrix.m14 + this.m42 * matrix.m24 + this.m43 * matrix.m34 + this.m44 * matrix.m44;\n\n        return result;\n    }\n\n    public multiply2(matrix: Matrix4f, matrix2: Matrix4f): void {\n        this.m11 = matrix.m11 * matrix2.m11 + matrix.m12 * matrix2.m21 + matrix.m13 * matrix2.m31 + matrix.m14 * matrix2.m41;\n        this.m21 = matrix.m21 * matrix2.m11 + matrix.m22 * matrix2.m21 + matrix.m23 * matrix2.m31 + matrix.m24 * matrix2.m41;\n        this.m31 = matrix.m31 * matrix2.m11 + matrix.m32 * matrix2.m21 + matrix.m33 * matrix2.m31 + matrix.m34 * matrix2.m41;\n        this.m41 = matrix.m41 * matrix2.m11 + matrix.m42 * matrix2.m21 + matrix.m43 * matrix2.m31 + matrix.m44 * matrix2.m41;\n\n        this.m12 = matrix.m11 * matrix2.m12 + matrix.m12 * matrix2.m22 + matrix.m13 * matrix2.m32 + matrix.m14 * matrix2.m42;\n        this.m22 = matrix.m21 * matrix2.m12 + matrix.m22 * matrix2.m22 + matrix.m23 * matrix2.m32 + matrix.m24 * matrix2.m42;\n        this.m32 = matrix.m31 * matrix2.m12 + matrix.m32 * matrix2.m22 + matrix.m33 * matrix2.m32 + matrix.m34 * matrix2.m42;\n        this.m42 = matrix.m41 * matrix2.m12 + matrix.m42 * matrix2.m22 + matrix.m43 * matrix2.m32 + matrix.m44 * matrix2.m42;\n\n        this.m13 = matrix.m11 * matrix2.m13 + matrix.m12 * matrix2.m23 + matrix.m13 * matrix2.m33 + matrix.m14 * matrix2.m43;\n        this.m23 = matrix.m21 * matrix2.m13 + matrix.m22 * matrix2.m23 + matrix.m23 * matrix2.m33 + matrix.m24 * matrix2.m43;\n        this.m33 = matrix.m31 * matrix2.m13 + matrix.m32 * matrix2.m23 + matrix.m33 * matrix2.m33 + matrix.m34 * matrix2.m43;\n        this.m43 = matrix.m41 * matrix2.m13 + matrix.m42 * matrix2.m23 + matrix.m43 * matrix2.m33 + matrix.m44 * matrix2.m43;\n\n        this.m14 = matrix.m11 * matrix2.m14 + matrix.m12 * matrix2.m24 + matrix.m13 * matrix2.m34 + matrix.m14 * matrix2.m44;\n        this.m24 = matrix.m21 * matrix2.m14 + matrix.m22 * matrix2.m24 + matrix.m23 * matrix2.m34 + matrix.m24 * matrix2.m44;\n        this.m34 = matrix.m31 * matrix2.m14 + matrix.m32 * matrix2.m24 + matrix.m33 * matrix2.m34 + matrix.m34 * matrix2.m44;\n        this.m44 = matrix.m41 * matrix2.m14 + matrix.m42 * matrix2.m24 + matrix.m43 * matrix2.m34 + matrix.m44 * matrix2.m44;\n    }\n\n    public multiply(vector: Vector3f): Vector3f {\n        return new Vector3f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34);\n    }\n\n    public multiplyHom(vector: Vector4f): Vector4f {\n        return new Vector4f(this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w,\n            this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w,\n            this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w,\n            this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w);\n    }\n\n    public multiplyHomArr(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n    }\n\n    public multiplyHomArr2(vector: Vector4f, result: Vector4f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14 * vector.w;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24 * vector.w;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34 * vector.w;\n        result.w = this.m41 * vector.x + this.m42 * vector.y + this.m43 * vector.z + this.m44 * vector.w;\n        result.x /= result.w;\n        result.y /= result.w;\n        result.z /= result.w;\n    }\n\n    public multiplyArr(vector: Vector3f, result: Vector3f): void {\n        result.x = this.m11 * vector.x + this.m12 * vector.y + this.m13 * vector.z + this.m14;\n        result.y = this.m21 * vector.x + this.m22 * vector.y + this.m23 * vector.z + this.m24;\n        result.z = this.m31 * vector.x + this.m32 * vector.y + this.m33 * vector.z + this.m34;\n    }\n\n}\n","\nexport class Vector2f {\n\n    constructor(public x: number, public y: number) {\n\n    }\n\n    public perp(): Vector2f {\n        return new Vector2f(-this.y, this.x);\n    }\n\n    public sub(vec: Vector2f): Vector2f {\n        return new Vector2f(this.x - vec.x, this.y - vec.y);\n    }\n\n    public mul(scal: number): Vector2f {\n        return new Vector2f(this.x * scal, this.y * scal);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public normalize(): Vector2f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public dot(vec: Vector2f): number {\n        return this.x * vec.x + this.y * vec.y;\n    }\n\n}\n","export class Vector3f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public mult(scale: number): Vector3f {\n        return new Vector3f(this.x * scale, this.y * scale, this.z * scale);\n    }\n\n    public sub(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x - vec.x, this.y - vec.y, this.z - vec.z);\n    }\n\n    public sub2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public mul(scal: number): Vector3f {\n        return new Vector3f(this.x * scal, this.y * scal, this.z * scal);\n    }\n\n    public add(vec: Vector3f): Vector3f {\n        return new Vector3f(this.x + vec.x, this.y + vec.y, this.z + vec.z);\n    }\n\n    public add2(vec: Vector3f, vec2: Vector3f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n    public cross(vec: Vector3f): Vector3f {\n        return new Vector3f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x);\n    }\n\n    public cross2(vec1: Vector3f, vec2: Vector3f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    public normalize(): Vector3f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n    public dot(vec: Vector3f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n}\n","export class Vector4f {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    constructor(x: number, y: number, z: number, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    public sub(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x - vec.x, this.y - vec.y, this.z - vec.z, this.w - vec.w);\n    }\n\n    public add(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x + vec.x, this.y + vec.y, this.z + vec.z, this.w + vec.w);\n    }\n\n    public cross(vec: Vector4f): Vector4f {\n        return new Vector4f(this.y * vec.z - this.z * vec.y,\n            this.z * vec.x - this.x * vec.z,\n            this.x * vec.y - this.y * vec.x, 0.0);\n    }\n\n    public normalize(): Vector4f {\n        const reci: number = 1.0 / this.length();\n        return this.mul(reci);\n    }\n\n    public length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n\n    public sub2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.x - vec2.x;\n        this.y = vec1.y - vec2.y;\n        this.z = vec1.z - vec2.z;\n    }\n\n    public add2(vec: Vector4f, vec2: Vector4f): void {\n        this.x = vec.x + vec2.x;\n        this.y = vec.y + vec2.y;\n        this.z = vec.z + vec2.z;\n    }\n\n\n    public mul(scal: number): Vector4f {\n        return new Vector4f(this.x * scal, this.y * scal, this.z * scal, this.w);\n    }\n\n    public componentWiseMul(vec: Vector4f): Vector4f {\n        return new Vector4f(this.x * vec.x, this.y * vec.y, this.z * vec.z, this.w * vec.w);\n    }\n\n    public dot(vec: Vector4f): number {\n        return this.x * vec.x + this.y * vec.y + this.z * vec.z;\n    }\n\n    public cross2(vec1: Vector4f, vec2: Vector4f): void {\n        this.x = vec1.y * vec2.z - vec1.z * vec2.y;\n        this.y = vec1.z * vec2.x - vec1.x * vec2.z;\n        this.z = vec1.x * vec2.y - vec1.y * vec2.x;\n    }\n\n    public normalize2(): void {\n        const reci: number = 1.0 / this.length();\n        this.x *= reci;\n        this.y *= reci;\n        this.z *= reci;\n    }\n\n\n}\n","export { Vector4f } from './Vector4f';\nexport { Vector3f } from './Vector3f';\n\nexport { Matrix3f } from './Matrix3';\nexport { Matrix4f } from './Matrix4f';\nexport { Vector2f } from './Vector2f';\n","import { Framebuffer } from \"../Framebuffer\";\nimport { Vertex } from \"../Vertex\";\nimport { AbstractTriangleRasterizer } from \"./AbstractTriangleRasterizer\";\n\nexport abstract class AbstractScannlineTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    private temp: Vertex = null;\n    \n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n\n        if (p1.projection.y > p3.projection.y) {\n            this.temp = p1;\n            p1 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y > p2.projection.y) {\n            this.temp = p1;\n            p1 = p2;\n            p2 = this.temp;\n        }\n\n        if (p2.projection.y > p3.projection.y) {\n            this.temp = p2;\n            p2 = p3;\n            p3 = this.temp;\n        }\n\n        if (p1.projection.y === p3.projection.y) {\n            return;\n        } else {\n            const x: number = (p3.projection.x - p1.projection.x) * (p2.projection.y - p1.projection.y) /\n                (p3.projection.y - p1.projection.y) + p1.projection.x;\n            if (x > p2.projection.x) {\n                this.fillLongRightTriangle(framebuffer, p1, p2, p3);\n            } else {\n                this.fillLongLeftTriangle(framebuffer,p1,p2,p3);\n            }\n        }\n    }\n\n    protected abstract fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n    protected abstract fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void;\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\n\nexport abstract class AbstractTriangleRasterizer {\n\n    public abstract drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void;\n\n}\n","import { Color } from '../core/Color';\n\nexport class ColorInterpolator {\n\n    public startColor: Color = new Color();\n    public colorSlope: Color = new Color();\n\n    public setup(c1: Color, c2: Color, distance: number): void {\n        this.colorSlope.r = (c2.r - c1.r) / distance;\n        this.colorSlope.g = (c2.g - c1.g) / distance;\n        this.colorSlope.b = (c2.b - c1.b) / distance;\n\n        this.startColor.r = c1.r;\n        this.startColor.g = c1.g;\n        this.startColor.b = c1.b;\n    }\n\n    public advance(): void {\n        this.startColor.r += this.colorSlope.r;\n        this.startColor.g += this.colorSlope.g;\n        this.startColor.b += this.colorSlope.b;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class FlatShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n    private slope1: number;\n    private slope2: number;\n    private zslope1: number;\n    private zslope2: number;\n    private curz1: number;\n    private curz2: number;\n    private xPosition: number;\n    private xPosition2: number;\n    private yPosition: number;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        this.slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        this.slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        this.zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        this.zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n        this.slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        this.zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n\n        this.xPosition = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceLeft, color);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        const color: number = v1.color.toPackedFormat();\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        this.slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        this.slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        this.zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        this.zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        this.curz1 = 1.0 / v1.projection.z;\n        this.curz2 = 1.0 / v1.projection.z;\n\n        this.xPosition = v1.projection.x;\n        this.xPosition2 = v1.projection.x;\n        this.yPosition = v1.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        this.slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        this.zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        this.curz2 = 1.0 / v2.projection.z;\n        this.xPosition2 = v2.projection.x;\n        this.yPosition = v2.projection.y;\n\n        this.drawSpan(framebuffer, yDistanceRight, color);\n    }\n\n    drawSpan(framebuffer: Framebuffer, distance: number, color: number) {\n        for (let i = 0; i < distance; i++) {\n            const length = (this.xPosition2) - (this.xPosition);\n            const spanzStep = Math.round(this.curz2 - this.curz1) / length;\n            let wStart = this.curz1;\n            for (let j = 0; j < length; j++) {\n                const framebufferIndex = Math.round(this.yPosition) * framebuffer.width + Math.round(this.xPosition + j);\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = color;\n                }\n                wStart += spanzStep;\n            }\n            this.xPosition += this.slope1;\n            this.xPosition2 += this.slope2;\n            this.yPosition++;\n            this.curz1 += this.zslope1;\n            this.curz2 += this.zslope2;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\nimport { ColorInterpolator } from './ColorInterpolator';\nimport { SlopeInterpolator } from './SlopeInterpolator';\n\nexport class GouraudShadingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n    private colorInterpolator1: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator2: ColorInterpolator = new ColorInterpolator();\n    private colorInterpolator3: ColorInterpolator = new ColorInterpolator();\n    private rowColorInterpolator: ColorInterpolator = new ColorInterpolator();\n    private leftSlope: SlopeInterpolator = new SlopeInterpolator();\n    private rightSlope: SlopeInterpolator = new SlopeInterpolator();\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v2);\n        this.rightSlope.setup(v1, v3);\n        this.colorInterpolator1.setup(v1.color, v2.color, this.leftSlope.yDistance);\n        this.colorInterpolator2.setup(v1.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator1, this.colorInterpolator2, this.leftSlope, this.rightSlope);\n\n        this.leftSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.leftSlope, this.colorInterpolator3, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        this.leftSlope.setup(v1, v3);\n        this.rightSlope.setup(v1, v2);\n        this.colorInterpolator2.setup(v1.color, v2.color, this.rightSlope.yDistance);\n        this.colorInterpolator1.setup(v1.color, v3.color, this.leftSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator2,this.leftSlope, this.rightSlope);\n\n        this.rightSlope.setup(v2, v3);\n        this.colorInterpolator3.setup(v2.color, v3.color, this.rightSlope.yDistance);\n        this.drawSpan(framebuffer, this.rightSlope, this.colorInterpolator1, this.colorInterpolator3,this.leftSlope, this.rightSlope);\n    }\n\n    drawSpan(framebuffer: Framebuffer, shortSlope: SlopeInterpolator, colorInterpolator1: ColorInterpolator, colorInterpolator2: ColorInterpolator,\n        leftSlope: SlopeInterpolator, rightSlope: SlopeInterpolator) {\n        \n        let yPosition = shortSlope.yStart;\n        for (let i = 0; i < shortSlope.yDistance; i++) {\n            const length = Math.round(rightSlope.currentX) - Math.round(leftSlope.currentX);\n            this.rowColorInterpolator.setup(colorInterpolator1.startColor, colorInterpolator2.startColor, length);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(leftSlope.currentX);\n            const spanzStep = (rightSlope.currentZ - leftSlope.currentZ) / length;\n            let wStart = leftSlope.currentZ;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    framebuffer.framebuffer[framebufferIndex] = this.rowColorInterpolator.startColor.toPackedFormat();\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                this.rowColorInterpolator.advance();\n            }\n\n            leftSlope.advance()\n            rightSlope.advance();\n           \n            colorInterpolator1.advance();\n            colorInterpolator2.advance();\n\n            yPosition++;\n        }\n    }\n\n}\n","import { Vertex } from '../Vertex';\n\nexport class SlopeInterpolator {\n\n    yDistance: number;\n    slope: number;\n    zslope: number;\n    currentZ: number;\n    currentX: number;\n    yStart: number;\n\n    setup(top: Vertex, bottom: Vertex) {\n        this.yDistance = bottom.projection.y - top.projection.y;\n        this.slope = (bottom.projection.x - top.projection.x) / this.yDistance;\n        this.zslope = (1 / bottom.projection.z - 1 / top.projection.z) / this.yDistance;\n        this.currentZ = 1.0 / top.projection.z;\n        this.currentX = top.projection.x;\n        this.yStart = top.projection.y;\n    }\n\n    advance() {\n        this.currentX += this.slope;\n        this.currentZ += this.zslope;\n    }\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractTriangleRasterizer } from './AbstractTriangleRasterizer';\n\nexport class SubPixelTriangleRasterizer extends AbstractTriangleRasterizer {\n\n    // create depth buffer\n    // use Uint16 because we only need a little precision and we save 2 bytes per pixel this way\n    private depthBuffer;\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n        this.depthBuffer = new Uint16Array(this.framebuffer.width * this.framebuffer.height)\n        // add some properties and methods to make using this easier\n        this.depthBuffer.width = this.framebuffer.width;\n        this.depthBuffer.height = this.framebuffer.height;\n        this.depthBuffer.clear = function () { this.fill(65535); };\n        this.depthBuffer.getDepth = function (x, y) { return this[y * this.width + x] / 65535.0; };\n        this.depthBuffer.setDepth = function (x, y, v) { this[y * this.width + x] = (v * 65535) | 0; };\n        this.depthBuffer.testDepth = function (x, y, v) {\n            const value = (v * 65535) | 0;\n            if (value < 0 || value > 65535) {\n                return false;\n            }\n            const index = y * this.width + x;\n            if (value < this[index]) {\n                this[index] = value;\n                return true;\n            }\n            return false;\n        };\n        this.depthBuffer.clear();\n    }\n\n    // returns true if vertices are in counterclockwise order\n    isCcw(v0, v1, v2) {\n        return (v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x) >= 0;\n    }\n\n    cross(a, b, c) {\n        return (b.x - a.x) * -(c.y - a.y) - -(b.y - a.y) * (c.x - a.x);\n    }\n\n    // https://kitsunegames.com/assets/software-3d-rendering-in-javascript-pt2/result/\n    public fillTriangle(framebuffer: Framebuffer, v0: Vertex, v1: Vertex, v2: Vertex) {\n\n        if (this.isCcw(v0.projection, v1.projection, v2.projection)) {\n            return;\n        }\n\n        const minX = Math.floor(Math.min(v0.projection.x, v1.projection.x, v2.projection.x));\n        const maxX = Math.ceil(Math.max(v0.projection.x, v1.projection.x, v2.projection.x));\n        const minY = Math.floor(Math.min(v0.projection.y, v1.projection.y, v2.projection.y));\n        const maxY = Math.ceil(Math.max(v0.projection.y, v1.projection.y, v2.projection.y));\n\n        // precalculate the area of the parallelogram defined by our triangle\n        const area = this.cross(v0.projection, v1.projection, v2.projection);\n\n        // calculate edges\n        const edge0 = { x: v2.projection.x - v1.projection.x, y: v2.projection.y - v1.projection.y };\n        const edge1 = { x: v0.projection.x - v2.projection.x, y: v0.projection.y - v2.projection.y };\n        const edge2 = { x: v1.projection.x - v0.projection.x, y: v1.projection.y - v0.projection.y };\n\n        // calculate which edges are right edges so we can easily skip them\n        // right edges go up, or (bottom edges) are horizontal edges that go right\n        const edgeRight0 = edge0.y < 0 || (edge0.y === 0 && edge0.x > 0);\n        const edgeRight1 = edge1.y < 0 || (edge1.y === 0 && edge0.x > 0);\n        const edgeRight2 = edge2.y < 0 || (edge2.y === 0 && edge0.x > 0);\n\n        // p is our 2D pixel location point\n        const p = { x: null, y: null };\n\n        // fragment is the resulting pixel with all the vertex attributes interpolated\n        const fragment = {\n            r: undefined,\n            g: undefined,\n            b: undefined,\n            a: undefined,\n            z: 0\n        };\n\n        for (let y = minY; y < maxY; y += .5) {\n            for (let x = minX; x < maxX; x += .5) {\n                // sample from the center of the pixel, not the top-left corner\n                p.x = x + 0.5; p.y = y + .5;\n\n                // calculate vertex weights\n                // should divide these by area, but we do that later\n                // so we divide once, not three times\n                const w0 = this.cross(v1.projection, v2.projection, p);\n                const w1 = this.cross(v2.projection, v0.projection, p);\n                const w2 = this.cross(v0.projection, v1.projection, p);\n\n                // if the point is not inside our polygon, skip fragment\n                if (w0 < 0 || w1 < 0 || w2 < 0) {\n                    continue;\n                }\n\n                // if this is a right or bottom edge, skip fragment (top-left rule):\n                if ((w0 === 0 && edgeRight0) || (w1 === 0 && edgeRight1) || (w2 === 0 && edgeRight2)) {\n                    continue;\n                }\n\n                // interpolate our vertices\n                fragment.r = (w0 * v0.color.r + w1 * v1.color.r + w2 * v2.color.r) / area;\n                fragment.g = (w0 * v0.color.g + w1 * v1.color.g + w2 * v2.color.g) / area;\n                fragment.b = (w0 * v0.color.b + w1 * v1.color.b + w2 * v2.color.b) / area;\n                fragment.a = (w0 * v0.projection.x + w1 * v1.projection.x + w2 * v2.projection.x) / area;\n                fragment.z = (w0 * v0.projection.z + w1 * v1.projection.z + w2 * v2.projection.z) / area;\n\n                const fragColor = new Color(\n                    fragment.r, fragment.g, fragment.b, fragment.a\n                )\n\n                // this can be optimized to only draw aliased pixels on the edges\n\n                // if (this.depthBuffer.testDepth(x, y, fragment.z)) {\n                framebuffer.drawPixelAntiAliasedSpacial(x, y, fragColor.toPackedFormat());\n                // }\n\n            }\n        }\n    }\n\n    /**\n     * Triangle rasterization using edge-walking strategy for scan-conversion.\n     * Internally DDA is used for edge-walking.\n     */\n    public drawTriangleDDA(framebuffer: Framebuffer, p1: Vertex, p2: Vertex, p3: Vertex): void {\n        this.fillTriangle(framebuffer, p1, p2, p3);\n        // this.drawTriangleDDAOriginal(framebuffer, p1, p2, p3);\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { AbstractRenderingPipeline } from '../rendering-pipelines/AbstractRenderingPipeline';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedAlphaBlendingTriangleRasterizer extends AbstractScannlineTriangleRasterizer {\n\n\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer, private pipeline: AbstractRenderingPipeline) {\n        super();\n    }\n\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n\n\n\n\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                const currentColor = this.framebuffer.framebuffer[framebufferIndex];\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n\n                    // TODO: move out of loops!\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (currentColor >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (currentColor >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (currentColor >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer,  v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v  / v2.projection.z - v1.textureCoordinate.v  / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * this.framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < this.framebuffer.wBuffer[framebufferIndex]) {\n                    this.framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * this.framebuffer.bob.width), this.framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * this.framebuffer.bob.height), this.framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = this.framebuffer.bob.texture[u + v * this.framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    const alpha = this.pipeline.alpha * (color2 >> 24 & 0xff) / 255;\n                    const inverseAlpha = 1 - alpha;\n\n\n                    const r = (this.framebuffer.framebuffer[framebufferIndex] >> 0 & 0xff) * inverseAlpha + (color2 >> 0 & 0xff) * alpha;\n                    const g = (this.framebuffer.framebuffer[framebufferIndex] >> 8 & 0xff) * inverseAlpha + (color2 >> 8 & 0xff) * alpha;\n                    const b = (this.framebuffer.framebuffer[framebufferIndex] >> 16 & 0xff) * inverseAlpha + (color2 >> 16 & 0xff) * alpha;\n\n                    this.framebuffer.framebuffer[framebufferIndex] = r | (g << 8) | (b << 16) | (255 << 24);\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vertex } from '../Vertex';\nimport { AbstractScannlineTriangleRasterizer } from './AbstractScanlineTriangleRasterizer';\n\nexport class TexturedTriangleRasterizer extends AbstractScannlineTriangleRasterizer{\n\n    // requires\n    // bob und wbuffer\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    protected fillLongRightTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        // left slope\n        let yDistanceLeft = v2.projection.y - v1.projection.y;\n        let slope1 = (v2.projection.x - v1.projection.x) / yDistanceLeft;\n        let tslope1u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope1v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let zslope1 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n        let curz1 = 1.0 / v1.projection.z;\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition = v1.projection.x;\n\n        // right slope\n        const yDistanceRight = v3.projection.y - v1.projection.y;\n        const slope2 = (v3.projection.x - v1.projection.x) / yDistanceRight;\n        const tslope2u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n        const tslope2v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n        const zslope2 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        let curz2 = 1.0 / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n        let xPosition2 = v1.projection.x;\n\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n\n        yDistanceLeft = v3.projection.y - v2.projection.y;\n\n        if (yDistanceLeft === 0) {\n            return;\n        }\n\n        slope1 = (v3.projection.x - v2.projection.x) / yDistanceLeft;\n        zslope1 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceLeft;\n        tslope1u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceLeft;\n        tslope1v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceLeft;\n\n        curz1 = 1.0 / v2.projection.z;\n        curu1 = v2.textureCoordinate.u / v2.projection.z;\n        curv1 = v2.textureCoordinate.v / v2.projection.z;\n        xPosition = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceLeft; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n    protected fillLongLeftTriangle(framebuffer: Framebuffer, v1: Vertex, v2: Vertex, v3: Vertex): void {\n\n        let yDistanceRight = v2.projection.y - v1.projection.y;\n        const yDistanceLeft = v3.projection.y - v1.projection.y;\n\n        let slope2 = (v2.projection.x - v1.projection.x) / yDistanceRight;\n        const slope1 = (v3.projection.x - v1.projection.x) / yDistanceLeft;\n\n        const tslope1u = (v3.textureCoordinate.u / v3.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceLeft;\n        let tslope2u = (v2.textureCoordinate.u / v2.projection.z - v1.textureCoordinate.u / v1.projection.z) / yDistanceRight;\n\n        const tslope1v = (v3.textureCoordinate.v / v3.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceLeft;\n        let tslope2v = (v2.textureCoordinate.v / v2.projection.z - v1.textureCoordinate.v / v1.projection.z) / yDistanceRight;\n\n\n        let zslope2 = (1 / v2.projection.z - 1 / v1.projection.z) / yDistanceRight;\n        const zslope1 = (1 / v3.projection.z - 1 / v1.projection.z) / yDistanceLeft;\n\n        let curz1 = 1.0 / v1.projection.z;\n        let curz2 = 1.0 / v1.projection.z;\n\n        let curu1 = v1.textureCoordinate.u / v1.projection.z;\n        let curv1 = v1.textureCoordinate.v / v1.projection.z;\n        let curu2 = v1.textureCoordinate.u / v1.projection.z;\n        let curv2 = v1.textureCoordinate.v / v1.projection.z;\n\n        let xPosition = v1.projection.x;\n        let xPosition2 = v1.projection.x;\n        let yPosition = v1.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n\n        yDistanceRight = v3.projection.y - v2.projection.y;\n        slope2 = (v3.projection.x - v2.projection.x) / yDistanceRight;\n        zslope2 = (1 / v3.projection.z - 1 / v2.projection.z) / yDistanceRight;\n\n        tslope2u = (v3.textureCoordinate.u / v3.projection.z - v2.textureCoordinate.u / v2.projection.z) / yDistanceRight;\n        tslope2v = (v3.textureCoordinate.v / v3.projection.z - v2.textureCoordinate.v / v2.projection.z) / yDistanceRight;\n\n        curz2 = 1.0 / v2.projection.z;\n\n        curu2 = v2.textureCoordinate.u / v2.projection.z;\n        curv2 = v2.textureCoordinate.v / v2.projection.z;\n\n        xPosition2 = v2.projection.x;\n        yPosition = v2.projection.y;\n\n        for (let i = 0; i < yDistanceRight; i++) {\n            const length = Math.round(xPosition2) - Math.round(xPosition);\n            let framebufferIndex = Math.round(yPosition) * framebuffer.width + Math.round(xPosition)\n\n\n            const spanzStep = (curz2 - curz1) / length;\n            const spanuStep = (curu2 - curu1) / length;\n            const spanvStep = (curv2 - curv1) / length;\n            let wStart = curz1;\n\n            let uStart = curu1;\n            let vStart = curv1;\n            for (let j = 0; j < length; j++) {\n                if (wStart < framebuffer.wBuffer[framebufferIndex]) {\n                    framebuffer.wBuffer[framebufferIndex] = wStart;\n                    const z = 1 / wStart;\n\n                    let u = Math.max(Math.min((uStart * z * framebuffer.bob.width), framebuffer.bob.width - 1), 0) | 0;\n                    let v = Math.max(Math.min((vStart * z * framebuffer.bob.height), framebuffer.bob.height - 1), 0) | 0;\n                    let color2 = framebuffer.bob.texture[u + v * framebuffer.bob.width];\n\n                    u = uStart * z * (framebuffer.bob.width-1);\n                    v = vStart * z * (framebuffer.bob.height-1);\n\n                   color2 = framebuffer.bob.getBilinearFilteredPixelRasterizer(u,v);\n\n                    framebuffer.framebuffer[framebufferIndex] = color2;\n                }\n                framebufferIndex++;\n                wStart += spanzStep;\n                uStart += spanuStep;\n                vStart += spanvStep;\n            }\n\n            xPosition += slope1;\n            xPosition2 += slope2;\n            yPosition++;\n\n            curz1 += zslope1;\n            curz2 += zslope2;\n\n            curu1 += tslope1u;\n            curu2 += tslope2u;\n\n            curv1 += tslope1v;\n            curv2 += tslope2v;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\n/**\n * digital differential analyser line drawing algorithm\n * using fixed point math.\n * renders approx 1400 lines per millisecond on my machine\n */\nexport class LineRasterizerDda {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDA(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        // w=1/z interpolation for z-buffer\n        let wStart = 1 / (start.z);\n        const wDelta = (1 / end.z - 1 / start.z) / length;\n\n        for (let i = 0; i <= length; i++) {\n            if (wStart < this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width]) {\n                this.framebuffer.wBuffer[Math.round(xPosition) + Math.round(yPosition) * this.framebuffer.width] = wStart;\n                this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n            }\n            xPosition += dx;\n            yPosition += dy;\n            wStart += wDelta;\n        }\n    }\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { Vector3f } from '../../math';\n\nexport class LineRasterizerNoZ {\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public drawLineDDANoZ(start: Vector3f, end: Vector3f, color: number): void {\n        const xDistance: number = end.x - start.x;\n        const yDistance: number = end.y - start.y;\n\n        let dx: number;\n        let dy: number;\n        let length: number;\n\n        if (Math.abs(xDistance) > Math.abs(yDistance)) {\n            dx = Math.sign(xDistance);\n            dy = yDistance / Math.abs(xDistance);\n            length = Math.abs(xDistance);\n        } else {\n            dx = xDistance / Math.abs(yDistance);\n            dy = Math.sign(yDistance);\n            length = Math.abs(yDistance);\n        }\n\n        let xPosition: number = start.x;\n        let yPosition: number = start.y;\n\n        for (let i = 0; i <= length; i++) {\n\n            this.framebuffer.drawPixel(Math.round(xPosition), Math.round(yPosition), color);\n\n            xPosition += dx;\n            yPosition += dy;\n\n        }\n    }\n\n}\n","import { CullFace } from '../CullFace';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class AbstractRenderingPipeline {\n\n    public NEAR_PLANE_Z: number = -1.7;\n    public alpha: number;\n    private cullMode: CullFace = CullFace.BACK;\n\n    constructor(protected framebuffer: Framebuffer) { }\n\n    public setCullFace(face: CullFace): void {\n        this.cullMode = face;\n    }\n\n    public setAlpha(alpha: number): void {\n        this.alpha = Math.max(Math.min(alpha, 1.0), 0.0);\n    }\n\n    public isInFrontOfNearPlane(p: { x: number; y: number; z: number }): boolean {\n        return p.z < this.NEAR_PLANE_Z;\n    }\n\n    /**\n     * based on signed polygon area computation:\n     * http://www.faqs.org/faqs/graphics/algorithms-faq/\n     * https://stackoverflow.com/questions/1165647/how-to-determine-if-a-list-of-polygon-points-are-in-clockwise-order\n     * http://csharphelper.com/blog/2014/07/calculate-the-area-of-a-polygon-in-c/\n     * http://mathworld.wolfram.com/PolygonArea.html\n     *\n     * @private\n     * @param {{ x: number, y: number, z: number }} v1\n     * @param {{ x: number, y: number, z: number }} v2\n     * @param {{ x: number, y: number, z: number }} v3\n     * @returns {boolean}\n     * @memberof Framebuffer\n     *\n     */\n    public isTriangleCCW(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number }): boolean {\n        if (this.cullMode == CullFace.DISABLED) {\n            return true;\n        }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v1.y - v1.x * v3.y;\n        if (this.cullMode == CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n    public isTriangleCCW2(v1: { x: number, y: number, z: number },\n        v2: { x: number, y: number, z: number },\n        v3: { x: number, y: number, z: number },\n        v4: { x: number, y: number, z: number }): boolean {\n            if (this.cullMode == CullFace.DISABLED) {\n                return true;\n            }\n        const det: number =\n            v1.x * v2.y - v2.x * v1.y +\n            v2.x * v3.y - v3.x * v2.y +\n            v3.x * v4.y - v4.x * v3.y +\n            v4.x * v1.y - v1.x * v4.y;\n        if (this.cullMode === CullFace.BACK) {\n            return det < 0.0;\n        } else {\n            return det > 0.0;\n        }\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { GouraudShadingTriangleRasterizer } from '../rasterizer/GouraudShadingTriangleRasterizer';\n\n/**\n * TODO:\n * - object with position, rotation, material, color\n * - remove tempp matrix objects: instead store one global MV  matrix and manipulate\n *   it directly without generating temp amtrices every frame\n * - no lighting for culled triangles\n * - only z clip if necessary (no clip, fully visible)\n * Optimization:\n * - no shading / only texture mapping (use function pointers to set correct rasterization function)\n * - use delta step method from black art of 3d programming\n * - generate object only once\n * - dont use temp arrays / instead use always the same array preallocated\n */\nexport class GouraudShadingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new GouraudShadingTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<FlatshadedMesh>, modelViewMartrix: Matrix4f): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: FlatshadedMesh = meshes[j];\n            this.draw(framebuffer, model,modelViewMartrix);\n        }\n    }\n\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Color } from '../core/Color';\nimport { Framebuffer } from '../Framebuffer';\nimport { FlatshadedMesh } from '../geometrical-objects/FlatshadedMesh';\nimport { Vector4f } from '../math/index';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { SubPixelTriangleRasterizer } from '../rasterizer/SubPixelTriangleRasterizer';\n\nimport { SutherlandHodgman2DClipper } from '../screen-space-clipping/SutherlandHodgman2DClipper';\nimport { Fog } from '../shading/fog/Fog';\nimport { PhongLighting } from '../shading/illumination-models/PhongLighting';\nimport { PointLight } from '../shading/light/PointLight';\nimport { Material } from '../shading/material/Material';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\n\n/**\n * TODO:\n * fix backface occlusion / add z-clipping\n */\nexport class SubPixelRenderingPipeline extends AbstractRenderingPipeline {\n\n    private fog: Fog = null;\n    private lights: Array<PointLight> = null;\n    private material: Material = null;\n    private lighting: boolean = true;\n    private color: Color = Color.WHITE;\n\n    // it is possible to change the rasterizer here for\n    // flat, gouroud, texture mapping etc.. should be done with clipper as well!\n    private triangleRasterizer: AbstractTriangleRasterizer = null;\n    private clipper: SutherlandHodgman2DClipper;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n\n    public constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.clipper = new SutherlandHodgman2DClipper(framebuffer);\n\n        const light1: PointLight = new PointLight();\n        light1.ambientIntensity = new Vector4f(1, 1, 1, 1);\n        light1.diffuseIntensity = new Vector4f(1, 1, 1, 1);\n        light1.specularIntensity = new Vector4f(1, 1, 1, 1);\n        light1.position = new Vector4f(3, 0, -2, 1);\n\n        const light2: PointLight = new PointLight();\n        light2.ambientIntensity = new Vector4f(0, 0, 1, 1);\n        light2.diffuseIntensity = new Vector4f(0, 0.6, 1, 1);\n        light2.specularIntensity = new Vector4f(0.8, 0.8, 0.8, 1);\n        light2.position = new Vector4f(0, -380, -180, 1);\n\n        this.lights = [light1, light2];\n\n        const mat: Material = new Material();\n        mat.ambientColor = new Vector4f(0.12, 0.14, 0.1, 0);\n        mat.diffuseColor = new Vector4f(0.38, 0.4, 0.4, 1);\n        mat.specularColor = new Vector4f(0.8, 0.5, 0.5, 0);\n        mat.shininess = 2;\n\n        this.material = mat;\n        this.triangleRasterizer = new SubPixelTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public setFog(fog: Fog): void {\n        this.fog = fog;\n    }\n\n    public setLights(lights: Array<PointLight>): void {\n        this.lights = lights;\n    }\n\n    public enableLighting(enable: boolean): void {\n        this.lighting = enable;\n    }\n\n    public setMaterial(material: Material): void {\n        this.material = material;\n    }\n\n    public setColor(color: Color): void {\n        this.color = color;\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: FlatshadedMesh, modelViewMartrix: Matrix4f): void {\n\n        const normalMatrix: Matrix4f = modelViewMartrix.computeNormalMatrix();\n\n        for (let i: number = 0; i < mesh.normals.length; i++) {\n            normalMatrix.multiplyHomArr(mesh.normals[i], mesh.transformedNormals[i]);\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            modelViewMartrix.multiplyHomArr(mesh.points[i], mesh.transformedPoints[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.transformedPoints[mesh.faces[i].v1];\n            const v2: Vector4f = mesh.transformedPoints[mesh.faces[i].v2];\n            const v3: Vector4f = mesh.transformedPoints[mesh.faces[i].v3];\n\n            const normal1: Vector4f = mesh.transformedNormals[mesh.faces[i].n1];\n            const normal2: Vector4f = mesh.transformedNormals[mesh.faces[i].n2];\n            const normal3: Vector4f = mesh.transformedNormals[mesh.faces[i].n3];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                this.vertexArray[0].position = v1;\n                this.vertexArray[0].projection = this.projectedVertices[0];\n                this.vertexArray[0].normal = normal1;\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].projection = this.projectedVertices[1];\n                this.vertexArray[1].normal = normal2;\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].projection = this.projectedVertices[2];\n                this.vertexArray[2].normal = normal3;\n\n                this.renderConvexPolygon(framebuffer, this.vertexArray, true);\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1;\n                this.vertexArray[1].position = v2;\n                this.vertexArray[2].position = v3;\n\n                if (this.lighting) {\n                    this.vertexArray[0].color = this.computeColor(normal1, v1);\n                    this.vertexArray[1].color = this.computeColor(normal2, v2);\n                    this.vertexArray[2].color = this.computeColor(normal3, v3);\n                } else {\n                    this.vertexArray[0].color = this.color;\n                    this.vertexArray[1].color = this.color;\n                    this.vertexArray[2].color = this.color;\n                }\n\n                const output: Array<Vertex> = this.zClipTriangle(this.vertexArray);\n\n                if (output.length < 3) {\n                    return;\n                }\n\n                for (let j: number = 0; j < output.length; j++) {\n                    output[j].projection = this.project(output[j].position);\n                }\n\n                this.renderConvexPolygon(framebuffer, output, false);\n            }\n        }\n    }\n\n    public project(t1: { x: number, y: number, z: number }): Vector4f {\n        return new Vector4f(\n            ((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z))),\n            ((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z))),\n            t1.z\n        );\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = ((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = ((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        // TODO: interpolate color linear\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n        vertex.color = p2.color.sub(p1.color).mul(ratio).add(p1.color);\n        return vertex;\n    }\n\n    public zClipTriangle(subject: Array<Vertex>): Array<Vertex> {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        return output;\n    }\n\n    private renderConvexPolygon(framebuffer: Framebuffer, projected: Array<Vertex>, late: boolean = false): void {\n        if (projected.length === 3 &&\n            !this.isTriangleCCW(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection)) {\n            return;\n        }\n\n        if (late) {\n            if (this.lighting) {\n                this.vertexArray[0].color = this.computeColor(this.vertexArray[0].normal, this.vertexArray[0].position);\n                this.vertexArray[1].color = this.computeColor(this.vertexArray[1].normal, this.vertexArray[1].position);\n                this.vertexArray[2].color = this.computeColor(this.vertexArray[2].normal, this.vertexArray[2].position);\n            } else {\n                this.vertexArray[0].color = this.color;\n                this.vertexArray[1].color = this.color;\n                this.vertexArray[2].color = this.color;\n            }\n\n        }\n\n        if (projected.length === 4 &&\n            !this.isTriangleCCW2(\n                projected[0].projection,\n                projected[1].projection,\n                projected[2].projection,\n                projected[3].projection)\n        ) {\n            return;\n        }\n\n        const clippedPolygon: Array<Vertex> = this.clipper.clipConvexPolygon(projected);\n\n        if (clippedPolygon.length < 3) {\n            return;\n        }\n\n        this.triangulateConvexPolygon(framebuffer, clippedPolygon);\n    }\n\n    private triangulateConvexPolygon(framebuffer:Framebuffer, clippedPolygon: Array<Vertex>): void {\n        for (let j: number = 0; j < clippedPolygon.length - 2; j++) {\n            this.triangleRasterizer.drawTriangleDDA(\n                framebuffer,\n                clippedPolygon[0],\n                clippedPolygon[1 + j],\n                clippedPolygon[2 + j]\n            );\n        }\n    }\n\n    private computeColor(normal: Vector4f, vertex: Vector4f): Color {\n\n        // TODO: if lighting is enabled use mat and light\n        // else use Color set\n\n        let vertexColor: Vector4f = new PhongLighting().computeColor(this.material, this.lights, normal, vertex);\n\n        if (this.fog !== null) {\n            vertexColor = this.fog.computeVertexColor(vertexColor, vertex);\n        }\n\n        return new Color(\n            Math.min(255, vertexColor.x * 255),\n            Math.min(255, vertexColor.y * 255),\n            Math.min(255, vertexColor.z * 255),\n            255\n        );\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Matrix4f } from '../math/Matrix4f';\nimport { Vector4f } from '../math/Vector4f';\nimport { AbstractTriangleRasterizer } from '../rasterizer/AbstractTriangleRasterizer';\nimport { TexturedAlphaBlendingTriangleRasterizer } from '../rasterizer/TexturedAlphaBlendingTriangleRasterizer';\nimport { TexturedTriangleRasterizer } from '../rasterizer/TexturedTriangleRasterizer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractRenderingPipeline } from './AbstractRenderingPipeline';\nimport { TexturedMesh } from './TexturedMesh';\n\nexport class TexturingRenderingPipeline extends AbstractRenderingPipeline {\n\n    private sphereMapping: boolean = false;\n    public triangleRasterizer: AbstractTriangleRasterizer = null;\n\n    private vertexArray: Array<Vertex> = new Array<Vertex>(\n        new Vertex(), new Vertex(), new Vertex()\n    );\n    setSphereMapping(sphereMapping: boolean) {\n        this.sphereMapping = sphereMapping;\n    }\n\n    private modelViewMatrix: Matrix4f;\n\n    private projectedVertices: Array<Vector4f> = new Array<Vector4f>(\n        new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1), new Vector4f(0, 0, 0, 1)\n    );\n\n    constructor(framebuffer: Framebuffer) {\n        super(framebuffer);\n        this.setAlpha(1.0);\n        this.triangleRasterizer = new TexturedTriangleRasterizer(framebuffer);\n    }\n\n    public setFramebuffer(framebuffer: Framebuffer) {\n        this.framebuffer = framebuffer;\n    }\n\n    public enableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedAlphaBlendingTriangleRasterizer(this.framebuffer, this);\n    }\n\n    public disableAlphaBlending(): void {\n        this.triangleRasterizer = new TexturedTriangleRasterizer(this.framebuffer);\n    }\n\n    public setModelViewMatrix(matrix: Matrix4f): void {\n        this.modelViewMatrix = matrix;\n    }\n\n    public drawMeshArray(framebuffer: Framebuffer, meshes: Array<TexturedMesh>): void {\n        for (let j: number = 0; j < meshes.length; j++) {\n            const model: TexturedMesh = meshes[j];\n            this.draw(framebuffer, model);\n        }\n    }\n\n    public draw(framebuffer: Framebuffer, mesh: TexturedMesh): void {\n        if (mesh.normals) {\n            const normalMatrix: Matrix4f = this.modelViewMatrix.computeNormalMatrix();\n\n            for (let i: number = 0; i < mesh.normals.length; i++) {\n                normalMatrix.multiplyHomArr(mesh.normals[i], mesh.normals2[i]);\n            }\n        }\n\n        for (let i: number = 0; i < mesh.points.length; i++) {\n            this.modelViewMatrix.multiplyHomArr(mesh.points[i], mesh.points2[i]);\n        }\n\n        for (let i: number = 0; i < mesh.faces.length; i++) {\n            const v1: Vector4f = mesh.points2[mesh.faces[i].vertices[0]];\n            const v2: Vector4f = mesh.points2[mesh.faces[i].vertices[1]];\n            const v3: Vector4f = mesh.points2[mesh.faces[i].vertices[2]];\n\n            if (this.isInFrontOfNearPlane(v1) &&\n                this.isInFrontOfNearPlane(v2) &&\n                this.isInFrontOfNearPlane(v3)) {\n\n                this.project2(v1, this.projectedVertices[0]);\n                this.project2(v2, this.projectedVertices[1]);\n                this.project2(v3, this.projectedVertices[2]);\n\n                if (this.isTriangleCCW(\n                    this.projectedVertices[0],\n                    this.projectedVertices[1],\n                    this.projectedVertices[2])) {\n\n                    this.vertexArray[0].projection = this.projectedVertices[0]; // p1 is Vector3f\n                    this.vertexArray[1].projection = this.projectedVertices[1];\n                    this.vertexArray[2].projection = this.projectedVertices[2];\n\n                    if (this.sphereMapping) {\n                        const n1: Vector4f = mesh.normals2[mesh.faces[i].normals[0]];\n                        const n2: Vector4f = mesh.normals2[mesh.faces[i].normals[1]];\n                        const n3: Vector4f = mesh.normals2[mesh.faces[i].normals[2]];\n                        framebuffer.fakeSphere(n1, this.vertexArray[0]);\n                        framebuffer.fakeSphere(n2, this.vertexArray[1]);\n                        framebuffer.fakeSphere(n3, this.vertexArray[2]);\n                    } else {\n                        this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n                        this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n                        this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n                    }\n\n                    this.clipConvexPolygon(framebuffer, this.vertexArray);\n                }\n            } else if (!this.isInFrontOfNearPlane(v1) &&\n                !this.isInFrontOfNearPlane(v2) &&\n                !this.isInFrontOfNearPlane(v3)) {\n                continue;\n            } else {\n                this.vertexArray[0].position = v1; // v1 is Vector4f\n                this.vertexArray[0].textureCoordinate = mesh.uv[mesh.faces[i].uv[0]];\n\n                this.vertexArray[1].position = v2;\n                this.vertexArray[1].textureCoordinate = mesh.uv[mesh.faces[i].uv[1]];\n\n                this.vertexArray[2].position = v3;\n                this.vertexArray[2].textureCoordinate = mesh.uv[mesh.faces[i].uv[2]];\n\n                this.zClipTriangle(framebuffer, this.vertexArray);\n            }\n        }\n    }\n\n    public project2(t1: { x: number, y: number, z: number }, result: Vector4f): void {\n        result.x = Math.round((this.framebuffer.width / 2) + (292 * t1.x / (-t1.z)));\n        result.y = Math.round((this.framebuffer.height / 2) - (t1.y * 292 / (-t1.z)));\n        result.z = t1.z;\n    }\n\n    public computeNearPlaneIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const ratio: number = (this.NEAR_PLANE_Z - p1.position.z) / (p2.position.z - p1.position.z);\n        const vertex: Vertex = new Vertex();\n\n        vertex.position = new Vector4f(\n            ratio * (p2.position.x - p1.position.x) + p1.position.x,\n            ratio * (p2.position.y - p1.position.y) + p1.position.y,\n            this.NEAR_PLANE_Z\n        );\n\n        vertex.textureCoordinate = new TextureCoordinate(\n            ratio * (p2.textureCoordinate.u - p1.textureCoordinate.u) + p1.textureCoordinate.u,\n            ratio * (p2.textureCoordinate.v - p1.textureCoordinate.v) + p1.textureCoordinate.v\n        );\n\n        return vertex;\n    }\n\n    public zClipTriangle(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n        const input: Array<Vertex> = subject;\n        const output: Array<Vertex> = new Array<Vertex>();\n        let S: Vertex = input[input.length - 1];\n\n        for (let i: number = 0; i < input.length; i++) {\n            const point: Vertex = input[i];\n            if (this.isInFrontOfNearPlane(point.position)) {\n                if (!this.isInFrontOfNearPlane(S.position)) {\n                    output.push(this.computeNearPlaneIntersection(S, point));\n                }\n                output.push(point);\n            } else if (this.isInFrontOfNearPlane(S.position)) {\n                output.push(this.computeNearPlaneIntersection(S, point));\n            }\n            S = point;\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        for (let j: number = 0; j < output.length; j++) {\n            this.project2(output[j].position, output[j].projection);\n        }\n\n        if (output.length === 3 &&\n            !this.isTriangleCCW(output[0].projection, output[1].projection, output[2].projection)) {\n            return;\n        }\n\n        if (output.length === 4 &&\n            !this.isTriangleCCW2(\n                output[0].projection,\n                output[1].projection,\n                output[2].projection,\n                output[3].projection\n            )) {\n            return;\n        }\n\n        this.clipConvexPolygon(framebuffer, output);\n    }\n\n\n    public clipConvexPolygon(framebuffer: Framebuffer, subject: Array<Vertex>): void {\n\n        let output = subject;\n\n        for (let j = 0; j < framebuffer.clipRegion.length; j++) {\n            const edge = framebuffer.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside2(point)) {\n                    if (!edge.isInside2(S)) {\n                        output.push(edge.computeIntersection2(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside2(S)) {\n                    output.push(edge.computeIntersection2(S, point));\n                }\n                S = point;\n            }\n        }\n\n        if (output.length < 3) {\n            return;\n        }\n\n        // triangulate new point set\n        for (let i = 0; i < output.length - 2; i++) {\n            this.triangleRasterizer.drawTriangleDDA(framebuffer, output[0], output[1 + i], output[2 + i]);\n        }\n    }\n\n}\n","import { Framebuffer } from './../Framebuffer';\n\nexport abstract class AbstractScene {\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public init(framebuffer: Framebuffer): Promise<any> {\n        return Promise.all([]);\n    }\n\n    public onInit(): void {\n\n    }\n\n    public abstract render(framebuffer: Framebuffer, time: number): void;\n\n}\n","import { Vertex } from '../Vertex';\n\n// TODO:\n// - use polymorphism in order to have different intersection methods\n// - one for plain clipping / one for tex coords / one for multitexturing / gouraud shading etc\nexport abstract class AbstractClipEdge {\n\n    public abstract isInside(p: Vertex): boolean;\n    public abstract isInside2(p: Vertex): boolean;\n    public abstract computeIntersection(p1: Vertex, p2: Vertex): Vertex;\n    public abstract computeIntersection2(p1: Vertex, p2: Vertex): Vertex;\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class BottomClipEdge extends AbstractClipEdge {\n\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y >= this.framebuffer.minWindow.y;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        // since this is for flat shading no interpolation is required\n        const factor: number = (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.minWindow.y,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex: Vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.minWindow.y,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord: TextureCoordinate = new TextureCoordinate();\n        const z: number = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.y - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector3f } from '../math/Vector3f';\n\nexport class CohenSutherlandLineClipper {\n\n    public static REGION_CODE_CENTER = 0b0000;\n    public static REGION_CODE_LEFT = 0b0001;\n    public static REGION_CODE_RIGHT = 0b0010;\n    public static REGION_CODE_BOTTOM = 0b0100;\n    public static REGION_CODE_TOP = 0b1000;\n\n    constructor(private framebuffer: Framebuffer) { }\n\n    public cohenSutherlandLineClipper(start: Vector3f, end: Vector3f, col: number) {\n        let p1: Vector3f = new Vector3f(start.x, start.y, start.z);\n        let p2: Vector3f = new Vector3f(end.x, end.y, end.z);\n\n        let code1: number = this.computeRegionCode(p1);\n        let code2: number = this.computeRegionCode(p2);\n\n        let accept: boolean = false;\n        let done: boolean = false;\n\n        while (!done) {\n\n            if (this.isTrivialAccept(code1, code2)) {\n                accept = true;\n                done = true;\n            } else if (this.isTrivialReject(code1, code2)) {\n                done = true;\n            } else {\n\n                if (code1 === CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    const tempCode: number = code1;\n                    code1 = code2;\n                    code2 = tempCode;\n\n                    const tempPoint: Vector3f = p1;\n                    p1 = p2;\n                    p2 = tempPoint;\n                }\n\n                if ((code1 & CohenSutherlandLineClipper.REGION_CODE_TOP) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.maxWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.maxWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_BOTTOM) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.x = (p1.x + (p2.x - p1.x) * (this.framebuffer.minWindow.y - p1.y) / (p2.y - p1.y));\n                    p1.y = this.framebuffer.minWindow.y;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_RIGHT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.maxWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.maxWindow.x;\n                } else if ((code1 & CohenSutherlandLineClipper.REGION_CODE_LEFT) !== CohenSutherlandLineClipper.REGION_CODE_CENTER) {\n                    p1.y = (p1.y + (p2.y - p1.y) * (this.framebuffer.minWindow.x - p1.x) / (p2.x - p1.x));\n                    p1.x = this.framebuffer.minWindow.x;\n                }\n\n                code1 = this.computeRegionCode(p1);\n            }\n        }\n\n        if (accept) {\n            this.framebuffer.drawLineDDA(p1, p2, col);\n        }\n    }\n\n    public isTrivialAccept(code1: number, code2: number): boolean {\n        return (code1 | code2) === CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public isTrivialReject(code1: number, code2: number): boolean {\n        return (code1 & code2) !== CohenSutherlandLineClipper.REGION_CODE_CENTER;\n    }\n\n    public computeRegionCode(point: Vector3f): number {\n        let regionCode: number = CohenSutherlandLineClipper.REGION_CODE_CENTER;\n\n        if (point.x < this.framebuffer.minWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_LEFT;\n        } else if (point.x > this.framebuffer.maxWindow.x) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_RIGHT;\n        }\n\n        if (point.y < this.framebuffer.minWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_BOTTOM;\n        } else if (point.y > this.framebuffer.maxWindow.y) {\n            regionCode |= CohenSutherlandLineClipper.REGION_CODE_TOP;\n        }\n\n        return regionCode;\n    }\n\n}\n","import { AbstractClipEdge } from './AbstractClipEdge';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class LeftClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x >= 0;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.minWindow.x,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.minWindow.x,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.minWindow.x - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        vertex.textureCoordinate = textCoord;\n\n        return vertex;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { Vector4f } from '../math/Vector4f';\n\nexport class RightClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.x < this.framebuffer.width;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x);\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(this.framebuffer.maxWindow.x + 1,\n            Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * factor),\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(this.framebuffer.maxWindow.x + 1,\n                Math.round(p1.projection.y + (p2.projection.y - p1.projection.y) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)),\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.x + 1 - p1.projection.x) / (p2.projection.x - p1.projection.x)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n}\n","\nimport { AbstractClipEdge } from './AbstractClipEdge';\nimport { RightClipEdge } from './RightClipEdge';\nimport { LeftClipEdge } from './LeftClipEdge';\nimport { BottomClipEdge } from './BottomClipEdge';\nimport { TopClipEdge } from './TopClipEdge';\nimport { Vertex } from '../Vertex';\nimport { Framebuffer } from '../Framebuffer';\n\nexport class SutherlandHodgman2DClipper {\n\n\n    private clipRegion: Array<AbstractClipEdge>;\n\n    constructor(private framebuffer: Framebuffer) {\n        this.clipRegion = new Array<AbstractClipEdge>(\n            new RightClipEdge(framebuffer),\n            new LeftClipEdge(framebuffer),\n            new BottomClipEdge(framebuffer),\n            new TopClipEdge(framebuffer)\n        );\n\n    }\n\n    /**\n     * FIXME: optimize by minimizing creation of new arrays\n     *\n     * @param {Array<Vertex>} subject\n     * @return {Array<Vertex>}\n     */\n    public clipConvexPolygon(subject: Array<Vertex>): Array<Vertex> {\n\n        let output = subject;\n\n        for (let j = 0; j < this.clipRegion.length; j++) {\n            const edge: AbstractClipEdge = this.clipRegion[j];\n            const input = output;\n            output = new Array<Vertex>();\n            let S = input[input.length - 1];\n\n            for (let i = 0; i < input.length; i++) {\n                const point = input[i];\n                if (edge.isInside(point)) {\n                    if (!edge.isInside(S)) {\n                        output.push(edge.computeIntersection(S, point));\n                    }\n                    output.push(point);\n                } else if (edge.isInside(S)) {\n                    output.push(edge.computeIntersection(S, point));\n                }\n                S = point;\n            }\n        }\n\n        return output;\n    }\n\n}\n","import { Framebuffer } from '../Framebuffer';\nimport { Vector4f } from '../math';\nimport { TextureCoordinate } from '../TextureCoordinate';\nimport { Vertex } from '../Vertex';\nimport { AbstractClipEdge } from './AbstractClipEdge';\n\nexport class TopClipEdge extends AbstractClipEdge {\n\n    constructor(private framebuffer: Framebuffer) {\n        super();\n    }\n\n    public isInside(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public isInside2(p: Vertex): boolean {\n        return p.projection.y < this.framebuffer.maxWindow.y + 1;\n    }\n\n    public computeIntersection(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        const factor: number = (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y);\n        // this interpolation is not perspective correct but linear!!\n        vertex.color = p2.color.sub(p1.color).mul(factor).add(p1.color);\n        vertex.projection = new Vector4f(\n            Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * factor),\n            this.framebuffer.maxWindow.y + 1,\n            1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * factor));\n        return vertex;\n    }\n\n    public computeIntersection2(p1: Vertex, p2: Vertex): Vertex {\n        const vertex = new Vertex();\n        vertex.projection =\n            new Vector4f(\n                Math.round(p1.projection.x + (p2.projection.x - p1.projection.x) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)),\n                this.framebuffer.maxWindow.y + 1,\n                1 / (1 / p1.projection.z + (1 / p2.projection.z - 1 / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)));\n\n        const textCoord = new TextureCoordinate();\n        const z = vertex.projection.z;\n        textCoord.u = (p1.textureCoordinate.u / p1.projection.z + (p2.textureCoordinate.u / p2.projection.z - p1.textureCoordinate.u / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n        textCoord.v = (p1.textureCoordinate.v / p1.projection.z + (p2.textureCoordinate.v / p2.projection.z - p1.textureCoordinate.v / p1.projection.z) * (this.framebuffer.maxWindow.y + 1 - p1.projection.y) / (p2.projection.y - p1.projection.y)) * z;\n\n        vertex.textureCoordinate = textCoord;\n        return vertex;\n    }\n\n\n}\n","import { Vector4f } from '../../math/index';\nimport { PointLight } from '../light/PointLight';\nimport { Material } from '../material/Material';\n\nexport class PhongLighting {\n\n    public computeColor(mat: Material, lights: Array<PointLight>, normal: Vector4f, vertex: Vector4f): Vector4f {\n        let finalColor: Vector4f = new Vector4f(0, 0, 0);\n\n        for (let x: number = 0; x < lights.length; x++) {\n            const light: PointLight = lights[x];\n            const ambientIntensity: Vector4f = this.computeAmbientIntensity(mat, light);\n            const diffuseIntensity: Vector4f = this.computeDiffuseIntensity(mat, light, normal, vertex);\n            const specularIntensity: Vector4f = this.computeSpecularIntensity(mat, light, normal, vertex);\n\n            finalColor = finalColor.add(ambientIntensity)\n                .add(diffuseIntensity)\n                .add(specularIntensity);\n        }\n\n        return finalColor;\n    }\n\n    private computeAmbientIntensity(mat: Material, l: PointLight): Vector4f {\n        return mat.ambientColor.componentWiseMul(l.ambientIntensity);\n    }\n\n    private computeDiffuseIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const scale: number = Math.min(Math.max(normal.dot(lightDirection), 0), 1.0);\n        return mat.diffuseColor.componentWiseMul(l.diffuseIntensity).mul(scale);\n    }\n\n    private computeSpecularIntensity(mat: Material, l: PointLight, normal: Vector4f, vertex: Vector4f): Vector4f {\n        const lightDirection: Vector4f = l.position.sub(vertex).normalize();\n        const r: Vector4f = normal.mul(normal.dot(lightDirection) * 2.0).sub(lightDirection);\n        const v: Vector4f = vertex.mul(-1).normalize();\n        const scale: number = Math.pow(Math.max(r.dot(v), 0), mat.shininess);\n        return mat.specularColor.componentWiseMul(l.specularIntensity).mul(scale);\n    }\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport abstract class Light {\n\n    public ambientIntensity: Vector4f;\n    public diffuseIntensity: Vector4f;\n    public specularIntensity: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\nimport { Light } from './Light';\n\nexport class PointLight extends Light {\n\n    public position: Vector4f;\n\n}\n","import { Vector4f } from '../../math/index';\n\nexport class Material {\n\n    public ambientColor: Vector4f;\n    public diffuseColor: Vector4f;\n    public specularColor: Vector4f;\n    public emissiveColor: Vector4f;\n\n    public shininess: number;\n\n}\n","export class Texture {\n\n\n    public texture: Uint32Array;\n    public width: number;\n    public height: number;\n    public maxWidth: number;\n    public maxHeight: number;\n    private clamp: boolean = false;\n\n    setClamp(clamp: boolean) {\n        this.clamp = clamp;\n    }\n    constructor(texture?: Uint32Array, width?: number, height?: number) {\n        this.texture = texture;\n        this.width = width;\n        this.height = height;\n        this.maxHeight = (height-1) |0;\n        this.maxWidth = (width-1)|0;\n    }\n\n    public getPixel(texture: Texture, x: number, y: number): number {\n        return texture.texture[(x & 0xff) + (y & 0xff) * 256];\n    }\n\n    public getBilinearFilteredPixel(x: number, y: number): number {\n        const x0 = (((x | 0) % 256) + 256) % 256;\n        const x1 = ((((x + 1) | 0) % 256) + 256) % 256;\n        const y0 = (((y | 0) % 256) + 256) % 256;\n        const y1 = ((((y + 1) | 0) % 256) + 256) % 256;\n\n        const x0y0 = this.getPixel(this, x0, y0) & 0xff;\n        const x1y0 = this.getPixel(this, x1, y0) & 0xff;\n        const x0y1 = this.getPixel(this, x0, y1) & 0xff;\n        const x1y1 = this.getPixel(this, x1, y1) & 0xff;\n\n        const col1 = x0y0 * (1 - (x - Math.floor(x))) + (x1y0 * ((x - Math.floor(x))));\n        const col2 = x0y1 * (1 - (x - Math.floor(x))) + (x1y1 * ((x - Math.floor(x))));\n        const col = col1 * (1 - (y - Math.floor(y))) + (col2 * ((y - Math.floor(y))));\n\n        return col;\n    }\n\n    public getBilinearFilteredPixel2(x: number, y: number) {\n\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n        }\n\n\n        const x0y0 = this.getPixel2(this, x0, y0);\n        const x1y0 = this.getPixel2(this, x1, y0);\n        const x0y1 = this.getPixel2(this, x0, y1);\n        const x1y1 = this.getPixel2(this, x1, y1);\n\n        return this.interpolateComp(x, y, x0y0 & 0xff, x1y0 & 0xff, x0y1 & 0xff, x1y1 & 0xff)|\n            this.interpolateComp(x, y, x0y0 >> 8 & 0xff, x1y0 >> 8 & 0xff, x0y1 >> 8 & 0xff, x1y1 >> 8 & 0xff) << 8 |\n           this.interpolateComp(x, y, x0y0 >> 16 & 0xff, x1y0 >> 16 & 0xff, x0y1 >> 16 & 0xff, x1y1 >> 16 & 0xff) << 16\n           | 0xff << 24;\n    }\n\n    public getPixel2(texture: Texture, x: number, y: number): number {\n        return this.texture[x + y * this.width];\n    }\n\n    /**\n     * highly optimized version only for power of 2 textures\n     */\n    public getBilinearFilteredPixelRasterizer(x: number, y: number) {\n        let x0 = x | 0;\n        let x1 = (x | 0) + 1;\n        let y0 = y | 0;\n        let y1 = (y | 0) + 1;\n\n        let x0y0: number;\n        let x1y0: number;\n        let x0y1: number;\n        let x1y1: number;\n\n        if (this.clamp) {\n             x0 = Math.max(Math.min(x0, this.width - 1), 0);\n             x1 = Math.max(Math.min(x1, this.width - 1), 0);\n             y0 = Math.max(Math.min(y0, this.height - 1), 0);\n             y1 = Math.max(Math.min(y1, this.height - 1), 0);\n\n             x0y0 = this.getPixel2(this, x0, y0);\n             x1y0 = this.getPixel2(this, x1, y0);\n             x0y1 = this.getPixel2(this, x0, y1);\n             x1y1 = this.getPixel2(this, x1, y1);\n        } else {\n            x0y0 = this.getPixelRasterizer(this, x0, y0);\n            x1y0 = this.getPixelRasterizer(this, x1, y0);\n            x0y1 = this.getPixelRasterizer(this, x0, y1);\n            x1y1 = this.getPixelRasterizer(this, x1, y1);\n        }\n        return this.interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1);\n    }\n\n    public getPixelRasterizer(texture: Texture, x: number, y: number): number {\n        return this.texture[(x & (this.width-1)) + (y&(this.height-1)) * this.width];\n    }\n\n    public getPixel3(texture: Texture, x: number, y: number): number {\n        return this.texture[\n            (((x % this.width) + this.width) % this.width) +\n            (((y % this.height) + this.height) % this.height) * this.width];\n    }\n\n    private interpolateComp(x, y, x0y0, x1y0, x0y1, x1y1): number {\n        // reuse these values for all color components\n        const xFrac = x - (x | 0);\n        const yFrac = y - (y | 0);\n        const oneMinusXfrac = 1 - xFrac;\n        const oneMinusYfrac = 1 - yFrac;\n\n        const x0y0_r = x0y0 & 0xff;\n        const x1y0_r = x1y0 & 0xff;\n        const x0y1_r = x0y1 & 0xff;\n        const x1y1_r = x1y1 & 0xff;\n\n        const col1_r = x0y0_r * oneMinusXfrac + x1y0_r * xFrac;\n        const col2_r = x0y1_r * oneMinusXfrac + x1y1_r * xFrac;\n        const col_r = col1_r * oneMinusYfrac + (col2_r * yFrac);\n\n        const x0y0_g = x0y0 >> 8 & 0xff;\n        const x1y0_g = x1y0 >> 8 & 0xff;\n        const x0y1_g = x0y1 >> 8 & 0xff;\n        const x1y1_g = x1y1 >> 8 & 0xff;\n\n        const col1_g = x0y0_g * oneMinusXfrac + x1y0_g * xFrac;\n        const col2_g = x0y1_g * oneMinusXfrac + x1y1_g * xFrac;\n        const col_g = col1_g * oneMinusYfrac + (col2_g * yFrac);\n\n        const x0y0_b = x0y0 >> 16 & 0xff;\n        const x1y0_b = x1y0 >> 16 & 0xff;\n        const x0y1_b = x0y1 >> 16 & 0xff;\n        const x1y1_b = x1y1 >> 16 & 0xff;\n\n        const col1_b = x0y0_b * oneMinusXfrac + x1y0_b * xFrac;\n        const col2_b = x0y1_b * oneMinusXfrac + x1y1_b * xFrac;\n        const col_b = col1_b * oneMinusYfrac + (col2_b * yFrac);\n\n        const x0y0_a = x0y0 >> 24 & 0xff;\n        const x1y0_a = x1y0 >> 24 & 0xff;\n        const x0y1_a = x0y1 >> 24 & 0xff;\n        const x1y1_a = x1y1 >> 24 & 0xff;\n\n        const col1_a = x0y0_a * oneMinusXfrac + x1y0_a * xFrac;\n        const col2_a = x0y1_a * oneMinusXfrac + x1y1_a * xFrac;\n        const col_a = col1_a * oneMinusYfrac + (col2_a * yFrac);\n\n        return col_r | col_g << 8 | col_b << 16 | col_a << 24;\n    }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nc = undefined;","import { Canvas } from '../../Canvas';\nimport { SubPixelCubeScene } from './SubPixelCubeScene';\n\nimport './../../default-style.css';\n\nclass Application {\n\n    public static main(): void {\n        const canvas: Canvas = new Canvas(320, 200, new SubPixelCubeScene());\n        canvas.init();\n    }\n\n}\n\nApplication.main();\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","locals","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","attributes","styleElement","nonce","setAttribute","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","scene","framebuffer","canvas","context","startTime","boundRenderLoop","constructor","width","height","getContext","oImageSmoothingEnabled","imageSmoothingEnabled","webkitImageSmoothingEnabled","Framebuffer","renderLoop","bind","init","appendTo","getElementById","addEventListener","event","preventDefault","FullscreenUtils","toggleFullscreen","then","onInit","Date","now","render","flipBackbuffer","requestAnimationFrame","putImageData","getImageData","CullFace","static","minWindow","maxWindow","wBuffer","cullMode","BACK","camera","bob","triangleRasterizer","FlatShadingTriangleRasterizer","texturedTriangleRasterizer","TexturedTriangleRasterizer","scaleClipBlitter","ScaleClipBlitter","texturedRenderingPipeline","lineRasterizer","LineRasterizerDda","lineRasterizerNo","LineRasterizerNoZ","tmpGlitch","lensFlareVisible","lensFlareStart","lensFlareEnd","imageData","unsignedIntArray","torus","Torus","plane","cylinder2","linerClipper","CohenSutherlandLineClipper","clipRegion","Array","texture","Texture","ImageData","Float32Array","arrayBuffer","ArrayBuffer","PIXEL_SIZE_IN_BYTES","Uint8ClampedArray","Uint32Array","TexturingRenderingPipeline","Vector2f","RightClipEdge","LeftClipEdge","BottomClipEdge","TopClipEdge","setCullFace","face","setTexture","set","clear","color","Color","BLACK","toPackedFormat","clearColorBuffer","fill","drawPixel","x","y","drawPixel4","alpha","inverseAlpha","r","g","b","drawPixel3","alpha2","drawPixelAntiAliased","roundedX","Math","floor","roundedY","percent","abs","drawPixelAliased","round","drawPixelAntiAliasedSpacial","ceil","readPixel","drawRect","start","drawRect2","j","drawText","text","xpos","firstIndex","charCodeAt","tx","ty","drawTextureRectFastAlpha","addReflections","Interpolator","interpolate","sin","drawTextureRect2","xs","ys","xt","yt","w","h","texIndex","frIndex","drawTextureColorized","txPixel","drawTextureRectNoAlpha","c1","c2","nAlpha","nInvAlpha","r1","g1","b1","r2","g2","b2","drawTextureRect","pixelWidth","fbPixel","drawTextureRectAdd","min","pixelate","xoff","yoff","drawBox2","drawLineDDA","Vector3f","fastFramebufferCopyOffset","src","dest","offset","l","fastFramebufferCopy","noise","elapsedTime","scale","rng","setSeed","getFloat","drawTexturedBillboard","xp","yp","z","xStep","yStep","newHeight","newWidth","yStart","xStart","xTextureStart","xx","yy","max","index2","textureIndex","drawParticle","alphaBlend","alphaScale","framebufferPixel","texturePixel","drawParticle2","imgNum","spritH","drawParticle2Sub","rr","gg","bb","drawParticleNoDepth","drawSoftParticle","zDist","drawFog","fogScale","fogOffset","videoMemorySize","wBufferScale","drawScaledTextureClipBi","getBilinearFilteredPixel2","drawScaledTextureClipBiAdd","drawScaledTextureClipAdd","drawTexture","SCREEN_WIDTH","SCREEN_HEIGHT","framebufferIndex","textureRowOffset","framebufferRowOffset","div","yHeight","xWidth","drawTextureFullscreen","drawTexture3","time","mHeight","drawTextureNoClipAlpha","nearPlaneClipping","t1","t2","NEAR_PLANE_Z","cohenSutherlandLineClipper","project","ratio","t3","clearDepthBuffer","drawBox","x1","y1","wireFrameSphereClipping","points","STEPS2","sphereFunction2","PI","modelViewMartrix","Matrix4f","constructScaleMatrix","multiplyMatrix","constructYRotationMatrix","constructXRotationMatrix","constructTranslationMatrix","points2","p","transformed","multiplyHom","colred","v1","v2","v3","colLine","isTriangleCCW","det","wireFrameTerrain","heightmap","Matrix3f","xOff","cos","zOff","forEach","multiply","drawBoundingSphere","sphere","matrix","pos","mul","getRadius","add","getCenter","drawPlanedeformationTunnelAnim","xdist","ydist","dist","sqrt","dist2","angle","atan2","color1","cosineInterpolate","final","drawScreenBounds","WHITE","drawLineDDANoZ","drawParticleStreams","light","sort","a","size","drawPlaneDeformation","IMG_WIDTH","IMG_HEIGHT","u","v","torusFunction","fakeSphere","normal","vertex","textureCoordinate","asin","fakeSphere2","tex","end","theta","phi","Vector4f","seed","position","projection","TextureCoordinate","drawScaledTextureClip","sub","num","SubPixelCubeScene","AbstractScene","subPixelRenderingPipeline","gouraudRenderingPipeline","cubeMesh","Cube","Promise","all","SubPixelRenderingPipeline","GouraudShadingRenderingPipeline","BACKGROUND_COLOR","draw","getMesh","getModelViewMatrix","renderBackground","xShift","fullscreen","exitFullscreen","setStyle","enterFullscreen","el","getAttribute","requestFullscreen","mozRequestFullScreen","msRequestFullscreen","webkitRequestFullScreen","mozCancelFullScreen","webkitExitFullscreen","mesh","inverse","buildMesh","normals","cross","normalize","faces","n1","n2","n3","transformedPoints","transformedNormals","AbstractGeometricObject","super","invert","frame","frame2","up","right","current","y2","mu","mu2","m11","m12","m13","m21","m22","m23","m31","m32","m33","xScale","yScale","zScale","vector","m14","m24","m34","m41","m42","m43","m44","setIdentityMatrix","transpose","computeNormalMatrix","inverseTranslation","constructIdentityMatrix","scale1","scale2","scale3","inverseRotation","getInverseRotation","getRotation","planePoint","planeNormal","lightPosition","d","dot","NdotL","shadowMatrix","tz","setTranslationMatrix","setXRotationMatrix","setZRotationMatrix","setScaleMatrix","sx","sy","sz","setYRotationMatrix","setRotationMatrix","c","s","normalize2","multiply2","matrix2","multiplyHomArr","multiplyHomArr2","multiplyArr","perp","vec","scal","reci","mult","sub2","vec1","vec2","add2","cross2","componentWiseMul","AbstractScannlineTriangleRasterizer","AbstractTriangleRasterizer","temp","drawTriangleDDA","p1","p2","p3","fillLongRightTriangle","fillLongLeftTriangle","startColor","colorSlope","setup","distance","advance","slope1","slope2","zslope1","zslope2","curz1","curz2","xPosition","xPosition2","yPosition","yDistanceLeft","yDistanceRight","drawSpan","spanzStep","wStart","GouraudShadingTriangleRasterizer","colorInterpolator1","ColorInterpolator","colorInterpolator2","colorInterpolator3","rowColorInterpolator","leftSlope","SlopeInterpolator","rightSlope","yDistance","shortSlope","currentX","currentZ","slope","zslope","top","bottom","SubPixelTriangleRasterizer","depthBuffer","Uint16Array","getDepth","setDepth","testDepth","value","isCcw","v0","fillTriangle","minX","maxX","minY","maxY","area","edge0","edge1","edge2","edgeRight0","edgeRight1","edgeRight2","fragment","w0","w1","w2","fragColor","TexturedAlphaBlendingTriangleRasterizer","pipeline","tslope1u","tslope2u","tslope1v","tslope2v","curu1","curv1","curu2","curv2","spanuStep","spanvStep","uStart","vStart","currentColor","color2","getBilinearFilteredPixelRasterizer","xDistance","dx","dy","sign","wDelta","setAlpha","isInFrontOfNearPlane","DISABLED","isTriangleCCW2","v4","AbstractRenderingPipeline","fog","lights","material","lighting","clipper","projectedVertices","vertexArray","Vertex","SutherlandHodgman2DClipper","light1","PointLight","ambientIntensity","diffuseIntensity","specularIntensity","light2","mat","Material","ambientColor","diffuseColor","specularColor","shininess","setFramebuffer","setFog","setLights","enableLighting","enable","setMaterial","setColor","drawMeshArray","meshes","model","normalMatrix","normal1","normal2","normal3","project2","renderConvexPolygon","computeColor","output","zClipTriangle","computeNearPlaneIntersection","subject","input","S","point","projected","late","clippedPolygon","clipConvexPolygon","triangulateConvexPolygon","vertexColor","PhongLighting","computeVertexColor","sphereMapping","setSphereMapping","modelViewMatrix","enableAlphaBlending","disableAlphaBlending","setModelViewMatrix","normals2","vertices","uv","edge","isInside2","computeIntersection2","AbstractClipEdge","isInside","computeIntersection","factor","textCoord","col","code1","computeRegionCode","code2","accept","done","isTrivialAccept","isTrivialReject","REGION_CODE_CENTER","tempCode","tempPoint","REGION_CODE_TOP","REGION_CODE_BOTTOM","REGION_CODE_RIGHT","REGION_CODE_LEFT","regionCode","finalColor","computeAmbientIntensity","computeDiffuseIntensity","computeSpecularIntensity","lightDirection","pow","Light","emissiveColor","maxWidth","maxHeight","clamp","setClamp","getPixel","getBilinearFilteredPixel","x0","y0","x0y0","x1y0","x0y1","x1y1","col1","col2","getPixel2","interpolateComp","getPixelRasterizer","getPixel3","xFrac","yFrac","oneMinusXfrac","oneMinusYfrac","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","definition","key","o","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","nc","Canvas","main"],"sourceRoot":""}