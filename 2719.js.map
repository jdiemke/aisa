{"version":3,"file":"2719.js","mappings":"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","sources":["webpack://aisa/./src/rendering-pipelines/TexturedMesh.ts","webpack://aisa/./src/examples/feedback-radial-blur/FeedbackRadialBlur.ts","webpack://aisa/./src/examples/md2/ModelViewMatrix.ts","webpack://aisa/./src/examples/roto-zoomer/RotoZoomerScene.ts","webpack://aisa/./src/examples/cube/CubeScene.ts","webpack://aisa/./src/examples/demo/parts/Scene7.ts","webpack://aisa/./src/geometrical-objects/Cube.ts"],"sourcesContent":["import { Vector4f } from '../math/Vector4f';\nimport { TextureCoordinate } from '../TextureCoordinate';\n\nexport class TexturedMesh {\n\n    public points: Array<Vector4f>;\n    public normals?: Array<Vector4f>;\n    public uv: Array<TextureCoordinate>;\n\n    public faces: Array<{\n        vertices: Array<number>,\n        normals?: Array<number>\n        uv: Array<number>\n    }>;\n\n    public points2: Array<Vector4f>;\n    public normals2?: Array<Vector4f>;\n\n}\n","import { Framebuffer } from '../../Framebuffer';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture } from '../../texture';\nimport { TorusKnotTunnelScene } from '../torus-knot-tunnel/TorusKnotTunnelScene';\n\nexport class FeedbackRadialBlur extends AbstractScene {\n\n    private tunnelScene: TorusKnotTunnelScene = new TorusKnotTunnelScene();\n    private accumulationBuffer: Uint32Array;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.accumulationBuffer = new Uint32Array(framebuffer.width * framebuffer.height);\n\n        return Promise.all([\n            this.tunnelScene.init(framebuffer)\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.tunnelScene.render(framebuffer, time);\n        this.applyRadialBlur(framebuffer, time);\n    }\n\n    public applyRadialBlur(framebuffer: Framebuffer, time: number): void {\n        const texture: Texture = new Texture();\n\n        texture.texture = this.accumulationBuffer;\n        texture.width = framebuffer.width;\n        texture.height = framebuffer.height;\n\n        const scaleX = 1.018;\n        const scaleY = 1.018;\n        const width = framebuffer.width * scaleX;\n        const height = framebuffer.height* scaleY;\n\n        const alphaScale = (Math.sin(time * 0.00005) * 0.5) + 0.5;\n\n        framebuffer.drawScaledTextureClipBi(\n            Math.round(framebuffer.width / 2 - width / 2),\n            Math.round(framebuffer.height / 2 - height / 2),\n            width, height, texture, 1.0 * alphaScale\n        );\n\n        framebuffer.fastFramebufferCopy(this.accumulationBuffer, framebuffer.framebuffer);\n    }\n\n}\n","import { Matrix4f } from '../../math/index';\n\n/**\n * The primary purpose of the model view matrix class is to reduce\n * the instanciation of temporary matrix classes by reusing existing instances.\n */\nexport class ModelViewMatrix {\n\n    private currtentMatrix: Matrix4f;\n    private tempMatrix: Matrix4f;\n    private temp: Matrix4f;\n    private transformation: Matrix4f;\n\n    public constructor() {\n        this.currtentMatrix = new Matrix4f();\n        this.tempMatrix = new Matrix4f();\n        this.temp = new Matrix4f();\n        this.transformation = new Matrix4f();\n    }\n\n    public getMatrix(): Matrix4f {\n        return this.currtentMatrix;\n    }\n\n    public setIdentity(): void {\n        this.currtentMatrix.setIdentityMatrix();\n    }\n\n    public multMatrix(mat: Matrix4f): void {\n        this.currtentMatrix = this.currtentMatrix.multiplyMatrix(mat);\n    }\n\n    public translate(x: number, y: number, z: number): void {\n        this.transformation.setTranslationMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public scal(x: number, y: number, z: number): void {\n        this.transformation.setScaleMatrix(x, y, z);\n        this.applyMat();\n    }\n\n    public xRotate(x: number): void {\n        this.transformation.setXRotationMatrix(x);\n        this.applyMat();\n    }\n\n    public zRotate(x: number): void {\n        this.transformation.setZRotationMatrix(x);\n        this.applyMat();\n    }\n\n    public yRotate(x: number): void {\n        this.transformation.setYRotationMatrix(x);\n        this.applyMat();\n    }\n\n    public rotate(x,y,z, angle: number): void {\n        this.transformation.setRotationMatrix(x,y,z,angle);\n        this.applyMat();\n    }\n\n    private applyMat(): void {\n\n        this.tempMatrix.multiply2(this.currtentMatrix, this.transformation);\n        // switch back and front\n        this.temp = this.currtentMatrix;\n        this.currtentMatrix = this.tempMatrix;\n        this.tempMatrix = this.temp;\n    }\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { TextureCoordinate } from '../../TextureCoordinate';\nimport { Vector4f } from '../../math';\nimport { TexturedMesh } from '../../rendering-pipelines/TexturedMesh';\nimport { TexturingRenderingPipeline } from '../../rendering-pipelines/TexturingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\nimport { FeedbackRadialBlur } from '../feedback-radial-blur/FeedbackRadialBlur';\nimport { ModelViewMatrix } from '../md2/ModelViewMatrix';\n\n\nexport class RotoZoomerScene extends AbstractScene {\n\n    private logoTexture: Texture;\n    private floor: TexturedMesh;\n    private modelViewMatrix: ModelViewMatrix;\n    private logo: Texture;\n    private face: Texture;\n    private ground: Texture;\n    scene: FeedbackRadialBlur;\n    private texturedRenderingPipeline: TexturingRenderingPipeline;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.modelViewMatrix = new ModelViewMatrix();\n        this.texturedRenderingPipeline = new TexturingRenderingPipeline(framebuffer);\n        this.texturedRenderingPipeline.enableAlphaBlending();\n        this.texturedRenderingPipeline.setAlpha(1.0);\n\n        this.texturedRenderingPipeline.setCullFace(CullFace.DISABLED);\n        this.scene = new FeedbackRadialBlur();\n        return Promise.all([\n            this.scene.init(framebuffer),\n            TextureUtils.load(require('../../assets/meth.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n            TextureUtils.load(require('../../assets/xray.png'), false).then(\n                (texture: Texture) => this.logoTexture = texture\n            ),\n            TextureUtils.load(require('../../assets/face.png'), true).then(\n                (texture: Texture) => this.face = texture\n            ),\n            TextureUtils.load(require('../../assets/hlm.png'), true).then(\n                (texture: Texture) => this.ground = texture)\n        ]);\n    }\n\n    public onInit(): void {\n\n\n        const mesh: TexturedMesh = new TexturedMesh();\n        const size = 1.0;\n        const height = 0;\n        mesh.points = [\n            new Vector4f(-size, -height, size),\n            new Vector4f(size, -height, size),\n            new Vector4f(size, -height, -size),\n            new Vector4f(-size, -height, -size),\n        ];\n        mesh.uv = [\n            new TextureCoordinate(0, 0),\n            new TextureCoordinate(1.0, 0),\n            new TextureCoordinate(1.0, 1.0),\n            new TextureCoordinate(0, 1.0)\n        ];\n        mesh.points2 = mesh.points.map(() => new Vector4f(0, 0, 0, 0));\n        mesh.faces = [\n            {\n                uv: [0, 1, 2],\n                vertices: [0, 1, 2]\n            },\n            {\n                uv: [2, 3, 0],\n                vertices: [2, 3, 0]\n            }\n        ];\n        this.floor = mesh;\n\n\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.drawRotoZoomer(framebuffer, time);\n\n        //framebuffer.drawTexture(33,35,this.logo,1.2);\n\n        const scale = (Math.sin(time * 0.0002)*0.5+0.5)*130+370;\n        const scale2 = 2.1;\n         this.logo.setClamp(false);\n         for(let y = 0; y < 200; y++) {\n             for(let x = 0; x < 320; x++) {\n                 const xoff = (Math.sin(time*0.00041+y*0.022)*0.5+0.5) *scale+time*0.001;\n                 const yoff = (Math.cos(time*0.00042+x*0.016)*0.5+0.5) *scale+time*0.002;\n\n\n                 const texturePixel =this.logo.getBilinearFilteredPixel2(x*scale2+xoff, y*scale2+yoff);\n                 const framebufferPixel =framebuffer.framebuffer[x + y * 320];\n                 const alpha = ((texturePixel>>24)&0xff)/255* (Math.sin(time * 0.02)*0.5+0.5)*1.2;\n                 const inverseAlpha = 1 - alpha;\n                 const r = (framebufferPixel >> 0 & 0xff) * inverseAlpha + (texturePixel >> 0 & 0xff) * alpha;\n                 const g = (framebufferPixel >> 8 & 0xff) * inverseAlpha + (texturePixel >> 8 & 0xff) * alpha;\n                 const b = (framebufferPixel >> 16 & 0xff) * inverseAlpha + (texturePixel >> 16 & 0xff) * alpha;\n\n                 framebuffer.framebuffer[x + y * 320]= r | (g << 8) | (b << 16) | (255 << 24);\n             }\n         }\n\n\n         this.scene.applyRadialBlur(framebuffer, time);\n        this.texturedRenderingPipeline.setModelViewMatrix(this.modelViewMatrix.getMatrix());\n        framebuffer.setTexture(this.ground);\n\n\n            framebuffer.clearDepthBuffer();\n            this.texturedRenderingPipeline.setAlpha(Math.max(0.9-0.01,0)*(Math.sin(time*0.0002)*0.5+0.5)*0.5+0.5);\n            this.modelViewMatrix.setIdentity();\n\n            this.modelViewMatrix.translate(\n               0,0,\n                -7);\n            this.modelViewMatrix.rotate(1, 0, 0, 180+  Math.sin(time*0.00019)*35);\n            this.modelViewMatrix.rotate(0, 1, 0,   Math.sin(time*0.00018)*35+time*0.19);\n            this.modelViewMatrix.rotate(0, 0, 1,+Math.sin(time*0.0008)*10);\n            this.modelViewMatrix.rotate(1, 0, 0, 90);\n            const scale22= 1+ (1.2)*2.5 ;\n            this.modelViewMatrix.scal(scale22*0.8, scale22, scale22*0.3);\n\n\n\n            this.texturedRenderingPipeline.draw(framebuffer, this.floor);\n            framebuffer.drawTexture(179,0,this.face,1);\n\n    }\n\n    drawRotoZoomer(framebuffer: Framebuffer, time: number) {\n        const scale = Math.sin(time * 0.0005) + 1.1;\n\n        const yStepX = Math.sin(time * 0.0003) * scale;\n        const yStepY = Math.cos(time * 0.0003) * scale;\n\n        const xStepX = yStepY;\n        const xStepY = -yStepX;\n\n        let texYCoord = Math.sin(time * 0.0002) * 512;\n        let texXCoord = Math.cos(time * 0.0002) * 512;\n\n        let texYCoordInner = 0;\n        let texXCoordInner = 0;\n        let framebufferPos = 0;\n\n        for (let y = 0; y < framebuffer.height; y++) {\n            texXCoordInner = texXCoord;\n            texYCoordInner = texYCoord;\n\n            for (let x = 0; x < framebuffer.width; x++) {\n                framebuffer.framebuffer[framebufferPos++] = //this.logoTexture.texture[(texXCoordInner & 127) + (texYCoordInner & 127) * 128];\n                this.logoTexture.getBilinearFilteredPixel2(texXCoordInner, texYCoordInner);\n\n                texXCoordInner += xStepX;\n                texYCoordInner += xStepY;\n            }\n\n            texXCoord += yStepX;\n            texYCoord += yStepY;\n        }\n    }\n\n\n}\n","import { CullFace } from '../../CullFace';\nimport { Framebuffer } from '../../Framebuffer';\nimport { Cube } from '../../geometrical-objects/Cube';\nimport { Matrix4f } from '../../math';\nimport { GouraudShadingRenderingPipeline } from '../../rendering-pipelines/GouraudShadingRenderingPipeline';\nimport { AbstractScene } from '../../scenes/AbstractScene';\nimport { Texture, TextureUtils } from '../../texture';\n\nexport class CubeScene extends AbstractScene {\n\n    private renderingPipeline: GouraudShadingRenderingPipeline;\n    private cubeMesh: Cube = new Cube();\n    private fairlight: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n        this.renderingPipeline = new GouraudShadingRenderingPipeline(framebuffer);\n        this.renderingPipeline.setCullFace(CullFace.BACK);\n\n        return Promise.all([\n            TextureUtils.load(require('../../assets/logo-fairlight-10.png'), false).then(texture => this.fairlight = texture),\n        ]);\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        framebuffer.fastFramebufferCopy(framebuffer.framebuffer, this.fairlight.texture);\n        framebuffer.clearDepthBuffer();\n\n        this.renderCube(framebuffer,time);\n    }\n\n    public renderCube(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    public renderBackground(framebuffer: Framebuffer, time: number): void {\n        const elapsedTime: number = time * 0.02;\n        framebuffer.clearDepthBuffer();\n        this.renderingPipeline.draw(framebuffer, this.cubeMesh.getMesh(), this.getModelViewMatrix(elapsedTime));\n    }\n\n    private getModelViewMatrix(elapsedTime: number): Matrix4f {\n        const scale: number = 6.2  +Math.sin(elapsedTime * 0.05)*3;\n\n        return Matrix4f.constructTranslationMatrix(Math.sin(elapsedTime * 0.08)*8, Math.sin(elapsedTime * 0.05)*6, -20).multiplyMatrix(\n            Matrix4f.constructScaleMatrix(scale, scale, scale).multiplyMatrix(\n                Matrix4f.constructYRotationMatrix(elapsedTime * 0.09)).multiplyMatrix(\n                    Matrix4f.constructXRotationMatrix(elapsedTime * 0.08)));\n    }\n\n}\n","import { Framebuffer } from '../../../Framebuffer';\nimport { RotoZoomerScene } from '../../roto-zoomer/RotoZoomerScene';\nimport { CubeScene } from '../../cube/CubeScene';\nimport { Texture } from '../../../texture/Texture';\nimport { TextureUtils } from '../../../texture/TextureUtils';\n\nexport class Scene7 {\n    private RotoZoomerScene: RotoZoomerScene;\n    private CubeScene: CubeScene;\n    private logo: Texture;\n\n    public init(framebuffer: Framebuffer): Promise<any> {\n\n        this.RotoZoomerScene = new RotoZoomerScene();\n        this.CubeScene = new CubeScene();\n\n        return Promise.all([\n            this.CubeScene.init(framebuffer),\n            this.RotoZoomerScene.init(framebuffer),\n            // pngitem.com/middle/Tommih_happy-surprised-woman-surprised-girl-png-transparent-png/\n            TextureUtils.load(require('../../../assets/logos/drug-chick.png'), true).then(\n                (texture: Texture) => this.logo = texture\n            ),\n        ])\n    }\n\n    onInit() {\n        this.RotoZoomerScene.onInit();\n    }\n\n    public render(framebuffer: Framebuffer, time: number): void {\n        this.RotoZoomerScene.render(framebuffer, time);\n        this.CubeScene.renderBackground(framebuffer, time);\n        framebuffer.drawTexture(0, framebuffer.height - this.logo.height, this.logo, 1.0);\n\n    }\n\n}\n","import { Vector4f } from '../math/Vector4f';\nimport { AbstractGeometricObject } from './AbstractGeometricObject';\n\nexport class Cube extends AbstractGeometricObject {\n\n    public constructor() {\n        super();\n        const a: number = 0.5;\n\n        const points: Array<Vector4f> = [\n            new Vector4f(-a, -a, -a),\n            new Vector4f(a, -a, -a),\n            new Vector4f(a, a, -a),\n            new Vector4f(-a, a, -a),\n            new Vector4f(-a, -a, a),\n            new Vector4f(a, -a, a),\n            new Vector4f(a, a, a),\n            new Vector4f(-a, a, a)\n        ];\n\n        const index: Array<number> = [\n            0, 2, 1, 0, 3, 2, 5, 7, 4, 5, 6, 7, 1, 6, 5, 1, 2, 6, 4, 3, 0, 4, 7, 3, 4, 1, 5, 4, 0, 1, 3, 6, 2, 3, 7, 6\n        ];\n\n        this.buildMesh(points, index);\n    }\n\n}\n"],"names":["TexturedMesh","points","normals","uv","faces","points2","normals2","FeedbackRadialBlur","AbstractScene","tunnelScene","TorusKnotTunnelScene","accumulationBuffer","init","framebuffer","this","Uint32Array","width","height","Promise","all","render","time","applyRadialBlur","texture","Texture","alphaScale","Math","sin","drawScaledTextureClipBi","round","fastFramebufferCopy","ModelViewMatrix","currtentMatrix","tempMatrix","temp","transformation","Matrix4f","getMatrix","setIdentity","setIdentityMatrix","multMatrix","mat","multiplyMatrix","translate","x","y","z","setTranslationMatrix","applyMat","scal","setScaleMatrix","xRotate","setXRotationMatrix","zRotate","setZRotationMatrix","yRotate","setYRotationMatrix","rotate","angle","setRotationMatrix","multiply2","RotoZoomerScene","logoTexture","floor","modelViewMatrix","logo","face","ground","scene","texturedRenderingPipeline","TexturingRenderingPipeline","enableAlphaBlending","setAlpha","setCullFace","CullFace","DISABLED","TextureUtils","load","then","onInit","mesh","Vector4f","TextureCoordinate","map","vertices","drawRotoZoomer","scale","setClamp","xoff","yoff","cos","texturePixel","getBilinearFilteredPixel2","framebufferPixel","alpha","inverseAlpha","r","g","b","setModelViewMatrix","setTexture","clearDepthBuffer","max","scale22","draw","drawTexture","yStepX","yStepY","xStepX","xStepY","texYCoord","texXCoord","texYCoordInner","texXCoordInner","framebufferPos","CubeScene","renderingPipeline","cubeMesh","Cube","fairlight","GouraudShadingRenderingPipeline","BACK","renderCube","elapsedTime","getMesh","getModelViewMatrix","renderBackground","constructTranslationMatrix","constructScaleMatrix","constructYRotationMatrix","constructXRotationMatrix","Scene7","super","a","buildMesh"],"sourceRoot":""}